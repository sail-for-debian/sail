(*Generated by Lem from mips_types.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_instr_kindsTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_stringTheory sail2_operators_mwordsTheory sail2_promptTheory;

val _ = numLib.prefer_num();



val _ = new_theory "mips_types"

(*Generated by Sail from mips.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
val _ = type_abbrev((*  'n *) "bits" , ``:  'n words$word``);



val _ = Hol_datatype `
 exception  =
    ISAException of (unit)
  | Error_not_implemented of (string)
  | Error_misaligned_access of (unit)
  | Error_EBREAK of (unit)
  | Error_internal_error of (unit)`;




val _ = Hol_datatype `
 CauseReg  = <| CauseReg_CauseReg_chunk_0 :  32 words$word  |>`;



val _ = Hol_datatype `
 StatusReg  = <| StatusReg_StatusReg_chunk_0 :  32 words$word  |>`;



val _ = Hol_datatype `
 TLBEntryLoReg  = <| TLBEntryLoReg_TLBEntryLoReg_chunk_0 :  64 words$word  |>`;



val _ = Hol_datatype `
 TLBEntryHiReg  = <| TLBEntryHiReg_TLBEntryHiReg_chunk_0 :  64 words$word  |>`;



val _ = Hol_datatype `
 ContextReg  = <| ContextReg_ContextReg_chunk_0 :  64 words$word  |>`;



val _ = Hol_datatype `
 XContextReg  = <| XContextReg_XContextReg_chunk_0 :  64 words$word  |>`;



val _ = type_abbrev( "TLBIndexT"  , ``: 6 bits``);

val _ = Hol_datatype `
 TLBEntry  =
  <| TLBEntry_TLBEntry_chunk_1 :  53 words$word; TLBEntry_TLBEntry_chunk_0 :  64 words$word  |>`;



val _ = Hol_datatype `
 Exception =
  Interrupt
  | TLBMod
  | TLBL
  | TLBS
  | AdEL
  | AdES
  | Sys
  | Bp
  | ResI
  | CpU
  | Ov
  | Tr
  | C2E
  | C2Trap
  | XTLBRefillL
  | XTLBRefillS
  | XTLBInvL
  | XTLBInvS
  | MCheck`;




val _ = Hol_datatype `
 MemAccessType = Instruction | LoadData | StoreData`;




val _ = Hol_datatype `
 AccessLevel = User | Supervisor | Kernel`;




val _ = type_abbrev( "regno"  , ``: 5 bits``);

val _ = type_abbrev( "imm16"  , ``: 16 bits``);

val _ = type_abbrev( "regregreg"  , ``: (regno # regno # regno)``);

val _ = type_abbrev( "regregimm16"  , ``: (regno # regno # imm16)``);

val _ = Hol_datatype `
 decode_failure =
  No_matching_pattern | Unsupported_instruction | Illegal_instruction | Internal_error`;




val _ = Hol_datatype `
 Comparison = EQ' | NE | GE | GEU | GT' | LE | LT' | LTU`;




val _ = Hol_datatype `
 WordType = B | H | W0 | D`;




val _ = Hol_datatype `
 WordTypeUnaligned = WL | WR | DL | DR`;




val _ = Hol_datatype `
 ast  =
    DADDIU of ((regno # regno # imm16))
  | DADDU of ((regno # regno # regno))
  | DADDI of ((regno # regno # 16 bits))
  | DADD of ((regno # regno # regno))
  | ADD of ((regno # regno # regno))
  | ADDI of ((regno # regno # 16 bits))
  | ADDU of ((regno # regno # regno))
  | ADDIU of ((regno # regno # 16 bits))
  | DSUBU of ((regno # regno # regno))
  | DSUB of ((regno # regno # regno))
  | SUB0 of ((regno # regno # regno))
  | SUBU of ((regno # regno # regno))
  | AND of ((regno # regno # regno))
  | ANDI of ((regno # regno # 16 bits))
  | OR of ((regno # regno # regno))
  | ORI of ((regno # regno # 16 bits))
  | NOR of ((regno # regno # regno))
  | XOR of ((regno # regno # regno))
  | XORI of ((regno # regno # 16 bits))
  | LUI of ((regno # imm16))
  | DSLL of ((regno # regno # regno))
  | DSLL32 of ((regno # regno # regno))
  | DSLLV of ((regno # regno # regno))
  | DSRA of ((regno # regno # regno))
  | DSRA32 of ((regno # regno # regno))
  | DSRAV of ((regno # regno # regno))
  | DSRL of ((regno # regno # regno))
  | DSRL32 of ((regno # regno # regno))
  | DSRLV of ((regno # regno # regno))
  | SLL of ((regno # regno # regno))
  | SLLV of ((regno # regno # regno))
  | SRA of ((regno # regno # regno))
  | SRAV of ((regno # regno # regno))
  | SRL of ((regno # regno # regno))
  | SRLV of ((regno # regno # regno))
  | SLT of ((regno # regno # regno))
  | SLTI of ((regno # regno # 16 bits))
  | SLTU of ((regno # regno # regno))
  | SLTIU of ((regno # regno # 16 bits))
  | MOVN of ((regno # regno # regno))
  | MOVZ of ((regno # regno # regno))
  | MFHI of (regno)
  | MFLO of (regno)
  | MTHI of (regno)
  | MTLO of (regno)
  | MUL of ((regno # regno # regno))
  | MULT of ((regno # regno))
  | MULTU of ((regno # regno))
  | DMULT of ((regno # regno))
  | DMULTU of ((regno # regno))
  | MADD of ((regno # regno))
  | MADDU of ((regno # regno))
  | MSUB of ((regno # regno))
  | MSUBU of ((regno # regno))
  | DIV0 of ((regno # regno))
  | DIVU of ((regno # regno))
  | DDIV of ((regno # regno))
  | DDIVU of ((regno # regno))
  | J of ( 26 bits)
  | JAL of ( 26 bits)
  | JR of (regno)
  | JALR of ((regno # regno))
  | BEQ of ((regno # regno # imm16 # bool # bool))
  | BCMPZ of ((regno # imm16 # Comparison # bool # bool))
  | SYSCALL of (unit)
  | BREAK of (unit)
  | WAIT of (unit)
  | TRAPREG of ((regno # regno # Comparison))
  | TRAPIMM of ((regno # imm16 # Comparison))
  | Load of ((WordType # bool # bool # regno # regno # imm16))
  | Store of ((WordType # bool # regno # regno # imm16))
  | LWL of ((regno # regno # 16 bits))
  | LWR of ((regno # regno # 16 bits))
  | SWL of ((regno # regno # 16 bits))
  | SWR of ((regno # regno # 16 bits))
  | LDL of ((regno # regno # 16 bits))
  | LDR of ((regno # regno # 16 bits))
  | SDL of ((regno # regno # 16 bits))
  | SDR of ((regno # regno # 16 bits))
  | CACHE of ((regno # regno # 16 bits))
  | SYNC of (unit)
  | MFC0 of ((regno # regno # 3 bits # bool))
  | HCF of (unit)
  | MTC0 of ((regno # regno # 3 bits # bool))
  | TLBWI of (unit)
  | TLBWR of (unit)
  | TLBR of (unit)
  | TLBP of (unit)
  | RDHWR of ((regno # regno))
  | ERET of (unit)
  | RI of (unit)`;




val _ = Hol_datatype `
 register_value  =
    Regval_vector of ((ii # bool # register_value list))
  | Regval_list of ( register_value list)
  | Regval_option of ( register_value option)
  | Regval_CauseReg of (CauseReg)
  | Regval_ContextReg of (ContextReg)
  | Regval_StatusReg of (StatusReg)
  | Regval_TLBEntry of (TLBEntry)
  | Regval_TLBEntryHiReg of (TLBEntryHiReg)
  | Regval_TLBEntryLoReg of (TLBEntryLoReg)
  | Regval_XContextReg of (XContextReg)
  | Regval_vector_16_dec_bit of ( 16 words$word)
  | Regval_vector_1_dec_bit of ( 1 words$word)
  | Regval_vector_32_dec_bit of ( 32 words$word)
  | Regval_vector_3_dec_bit of ( 3 words$word)
  | Regval_vector_64_dec_bit of ( 64 words$word)
  | Regval_vector_6_dec_bit of ( 6 words$word)
  | Regval_vector_8_dec_bit of ( 8 words$word)`;




val _ = Hol_datatype `
 regstate  =
  <| UART_RVALID :  1 words$word;
     UART_RDATA :  8 words$word;
     UART_WRITTEN :  1 words$word;
     UART_WDATA :  8 words$word;
     GPR : ( 64 words$word) list;
     LO :  64 words$word;
     HI :  64 words$word;
     delayedPC :  64 words$word;
     inBranchDelay :  1 words$word;
     branchPending :  1 words$word;
     CP0Status : StatusReg;
     CP0ConfigK0 :  3 words$word;
     CP0UserLocal :  64 words$word;
     CP0HWREna :  32 words$word;
     CP0Count :  32 words$word;
     CP0BadVAddr :  64 words$word;
     CP0LLAddr :  64 words$word;
     CP0LLBit :  1 words$word;
     CP0ErrorEPC :  64 words$word;
     CP0EPC :  64 words$word;
     CP0Cause : CauseReg;
     CP0Compare :  32 words$word;
     TLBEntry63 : TLBEntry;
     TLBEntry62 : TLBEntry;
     TLBEntry61 : TLBEntry;
     TLBEntry60 : TLBEntry;
     TLBEntry59 : TLBEntry;
     TLBEntry58 : TLBEntry;
     TLBEntry57 : TLBEntry;
     TLBEntry56 : TLBEntry;
     TLBEntry55 : TLBEntry;
     TLBEntry54 : TLBEntry;
     TLBEntry53 : TLBEntry;
     TLBEntry52 : TLBEntry;
     TLBEntry51 : TLBEntry;
     TLBEntry50 : TLBEntry;
     TLBEntry49 : TLBEntry;
     TLBEntry48 : TLBEntry;
     TLBEntry47 : TLBEntry;
     TLBEntry46 : TLBEntry;
     TLBEntry45 : TLBEntry;
     TLBEntry44 : TLBEntry;
     TLBEntry43 : TLBEntry;
     TLBEntry42 : TLBEntry;
     TLBEntry41 : TLBEntry;
     TLBEntry40 : TLBEntry;
     TLBEntry39 : TLBEntry;
     TLBEntry38 : TLBEntry;
     TLBEntry37 : TLBEntry;
     TLBEntry36 : TLBEntry;
     TLBEntry35 : TLBEntry;
     TLBEntry34 : TLBEntry;
     TLBEntry33 : TLBEntry;
     TLBEntry32 : TLBEntry;
     TLBEntry31 : TLBEntry;
     TLBEntry30 : TLBEntry;
     TLBEntry29 : TLBEntry;
     TLBEntry28 : TLBEntry;
     TLBEntry27 : TLBEntry;
     TLBEntry26 : TLBEntry;
     TLBEntry25 : TLBEntry;
     TLBEntry24 : TLBEntry;
     TLBEntry23 : TLBEntry;
     TLBEntry22 : TLBEntry;
     TLBEntry21 : TLBEntry;
     TLBEntry20 : TLBEntry;
     TLBEntry19 : TLBEntry;
     TLBEntry18 : TLBEntry;
     TLBEntry17 : TLBEntry;
     TLBEntry16 : TLBEntry;
     TLBEntry15 : TLBEntry;
     TLBEntry14 : TLBEntry;
     TLBEntry13 : TLBEntry;
     TLBEntry12 : TLBEntry;
     TLBEntry11 : TLBEntry;
     TLBEntry10 : TLBEntry;
     TLBEntry09 : TLBEntry;
     TLBEntry08 : TLBEntry;
     TLBEntry07 : TLBEntry;
     TLBEntry06 : TLBEntry;
     TLBEntry05 : TLBEntry;
     TLBEntry04 : TLBEntry;
     TLBEntry03 : TLBEntry;
     TLBEntry02 : TLBEntry;
     TLBEntry01 : TLBEntry;
     TLBEntry00 : TLBEntry;
     TLBXContext : XContextReg;
     TLBEntryHi : TLBEntryHiReg;
     TLBWired :  6 words$word;
     TLBPageMask :  16 words$word;
     TLBContext : ContextReg;
     TLBEntryLo1 : TLBEntryLoReg;
     TLBEntryLo0 : TLBEntryLoReg;
     TLBRandom :  6 words$word;
     TLBIndex :  6 words$word;
     TLBProbe :  1 words$word;
     nextPC :  64 words$word;
     PC :  64 words$word  |>`;





(*val CauseReg_of_regval : register_value -> maybe CauseReg*)

val _ = Define `
 ((CauseReg_of_regval:register_value ->(CauseReg)option) merge_var=
    ((case merge_var of   Regval_CauseReg (v) => SOME v | g__13 => NONE )))`;


(*val regval_of_CauseReg : CauseReg -> register_value*)

val _ = Define `
 ((regval_of_CauseReg:CauseReg -> register_value) v=  (Regval_CauseReg v))`;


(*val ContextReg_of_regval : register_value -> maybe ContextReg*)

val _ = Define `
 ((ContextReg_of_regval:register_value ->(ContextReg)option) merge_var=
    ((case merge_var of   Regval_ContextReg (v) => SOME v | g__12 => NONE )))`;


(*val regval_of_ContextReg : ContextReg -> register_value*)

val _ = Define `
 ((regval_of_ContextReg:ContextReg -> register_value) v=  (Regval_ContextReg v))`;


(*val StatusReg_of_regval : register_value -> maybe StatusReg*)

val _ = Define `
 ((StatusReg_of_regval:register_value ->(StatusReg)option) merge_var=
    ((case merge_var of   Regval_StatusReg (v) => SOME v | g__11 => NONE )))`;


(*val regval_of_StatusReg : StatusReg -> register_value*)

val _ = Define `
 ((regval_of_StatusReg:StatusReg -> register_value) v=  (Regval_StatusReg v))`;


(*val TLBEntry_of_regval : register_value -> maybe TLBEntry*)

val _ = Define `
 ((TLBEntry_of_regval:register_value ->(TLBEntry)option) merge_var=
    ((case merge_var of   Regval_TLBEntry (v) => SOME v | g__10 => NONE )))`;


(*val regval_of_TLBEntry : TLBEntry -> register_value*)

val _ = Define `
 ((regval_of_TLBEntry:TLBEntry -> register_value) v=  (Regval_TLBEntry v))`;


(*val TLBEntryHiReg_of_regval : register_value -> maybe TLBEntryHiReg*)

val _ = Define `
 ((TLBEntryHiReg_of_regval:register_value ->(TLBEntryHiReg)option) merge_var=
    ((case merge_var of   Regval_TLBEntryHiReg (v) => SOME v | g__9 => NONE )))`;


(*val regval_of_TLBEntryHiReg : TLBEntryHiReg -> register_value*)

val _ = Define `
 ((regval_of_TLBEntryHiReg:TLBEntryHiReg -> register_value) v=  (Regval_TLBEntryHiReg v))`;


(*val TLBEntryLoReg_of_regval : register_value -> maybe TLBEntryLoReg*)

val _ = Define `
 ((TLBEntryLoReg_of_regval:register_value ->(TLBEntryLoReg)option) merge_var=
    ((case merge_var of   Regval_TLBEntryLoReg (v) => SOME v | g__8 => NONE )))`;


(*val regval_of_TLBEntryLoReg : TLBEntryLoReg -> register_value*)

val _ = Define `
 ((regval_of_TLBEntryLoReg:TLBEntryLoReg -> register_value) v=  (Regval_TLBEntryLoReg v))`;


(*val XContextReg_of_regval : register_value -> maybe XContextReg*)

val _ = Define `
 ((XContextReg_of_regval:register_value ->(XContextReg)option) merge_var=
    ((case merge_var of   Regval_XContextReg (v) => SOME v | g__7 => NONE )))`;


(*val regval_of_XContextReg : XContextReg -> register_value*)

val _ = Define `
 ((regval_of_XContextReg:XContextReg -> register_value) v=  (Regval_XContextReg v))`;


(*val vector_16_dec_bit_of_regval : register_value -> maybe (mword ty16)*)

val _ = Define `
 ((vector_16_dec_bit_of_regval:register_value ->((16)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_16_dec_bit (v) => SOME v | g__6 => NONE )))`;


(*val regval_of_vector_16_dec_bit : mword ty16 -> register_value*)

val _ = Define `
 ((regval_of_vector_16_dec_bit:(16)words$word -> register_value) v=  (Regval_vector_16_dec_bit v))`;


(*val vector_1_dec_bit_of_regval : register_value -> maybe (mword ty1)*)

val _ = Define `
 ((vector_1_dec_bit_of_regval:register_value ->((1)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_1_dec_bit (v) => SOME v | g__5 => NONE )))`;


(*val regval_of_vector_1_dec_bit : mword ty1 -> register_value*)

val _ = Define `
 ((regval_of_vector_1_dec_bit:(1)words$word -> register_value) v=  (Regval_vector_1_dec_bit v))`;


(*val vector_32_dec_bit_of_regval : register_value -> maybe (mword ty32)*)

val _ = Define `
 ((vector_32_dec_bit_of_regval:register_value ->((32)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_32_dec_bit (v) => SOME v | g__4 => NONE )))`;


(*val regval_of_vector_32_dec_bit : mword ty32 -> register_value*)

val _ = Define `
 ((regval_of_vector_32_dec_bit:(32)words$word -> register_value) v=  (Regval_vector_32_dec_bit v))`;


(*val vector_3_dec_bit_of_regval : register_value -> maybe (mword ty3)*)

val _ = Define `
 ((vector_3_dec_bit_of_regval:register_value ->((3)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_3_dec_bit (v) => SOME v | g__3 => NONE )))`;


(*val regval_of_vector_3_dec_bit : mword ty3 -> register_value*)

val _ = Define `
 ((regval_of_vector_3_dec_bit:(3)words$word -> register_value) v=  (Regval_vector_3_dec_bit v))`;


(*val vector_64_dec_bit_of_regval : register_value -> maybe (mword ty64)*)

val _ = Define `
 ((vector_64_dec_bit_of_regval:register_value ->((64)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_64_dec_bit (v) => SOME v | g__2 => NONE )))`;


(*val regval_of_vector_64_dec_bit : mword ty64 -> register_value*)

val _ = Define `
 ((regval_of_vector_64_dec_bit:(64)words$word -> register_value) v=  (Regval_vector_64_dec_bit v))`;


(*val vector_6_dec_bit_of_regval : register_value -> maybe (mword ty6)*)

val _ = Define `
 ((vector_6_dec_bit_of_regval:register_value ->((6)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_6_dec_bit (v) => SOME v | g__1 => NONE )))`;


(*val regval_of_vector_6_dec_bit : mword ty6 -> register_value*)

val _ = Define `
 ((regval_of_vector_6_dec_bit:(6)words$word -> register_value) v=  (Regval_vector_6_dec_bit v))`;


(*val vector_8_dec_bit_of_regval : register_value -> maybe (mword ty8)*)

val _ = Define `
 ((vector_8_dec_bit_of_regval:register_value ->((8)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_8_dec_bit (v) => SOME v | g__0 => NONE )))`;


(*val regval_of_vector_8_dec_bit : mword ty8 -> register_value*)

val _ = Define `
 ((regval_of_vector_8_dec_bit:(8)words$word -> register_value) v=  (Regval_vector_8_dec_bit v))`;




(*val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
val _ = Define `
 ((vector_of_regval:(register_value -> 'a option) -> register_value ->('a list)option) of_regval1= 
  (\x .  (case x of
               Regval_vector (_, _, v) => just_list (MAP of_regval1 v)
           | _ => NONE
         )))`;


(*val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value*)
val _ = Define `
 ((regval_of_vector:('a -> register_value) -> int -> bool -> 'a list -> register_value) regval_of1 size1 is_inc xs=  (Regval_vector (size1, is_inc, MAP regval_of1 xs)))`;


(*val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
val _ = Define `
 ((list_of_regval:(register_value -> 'a option) -> register_value ->('a list)option) of_regval1= 
  (\x .  (case x of
               Regval_list v => just_list (MAP of_regval1 v)
           | _ => NONE
         )))`;


(*val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value*)
val _ = Define `
 ((regval_of_list:('a -> register_value) -> 'a list -> register_value) regval_of1 xs=  (Regval_list (MAP regval_of1 xs)))`;


(*val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)*)
val _ = Define `
 ((option_of_regval:(register_value -> 'a option) -> register_value ->('a option)option) of_regval1= 
  (\x .  (case x of
               Regval_option v => SOME (OPTION_BIND v of_regval1)
           | _ => NONE
         )))`;


(*val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value*)
val _ = Define `
 ((regval_of_option:('a -> register_value) -> 'a option -> register_value) regval_of1 v=  (Regval_option (OPTION_MAP regval_of1 v)))`;



val _ = Define `
 ((UART_RVALID_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "UART_RVALID";
  read_from := (\ s .  s.UART_RVALID);
  write_to := (\ v s .  (( s with<| UART_RVALID := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((UART_RDATA_ref:((regstate),(register_value),((8)words$word))register_ref)=  (<|
  name := "UART_RDATA";
  read_from := (\ s .  s.UART_RDATA);
  write_to := (\ v s .  (( s with<| UART_RDATA := v |>)));
  of_regval := (\ v .  vector_8_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_8_dec_bit v) |>))`;


val _ = Define `
 ((UART_WRITTEN_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "UART_WRITTEN";
  read_from := (\ s .  s.UART_WRITTEN);
  write_to := (\ v s .  (( s with<| UART_WRITTEN := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((UART_WDATA_ref:((regstate),(register_value),((8)words$word))register_ref)=  (<|
  name := "UART_WDATA";
  read_from := (\ s .  s.UART_WDATA);
  write_to := (\ v s .  (( s with<| UART_WDATA := v |>)));
  of_regval := (\ v .  vector_8_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_8_dec_bit v) |>))`;


val _ = Define `
 ((GPR_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "GPR";
  read_from := (\ s .  s.GPR);
  write_to := (\ v s .  (( s with<| GPR := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 32 : int)) F v) |>))`;


val _ = Define `
 ((LO_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "LO";
  read_from := (\ s .  s.LO);
  write_to := (\ v s .  (( s with<| LO := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((HI_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "HI";
  read_from := (\ s .  s.HI);
  write_to := (\ v s .  (( s with<| HI := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((delayedPC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "delayedPC";
  read_from := (\ s .  s.delayedPC);
  write_to := (\ v s .  (( s with<| delayedPC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((inBranchDelay_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "inBranchDelay";
  read_from := (\ s .  s.inBranchDelay);
  write_to := (\ v s .  (( s with<| inBranchDelay := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((branchPending_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "branchPending";
  read_from := (\ s .  s.branchPending);
  write_to := (\ v s .  (( s with<| branchPending := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((CP0Status_ref:((regstate),(register_value),(StatusReg))register_ref)=  (<|
  name := "CP0Status";
  read_from := (\ s .  s.CP0Status);
  write_to := (\ v s .  (( s with<| CP0Status := v |>)));
  of_regval := (\ v .  StatusReg_of_regval v);
  regval_of := (\ v .  regval_of_StatusReg v) |>))`;


val _ = Define `
 ((CP0ConfigK0_ref:((regstate),(register_value),((3)words$word))register_ref)=  (<|
  name := "CP0ConfigK0";
  read_from := (\ s .  s.CP0ConfigK0);
  write_to := (\ v s .  (( s with<| CP0ConfigK0 := v |>)));
  of_regval := (\ v .  vector_3_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_3_dec_bit v) |>))`;


val _ = Define `
 ((CP0UserLocal_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CP0UserLocal";
  read_from := (\ s .  s.CP0UserLocal);
  write_to := (\ v s .  (( s with<| CP0UserLocal := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CP0HWREna_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CP0HWREna";
  read_from := (\ s .  s.CP0HWREna);
  write_to := (\ v s .  (( s with<| CP0HWREna := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CP0Count_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CP0Count";
  read_from := (\ s .  s.CP0Count);
  write_to := (\ v s .  (( s with<| CP0Count := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CP0BadVAddr_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CP0BadVAddr";
  read_from := (\ s .  s.CP0BadVAddr);
  write_to := (\ v s .  (( s with<| CP0BadVAddr := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CP0LLAddr_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CP0LLAddr";
  read_from := (\ s .  s.CP0LLAddr);
  write_to := (\ v s .  (( s with<| CP0LLAddr := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CP0LLBit_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "CP0LLBit";
  read_from := (\ s .  s.CP0LLBit);
  write_to := (\ v s .  (( s with<| CP0LLBit := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((CP0ErrorEPC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CP0ErrorEPC";
  read_from := (\ s .  s.CP0ErrorEPC);
  write_to := (\ v s .  (( s with<| CP0ErrorEPC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CP0EPC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CP0EPC";
  read_from := (\ s .  s.CP0EPC);
  write_to := (\ v s .  (( s with<| CP0EPC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CP0Cause_ref:((regstate),(register_value),(CauseReg))register_ref)=  (<|
  name := "CP0Cause";
  read_from := (\ s .  s.CP0Cause);
  write_to := (\ v s .  (( s with<| CP0Cause := v |>)));
  of_regval := (\ v .  CauseReg_of_regval v);
  regval_of := (\ v .  regval_of_CauseReg v) |>))`;


val _ = Define `
 ((CP0Compare_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CP0Compare";
  read_from := (\ s .  s.CP0Compare);
  write_to := (\ v s .  (( s with<| CP0Compare := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TLBEntry63_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry63";
  read_from := (\ s .  s.TLBEntry63);
  write_to := (\ v s .  (( s with<| TLBEntry63 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry62_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry62";
  read_from := (\ s .  s.TLBEntry62);
  write_to := (\ v s .  (( s with<| TLBEntry62 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry61_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry61";
  read_from := (\ s .  s.TLBEntry61);
  write_to := (\ v s .  (( s with<| TLBEntry61 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry60_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry60";
  read_from := (\ s .  s.TLBEntry60);
  write_to := (\ v s .  (( s with<| TLBEntry60 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry59_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry59";
  read_from := (\ s .  s.TLBEntry59);
  write_to := (\ v s .  (( s with<| TLBEntry59 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry58_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry58";
  read_from := (\ s .  s.TLBEntry58);
  write_to := (\ v s .  (( s with<| TLBEntry58 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry57_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry57";
  read_from := (\ s .  s.TLBEntry57);
  write_to := (\ v s .  (( s with<| TLBEntry57 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry56_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry56";
  read_from := (\ s .  s.TLBEntry56);
  write_to := (\ v s .  (( s with<| TLBEntry56 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry55_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry55";
  read_from := (\ s .  s.TLBEntry55);
  write_to := (\ v s .  (( s with<| TLBEntry55 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry54_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry54";
  read_from := (\ s .  s.TLBEntry54);
  write_to := (\ v s .  (( s with<| TLBEntry54 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry53_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry53";
  read_from := (\ s .  s.TLBEntry53);
  write_to := (\ v s .  (( s with<| TLBEntry53 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry52_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry52";
  read_from := (\ s .  s.TLBEntry52);
  write_to := (\ v s .  (( s with<| TLBEntry52 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry51_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry51";
  read_from := (\ s .  s.TLBEntry51);
  write_to := (\ v s .  (( s with<| TLBEntry51 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry50_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry50";
  read_from := (\ s .  s.TLBEntry50);
  write_to := (\ v s .  (( s with<| TLBEntry50 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry49_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry49";
  read_from := (\ s .  s.TLBEntry49);
  write_to := (\ v s .  (( s with<| TLBEntry49 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry48_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry48";
  read_from := (\ s .  s.TLBEntry48);
  write_to := (\ v s .  (( s with<| TLBEntry48 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry47_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry47";
  read_from := (\ s .  s.TLBEntry47);
  write_to := (\ v s .  (( s with<| TLBEntry47 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry46_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry46";
  read_from := (\ s .  s.TLBEntry46);
  write_to := (\ v s .  (( s with<| TLBEntry46 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry45_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry45";
  read_from := (\ s .  s.TLBEntry45);
  write_to := (\ v s .  (( s with<| TLBEntry45 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry44_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry44";
  read_from := (\ s .  s.TLBEntry44);
  write_to := (\ v s .  (( s with<| TLBEntry44 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry43_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry43";
  read_from := (\ s .  s.TLBEntry43);
  write_to := (\ v s .  (( s with<| TLBEntry43 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry42_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry42";
  read_from := (\ s .  s.TLBEntry42);
  write_to := (\ v s .  (( s with<| TLBEntry42 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry41_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry41";
  read_from := (\ s .  s.TLBEntry41);
  write_to := (\ v s .  (( s with<| TLBEntry41 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry40_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry40";
  read_from := (\ s .  s.TLBEntry40);
  write_to := (\ v s .  (( s with<| TLBEntry40 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry39_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry39";
  read_from := (\ s .  s.TLBEntry39);
  write_to := (\ v s .  (( s with<| TLBEntry39 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry38_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry38";
  read_from := (\ s .  s.TLBEntry38);
  write_to := (\ v s .  (( s with<| TLBEntry38 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry37_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry37";
  read_from := (\ s .  s.TLBEntry37);
  write_to := (\ v s .  (( s with<| TLBEntry37 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry36_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry36";
  read_from := (\ s .  s.TLBEntry36);
  write_to := (\ v s .  (( s with<| TLBEntry36 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry35_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry35";
  read_from := (\ s .  s.TLBEntry35);
  write_to := (\ v s .  (( s with<| TLBEntry35 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry34_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry34";
  read_from := (\ s .  s.TLBEntry34);
  write_to := (\ v s .  (( s with<| TLBEntry34 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry33_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry33";
  read_from := (\ s .  s.TLBEntry33);
  write_to := (\ v s .  (( s with<| TLBEntry33 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry32_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry32";
  read_from := (\ s .  s.TLBEntry32);
  write_to := (\ v s .  (( s with<| TLBEntry32 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry31_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry31";
  read_from := (\ s .  s.TLBEntry31);
  write_to := (\ v s .  (( s with<| TLBEntry31 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry30_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry30";
  read_from := (\ s .  s.TLBEntry30);
  write_to := (\ v s .  (( s with<| TLBEntry30 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry29_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry29";
  read_from := (\ s .  s.TLBEntry29);
  write_to := (\ v s .  (( s with<| TLBEntry29 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry28_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry28";
  read_from := (\ s .  s.TLBEntry28);
  write_to := (\ v s .  (( s with<| TLBEntry28 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry27_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry27";
  read_from := (\ s .  s.TLBEntry27);
  write_to := (\ v s .  (( s with<| TLBEntry27 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry26_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry26";
  read_from := (\ s .  s.TLBEntry26);
  write_to := (\ v s .  (( s with<| TLBEntry26 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry25_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry25";
  read_from := (\ s .  s.TLBEntry25);
  write_to := (\ v s .  (( s with<| TLBEntry25 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry24_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry24";
  read_from := (\ s .  s.TLBEntry24);
  write_to := (\ v s .  (( s with<| TLBEntry24 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry23_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry23";
  read_from := (\ s .  s.TLBEntry23);
  write_to := (\ v s .  (( s with<| TLBEntry23 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry22_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry22";
  read_from := (\ s .  s.TLBEntry22);
  write_to := (\ v s .  (( s with<| TLBEntry22 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry21_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry21";
  read_from := (\ s .  s.TLBEntry21);
  write_to := (\ v s .  (( s with<| TLBEntry21 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry20_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry20";
  read_from := (\ s .  s.TLBEntry20);
  write_to := (\ v s .  (( s with<| TLBEntry20 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry19_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry19";
  read_from := (\ s .  s.TLBEntry19);
  write_to := (\ v s .  (( s with<| TLBEntry19 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry18_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry18";
  read_from := (\ s .  s.TLBEntry18);
  write_to := (\ v s .  (( s with<| TLBEntry18 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry17_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry17";
  read_from := (\ s .  s.TLBEntry17);
  write_to := (\ v s .  (( s with<| TLBEntry17 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry16_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry16";
  read_from := (\ s .  s.TLBEntry16);
  write_to := (\ v s .  (( s with<| TLBEntry16 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry15_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry15";
  read_from := (\ s .  s.TLBEntry15);
  write_to := (\ v s .  (( s with<| TLBEntry15 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry14_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry14";
  read_from := (\ s .  s.TLBEntry14);
  write_to := (\ v s .  (( s with<| TLBEntry14 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry13_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry13";
  read_from := (\ s .  s.TLBEntry13);
  write_to := (\ v s .  (( s with<| TLBEntry13 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry12_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry12";
  read_from := (\ s .  s.TLBEntry12);
  write_to := (\ v s .  (( s with<| TLBEntry12 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry11_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry11";
  read_from := (\ s .  s.TLBEntry11);
  write_to := (\ v s .  (( s with<| TLBEntry11 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry10_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry10";
  read_from := (\ s .  s.TLBEntry10);
  write_to := (\ v s .  (( s with<| TLBEntry10 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry09_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry09";
  read_from := (\ s .  s.TLBEntry09);
  write_to := (\ v s .  (( s with<| TLBEntry09 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry08_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry08";
  read_from := (\ s .  s.TLBEntry08);
  write_to := (\ v s .  (( s with<| TLBEntry08 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry07_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry07";
  read_from := (\ s .  s.TLBEntry07);
  write_to := (\ v s .  (( s with<| TLBEntry07 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry06_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry06";
  read_from := (\ s .  s.TLBEntry06);
  write_to := (\ v s .  (( s with<| TLBEntry06 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry05_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry05";
  read_from := (\ s .  s.TLBEntry05);
  write_to := (\ v s .  (( s with<| TLBEntry05 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry04_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry04";
  read_from := (\ s .  s.TLBEntry04);
  write_to := (\ v s .  (( s with<| TLBEntry04 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry03_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry03";
  read_from := (\ s .  s.TLBEntry03);
  write_to := (\ v s .  (( s with<| TLBEntry03 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry02_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry02";
  read_from := (\ s .  s.TLBEntry02);
  write_to := (\ v s .  (( s with<| TLBEntry02 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry01_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry01";
  read_from := (\ s .  s.TLBEntry01);
  write_to := (\ v s .  (( s with<| TLBEntry01 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBEntry00_ref:((regstate),(register_value),(TLBEntry))register_ref)=  (<|
  name := "TLBEntry00";
  read_from := (\ s .  s.TLBEntry00);
  write_to := (\ v s .  (( s with<| TLBEntry00 := v |>)));
  of_regval := (\ v .  TLBEntry_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntry v) |>))`;


val _ = Define `
 ((TLBXContext_ref:((regstate),(register_value),(XContextReg))register_ref)=  (<|
  name := "TLBXContext";
  read_from := (\ s .  s.TLBXContext);
  write_to := (\ v s .  (( s with<| TLBXContext := v |>)));
  of_regval := (\ v .  XContextReg_of_regval v);
  regval_of := (\ v .  regval_of_XContextReg v) |>))`;


val _ = Define `
 ((TLBEntryHi_ref:((regstate),(register_value),(TLBEntryHiReg))register_ref)=  (<|
  name := "TLBEntryHi";
  read_from := (\ s .  s.TLBEntryHi);
  write_to := (\ v s .  (( s with<| TLBEntryHi := v |>)));
  of_regval := (\ v .  TLBEntryHiReg_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntryHiReg v) |>))`;


val _ = Define `
 ((TLBWired_ref:((regstate),(register_value),((6)words$word))register_ref)=  (<|
  name := "TLBWired";
  read_from := (\ s .  s.TLBWired);
  write_to := (\ v s .  (( s with<| TLBWired := v |>)));
  of_regval := (\ v .  vector_6_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_6_dec_bit v) |>))`;


val _ = Define `
 ((TLBPageMask_ref:((regstate),(register_value),((16)words$word))register_ref)=  (<|
  name := "TLBPageMask";
  read_from := (\ s .  s.TLBPageMask);
  write_to := (\ v s .  (( s with<| TLBPageMask := v |>)));
  of_regval := (\ v .  vector_16_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_16_dec_bit v) |>))`;


val _ = Define `
 ((TLBContext_ref:((regstate),(register_value),(ContextReg))register_ref)=  (<|
  name := "TLBContext";
  read_from := (\ s .  s.TLBContext);
  write_to := (\ v s .  (( s with<| TLBContext := v |>)));
  of_regval := (\ v .  ContextReg_of_regval v);
  regval_of := (\ v .  regval_of_ContextReg v) |>))`;


val _ = Define `
 ((TLBEntryLo1_ref:((regstate),(register_value),(TLBEntryLoReg))register_ref)=  (<|
  name := "TLBEntryLo1";
  read_from := (\ s .  s.TLBEntryLo1);
  write_to := (\ v s .  (( s with<| TLBEntryLo1 := v |>)));
  of_regval := (\ v .  TLBEntryLoReg_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntryLoReg v) |>))`;


val _ = Define `
 ((TLBEntryLo0_ref:((regstate),(register_value),(TLBEntryLoReg))register_ref)=  (<|
  name := "TLBEntryLo0";
  read_from := (\ s .  s.TLBEntryLo0);
  write_to := (\ v s .  (( s with<| TLBEntryLo0 := v |>)));
  of_regval := (\ v .  TLBEntryLoReg_of_regval v);
  regval_of := (\ v .  regval_of_TLBEntryLoReg v) |>))`;


val _ = Define `
 ((TLBRandom_ref:((regstate),(register_value),((6)words$word))register_ref)=  (<|
  name := "TLBRandom";
  read_from := (\ s .  s.TLBRandom);
  write_to := (\ v s .  (( s with<| TLBRandom := v |>)));
  of_regval := (\ v .  vector_6_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_6_dec_bit v) |>))`;


val _ = Define `
 ((TLBIndex_ref:((regstate),(register_value),((6)words$word))register_ref)=  (<|
  name := "TLBIndex";
  read_from := (\ s .  s.TLBIndex);
  write_to := (\ v s .  (( s with<| TLBIndex := v |>)));
  of_regval := (\ v .  vector_6_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_6_dec_bit v) |>))`;


val _ = Define `
 ((TLBProbe_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "TLBProbe";
  read_from := (\ s .  s.TLBProbe);
  write_to := (\ v s .  (( s with<| TLBProbe := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((nextPC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "nextPC";
  read_from := (\ s .  s.nextPC);
  write_to := (\ v s .  (( s with<| nextPC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PC";
  read_from := (\ s .  s.PC);
  write_to := (\ v s .  (( s with<| PC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


(*val get_regval : string -> regstate -> maybe register_value*)
val _ = Define `
 ((get_regval:string -> regstate ->(register_value)option) reg_name s=
   (if reg_name = "UART_RVALID" then SOME (UART_RVALID_ref.regval_of (UART_RVALID_ref.read_from s)) else
  if reg_name = "UART_RDATA" then SOME (UART_RDATA_ref.regval_of (UART_RDATA_ref.read_from s)) else
  if reg_name = "UART_WRITTEN" then SOME (UART_WRITTEN_ref.regval_of (UART_WRITTEN_ref.read_from s)) else
  if reg_name = "UART_WDATA" then SOME (UART_WDATA_ref.regval_of (UART_WDATA_ref.read_from s)) else
  if reg_name = "GPR" then SOME (GPR_ref.regval_of (GPR_ref.read_from s)) else
  if reg_name = "LO" then SOME (LO_ref.regval_of (LO_ref.read_from s)) else
  if reg_name = "HI" then SOME (HI_ref.regval_of (HI_ref.read_from s)) else
  if reg_name = "delayedPC" then SOME (delayedPC_ref.regval_of (delayedPC_ref.read_from s)) else
  if reg_name = "inBranchDelay" then SOME (inBranchDelay_ref.regval_of (inBranchDelay_ref.read_from s)) else
  if reg_name = "branchPending" then SOME (branchPending_ref.regval_of (branchPending_ref.read_from s)) else
  if reg_name = "CP0Status" then SOME (CP0Status_ref.regval_of (CP0Status_ref.read_from s)) else
  if reg_name = "CP0ConfigK0" then SOME (CP0ConfigK0_ref.regval_of (CP0ConfigK0_ref.read_from s)) else
  if reg_name = "CP0UserLocal" then SOME (CP0UserLocal_ref.regval_of (CP0UserLocal_ref.read_from s)) else
  if reg_name = "CP0HWREna" then SOME (CP0HWREna_ref.regval_of (CP0HWREna_ref.read_from s)) else
  if reg_name = "CP0Count" then SOME (CP0Count_ref.regval_of (CP0Count_ref.read_from s)) else
  if reg_name = "CP0BadVAddr" then SOME (CP0BadVAddr_ref.regval_of (CP0BadVAddr_ref.read_from s)) else
  if reg_name = "CP0LLAddr" then SOME (CP0LLAddr_ref.regval_of (CP0LLAddr_ref.read_from s)) else
  if reg_name = "CP0LLBit" then SOME (CP0LLBit_ref.regval_of (CP0LLBit_ref.read_from s)) else
  if reg_name = "CP0ErrorEPC" then SOME (CP0ErrorEPC_ref.regval_of (CP0ErrorEPC_ref.read_from s)) else
  if reg_name = "CP0EPC" then SOME (CP0EPC_ref.regval_of (CP0EPC_ref.read_from s)) else
  if reg_name = "CP0Cause" then SOME (CP0Cause_ref.regval_of (CP0Cause_ref.read_from s)) else
  if reg_name = "CP0Compare" then SOME (CP0Compare_ref.regval_of (CP0Compare_ref.read_from s)) else
  if reg_name = "TLBEntry63" then SOME (TLBEntry63_ref.regval_of (TLBEntry63_ref.read_from s)) else
  if reg_name = "TLBEntry62" then SOME (TLBEntry62_ref.regval_of (TLBEntry62_ref.read_from s)) else
  if reg_name = "TLBEntry61" then SOME (TLBEntry61_ref.regval_of (TLBEntry61_ref.read_from s)) else
  if reg_name = "TLBEntry60" then SOME (TLBEntry60_ref.regval_of (TLBEntry60_ref.read_from s)) else
  if reg_name = "TLBEntry59" then SOME (TLBEntry59_ref.regval_of (TLBEntry59_ref.read_from s)) else
  if reg_name = "TLBEntry58" then SOME (TLBEntry58_ref.regval_of (TLBEntry58_ref.read_from s)) else
  if reg_name = "TLBEntry57" then SOME (TLBEntry57_ref.regval_of (TLBEntry57_ref.read_from s)) else
  if reg_name = "TLBEntry56" then SOME (TLBEntry56_ref.regval_of (TLBEntry56_ref.read_from s)) else
  if reg_name = "TLBEntry55" then SOME (TLBEntry55_ref.regval_of (TLBEntry55_ref.read_from s)) else
  if reg_name = "TLBEntry54" then SOME (TLBEntry54_ref.regval_of (TLBEntry54_ref.read_from s)) else
  if reg_name = "TLBEntry53" then SOME (TLBEntry53_ref.regval_of (TLBEntry53_ref.read_from s)) else
  if reg_name = "TLBEntry52" then SOME (TLBEntry52_ref.regval_of (TLBEntry52_ref.read_from s)) else
  if reg_name = "TLBEntry51" then SOME (TLBEntry51_ref.regval_of (TLBEntry51_ref.read_from s)) else
  if reg_name = "TLBEntry50" then SOME (TLBEntry50_ref.regval_of (TLBEntry50_ref.read_from s)) else
  if reg_name = "TLBEntry49" then SOME (TLBEntry49_ref.regval_of (TLBEntry49_ref.read_from s)) else
  if reg_name = "TLBEntry48" then SOME (TLBEntry48_ref.regval_of (TLBEntry48_ref.read_from s)) else
  if reg_name = "TLBEntry47" then SOME (TLBEntry47_ref.regval_of (TLBEntry47_ref.read_from s)) else
  if reg_name = "TLBEntry46" then SOME (TLBEntry46_ref.regval_of (TLBEntry46_ref.read_from s)) else
  if reg_name = "TLBEntry45" then SOME (TLBEntry45_ref.regval_of (TLBEntry45_ref.read_from s)) else
  if reg_name = "TLBEntry44" then SOME (TLBEntry44_ref.regval_of (TLBEntry44_ref.read_from s)) else
  if reg_name = "TLBEntry43" then SOME (TLBEntry43_ref.regval_of (TLBEntry43_ref.read_from s)) else
  if reg_name = "TLBEntry42" then SOME (TLBEntry42_ref.regval_of (TLBEntry42_ref.read_from s)) else
  if reg_name = "TLBEntry41" then SOME (TLBEntry41_ref.regval_of (TLBEntry41_ref.read_from s)) else
  if reg_name = "TLBEntry40" then SOME (TLBEntry40_ref.regval_of (TLBEntry40_ref.read_from s)) else
  if reg_name = "TLBEntry39" then SOME (TLBEntry39_ref.regval_of (TLBEntry39_ref.read_from s)) else
  if reg_name = "TLBEntry38" then SOME (TLBEntry38_ref.regval_of (TLBEntry38_ref.read_from s)) else
  if reg_name = "TLBEntry37" then SOME (TLBEntry37_ref.regval_of (TLBEntry37_ref.read_from s)) else
  if reg_name = "TLBEntry36" then SOME (TLBEntry36_ref.regval_of (TLBEntry36_ref.read_from s)) else
  if reg_name = "TLBEntry35" then SOME (TLBEntry35_ref.regval_of (TLBEntry35_ref.read_from s)) else
  if reg_name = "TLBEntry34" then SOME (TLBEntry34_ref.regval_of (TLBEntry34_ref.read_from s)) else
  if reg_name = "TLBEntry33" then SOME (TLBEntry33_ref.regval_of (TLBEntry33_ref.read_from s)) else
  if reg_name = "TLBEntry32" then SOME (TLBEntry32_ref.regval_of (TLBEntry32_ref.read_from s)) else
  if reg_name = "TLBEntry31" then SOME (TLBEntry31_ref.regval_of (TLBEntry31_ref.read_from s)) else
  if reg_name = "TLBEntry30" then SOME (TLBEntry30_ref.regval_of (TLBEntry30_ref.read_from s)) else
  if reg_name = "TLBEntry29" then SOME (TLBEntry29_ref.regval_of (TLBEntry29_ref.read_from s)) else
  if reg_name = "TLBEntry28" then SOME (TLBEntry28_ref.regval_of (TLBEntry28_ref.read_from s)) else
  if reg_name = "TLBEntry27" then SOME (TLBEntry27_ref.regval_of (TLBEntry27_ref.read_from s)) else
  if reg_name = "TLBEntry26" then SOME (TLBEntry26_ref.regval_of (TLBEntry26_ref.read_from s)) else
  if reg_name = "TLBEntry25" then SOME (TLBEntry25_ref.regval_of (TLBEntry25_ref.read_from s)) else
  if reg_name = "TLBEntry24" then SOME (TLBEntry24_ref.regval_of (TLBEntry24_ref.read_from s)) else
  if reg_name = "TLBEntry23" then SOME (TLBEntry23_ref.regval_of (TLBEntry23_ref.read_from s)) else
  if reg_name = "TLBEntry22" then SOME (TLBEntry22_ref.regval_of (TLBEntry22_ref.read_from s)) else
  if reg_name = "TLBEntry21" then SOME (TLBEntry21_ref.regval_of (TLBEntry21_ref.read_from s)) else
  if reg_name = "TLBEntry20" then SOME (TLBEntry20_ref.regval_of (TLBEntry20_ref.read_from s)) else
  if reg_name = "TLBEntry19" then SOME (TLBEntry19_ref.regval_of (TLBEntry19_ref.read_from s)) else
  if reg_name = "TLBEntry18" then SOME (TLBEntry18_ref.regval_of (TLBEntry18_ref.read_from s)) else
  if reg_name = "TLBEntry17" then SOME (TLBEntry17_ref.regval_of (TLBEntry17_ref.read_from s)) else
  if reg_name = "TLBEntry16" then SOME (TLBEntry16_ref.regval_of (TLBEntry16_ref.read_from s)) else
  if reg_name = "TLBEntry15" then SOME (TLBEntry15_ref.regval_of (TLBEntry15_ref.read_from s)) else
  if reg_name = "TLBEntry14" then SOME (TLBEntry14_ref.regval_of (TLBEntry14_ref.read_from s)) else
  if reg_name = "TLBEntry13" then SOME (TLBEntry13_ref.regval_of (TLBEntry13_ref.read_from s)) else
  if reg_name = "TLBEntry12" then SOME (TLBEntry12_ref.regval_of (TLBEntry12_ref.read_from s)) else
  if reg_name = "TLBEntry11" then SOME (TLBEntry11_ref.regval_of (TLBEntry11_ref.read_from s)) else
  if reg_name = "TLBEntry10" then SOME (TLBEntry10_ref.regval_of (TLBEntry10_ref.read_from s)) else
  if reg_name = "TLBEntry09" then SOME (TLBEntry09_ref.regval_of (TLBEntry09_ref.read_from s)) else
  if reg_name = "TLBEntry08" then SOME (TLBEntry08_ref.regval_of (TLBEntry08_ref.read_from s)) else
  if reg_name = "TLBEntry07" then SOME (TLBEntry07_ref.regval_of (TLBEntry07_ref.read_from s)) else
  if reg_name = "TLBEntry06" then SOME (TLBEntry06_ref.regval_of (TLBEntry06_ref.read_from s)) else
  if reg_name = "TLBEntry05" then SOME (TLBEntry05_ref.regval_of (TLBEntry05_ref.read_from s)) else
  if reg_name = "TLBEntry04" then SOME (TLBEntry04_ref.regval_of (TLBEntry04_ref.read_from s)) else
  if reg_name = "TLBEntry03" then SOME (TLBEntry03_ref.regval_of (TLBEntry03_ref.read_from s)) else
  if reg_name = "TLBEntry02" then SOME (TLBEntry02_ref.regval_of (TLBEntry02_ref.read_from s)) else
  if reg_name = "TLBEntry01" then SOME (TLBEntry01_ref.regval_of (TLBEntry01_ref.read_from s)) else
  if reg_name = "TLBEntry00" then SOME (TLBEntry00_ref.regval_of (TLBEntry00_ref.read_from s)) else
  if reg_name = "TLBXContext" then SOME (TLBXContext_ref.regval_of (TLBXContext_ref.read_from s)) else
  if reg_name = "TLBEntryHi" then SOME (TLBEntryHi_ref.regval_of (TLBEntryHi_ref.read_from s)) else
  if reg_name = "TLBWired" then SOME (TLBWired_ref.regval_of (TLBWired_ref.read_from s)) else
  if reg_name = "TLBPageMask" then SOME (TLBPageMask_ref.regval_of (TLBPageMask_ref.read_from s)) else
  if reg_name = "TLBContext" then SOME (TLBContext_ref.regval_of (TLBContext_ref.read_from s)) else
  if reg_name = "TLBEntryLo1" then SOME (TLBEntryLo1_ref.regval_of (TLBEntryLo1_ref.read_from s)) else
  if reg_name = "TLBEntryLo0" then SOME (TLBEntryLo0_ref.regval_of (TLBEntryLo0_ref.read_from s)) else
  if reg_name = "TLBRandom" then SOME (TLBRandom_ref.regval_of (TLBRandom_ref.read_from s)) else
  if reg_name = "TLBIndex" then SOME (TLBIndex_ref.regval_of (TLBIndex_ref.read_from s)) else
  if reg_name = "TLBProbe" then SOME (TLBProbe_ref.regval_of (TLBProbe_ref.read_from s)) else
  if reg_name = "nextPC" then SOME (nextPC_ref.regval_of (nextPC_ref.read_from s)) else
  if reg_name = "PC" then SOME (PC_ref.regval_of (PC_ref.read_from s)) else
  NONE))`;


(*val set_regval : string -> register_value -> regstate -> maybe regstate*)
val _ = Define `
 ((set_regval:string -> register_value -> regstate ->(regstate)option) reg_name v s=
   (if reg_name = "UART_RVALID" then OPTION_MAP (\ v .  UART_RVALID_ref.write_to v s) (UART_RVALID_ref.of_regval v) else
  if reg_name = "UART_RDATA" then OPTION_MAP (\ v .  UART_RDATA_ref.write_to v s) (UART_RDATA_ref.of_regval v) else
  if reg_name = "UART_WRITTEN" then OPTION_MAP (\ v .  UART_WRITTEN_ref.write_to v s) (UART_WRITTEN_ref.of_regval v) else
  if reg_name = "UART_WDATA" then OPTION_MAP (\ v .  UART_WDATA_ref.write_to v s) (UART_WDATA_ref.of_regval v) else
  if reg_name = "GPR" then OPTION_MAP (\ v .  GPR_ref.write_to v s) (GPR_ref.of_regval v) else
  if reg_name = "LO" then OPTION_MAP (\ v .  LO_ref.write_to v s) (LO_ref.of_regval v) else
  if reg_name = "HI" then OPTION_MAP (\ v .  HI_ref.write_to v s) (HI_ref.of_regval v) else
  if reg_name = "delayedPC" then OPTION_MAP (\ v .  delayedPC_ref.write_to v s) (delayedPC_ref.of_regval v) else
  if reg_name = "inBranchDelay" then OPTION_MAP (\ v .  inBranchDelay_ref.write_to v s) (inBranchDelay_ref.of_regval v) else
  if reg_name = "branchPending" then OPTION_MAP (\ v .  branchPending_ref.write_to v s) (branchPending_ref.of_regval v) else
  if reg_name = "CP0Status" then OPTION_MAP (\ v .  CP0Status_ref.write_to v s) (CP0Status_ref.of_regval v) else
  if reg_name = "CP0ConfigK0" then OPTION_MAP (\ v .  CP0ConfigK0_ref.write_to v s) (CP0ConfigK0_ref.of_regval v) else
  if reg_name = "CP0UserLocal" then OPTION_MAP (\ v .  CP0UserLocal_ref.write_to v s) (CP0UserLocal_ref.of_regval v) else
  if reg_name = "CP0HWREna" then OPTION_MAP (\ v .  CP0HWREna_ref.write_to v s) (CP0HWREna_ref.of_regval v) else
  if reg_name = "CP0Count" then OPTION_MAP (\ v .  CP0Count_ref.write_to v s) (CP0Count_ref.of_regval v) else
  if reg_name = "CP0BadVAddr" then OPTION_MAP (\ v .  CP0BadVAddr_ref.write_to v s) (CP0BadVAddr_ref.of_regval v) else
  if reg_name = "CP0LLAddr" then OPTION_MAP (\ v .  CP0LLAddr_ref.write_to v s) (CP0LLAddr_ref.of_regval v) else
  if reg_name = "CP0LLBit" then OPTION_MAP (\ v .  CP0LLBit_ref.write_to v s) (CP0LLBit_ref.of_regval v) else
  if reg_name = "CP0ErrorEPC" then OPTION_MAP (\ v .  CP0ErrorEPC_ref.write_to v s) (CP0ErrorEPC_ref.of_regval v) else
  if reg_name = "CP0EPC" then OPTION_MAP (\ v .  CP0EPC_ref.write_to v s) (CP0EPC_ref.of_regval v) else
  if reg_name = "CP0Cause" then OPTION_MAP (\ v .  CP0Cause_ref.write_to v s) (CP0Cause_ref.of_regval v) else
  if reg_name = "CP0Compare" then OPTION_MAP (\ v .  CP0Compare_ref.write_to v s) (CP0Compare_ref.of_regval v) else
  if reg_name = "TLBEntry63" then OPTION_MAP (\ v .  TLBEntry63_ref.write_to v s) (TLBEntry63_ref.of_regval v) else
  if reg_name = "TLBEntry62" then OPTION_MAP (\ v .  TLBEntry62_ref.write_to v s) (TLBEntry62_ref.of_regval v) else
  if reg_name = "TLBEntry61" then OPTION_MAP (\ v .  TLBEntry61_ref.write_to v s) (TLBEntry61_ref.of_regval v) else
  if reg_name = "TLBEntry60" then OPTION_MAP (\ v .  TLBEntry60_ref.write_to v s) (TLBEntry60_ref.of_regval v) else
  if reg_name = "TLBEntry59" then OPTION_MAP (\ v .  TLBEntry59_ref.write_to v s) (TLBEntry59_ref.of_regval v) else
  if reg_name = "TLBEntry58" then OPTION_MAP (\ v .  TLBEntry58_ref.write_to v s) (TLBEntry58_ref.of_regval v) else
  if reg_name = "TLBEntry57" then OPTION_MAP (\ v .  TLBEntry57_ref.write_to v s) (TLBEntry57_ref.of_regval v) else
  if reg_name = "TLBEntry56" then OPTION_MAP (\ v .  TLBEntry56_ref.write_to v s) (TLBEntry56_ref.of_regval v) else
  if reg_name = "TLBEntry55" then OPTION_MAP (\ v .  TLBEntry55_ref.write_to v s) (TLBEntry55_ref.of_regval v) else
  if reg_name = "TLBEntry54" then OPTION_MAP (\ v .  TLBEntry54_ref.write_to v s) (TLBEntry54_ref.of_regval v) else
  if reg_name = "TLBEntry53" then OPTION_MAP (\ v .  TLBEntry53_ref.write_to v s) (TLBEntry53_ref.of_regval v) else
  if reg_name = "TLBEntry52" then OPTION_MAP (\ v .  TLBEntry52_ref.write_to v s) (TLBEntry52_ref.of_regval v) else
  if reg_name = "TLBEntry51" then OPTION_MAP (\ v .  TLBEntry51_ref.write_to v s) (TLBEntry51_ref.of_regval v) else
  if reg_name = "TLBEntry50" then OPTION_MAP (\ v .  TLBEntry50_ref.write_to v s) (TLBEntry50_ref.of_regval v) else
  if reg_name = "TLBEntry49" then OPTION_MAP (\ v .  TLBEntry49_ref.write_to v s) (TLBEntry49_ref.of_regval v) else
  if reg_name = "TLBEntry48" then OPTION_MAP (\ v .  TLBEntry48_ref.write_to v s) (TLBEntry48_ref.of_regval v) else
  if reg_name = "TLBEntry47" then OPTION_MAP (\ v .  TLBEntry47_ref.write_to v s) (TLBEntry47_ref.of_regval v) else
  if reg_name = "TLBEntry46" then OPTION_MAP (\ v .  TLBEntry46_ref.write_to v s) (TLBEntry46_ref.of_regval v) else
  if reg_name = "TLBEntry45" then OPTION_MAP (\ v .  TLBEntry45_ref.write_to v s) (TLBEntry45_ref.of_regval v) else
  if reg_name = "TLBEntry44" then OPTION_MAP (\ v .  TLBEntry44_ref.write_to v s) (TLBEntry44_ref.of_regval v) else
  if reg_name = "TLBEntry43" then OPTION_MAP (\ v .  TLBEntry43_ref.write_to v s) (TLBEntry43_ref.of_regval v) else
  if reg_name = "TLBEntry42" then OPTION_MAP (\ v .  TLBEntry42_ref.write_to v s) (TLBEntry42_ref.of_regval v) else
  if reg_name = "TLBEntry41" then OPTION_MAP (\ v .  TLBEntry41_ref.write_to v s) (TLBEntry41_ref.of_regval v) else
  if reg_name = "TLBEntry40" then OPTION_MAP (\ v .  TLBEntry40_ref.write_to v s) (TLBEntry40_ref.of_regval v) else
  if reg_name = "TLBEntry39" then OPTION_MAP (\ v .  TLBEntry39_ref.write_to v s) (TLBEntry39_ref.of_regval v) else
  if reg_name = "TLBEntry38" then OPTION_MAP (\ v .  TLBEntry38_ref.write_to v s) (TLBEntry38_ref.of_regval v) else
  if reg_name = "TLBEntry37" then OPTION_MAP (\ v .  TLBEntry37_ref.write_to v s) (TLBEntry37_ref.of_regval v) else
  if reg_name = "TLBEntry36" then OPTION_MAP (\ v .  TLBEntry36_ref.write_to v s) (TLBEntry36_ref.of_regval v) else
  if reg_name = "TLBEntry35" then OPTION_MAP (\ v .  TLBEntry35_ref.write_to v s) (TLBEntry35_ref.of_regval v) else
  if reg_name = "TLBEntry34" then OPTION_MAP (\ v .  TLBEntry34_ref.write_to v s) (TLBEntry34_ref.of_regval v) else
  if reg_name = "TLBEntry33" then OPTION_MAP (\ v .  TLBEntry33_ref.write_to v s) (TLBEntry33_ref.of_regval v) else
  if reg_name = "TLBEntry32" then OPTION_MAP (\ v .  TLBEntry32_ref.write_to v s) (TLBEntry32_ref.of_regval v) else
  if reg_name = "TLBEntry31" then OPTION_MAP (\ v .  TLBEntry31_ref.write_to v s) (TLBEntry31_ref.of_regval v) else
  if reg_name = "TLBEntry30" then OPTION_MAP (\ v .  TLBEntry30_ref.write_to v s) (TLBEntry30_ref.of_regval v) else
  if reg_name = "TLBEntry29" then OPTION_MAP (\ v .  TLBEntry29_ref.write_to v s) (TLBEntry29_ref.of_regval v) else
  if reg_name = "TLBEntry28" then OPTION_MAP (\ v .  TLBEntry28_ref.write_to v s) (TLBEntry28_ref.of_regval v) else
  if reg_name = "TLBEntry27" then OPTION_MAP (\ v .  TLBEntry27_ref.write_to v s) (TLBEntry27_ref.of_regval v) else
  if reg_name = "TLBEntry26" then OPTION_MAP (\ v .  TLBEntry26_ref.write_to v s) (TLBEntry26_ref.of_regval v) else
  if reg_name = "TLBEntry25" then OPTION_MAP (\ v .  TLBEntry25_ref.write_to v s) (TLBEntry25_ref.of_regval v) else
  if reg_name = "TLBEntry24" then OPTION_MAP (\ v .  TLBEntry24_ref.write_to v s) (TLBEntry24_ref.of_regval v) else
  if reg_name = "TLBEntry23" then OPTION_MAP (\ v .  TLBEntry23_ref.write_to v s) (TLBEntry23_ref.of_regval v) else
  if reg_name = "TLBEntry22" then OPTION_MAP (\ v .  TLBEntry22_ref.write_to v s) (TLBEntry22_ref.of_regval v) else
  if reg_name = "TLBEntry21" then OPTION_MAP (\ v .  TLBEntry21_ref.write_to v s) (TLBEntry21_ref.of_regval v) else
  if reg_name = "TLBEntry20" then OPTION_MAP (\ v .  TLBEntry20_ref.write_to v s) (TLBEntry20_ref.of_regval v) else
  if reg_name = "TLBEntry19" then OPTION_MAP (\ v .  TLBEntry19_ref.write_to v s) (TLBEntry19_ref.of_regval v) else
  if reg_name = "TLBEntry18" then OPTION_MAP (\ v .  TLBEntry18_ref.write_to v s) (TLBEntry18_ref.of_regval v) else
  if reg_name = "TLBEntry17" then OPTION_MAP (\ v .  TLBEntry17_ref.write_to v s) (TLBEntry17_ref.of_regval v) else
  if reg_name = "TLBEntry16" then OPTION_MAP (\ v .  TLBEntry16_ref.write_to v s) (TLBEntry16_ref.of_regval v) else
  if reg_name = "TLBEntry15" then OPTION_MAP (\ v .  TLBEntry15_ref.write_to v s) (TLBEntry15_ref.of_regval v) else
  if reg_name = "TLBEntry14" then OPTION_MAP (\ v .  TLBEntry14_ref.write_to v s) (TLBEntry14_ref.of_regval v) else
  if reg_name = "TLBEntry13" then OPTION_MAP (\ v .  TLBEntry13_ref.write_to v s) (TLBEntry13_ref.of_regval v) else
  if reg_name = "TLBEntry12" then OPTION_MAP (\ v .  TLBEntry12_ref.write_to v s) (TLBEntry12_ref.of_regval v) else
  if reg_name = "TLBEntry11" then OPTION_MAP (\ v .  TLBEntry11_ref.write_to v s) (TLBEntry11_ref.of_regval v) else
  if reg_name = "TLBEntry10" then OPTION_MAP (\ v .  TLBEntry10_ref.write_to v s) (TLBEntry10_ref.of_regval v) else
  if reg_name = "TLBEntry09" then OPTION_MAP (\ v .  TLBEntry09_ref.write_to v s) (TLBEntry09_ref.of_regval v) else
  if reg_name = "TLBEntry08" then OPTION_MAP (\ v .  TLBEntry08_ref.write_to v s) (TLBEntry08_ref.of_regval v) else
  if reg_name = "TLBEntry07" then OPTION_MAP (\ v .  TLBEntry07_ref.write_to v s) (TLBEntry07_ref.of_regval v) else
  if reg_name = "TLBEntry06" then OPTION_MAP (\ v .  TLBEntry06_ref.write_to v s) (TLBEntry06_ref.of_regval v) else
  if reg_name = "TLBEntry05" then OPTION_MAP (\ v .  TLBEntry05_ref.write_to v s) (TLBEntry05_ref.of_regval v) else
  if reg_name = "TLBEntry04" then OPTION_MAP (\ v .  TLBEntry04_ref.write_to v s) (TLBEntry04_ref.of_regval v) else
  if reg_name = "TLBEntry03" then OPTION_MAP (\ v .  TLBEntry03_ref.write_to v s) (TLBEntry03_ref.of_regval v) else
  if reg_name = "TLBEntry02" then OPTION_MAP (\ v .  TLBEntry02_ref.write_to v s) (TLBEntry02_ref.of_regval v) else
  if reg_name = "TLBEntry01" then OPTION_MAP (\ v .  TLBEntry01_ref.write_to v s) (TLBEntry01_ref.of_regval v) else
  if reg_name = "TLBEntry00" then OPTION_MAP (\ v .  TLBEntry00_ref.write_to v s) (TLBEntry00_ref.of_regval v) else
  if reg_name = "TLBXContext" then OPTION_MAP (\ v .  TLBXContext_ref.write_to v s) (TLBXContext_ref.of_regval v) else
  if reg_name = "TLBEntryHi" then OPTION_MAP (\ v .  TLBEntryHi_ref.write_to v s) (TLBEntryHi_ref.of_regval v) else
  if reg_name = "TLBWired" then OPTION_MAP (\ v .  TLBWired_ref.write_to v s) (TLBWired_ref.of_regval v) else
  if reg_name = "TLBPageMask" then OPTION_MAP (\ v .  TLBPageMask_ref.write_to v s) (TLBPageMask_ref.of_regval v) else
  if reg_name = "TLBContext" then OPTION_MAP (\ v .  TLBContext_ref.write_to v s) (TLBContext_ref.of_regval v) else
  if reg_name = "TLBEntryLo1" then OPTION_MAP (\ v .  TLBEntryLo1_ref.write_to v s) (TLBEntryLo1_ref.of_regval v) else
  if reg_name = "TLBEntryLo0" then OPTION_MAP (\ v .  TLBEntryLo0_ref.write_to v s) (TLBEntryLo0_ref.of_regval v) else
  if reg_name = "TLBRandom" then OPTION_MAP (\ v .  TLBRandom_ref.write_to v s) (TLBRandom_ref.of_regval v) else
  if reg_name = "TLBIndex" then OPTION_MAP (\ v .  TLBIndex_ref.write_to v s) (TLBIndex_ref.of_regval v) else
  if reg_name = "TLBProbe" then OPTION_MAP (\ v .  TLBProbe_ref.write_to v s) (TLBProbe_ref.of_regval v) else
  if reg_name = "nextPC" then OPTION_MAP (\ v .  nextPC_ref.write_to v s) (nextPC_ref.of_regval v) else
  if reg_name = "PC" then OPTION_MAP (\ v .  PC_ref.write_to v s) (PC_ref.of_regval v) else
  NONE))`;


val _ = Define `
 ((register_accessors:(string -> regstate ->(register_value)option)#(string -> register_value -> regstate ->(regstate)option))=  (get_regval, set_regval))`;



val _ = type_abbrev((* ( 'a, 'r) *) "MR" , ``:  (regstate, 'a, 'r, exception)monadR``);
val _ = type_abbrev((*  'a *) "M" , ``:  (regstate, 'a, exception)monad``);
val _ = export_theory()

