(*Generated by Lem from mips.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_instr_kindsTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_stringTheory sail2_operators_mwordsTheory sail2_promptTheory mips_typesTheory mips_extrasTheory;

val _ = numLib.prefer_num();



val _ = new_theory "mips"

(*Generated by Sail from mips.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
(*open import Mips_types*)
(*open import Mips_extras*)







(*val neq_bool : bool -> bool -> bool*)

val _ = Define `
 ((neq_bool:bool -> bool -> bool) x y=  (~ (((x = y)))))`;


(*val undefined_option : forall 'a. 'a -> M (maybe 'a)*)

val _ = Define `
 ((undefined_option:'a ->(regstate)sail2_state_monad$sequential_state ->((('a option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) typ_a=  (sail2_state_monad$bindS
   (undefined_unit () ) (\ (u_0 : unit) . 
   let (u_1 : 'a) = typ_a in
   sail2_state$internal_pickS [SOME u_1;NONE])))`;


(*val is_none : forall 'a. maybe 'a -> bool*)

val _ = Define `
 ((is_none:'a option -> bool) opt=  ((case opt of   SOME (_) => F | NONE => T )))`;


(*val is_some : forall 'a. maybe 'a -> bool*)

val _ = Define `
 ((is_some:'a option -> bool) opt=  ((case opt of   SOME (_) => T | NONE => F )))`;


(*val sail_mask : forall 'len 'v . Size 'len, Size 'v => itself 'len -> mword 'v -> mword 'len*)

val _ = Define `
 ((sail_mask:'len itself -> 'v words$word -> 'len words$word) len v=
    (let len = (size_itself_int len) in
   if ((len <= ((int_of_num (words$word_len v))))) then (vector_truncate v len  :  'len words$word)
   else (zero_extend v len  :  'len words$word)))`;






(*val cast_unit_vec : bitU -> mword ty1*)

val _ = Define `
 ((cast_unit_vec0:bitU ->(1)words$word) b=
    ((case b of   B0 => (vec_of_bits [B0]  :  1 words$word) | _ => (vec_of_bits [B1]  :  1 words$word) )))`;


(*val __MIPS_write : forall  'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> mword 'p8_times_n_ -> M unit*)

val _ = Define `
 ((MIPS_write:(64)words$word -> int -> 'p8_times_n_ words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=
    (write_ram instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii) width
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
       :  64 words$word) addr data))`;


(*val __MIPS_read : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> M (mword 'p8_times_n_)*)

val _ = Define `
 ((MIPS_read:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->((('p8_times_n_ words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    ((read_ram instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii) width
      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
        :  64 words$word) addr
     : ( 'p8_times_n_ words$word) M)))`;




(*val undefined_exception : unit -> M exception*)

val _ = Define `
 ((undefined_exception:unit ->(regstate)sail2_state_monad$sequential_state ->(((exception),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_string () ) (\ (u_0 : string) .  sail2_state_monad$bindS
   (undefined_unit () ) (\ (u_1 : unit) . 
   sail2_state$internal_pickS
     [ISAException u_1;Error_not_implemented u_0;Error_misaligned_access u_1;Error_EBREAK u_1;Error_internal_error u_1]))))`;


(*val mips_sign_extend : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

(*val mips_zero_extend : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((mips_sign_extend:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((sign_extend v m__tv  :  'm words$word)))`;


val _ = Define `
 ((mips_zero_extend:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((zero_extend v m__tv  :  'm words$word)))`;


(*val zeros : forall 'n . Size 'n => integer -> unit -> mword 'n*)

val _ = Define `
 ((zeros0:int -> unit -> 'n words$word) (n__tv : int) () =  ((replicate_bits (vec_of_bits [B0]  :  1 words$word) n__tv  :  'n words$word)))`;


(*val ones : forall 'n . Size 'n => integer -> unit -> mword 'n*)

val _ = Define `
 ((ones:int -> unit -> 'n words$word) (n__tv : int) () =  ((replicate_bits (vec_of_bits [B1]  :  1 words$word) n__tv  :  'n words$word)))`;


(*val zopz0zI_s : forall 'n . Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_s : forall 'n . Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zI_u : forall 'n . Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_u : forall 'n . Size 'n => mword 'n -> mword 'n -> bool*)

val _ = Define `
 ((zopz0zI_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) < ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zKzJ_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) >= ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zI_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) < ((lem$w2ui y))))`;


val _ = Define `
 ((zopz0zKzJ_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) >= ((lem$w2ui y))))`;


(*val bool_to_bits : bool -> mword ty1*)

val _ = Define `
 ((bool_to_bits:bool ->(1)words$word) x=  (if x then (vec_of_bits [B1]  :  1 words$word) else (vec_of_bits [B0]  :  1 words$word)))`;


(*val bit_to_bool : bitU -> bool*)

val _ = Define `
 ((bit_to_bool:bitU -> bool) b=  ((case b of   B1 => T | _ => F )))`;


(*val bits_to_bool : mword ty1 -> bool*)

val _ = Define `
 ((bits_to_bool:(1)words$word -> bool) x=  (bit_to_bool ((access_vec_dec x (( 0 : int):ii)))))`;


(*
\function{to\_bits} converts an integer to a bit vector of given length. If the integer is negative a twos-complement representation is used. If the integer is too large (or too negative) to fit in the requested length then it is truncated to the least significant bits.
*)
(*val to_bits : forall 'l . Size 'l => itself 'l -> ii -> mword 'l*)

val _ = Define `
 ((to_bits:'l itself -> int -> 'l words$word) l n=
    (let l = (size_itself_int l) in
   (get_slice_int instance_Sail2_values_Bitvector_Machine_word_mword_dict l n (( 0 : int):ii)  :  'l words$word)))`;


(*val mask : forall 'm 'n . Size 'm, Size 'n => integer -> mword 'm -> mword 'n*)

val _ = Define `
 ((mask:int -> 'm words$word -> 'n words$word) (n__tv : int) bs=
    ((subrange_vec_dec bs ((n__tv - (( 1 : int):ii))) (( 0 : int):ii)  :  'n words$word)))`;


(*val undefined_CauseReg : unit -> M CauseReg*)

val _ = Define `
 ((undefined_CauseReg:unit ->(regstate)sail2_state_monad$sequential_state ->(((CauseReg),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   sail2_state_monad$returnS (<| CauseReg_CauseReg_chunk_0 := w__0 |>))))`;


(*val Mk_CauseReg : mword ty32 -> CauseReg*)

val _ = Define `
 ((Mk_CauseReg:(32)words$word -> CauseReg) v=
    (<| CauseReg_CauseReg_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


(*val _get_CauseReg_bits : CauseReg -> mword ty32*)

val _ = Define `
 ((get_CauseReg_bits:CauseReg ->(32)words$word) v=
    ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


(*val _set_CauseReg_bits : register_ref regstate register_value CauseReg -> mword ty32 -> M unit*)

val _ = Define `
 ((set_CauseReg_bits:((regstate),(register_value),(CauseReg))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_bits : CauseReg -> mword ty32 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_bits:CauseReg ->(32)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word))|>)))`;


(*val _update_StatusReg_bits : StatusReg -> mword ty32 -> StatusReg*)

(*val _get_StatusReg_bits : StatusReg -> mword ty32*)

(*val _set_StatusReg_bits : register_ref regstate register_value StatusReg -> mword ty32 -> M unit*)

(*val _get_CauseReg_BD : CauseReg -> mword ty1*)

val _ = Define `
 ((get_CauseReg_BD:CauseReg ->(1)words$word) v=  ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


(*val _set_CauseReg_BD : register_ref regstate register_value CauseReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_CauseReg_BD:((regstate),(register_value),(CauseReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_BD : CauseReg -> mword ty1 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_BD:CauseReg ->(1)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_CauseReg_CE : CauseReg -> mword ty2*)

val _ = Define `
 ((get_CauseReg_CE:CauseReg ->(2)words$word) v=  ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 29 : int):ii) (( 28 : int):ii)  :  2 words$word)))`;


(*val _set_CauseReg_CE : register_ref regstate register_value CauseReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_CauseReg_CE:((regstate),(register_value),(CauseReg))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 29 : int):ii) (( 28 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_CE : CauseReg -> mword ty2 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_CE:CauseReg ->(2)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 29 : int):ii) (( 28 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word))|>)))`;


(*val _get_CauseReg_IV : CauseReg -> mword ty1*)

val _ = Define `
 ((get_CauseReg_IV:CauseReg ->(1)words$word) v=  ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 23 : int):ii) (( 23 : int):ii)  :  1 words$word)))`;


(*val _set_CauseReg_IV : register_ref regstate register_value CauseReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_CauseReg_IV:((regstate),(register_value),(CauseReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 23 : int):ii) (( 23 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_IV : CauseReg -> mword ty1 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_IV:CauseReg ->(1)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 23 : int):ii) (( 23 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_CauseReg_WP : CauseReg -> mword ty1*)

val _ = Define `
 ((get_CauseReg_WP:CauseReg ->(1)words$word) v=  ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_CauseReg_WP : register_ref regstate register_value CauseReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_CauseReg_WP:((regstate),(register_value),(CauseReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_WP : CauseReg -> mword ty1 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_WP:CauseReg ->(1)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_CauseReg_IP : CauseReg -> mword ty8*)

val _ = Define `
 ((get_CauseReg_IP:CauseReg ->(8)words$word) v=  ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))`;


(*val _set_CauseReg_IP : register_ref regstate register_value CauseReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_CauseReg_IP:((regstate),(register_value),(CauseReg))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 15 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_IP : CauseReg -> mword ty8 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_IP:CauseReg ->(8)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 15 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  32 words$word))|>)))`;


(*val _get_CauseReg_ExcCode : CauseReg -> mword ty5*)

val _ = Define `
 ((get_CauseReg_ExcCode:CauseReg ->(5)words$word) v=
    ((subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)))`;


(*val _set_CauseReg_ExcCode : register_ref regstate register_value CauseReg -> mword ty5 -> M unit*)

val _ = Define `
 ((set_CauseReg_ExcCode:((regstate),(register_value),(CauseReg))register_ref ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       CauseReg_CauseReg_chunk_0 :=
         ((update_subrange_vec_dec r.CauseReg_CauseReg_chunk_0 (( 6 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_CauseReg_ExcCode : CauseReg -> mword ty5 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_ExcCode:CauseReg ->(5)words$word -> CauseReg) v x=
    ((v with<|
     CauseReg_CauseReg_chunk_0 :=
       ((update_subrange_vec_dec v.CauseReg_CauseReg_chunk_0 (( 6 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word))|>)))`;


(*val undefined_TLBEntryLoReg : unit -> M TLBEntryLoReg*)

val _ = Define `
 ((undefined_TLBEntryLoReg:unit ->(regstate)sail2_state_monad$sequential_state ->(((TLBEntryLoReg),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   sail2_state_monad$returnS (<| TLBEntryLoReg_TLBEntryLoReg_chunk_0 := w__0 |>))))`;


(*val Mk_TLBEntryLoReg : mword ty64 -> TLBEntryLoReg*)

val _ = Define `
 ((Mk_TLBEntryLoReg:(64)words$word -> TLBEntryLoReg) v=
    (<| TLBEntryLoReg_TLBEntryLoReg_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_TLBEntryLoReg_bits : TLBEntryLoReg -> mword ty64*)

val _ = Define `
 ((get_TLBEntryLoReg_bits:TLBEntryLoReg ->(64)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_TLBEntryLoReg_bits : register_ref regstate register_value TLBEntryLoReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_bits:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_bits : TLBEntryLoReg -> mword ty64 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_bits:TLBEntryLoReg ->(64)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_CapS : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_CapS:TLBEntryLoReg ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_CapS : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_CapS:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_CapS : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_CapS:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_CapL : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_CapL:TLBEntryLoReg ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 62 : int):ii) (( 62 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_CapL : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_CapL:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 62 : int):ii) (( 62 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_CapL : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_CapL:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 62 : int):ii) (( 62 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_PFN : TLBEntryLoReg -> mword ty24*)

val _ = Define `
 ((get_TLBEntryLoReg_PFN:TLBEntryLoReg ->(24)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 29 : int):ii) (( 6 : int):ii)  :  24 words$word)))`;


(*val _set_TLBEntryLoReg_PFN : register_ref regstate register_value TLBEntryLoReg -> mword ty24 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_PFN:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(24)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 29 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_PFN : TLBEntryLoReg -> mword ty24 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_PFN:TLBEntryLoReg ->(24)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 29 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_C : TLBEntryLoReg -> mword ty3*)

val _ = Define `
 ((get_TLBEntryLoReg_C:TLBEntryLoReg ->(3)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)))`;


(*val _set_TLBEntryLoReg_C : register_ref regstate register_value TLBEntryLoReg -> mword ty3 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_C:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 5 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_C : TLBEntryLoReg -> mword ty3 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_C:TLBEntryLoReg ->(3)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 5 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_D : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_D:TLBEntryLoReg ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_D : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_D:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_D : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_D:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_V : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_V:TLBEntryLoReg ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_V : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_V:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_V : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_V:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryLoReg_G : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_G:TLBEntryLoReg ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_G : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_G:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryLoReg_G : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_G:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) v x=
    ((v with<|
     TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryLoReg_TLBEntryLoReg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val undefined_TLBEntryHiReg : unit -> M TLBEntryHiReg*)

val _ = Define `
 ((undefined_TLBEntryHiReg:unit ->(regstate)sail2_state_monad$sequential_state ->(((TLBEntryHiReg),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   sail2_state_monad$returnS (<| TLBEntryHiReg_TLBEntryHiReg_chunk_0 := w__0 |>))))`;


(*val Mk_TLBEntryHiReg : mword ty64 -> TLBEntryHiReg*)

val _ = Define `
 ((Mk_TLBEntryHiReg:(64)words$word -> TLBEntryHiReg) v=
    (<| TLBEntryHiReg_TLBEntryHiReg_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_TLBEntryHiReg_bits : TLBEntryHiReg -> mword ty64*)

val _ = Define `
 ((get_TLBEntryHiReg_bits:TLBEntryHiReg ->(64)words$word) v=
    ((subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_TLBEntryHiReg_bits : register_ref regstate register_value TLBEntryHiReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_bits:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryHiReg_bits : TLBEntryHiReg -> mword ty64 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_bits:TLBEntryHiReg ->(64)words$word -> TLBEntryHiReg) v x=
    ((v with<|
     TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryHiReg_R : TLBEntryHiReg -> mword ty2*)

val _ = Define `
 ((get_TLBEntryHiReg_R:TLBEntryHiReg ->(2)words$word) v=
    ((subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)))`;


(*val _set_TLBEntryHiReg_R : register_ref regstate register_value TLBEntryHiReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_R:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 63 : int):ii) (( 62 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryHiReg_R : TLBEntryHiReg -> mword ty2 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_R:TLBEntryHiReg ->(2)words$word -> TLBEntryHiReg) v x=
    ((v with<|
     TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 63 : int):ii) (( 62 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryHiReg_VPN2 : TLBEntryHiReg -> mword ty27*)

val _ = Define `
 ((get_TLBEntryHiReg_VPN2:TLBEntryHiReg ->(27)words$word) v=
    ((subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word)))`;


(*val _set_TLBEntryHiReg_VPN2 : register_ref regstate register_value TLBEntryHiReg -> mword ty27 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_VPN2:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(27)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 39 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryHiReg_VPN2 : TLBEntryHiReg -> mword ty27 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_VPN2:TLBEntryHiReg ->(27)words$word -> TLBEntryHiReg) v x=
    ((v with<|
     TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 39 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntryHiReg_ASID : TLBEntryHiReg -> mword ty8*)

val _ = Define `
 ((get_TLBEntryHiReg_ASID:TLBEntryHiReg ->(8)words$word) v=
    ((subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_TLBEntryHiReg_ASID : register_ref regstate register_value TLBEntryHiReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_ASID:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntryHiReg_ASID : TLBEntryHiReg -> mword ty8 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_ASID:TLBEntryHiReg ->(8)words$word -> TLBEntryHiReg) v x=
    ((v with<|
     TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntryHiReg_TLBEntryHiReg_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word))|>)))`;


(*val undefined_ContextReg : unit -> M ContextReg*)

val _ = Define `
 ((undefined_ContextReg:unit ->(regstate)sail2_state_monad$sequential_state ->(((ContextReg),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   sail2_state_monad$returnS (<| ContextReg_ContextReg_chunk_0 := w__0 |>))))`;


(*val Mk_ContextReg : mword ty64 -> ContextReg*)

val _ = Define `
 ((Mk_ContextReg:(64)words$word -> ContextReg) v=
    (<| ContextReg_ContextReg_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_ContextReg_bits : ContextReg -> mword ty64*)

val _ = Define `
 ((get_ContextReg_bits:ContextReg ->(64)words$word) v=
    ((subrange_vec_dec v.ContextReg_ContextReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_ContextReg_bits : register_ref regstate register_value ContextReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_ContextReg_bits:((regstate),(register_value),(ContextReg))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       ContextReg_ContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.ContextReg_ContextReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_ContextReg_bits : ContextReg -> mword ty64 -> ContextReg*)

val _ = Define `
 ((update_ContextReg_bits:ContextReg ->(64)words$word -> ContextReg) v x=
    ((v with<|
     ContextReg_ContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.ContextReg_ContextReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_ContextReg_PTEBase : ContextReg -> mword ty41*)

val _ = Define `
 ((get_ContextReg_PTEBase:ContextReg ->(41)words$word) v=
    ((subrange_vec_dec v.ContextReg_ContextReg_chunk_0 (( 63 : int):ii) (( 23 : int):ii)  :  41 words$word)))`;


(*val _set_ContextReg_PTEBase : register_ref regstate register_value ContextReg -> mword ty41 -> M unit*)

val _ = Define `
 ((set_ContextReg_PTEBase:((regstate),(register_value),(ContextReg))register_ref ->(41)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       ContextReg_ContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.ContextReg_ContextReg_chunk_0 (( 63 : int):ii) (( 23 : int):ii)
             ((subrange_vec_dec v (( 40 : int):ii) (( 0 : int):ii)  :  41 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_ContextReg_PTEBase : ContextReg -> mword ty41 -> ContextReg*)

val _ = Define `
 ((update_ContextReg_PTEBase:ContextReg ->(41)words$word -> ContextReg) v x=
    ((v with<|
     ContextReg_ContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.ContextReg_ContextReg_chunk_0 (( 63 : int):ii) (( 23 : int):ii)
           ((subrange_vec_dec x (( 40 : int):ii) (( 0 : int):ii)  :  41 words$word))
          :  64 words$word))|>)))`;


(*val _get_ContextReg_BadVPN2 : ContextReg -> mword ty19*)

val _ = Define `
 ((get_ContextReg_BadVPN2:ContextReg ->(19)words$word) v=
    ((subrange_vec_dec v.ContextReg_ContextReg_chunk_0 (( 22 : int):ii) (( 4 : int):ii)  :  19 words$word)))`;


(*val _set_ContextReg_BadVPN2 : register_ref regstate register_value ContextReg -> mword ty19 -> M unit*)

val _ = Define `
 ((set_ContextReg_BadVPN2:((regstate),(register_value),(ContextReg))register_ref ->(19)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       ContextReg_ContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.ContextReg_ContextReg_chunk_0 (( 22 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 18 : int):ii) (( 0 : int):ii)  :  19 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_ContextReg_BadVPN2 : ContextReg -> mword ty19 -> ContextReg*)

val _ = Define `
 ((update_ContextReg_BadVPN2:ContextReg ->(19)words$word -> ContextReg) v x=
    ((v with<|
     ContextReg_ContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.ContextReg_ContextReg_chunk_0 (( 22 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 18 : int):ii) (( 0 : int):ii)  :  19 words$word))
          :  64 words$word))|>)))`;


(*val undefined_XContextReg : unit -> M XContextReg*)

val _ = Define `
 ((undefined_XContextReg:unit ->(regstate)sail2_state_monad$sequential_state ->(((XContextReg),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   sail2_state_monad$returnS (<| XContextReg_XContextReg_chunk_0 := w__0 |>))))`;


(*val Mk_XContextReg : mword ty64 -> XContextReg*)

val _ = Define `
 ((Mk_XContextReg:(64)words$word -> XContextReg) v=
    (<| XContextReg_XContextReg_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_XContextReg_bits : XContextReg -> mword ty64*)

val _ = Define `
 ((get_XContextReg_bits:XContextReg ->(64)words$word) v=
    ((subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_XContextReg_bits : register_ref regstate register_value XContextReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_XContextReg_bits:((regstate),(register_value),(XContextReg))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       XContextReg_XContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.XContextReg_XContextReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_XContextReg_bits : XContextReg -> mword ty64 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_bits:XContextReg ->(64)words$word -> XContextReg) v x=
    ((v with<|
     XContextReg_XContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_XContextReg_XPTEBase : XContextReg -> mword ty31*)

val _ = Define `
 ((get_XContextReg_XPTEBase:XContextReg ->(31)words$word) v=
    ((subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 63 : int):ii) (( 33 : int):ii)  :  31 words$word)))`;


(*val _set_XContextReg_XPTEBase : register_ref regstate register_value XContextReg -> mword ty31 -> M unit*)

val _ = Define `
 ((set_XContextReg_XPTEBase:((regstate),(register_value),(XContextReg))register_ref ->(31)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       XContextReg_XContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.XContextReg_XContextReg_chunk_0 (( 63 : int):ii) (( 33 : int):ii)
             ((subrange_vec_dec v (( 30 : int):ii) (( 0 : int):ii)  :  31 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_XContextReg_XPTEBase : XContextReg -> mword ty31 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_XPTEBase:XContextReg ->(31)words$word -> XContextReg) v x=
    ((v with<|
     XContextReg_XContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 63 : int):ii) (( 33 : int):ii)
           ((subrange_vec_dec x (( 30 : int):ii) (( 0 : int):ii)  :  31 words$word))
          :  64 words$word))|>)))`;


(*val _get_XContextReg_XR : XContextReg -> mword ty2*)

val _ = Define `
 ((get_XContextReg_XR:XContextReg ->(2)words$word) v=
    ((subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 32 : int):ii) (( 31 : int):ii)  :  2 words$word)))`;


(*val _set_XContextReg_XR : register_ref regstate register_value XContextReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_XContextReg_XR:((regstate),(register_value),(XContextReg))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       XContextReg_XContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.XContextReg_XContextReg_chunk_0 (( 32 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_XContextReg_XR : XContextReg -> mword ty2 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_XR:XContextReg ->(2)words$word -> XContextReg) v x=
    ((v with<|
     XContextReg_XContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 32 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _get_XContextReg_XBadVPN2 : XContextReg -> mword ty27*)

val _ = Define `
 ((get_XContextReg_XBadVPN2:XContextReg ->(27)words$word) v=
    ((subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 30 : int):ii) (( 4 : int):ii)  :  27 words$word)))`;


(*val _set_XContextReg_XBadVPN2 : register_ref regstate register_value XContextReg -> mword ty27 -> M unit*)

val _ = Define `
 ((set_XContextReg_XBadVPN2:((regstate),(register_value),(XContextReg))register_ref ->(27)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       XContextReg_XContextReg_chunk_0 :=
         ((update_subrange_vec_dec r.XContextReg_XContextReg_chunk_0 (( 30 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_XContextReg_XBadVPN2 : XContextReg -> mword ty27 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_XBadVPN2:XContextReg ->(27)words$word -> XContextReg) v x=
    ((v with<|
     XContextReg_XContextReg_chunk_0 :=
       ((update_subrange_vec_dec v.XContextReg_XContextReg_chunk_0 (( 30 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((TLBNumEntries:int)=  ((( 64 : int):ii)))`;


val _ = Define `
((TLBIndexMax:(6)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word)))`;


(*val MAX : integer -> integer*)

val _ = Define `
 ((MAX0:int -> int) n=  (((pow2 n)) - (( 1 : int):ii)))`;


val _ = Define `
 ((MAX_U64:int)=  (MAX0 (( 64 : int):ii)))`;


val _ = Define `
 ((MAX_VA:int)=  (MAX0 (( 40 : int):ii)))`;


val _ = Define `
 ((MAX_PA:int)=  (MAX0 (( 36 : int):ii)))`;


(*val undefined_TLBEntry : unit -> M TLBEntry*)

val _ = Define `
 ((undefined_TLBEntry:unit ->(regstate)sail2_state_monad$sequential_state ->(((TLBEntry),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 53 : int):ii)  : ( 53 words$word) M) (\ (w__0 :  53 words$word) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS (<| TLBEntry_TLBEntry_chunk_1 := w__0; 
              TLBEntry_TLBEntry_chunk_0 := w__1 |>)))))`;


(*val Mk_TLBEntry : mword ty117 -> TLBEntry*)

val _ = Define `
 ((Mk_TLBEntry:(117)words$word -> TLBEntry) v=
    (<| TLBEntry_TLBEntry_chunk_1 := ((subrange_vec_dec v (( 116 : int):ii) (( 64 : int):ii)  :  53 words$word)); 
      TLBEntry_TLBEntry_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_TLBEntry_bits : TLBEntry -> mword ty117*)

val _ = Define `
 ((get_TLBEntry_bits:TLBEntry ->(117)words$word) v=
    ((concat_vec ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 52 : int):ii) (( 0 : int):ii)  :  53 words$word))
      ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
     :  117 words$word)))`;


(*val _set_TLBEntry_bits : register_ref regstate register_value TLBEntry -> mword ty117 -> M unit*)

val _ = Define `
 ((set_TLBEntry_bits:((regstate),(register_value),(TLBEntry))register_ref ->(117)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_1 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_1 (( 52 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 116 : int):ii) (( 64 : int):ii)  :  53 words$word))
            :  53 words$word))|>)) in
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_bits : TLBEntry -> mword ty117 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_bits:TLBEntry ->(117)words$word -> TLBEntry) v x=
    (let v =
     ((v with<|
       TLBEntry_TLBEntry_chunk_1 :=
         ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 52 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec x (( 116 : int):ii) (( 64 : int):ii)  :  53 words$word))
            :  53 words$word))|>)) in
   (v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_pagemask : TLBEntry -> mword ty16*)

val _ = Define `
 ((get_TLBEntry_pagemask:TLBEntry ->(16)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 52 : int):ii) (( 37 : int):ii)  :  16 words$word)))`;


(*val _set_TLBEntry_pagemask : register_ref regstate register_value TLBEntry -> mword ty16 -> M unit*)

val _ = Define `
 ((set_TLBEntry_pagemask:((regstate),(register_value),(TLBEntry))register_ref ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_1 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_1 (( 52 : int):ii) (( 37 : int):ii)
             ((subrange_vec_dec v (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
            :  53 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_pagemask : TLBEntry -> mword ty16 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pagemask:TLBEntry ->(16)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_1 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 52 : int):ii) (( 37 : int):ii)
           ((subrange_vec_dec x (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          :  53 words$word))|>)))`;


(*val _get_TLBEntry_r : TLBEntry -> mword ty2*)

val _ = Define `
 ((get_TLBEntry_r:TLBEntry ->(2)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 36 : int):ii) (( 35 : int):ii)  :  2 words$word)))`;


(*val _set_TLBEntry_r : register_ref regstate register_value TLBEntry -> mword ty2 -> M unit*)

val _ = Define `
 ((set_TLBEntry_r:((regstate),(register_value),(TLBEntry))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_1 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_1 (( 36 : int):ii) (( 35 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  53 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_r : TLBEntry -> mword ty2 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_r:TLBEntry ->(2)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_1 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 36 : int):ii) (( 35 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  53 words$word))|>)))`;


(*val _get_TLBEntry_vpn2 : TLBEntry -> mword ty27*)

val _ = Define `
 ((get_TLBEntry_vpn2:TLBEntry ->(27)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 34 : int):ii) (( 8 : int):ii)  :  27 words$word)))`;


(*val _set_TLBEntry_vpn2 : register_ref regstate register_value TLBEntry -> mword ty27 -> M unit*)

val _ = Define `
 ((set_TLBEntry_vpn2:((regstate),(register_value),(TLBEntry))register_ref ->(27)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_1 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_1 (( 34 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
            :  53 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_vpn2 : TLBEntry -> mword ty27 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_vpn2:TLBEntry ->(27)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_1 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 34 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
          :  53 words$word))|>)))`;


(*val _get_TLBEntry_asid : TLBEntry -> mword ty8*)

val _ = Define `
 ((get_TLBEntry_asid:TLBEntry ->(8)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_TLBEntry_asid : register_ref regstate register_value TLBEntry -> mword ty8 -> M unit*)

val _ = Define `
 ((set_TLBEntry_asid:((regstate),(register_value),(TLBEntry))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_1 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_1 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  53 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_asid : TLBEntry -> mword ty8 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_asid:TLBEntry ->(8)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_1 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_1 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  53 words$word))|>)))`;


(*val _get_TLBEntry_g : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_g:TLBEntry ->(1)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_g : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_g:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_g : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_g:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_valid : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_valid:TLBEntry ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 62 : int):ii) (( 62 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_valid : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_valid:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 62 : int):ii) (( 62 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_valid : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_valid:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 62 : int):ii) (( 62 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_caps1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_caps1:TLBEntry ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 61 : int):ii) (( 61 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_caps1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_caps1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 61 : int):ii) (( 61 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_caps1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_caps1:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 61 : int):ii) (( 61 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_capl1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_capl1:TLBEntry ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 60 : int):ii) (( 60 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_capl1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_capl1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 60 : int):ii) (( 60 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_capl1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_capl1:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 60 : int):ii) (( 60 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_pfn1 : TLBEntry -> mword ty24*)

val _ = Define `
 ((get_TLBEntry_pfn1:TLBEntry ->(24)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 59 : int):ii) (( 36 : int):ii)  :  24 words$word)))`;


(*val _set_TLBEntry_pfn1 : register_ref regstate register_value TLBEntry -> mword ty24 -> M unit*)

val _ = Define `
 ((set_TLBEntry_pfn1:((regstate),(register_value),(TLBEntry))register_ref ->(24)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 59 : int):ii) (( 36 : int):ii)
             ((subrange_vec_dec v (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_pfn1 : TLBEntry -> mword ty24 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pfn1:TLBEntry ->(24)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 59 : int):ii) (( 36 : int):ii)
           ((subrange_vec_dec x (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_c1 : TLBEntry -> mword ty3*)

val _ = Define `
 ((get_TLBEntry_c1:TLBEntry ->(3)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 35 : int):ii) (( 33 : int):ii)  :  3 words$word)))`;


(*val _set_TLBEntry_c1 : register_ref regstate register_value TLBEntry -> mword ty3 -> M unit*)

val _ = Define `
 ((set_TLBEntry_c1:((regstate),(register_value),(TLBEntry))register_ref ->(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 35 : int):ii) (( 33 : int):ii)
             ((subrange_vec_dec v (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_c1 : TLBEntry -> mword ty3 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_c1:TLBEntry ->(3)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 35 : int):ii) (( 33 : int):ii)
           ((subrange_vec_dec x (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_d1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_d1:TLBEntry ->(1)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 32 : int):ii) (( 32 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_d1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_d1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 32 : int):ii) (( 32 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_d1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_d1:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 32 : int):ii) (( 32 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_v1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_v1:TLBEntry ->(1)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_v1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_v1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_v1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_v1:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_caps0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_caps0:TLBEntry ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 30 : int):ii) (( 30 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_caps0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_caps0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 30 : int):ii) (( 30 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_caps0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_caps0:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 30 : int):ii) (( 30 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_capl0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_capl0:TLBEntry ->(1)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 29 : int):ii) (( 29 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_capl0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_capl0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 29 : int):ii) (( 29 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_capl0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_capl0:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 29 : int):ii) (( 29 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_pfn0 : TLBEntry -> mword ty24*)

val _ = Define `
 ((get_TLBEntry_pfn0:TLBEntry ->(24)words$word) v=
    ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 28 : int):ii) (( 5 : int):ii)  :  24 words$word)))`;


(*val _set_TLBEntry_pfn0 : register_ref regstate register_value TLBEntry -> mword ty24 -> M unit*)

val _ = Define `
 ((set_TLBEntry_pfn0:((regstate),(register_value),(TLBEntry))register_ref ->(24)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 28 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_pfn0 : TLBEntry -> mword ty24 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pfn0:TLBEntry ->(24)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 28 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_c0 : TLBEntry -> mword ty3*)

val _ = Define `
 ((get_TLBEntry_c0:TLBEntry ->(3)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)))`;


(*val _set_TLBEntry_c0 : register_ref regstate register_value TLBEntry -> mword ty3 -> M unit*)

val _ = Define `
 ((set_TLBEntry_c0:((regstate),(register_value),(TLBEntry))register_ref ->(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 4 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_c0 : TLBEntry -> mword ty3 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_c0:TLBEntry ->(3)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 4 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_d0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_d0:TLBEntry ->(1)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_d0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_d0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_d0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_d0:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_TLBEntry_v0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_v0:TLBEntry ->(1)words$word) v=  ((subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_v0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_v0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       TLBEntry_TLBEntry_chunk_0 :=
         ((update_subrange_vec_dec r.TLBEntry_TLBEntry_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_TLBEntry_v0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_v0:TLBEntry ->(1)words$word -> TLBEntry) v x=
    ((v with<|
     TLBEntry_TLBEntry_chunk_0 :=
       ((update_subrange_vec_dec v.TLBEntry_TLBEntry_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
((TLBEntries:(((regstate),(register_value),(TLBEntry))register_ref)list)=
   ([TLBEntry63_ref;TLBEntry62_ref;TLBEntry61_ref;TLBEntry60_ref;TLBEntry59_ref;TLBEntry58_ref;
   TLBEntry57_ref;TLBEntry56_ref;TLBEntry55_ref;TLBEntry54_ref;TLBEntry53_ref;TLBEntry52_ref;
   TLBEntry51_ref;TLBEntry50_ref;TLBEntry49_ref;TLBEntry48_ref;TLBEntry47_ref;TLBEntry46_ref;
   TLBEntry45_ref;TLBEntry44_ref;TLBEntry43_ref;TLBEntry42_ref;TLBEntry41_ref;TLBEntry40_ref;
   TLBEntry39_ref;TLBEntry38_ref;TLBEntry37_ref;TLBEntry36_ref;TLBEntry35_ref;TLBEntry34_ref;
   TLBEntry33_ref;TLBEntry32_ref;TLBEntry31_ref;TLBEntry30_ref;TLBEntry29_ref;TLBEntry28_ref;
   TLBEntry27_ref;TLBEntry26_ref;TLBEntry25_ref;TLBEntry24_ref;TLBEntry23_ref;TLBEntry22_ref;
   TLBEntry21_ref;TLBEntry20_ref;TLBEntry19_ref;TLBEntry18_ref;TLBEntry17_ref;TLBEntry16_ref;
   TLBEntry15_ref;TLBEntry14_ref;TLBEntry13_ref;TLBEntry12_ref;TLBEntry11_ref;TLBEntry10_ref;
   TLBEntry09_ref;TLBEntry08_ref;TLBEntry07_ref;TLBEntry06_ref;TLBEntry05_ref;TLBEntry04_ref;
   TLBEntry03_ref;TLBEntry02_ref;TLBEntry01_ref;TLBEntry00_ref]))`;


(*val undefined_StatusReg : unit -> M StatusReg*)

val _ = Define `
 ((undefined_StatusReg:unit ->(regstate)sail2_state_monad$sequential_state ->(((StatusReg),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   sail2_state_monad$returnS (<| StatusReg_StatusReg_chunk_0 := w__0 |>))))`;


(*val Mk_StatusReg : mword ty32 -> StatusReg*)

val _ = Define `
 ((Mk_StatusReg:(32)words$word -> StatusReg) v=
    (<| StatusReg_StatusReg_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_StatusReg_bits:StatusReg ->(32)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_StatusReg_bits:((regstate),(register_value),(StatusReg))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_StatusReg_bits:StatusReg ->(32)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_CU : StatusReg -> mword ty4*)

val _ = Define `
 ((get_StatusReg_CU:StatusReg ->(4)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)))`;


(*val _set_StatusReg_CU : register_ref regstate register_value StatusReg -> mword ty4 -> M unit*)

val _ = Define `
 ((set_StatusReg_CU:((regstate),(register_value),(StatusReg))register_ref ->(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 31 : int):ii) (( 28 : int):ii)
             ((subrange_vec_dec v (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_CU : StatusReg -> mword ty4 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_CU:StatusReg ->(4)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 31 : int):ii) (( 28 : int):ii)
           ((subrange_vec_dec x (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_BEV : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_BEV:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_BEV : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_BEV:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_BEV : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_BEV:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_IM : StatusReg -> mword ty8*)

val _ = Define `
 ((get_StatusReg_IM:StatusReg ->(8)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))`;


(*val _set_StatusReg_IM : register_ref regstate register_value StatusReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_StatusReg_IM:((regstate),(register_value),(StatusReg))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 15 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_IM : StatusReg -> mword ty8 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_IM:StatusReg ->(8)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 15 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_KX : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_KX:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_KX : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_KX:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_KX : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_KX:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_SX : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_SX:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_SX : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_SX:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_SX : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_SX:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_UX : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_UX:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_UX : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_UX:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_UX : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_UX:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_KSU : StatusReg -> mword ty2*)

val _ = Define `
 ((get_StatusReg_KSU:StatusReg ->(2)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)))`;


(*val _set_StatusReg_KSU : register_ref regstate register_value StatusReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_StatusReg_KSU:((regstate),(register_value),(StatusReg))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 4 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_KSU : StatusReg -> mword ty2 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_KSU:StatusReg ->(2)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 4 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_ERL : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_ERL:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_ERL : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_ERL:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_ERL : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_ERL:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_EXL : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_EXL:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_EXL : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_EXL:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_EXL : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_EXL:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_StatusReg_IE : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_IE:StatusReg ->(1)words$word) v=
    ((subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_IE : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_IE:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       StatusReg_StatusReg_chunk_0 :=
         ((update_subrange_vec_dec r.StatusReg_StatusReg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_StatusReg_IE : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_IE:StatusReg ->(1)words$word -> StatusReg) v x=
    ((v with<|
     StatusReg_StatusReg_chunk_0 :=
       ((update_subrange_vec_dec v.StatusReg_StatusReg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val execute_branch : mword ty64 -> M unit*)

val _ = Define `
 ((execute_branch:(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) pc=  (sail2_state_monad$seqS
   (sail2_state_monad$write_regS delayedPC_ref pc) (sail2_state_monad$write_regS branchPending_ref (vec_of_bits [B1]  :  1 words$word))))`;


(*val NotWordVal : mword ty64 -> bool*)

val _ = Define `
 ((NotWordVal:(64)words$word -> bool) word=
    (((replicate_bits ((cast_unit_vec0 ((access_vec_dec word (( 31 : int):ii)))  :  1 words$word)) (( 32 : int):ii)
        :  32 words$word)) <> ((subrange_vec_dec word (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))))`;


(*val rGPR : mword ty5 -> M (mword ty64)*)

val _ = Define `
 ((rGPR:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) idx=
    (let i = (lem$w2ui idx) in
   if (((i = (( 0 : int):ii)))) then
     sail2_state_monad$returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                          B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                          B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
              :  64 words$word)
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS GPR_ref) (\ (w__0 : ( 64 bits) list) . 
     sail2_state_monad$returnS ((access_list_dec w__0 i  :  64 words$word)))))`;


(*val wGPR : mword ty5 -> mword ty64 -> M unit*)

val _ = Define `
 ((wGPR:(5)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) idx v=
    (let i = (lem$w2ui idx) in
   if (((i <> (( 0 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS GPR_ref) (\ (w__0 : ( 64 words$word) list) . 
     sail2_state_monad$write_regS GPR_ref ((update_list_dec w__0 i v  : ( 64 words$word) list)))
   else sail2_state_monad$returnS () ))`;
















(*val Exception_of_num : integer -> Exception*)

val _ = Define `
 ((Exception_of_num:int -> Exception) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Interrupt
   else if (((p0_ = (( 1 : int):ii)))) then TLBMod
   else if (((p0_ = (( 2 : int):ii)))) then TLBL
   else if (((p0_ = (( 3 : int):ii)))) then TLBS
   else if (((p0_ = (( 4 : int):ii)))) then AdEL
   else if (((p0_ = (( 5 : int):ii)))) then AdES
   else if (((p0_ = (( 6 : int):ii)))) then Sys
   else if (((p0_ = (( 7 : int):ii)))) then Bp
   else if (((p0_ = (( 8 : int):ii)))) then ResI
   else if (((p0_ = (( 9 : int):ii)))) then CpU
   else if (((p0_ = (( 10 : int):ii)))) then Ov
   else if (((p0_ = (( 11 : int):ii)))) then Tr
   else if (((p0_ = (( 12 : int):ii)))) then C2E
   else if (((p0_ = (( 13 : int):ii)))) then C2Trap
   else if (((p0_ = (( 14 : int):ii)))) then XTLBRefillL
   else if (((p0_ = (( 15 : int):ii)))) then XTLBRefillS
   else if (((p0_ = (( 16 : int):ii)))) then XTLBInvL
   else if (((p0_ = (( 17 : int):ii)))) then XTLBInvS
   else MCheck))`;


(*val num_of_Exception : Exception -> integer*)

val _ = Define `
 ((num_of_Exception:Exception -> int) arg_=
    ((case arg_ of
     Interrupt => (( 0 : int):ii)
   | TLBMod => (( 1 : int):ii)
   | TLBL => (( 2 : int):ii)
   | TLBS => (( 3 : int):ii)
   | AdEL => (( 4 : int):ii)
   | AdES => (( 5 : int):ii)
   | Sys => (( 6 : int):ii)
   | Bp => (( 7 : int):ii)
   | ResI => (( 8 : int):ii)
   | CpU => (( 9 : int):ii)
   | Ov => (( 10 : int):ii)
   | Tr => (( 11 : int):ii)
   | C2E => (( 12 : int):ii)
   | C2Trap => (( 13 : int):ii)
   | XTLBRefillL => (( 14 : int):ii)
   | XTLBRefillS => (( 15 : int):ii)
   | XTLBInvL => (( 16 : int):ii)
   | XTLBInvS => (( 17 : int):ii)
   | MCheck => (( 18 : int):ii)
   )))`;


(*val undefined_Exception : unit -> M Exception*)

val _ = Define `
 ((undefined_Exception:unit ->(regstate)sail2_state_monad$sequential_state ->(((Exception),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$internal_pickS
     [Interrupt;TLBMod;TLBL;TLBS;AdEL;AdES;Sys;Bp;ResI;CpU;Ov;Tr;C2E;C2Trap;XTLBRefillL;XTLBRefillS;XTLBInvL;XTLBInvS;MCheck]))`;


(*val ExceptionCode : Exception -> mword ty5*)

val _ = Define `
 ((ExceptionCode:Exception ->(5)words$word) ex=
    (let (x : 8 bits) =
     ((case ex of
       Interrupt => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
     | TLBMod => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)
     | TLBL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | TLBS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | AdEL => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0]  :  8 words$word)
     | AdES => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1]  :  8 words$word)
     | Sys => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0]  :  8 words$word)
     | Bp => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B1]  :  8 words$word)
     | ResI => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B0]  :  8 words$word)
     | CpU => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B1]  :  8 words$word)
     | Ov => (vec_of_bits [B0;B0;B0;B0;B1;B1;B0;B0]  :  8 words$word)
     | Tr => (vec_of_bits [B0;B0;B0;B0;B1;B1;B0;B1]  :  8 words$word)
     | C2E => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
     | C2Trap => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
     | XTLBRefillL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | XTLBRefillS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | XTLBInvL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | XTLBInvS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | MCheck => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0]  :  8 words$word)
     )) in
   (subrange_vec_dec x (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)))`;


(*val SignalExceptionMIPS : forall 'o. Exception -> mword ty64 -> M 'o*)

val _ = Define `
 ((SignalExceptionMIPS:Exception ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(('o,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) ex kccBase=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (if ((~ ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word)))))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS inBranchDelay_ref  : ( 1 words$word) M) (\ (w__1 : 1 bits) . 
      if ((bit_to_bool ((access_vec_dec w__1 (( 0 : int):ii))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) .  sail2_state_monad$seqS
        (sail2_state_monad$write_regS CP0EPC_ref ((sub_vec_int w__2 (( 4 : int):ii)  :  64 words$word)))
        (set_CauseReg_BD CP0Cause_ref (vec_of_bits [B1]  :  1 words$word)))
      else sail2_state_monad$bindS
        (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__3 : 64 bits) .  sail2_state_monad$seqS
        (sail2_state_monad$write_regS CP0EPC_ref w__3) (set_CauseReg_BD CP0Cause_ref (vec_of_bits [B0]  :  1 words$word))))
    else sail2_state_monad$returnS () )
   (sail2_state_monad$read_regS CP0Status_ref)) (\ (w__4 : StatusReg) . 
   let vectorOffset =
     (if ((bits_to_bool ((get_StatusReg_EXL w__4  :  1 words$word)))) then
       (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else if ((((((ex = XTLBRefillL))) \/ (((ex = XTLBRefillS)))))) then
       (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else if (((ex = C2Trap))) then (vec_of_bits [B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Status_ref) (\ (w__5 : StatusReg) . 
   let (vectorBase : 64 bits) =
     (if ((bits_to_bool ((get_StatusReg_BEV w__5  :  1 words$word)))) then
       (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)
     else
       (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)) in sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     nextPC_ref
     ((sub_vec
         ((add_vec vectorBase ((mips_sign_extend (( 64 : int):ii) vectorOffset  :  64 words$word))  :  64 words$word))
         kccBase
        :  64 words$word)))
   (set_CauseReg_ExcCode CP0Cause_ref ((ExceptionCode ex  :  5 words$word))))
   (set_StatusReg_EXL CP0Status_ref (vec_of_bits [B1]  :  1 words$word))) (sail2_state_monad$throwS (ISAException () )))))))`;


(*val SignalException : forall 'o. Exception -> M 'o*)

(*val SignalExceptionBadAddr : forall 'o. Exception -> mword ty64 -> M 'o*)

val _ = Define `
 ((SignalException:Exception ->(regstate)sail2_state_monad$sequential_state ->(('o,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) ex=
    (SignalExceptionMIPS ex
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
       :  64 words$word)))`;


val _ = Define `
 ((SignalExceptionBadAddr:Exception ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(('o,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) ex badAddr=  (sail2_state_monad$seqS (sail2_state_monad$write_regS CP0BadVAddr_ref badAddr) (SignalException ex)))`;


(*val SignalExceptionTLB : forall 'o. Exception -> mword ty64 -> M 'o*)

val _ = Define `
 ((SignalExceptionTLB:Exception ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(('o,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) ex badAddr=  (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0BadVAddr_ref badAddr)
   (set_ContextReg_BadVPN2 TLBContext_ref ((subrange_vec_dec badAddr (( 31 : int):ii) (( 13 : int):ii)  :  19 words$word))))
   (set_XContextReg_XBadVPN2 TLBXContext_ref
     ((subrange_vec_dec badAddr (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word))))
   (set_XContextReg_XR TLBXContext_ref ((subrange_vec_dec badAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word))))
   (set_TLBEntryHiReg_R TLBEntryHi_ref ((subrange_vec_dec badAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word))))
   (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref ((subrange_vec_dec badAddr (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word))))
   (SignalException ex)))`;


(*val MemAccessType_of_num : integer -> MemAccessType*)

val _ = Define `
 ((MemAccessType_of_num:int -> MemAccessType) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Instruction
   else if (((p0_ = (( 1 : int):ii)))) then LoadData
   else StoreData))`;


(*val num_of_MemAccessType : MemAccessType -> integer*)

val _ = Define `
 ((num_of_MemAccessType:MemAccessType -> int) arg_=
    ((case arg_ of   Instruction => (( 0 : int):ii) | LoadData => (( 1 : int):ii) | StoreData => (( 2 : int):ii) )))`;


(*val undefined_MemAccessType : unit -> M MemAccessType*)

val _ = Define `
 ((undefined_MemAccessType:unit ->(regstate)sail2_state_monad$sequential_state ->(((MemAccessType),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$internal_pickS [Instruction;LoadData;StoreData]))`;


(*val AccessLevel_of_num : integer -> AccessLevel*)

val _ = Define `
 ((AccessLevel_of_num:int -> AccessLevel) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then User
   else if (((p0_ = (( 1 : int):ii)))) then Supervisor
   else Kernel))`;


(*val num_of_AccessLevel : AccessLevel -> integer*)

val _ = Define `
 ((num_of_AccessLevel:AccessLevel -> int) arg_=
    ((case arg_ of   User => (( 0 : int):ii) | Supervisor => (( 1 : int):ii) | Kernel => (( 2 : int):ii) )))`;


(*val undefined_AccessLevel : unit -> M AccessLevel*)

val _ = Define `
 ((undefined_AccessLevel:unit ->(regstate)sail2_state_monad$sequential_state ->(((AccessLevel),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$internal_pickS [User;Supervisor;Kernel]))`;


(*val int_of_AccessLevel : AccessLevel -> ii*)

val _ = Define `
 ((int_of_AccessLevel:AccessLevel -> int) level=
    ((case level of   User => (( 0 : int):ii) | Supervisor => (( 1 : int):ii) | Kernel => (( 2 : int):ii) )))`;


(*
Returns whether the first AccessLevel is sufficient to grant access at the second, required, access level.
 *)
(*val grantsAccess : AccessLevel -> AccessLevel -> bool*)

val _ = Define `
 ((grantsAccess:AccessLevel -> AccessLevel -> bool) currentLevel requiredLevel=
    (((int_of_AccessLevel currentLevel)) >= ((int_of_AccessLevel requiredLevel))))`;


(*
Returns the current effective access level determined by accessing the relevant parts of the MIPS status register.
 *)
(*val getAccessLevel : unit -> M AccessLevel*)

val _ = Define `
 ((getAccessLevel:unit ->(regstate)sail2_state_monad$sequential_state ->(((AccessLevel),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state$or_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
      sail2_state_monad$returnS ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS CP0Status_ref) (\ (w__1 : StatusReg) . 
      sail2_state_monad$returnS ((bits_to_bool ((get_StatusReg_ERL w__1  :  1 words$word))))))) (\ (w__2 : bool) . 
   if w__2 then sail2_state_monad$returnS Kernel
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS CP0Status_ref) (\ (w__3 : StatusReg) . 
     let p__27 = ((get_StatusReg_KSU w__3  :  2 words$word)) in
     let b__0 = p__27 in
     sail2_state_monad$returnS (if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then Kernel
             else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then Supervisor
             else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then User
             else User)))))`;


(*val checkCP0Access : unit -> M unit*)

val _ = Define `
 ((checkCP0Access:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (getAccessLevel () ) (\ accessLevel .  sail2_state_monad$bindS
   (sail2_state$and_boolS (sail2_state_monad$returnS (((accessLevel <> Kernel))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
      sail2_state_monad$returnS ((~ ((bit_to_bool ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 0 : int):ii)))))))))) (\ (w__1 :
     bool) . 
   if w__1 then sail2_state_monad$seqS
     (set_CauseReg_CE CP0Cause_ref (vec_of_bits [B0;B0]  :  2 words$word)) (SignalException CpU)
   else sail2_state_monad$returnS () ))))`;


(*val incrementCP0Count : unit -> M unit*)

val _ = Define `
 ((incrementCP0Count:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M) (\ (w__0 : TLBIndexT) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS TLBWired_ref  : ( 6 words$word) M) (\ (w__1 :  6 words$word) .  sail2_state_monad$bindS
   (if (((w__0 = w__1))) then sail2_state_monad$returnS TLBIndexMax
    else sail2_state_monad$bindS
      (sail2_state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M) (\ (w__2 :  6 words$word) . 
      sail2_state_monad$returnS ((sub_vec_int w__2 (( 1 : int):ii)  :  6 words$word)))) (\ (w__3 :  6 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBRandom_ref w__3)
   (sail2_state_monad$read_regS CP0Count_ref  : ( 32 words$word) M)) (\ (w__4 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0Count_ref ((add_vec_int w__4 (( 1 : int):ii)  :  32 words$word)))
   (sail2_state_monad$read_regS CP0Count_ref  : ( 32 words$word) M)) (\ (w__5 : 32 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Compare_ref  : ( 32 words$word) M) (\ (w__6 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (if (((w__5 = w__6))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS CP0Cause_ref) (\ (w__7 : CauseReg) . 
      set_CauseReg_IP CP0Cause_ref
        ((or_vec ((get_CauseReg_IP w__7  :  8 words$word))
            (vec_of_bits [B1;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
           :  8 words$word)))
    else sail2_state_monad$returnS () )
   (sail2_state_monad$read_regS CP0Status_ref)) (\ (w__8 : StatusReg) . 
   let ims = ((get_StatusReg_IM w__8  :  8 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Cause_ref) (\ (w__9 : CauseReg) . 
   let ips = ((get_CauseReg_IP w__9  :  8 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Status_ref) (\ (w__10 : StatusReg) . 
   let ie = ((get_StatusReg_IE w__10  :  1 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Status_ref) (\ (w__11 : StatusReg) . 
   let exl = ((get_StatusReg_EXL w__11  :  1 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Status_ref) (\ (w__12 : StatusReg) . 
   let erl = ((get_StatusReg_ERL w__12  :  1 words$word)) in
   if (((((~ ((bits_to_bool exl)))) /\ (((((~ ((bits_to_bool erl)))) /\ (((((bits_to_bool ie)) /\ (((((and_vec ips ims  :  8 words$word)) <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))))))))) then
     SignalException Interrupt
   else sail2_state_monad$returnS () )))))))))))))`;


(*val decode_failure_of_num : integer -> decode_failure*)

val _ = Define `
 ((decode_failure_of_num:int -> decode_failure) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then No_matching_pattern
   else if (((p0_ = (( 1 : int):ii)))) then Unsupported_instruction
   else if (((p0_ = (( 2 : int):ii)))) then Illegal_instruction
   else Internal_error))`;


(*val num_of_decode_failure : decode_failure -> integer*)

val _ = Define `
 ((num_of_decode_failure:decode_failure -> int) arg_= 
  ((case arg_ of   no_matching_pattern => (( 0 : int): ii) )))`;


(*val undefined_decode_failure : unit -> M decode_failure*)

val _ = Define `
 ((undefined_decode_failure:unit ->(regstate)sail2_state_monad$sequential_state ->(((decode_failure),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$internal_pickS [No_matching_pattern;Unsupported_instruction;Illegal_instruction;Internal_error]))`;


(*val Comparison_of_num : integer -> Comparison*)

val _ = Define `
 ((Comparison_of_num:int -> Comparison) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then EQ'
   else if (((p0_ = (( 1 : int):ii)))) then NE
   else if (((p0_ = (( 2 : int):ii)))) then GE
   else if (((p0_ = (( 3 : int):ii)))) then GEU
   else if (((p0_ = (( 4 : int):ii)))) then GT'
   else if (((p0_ = (( 5 : int):ii)))) then LE
   else if (((p0_ = (( 6 : int):ii)))) then LT'
   else LTU))`;


(*val num_of_Comparison : Comparison -> integer*)

val _ = Define `
 ((num_of_Comparison:Comparison -> int) arg_=
    ((case arg_ of
     EQ' => (( 0 : int):ii)
   | NE => (( 1 : int):ii)
   | GE => (( 2 : int):ii)
   | GEU => (( 3 : int):ii)
   | GT' => (( 4 : int):ii)
   | LE => (( 5 : int):ii)
   | LT' => (( 6 : int):ii)
   | LTU => (( 7 : int):ii)
   )))`;


(*val undefined_Comparison : unit -> M Comparison*)

val _ = Define `
 ((undefined_Comparison:unit ->(regstate)sail2_state_monad$sequential_state ->(((Comparison),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$internal_pickS [EQ';NE;GE;GEU;GT';LE;LT';LTU]))`;


(*val compare : Comparison -> mword ty64 -> mword ty64 -> bool*)

val _ = Define `
 ((compare:Comparison ->(64)words$word ->(64)words$word -> bool) cmp valA valB=
    ((case cmp of
     EQ' => (valA = valB)
   | NE => (valA <> valB)
   | GE => zopz0zKzJ_s valA valB
   | GEU => zopz0zKzJ_u valA valB
   | GT' => zopz0zI_s valB valA
   | LE => zopz0zKzJ_s valB valA
   | LT' => zopz0zI_s valA valB
   | LTU => zopz0zI_u valA valB
   )))`;


(*val WordType_of_num : integer -> WordType*)

val _ = Define `
 ((WordType_of_num:int -> WordType) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then B
   else if (((p0_ = (( 1 : int):ii)))) then H
   else if (((p0_ = (( 2 : int):ii)))) then W0
   else D))`;


(*val num_of_WordType : WordType -> integer*)

val _ = Define `
 ((num_of_WordType:WordType -> int) arg_=
    ((case arg_ of   B => (( 0 : int):ii) | H => (( 1 : int):ii) | W0 => (( 2 : int):ii) | D => (( 3 : int):ii) )))`;


(*val undefined_WordType : unit -> M WordType*)

val _ = Define `
 ((undefined_WordType:unit ->(regstate)sail2_state_monad$sequential_state ->(((WordType),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$internal_pickS [B;H;W0;D]))`;


(*val WordTypeUnaligned_of_num : integer -> WordTypeUnaligned*)

val _ = Define `
 ((WordTypeUnaligned_of_num:int -> WordTypeUnaligned) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then WL
   else if (((p0_ = (( 1 : int):ii)))) then WR
   else if (((p0_ = (( 2 : int):ii)))) then DL
   else DR))`;


(*val num_of_WordTypeUnaligned : WordTypeUnaligned -> integer*)

val _ = Define `
 ((num_of_WordTypeUnaligned:WordTypeUnaligned -> int) arg_=
    ((case arg_ of   WL => (( 0 : int):ii) | WR => (( 1 : int):ii) | DL => (( 2 : int):ii) | DR => (( 3 : int):ii) )))`;


(*val undefined_WordTypeUnaligned : unit -> M WordTypeUnaligned*)

val _ = Define `
 ((undefined_WordTypeUnaligned:unit ->(regstate)sail2_state_monad$sequential_state ->(((WordTypeUnaligned),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$internal_pickS [WL;WR;DL;DR]))`;


(*val wordWidthBytes : WordType -> integer*)

val _ = Define `
 ((wordWidthBytes:WordType -> int) w=  ((case w of   B => (( 1 : int):ii) | H => (( 2 : int):ii) | W0 => (( 4 : int):ii) | D => (( 8 : int):ii) )))`;


val _ = Define `
 ((alignment_width:int)=  ((( 16 : int):ii)))`;


(*val isAddressAligned : mword ty64 -> WordType -> bool*)

val _ = Define `
 ((isAddressAligned:(64)words$word -> WordType -> bool) addr wordType=
    (let a = (lem$w2ui addr) in
   (((a / alignment_width)) = ((((((a + ((wordWidthBytes wordType)))) - (( 1 : int):ii))) /
         alignment_width)))))`;


(*val MEMr_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => integer -> mword ty64 -> integer -> M (mword 'p8_times_n_)*)

val _ = Define `
 ((MEMr_wrapper:int ->(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->((('p8_times_n_ words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (p8_times_n___tv : int) addr size1=
    (if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS UART_RVALID_ref  : ( 1 words$word) M) (\ rvalid .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS UART_RVALID_ref (vec_of_bits [B0]  :  1 words$word))
     (sail2_state_monad$read_regS UART_RDATA_ref  : ( 8 words$word) M)) (\ (w__0 : 8 bits) . 
     sail2_state_monad$returnS ((mask p8_times_n___tv
                ((concat_vec
                    (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                      :  32 words$word)
                    ((concat_vec w__0
                        ((concat_vec rvalid
                            ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
                                (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                  :  16 words$word)
                               :  23 words$word))
                           :  24 words$word))
                       :  32 words$word))
                   :  64 words$word))
               :  'p8_times_n_ words$word))))
   else if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]
                 :  64 words$word)))) then
     sail2_state_monad$returnS ((mask p8_times_n___tv
                (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;
                              B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]
                  :  64 words$word)
               :  'p8_times_n_ words$word))
   else sail2_state_monad$bindS
     (MEMr instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict addr size1  : ( 'p8_times_n_ words$word) M) (\ w__1 . 
     sail2_state_monad$returnS ((reverse_endianness w__1  :  'p8_times_n_ words$word)))))`;


(*val MEMr_reserve_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> M (mword 'p8_times_n_)*)

val _ = Define `
 ((MEMr_reserve_wrapper:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->((('p8_times_n_ words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr size1=  (sail2_state_monad$bindS
   (MEMr_reserve instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict addr size1  : ( 'p8_times_n_ words$word) M) (\ w__0 . 
   sail2_state_monad$returnS ((reverse_endianness w__0  :  'p8_times_n_ words$word)))))`;


(*val init_cp0_state : unit -> M unit*)

val _ = Define `
 ((init_cp0_state:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (set_StatusReg_BEV CP0Status_ref ((cast_unit_vec0 B1  :  1 words$word))))`;


(*val init_cp2_state : unit -> M unit*)

(*val cp2_next_pc : unit -> M unit*)

(*val dump_cp2_state : unit -> M unit*)

(*val extzv : forall 'n 'm. Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((extzv:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((extz_vec m__tv v  :  'm words$word)))`;


(*val extsv : forall 'n 'm. Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((extsv:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((exts_vec m__tv v  :  'm words$word)))`;


(*val slice_mask : forall 'n . Size 'n => integer -> ii -> ii -> mword 'n*)

val _ = Define `
 ((slice_mask:int -> int -> int -> 'n words$word) (n__tv : int) i l=
    (let (one1 : 'n bits) = ((extzv n__tv (vec_of_bits [B1]  :  1 words$word)  :  'n words$word)) in
   (shiftl ((sub_vec ((shiftl one1 l  :  'n words$word)) one1  :  'n words$word)) i  :  'n words$word)))`;


(*val is_zero_subrange : forall 'n . Size 'n => mword 'n -> ii -> ii -> bool*)

val _ = Define `
 ((is_zero_subrange:'n words$word -> int -> int -> bool) xs i j=
    (((and_vec xs
         ((slice_mask ((int_of_num (words$word_len xs))) j ((((i - j)) + (( 1 : int):ii)))  :  'n words$word))
        :  'n words$word)) = ((extzv ((int_of_num (words$word_len xs))) (vec_of_bits [B0]  :  1 words$word)  :  'n words$word))))`;


(*val is_ones_subrange : forall 'n . Size 'n => mword 'n -> ii -> ii -> bool*)

val _ = Define `
 ((is_ones_subrange:'n words$word -> int -> int -> bool) xs i j=
    (let (m : 'n bits) =
     ((slice_mask ((int_of_num (words$word_len xs))) j ((((j - i)) + (( 1 : int):ii)))  :  'n words$word)) in
   (((and_vec xs m  :  'n words$word)) = m)))`;


(*val slice_slice_concat : forall 'n 'm 'r . Size 'm, Size 'n, Size 'r => integer -> mword 'n -> ii -> ii -> mword 'm -> ii -> ii -> mword 'r*)

val _ = Define `
 ((slice_slice_concat:int -> 'n words$word -> int -> int -> 'm words$word -> int -> int -> 'r words$word) (r__tv : int) xs i l ys i' l'=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   let ys =
     ((shiftr ((and_vec ys ((slice_mask ((int_of_num (words$word_len ys))) i' l'  :  'm words$word))  :  'm words$word)) i'
       :  'm words$word)) in
   (or_vec ((shiftl ((extzv r__tv xs  :  'r words$word)) l'  :  'r words$word)) ((extzv r__tv ys  :  'r words$word))
     :  'r words$word)))`;


(*val slice_zeros_concat : forall 'n   'r . Size 'n, Size 'r => integer -> mword 'n -> ii -> integer -> integer -> mword 'r*)

val _ = Define `
 ((slice_zeros_concat:int -> 'n words$word -> int -> int -> int -> 'r words$word) (r__tv : int) xs i l l'=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (shiftl ((extzv r__tv xs  :  'r words$word)) l'  :  'r words$word)))`;


(*val subrange_subrange_eq : forall 'n . Size 'n => mword 'n -> ii -> ii -> mword 'n -> ii -> ii -> bool*)

val _ = Define `
 ((subrange_subrange_eq:'n words$word -> int -> int -> 'n words$word -> int -> int -> bool) xs i j ys i' j'=
    (let xs =
     ((shiftr
        ((and_vec xs
            ((slice_mask ((int_of_num (words$word_len xs))) j ((((i - j)) + (( 1 : int):ii)))  :  'n words$word))
           :  'n words$word)) j
       :  'n words$word)) in
   let ys =
     ((shiftr
        ((and_vec ys
            ((slice_mask ((int_of_num (words$word_len xs))) j' ((((i' - j')) + (( 1 : int):ii)))  :  'n words$word))
           :  'n words$word)) j'
       :  'n words$word)) in
   (xs = ys)))`;


(*val subrange_subrange_concat : forall 'n   'm   's . Size 'm, Size 'n, Size 's => integer -> mword 'n -> integer -> integer -> mword 'm -> integer -> integer -> mword 's*)

val _ = Define `
 ((subrange_subrange_concat:int -> 'n words$word -> int -> int -> 'm words$word -> int -> int -> 's words$word) (s__tv : int) xs i j ys i' j'=
    (let xs =
     ((shiftr
        ((and_vec xs
            ((slice_mask ((int_of_num (words$word_len xs))) j ((((i - j)) + (( 1 : int):ii)))  :  'n words$word))
           :  'n words$word)) j
       :  'n words$word)) in
   let ys =
     ((shiftr
        ((and_vec ys
            ((slice_mask ((int_of_num (words$word_len ys))) j' ((((i' - j')) + (( 1 : int):ii)))  :  'm words$word))
           :  'm words$word)) j'
       :  'm words$word)) in
   (or_vec
      ((shiftl ((extzv s__tv xs  :  's words$word)) ((((i' - j')) + (( 1 : int):ii)))
         :  's words$word)) ((extzv s__tv ys  :  's words$word))
     :  's words$word)))`;


(*val place_subrange : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> ii -> mword 'm*)

val _ = Define `
 ((place_subrange:int -> 'n words$word -> int -> int -> int -> 'm words$word) (m__tv : int) xs i j shift=
    (let xs =
     ((shiftr
        ((and_vec xs
            ((slice_mask ((int_of_num (words$word_len xs))) j ((((i - j)) + (( 1 : int):ii)))  :  'n words$word))
           :  'n words$word)) j
       :  'n words$word)) in
   (shiftl ((extzv m__tv xs  :  'm words$word)) shift  :  'm words$word)))`;


(*val place_slice : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> ii -> mword 'm*)

val _ = Define `
 ((place_slice:int -> 'n words$word -> int -> int -> int -> 'm words$word) (m__tv : int) xs i l shift=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (shiftl ((extzv m__tv xs  :  'm words$word)) shift  :  'm words$word)))`;


(*val zext_slice : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> mword 'm*)

val _ = Define `
 ((zext_slice:int -> 'n words$word -> int -> int -> 'm words$word) (m__tv : int) xs i l=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (extzv m__tv xs  :  'm words$word)))`;


(*val sext_slice : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> mword 'm*)

val _ = Define `
 ((sext_slice:int -> 'n words$word -> int -> int -> 'm words$word) (m__tv : int) xs i l=
    (let xs =
     ((arith_shiftr
        ((shiftl ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word))
            ((((((int_of_num (words$word_len xs))) - i)) - l))
           :  'n words$word)) ((((int_of_num (words$word_len xs))) - l))
       :  'n words$word)) in
   (extsv m__tv xs  :  'm words$word)))`;


(*val unsigned_slice : forall 'n . Size 'n => mword 'n -> ii -> ii -> ii*)

val _ = Define `
 ((unsigned_slice:'n words$word -> int -> int -> int) xs i l=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   lem$w2ui xs))`;


(*val unsigned_subrange : forall 'n . Size 'n => mword 'n -> ii -> ii -> ii*)

val _ = Define `
 ((unsigned_subrange:'n words$word -> int -> int -> int) xs i j=
    (let xs =
     ((shiftr
        ((and_vec xs
            ((slice_mask ((int_of_num (words$word_len xs))) j ((((i - j)) + (( 1 : int):ii)))  :  'n words$word))
           :  'n words$word)) i
       :  'n words$word)) in
   lem$w2ui xs))`;


(*val zext_ones : forall 'n . Size 'n => integer -> ii -> mword 'n*)

val _ = Define `
 ((zext_ones:int -> int -> 'n words$word) (n__tv : int) m=
    (let (v : 'n bits) = ((extsv n__tv (vec_of_bits [B1]  :  1 words$word)  :  'n words$word)) in
   (shiftr v ((((int_of_num (words$word_len v))) - m))  :  'n words$word)))`;


(*val tlbEntryMatch : mword ty2 -> mword ty27 -> mword ty8 -> TLBEntry -> bool*)

val _ = Define `
 ((tlbEntryMatch:(2)words$word ->(27)words$word ->(8)words$word -> TLBEntry -> bool) r vpn2 asid entry=
    (let entryValid = ((get_TLBEntry_valid entry  :  1 words$word)) in
   let entryR = ((get_TLBEntry_r entry  :  2 words$word)) in
   let entryMask = ((get_TLBEntry_pagemask entry  :  16 words$word)) in
   let entryVPN = ((get_TLBEntry_vpn2 entry  :  27 words$word)) in
   let entryASID = ((get_TLBEntry_asid entry  :  8 words$word)) in
   let entryG = ((get_TLBEntry_g entry  :  1 words$word)) in
   let (vpnMask : 27 bits) =
     ((not_vec ((mips_zero_extend (( 27 : int):ii) entryMask  :  27 words$word))  :  27 words$word)) in
   (((bits_to_bool entryValid)) /\ ((((((r = entryR))) /\ ((((((((and_vec vpn2 vpnMask  :  27 words$word)) = ((and_vec entryVPN vpnMask  :  27 words$word))))) /\ ((((((asid = entryASID))) \/ ((bits_to_bool entryG))))))))))))))`;


(*val tlbSearch : mword ty64 -> M (maybe (mword ty6))*)

val _ = Define `
 ((tlbSearch:(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((((6)words$word)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) VAddr=
    (sail2_state_monad$catch_early_returnS
     (let r = ((subrange_vec_dec VAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)) in
     let vpn2 = ((subrange_vec_dec VAddr (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word)) in sail2_state_monad$bindS
     (sail2_state_monad$liftRS (sail2_state_monad$read_regS TLBEntryHi_ref)) (\ (w__0 : TLBEntryHiReg) . 
     let asid = ((get_TLBEntryHiReg_ASID w__0  :  8 words$word)) in sail2_state_monad$seqS
     (sail2_state$foreachS (index_list (( 0 : int):ii) (( 63 : int):ii) (( 1 : int):ii)) () 
       (\ idx unit_var .  sail2_state_monad$bindS
         (sail2_state_monad$liftRS (sail2_state_monad$read_regS ((access_list_dec TLBEntries idx)))) (\ (w__1 : TLBEntry) . 
         if ((tlbEntryMatch r vpn2 asid w__1)) then
           (sail2_state_monad$early_returnS (SOME ((to_bits ((make_the_value (( 6 : int):ii)  :  6 itself)) idx  :  6 words$word))) : (unit, ( ( 6 words$word)option))
             MR)
         else sail2_state_monad$returnS () )))
     (sail2_state_monad$returnS NONE)))))`;


(*val TLBTranslate2 : mword ty64 -> MemAccessType -> M (mword ty64 * bool)*)

val _ = Define `
 ((TLBTranslate2:(64)words$word -> MemAccessType ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word#bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr accessType=  (sail2_state_monad$bindS
   (tlbSearch vAddr  : ( ( 6 words$word)option) M) (\ idx . 
   (case idx of
     SOME (idx) =>
      let i = (lem$w2ui idx) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS ((access_list_dec TLBEntries i))) (\ entry . 
      let entryMask = ((get_TLBEntry_pagemask entry  :  16 words$word)) in
      let b__0 = entryMask in sail2_state_monad$bindS
      (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) then
         sail2_state_monad$returnS (( 12 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 14 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 16 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 18 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 20 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 22 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 24 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 26 : int):ii)
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         sail2_state_monad$returnS (( 28 : int):ii)
       else undefined_range (( 12 : int):ii) (( 28 : int):ii)) (\ (evenOddBit : int) . 
      let isOdd = (access_vec_dec vAddr evenOddBit) in
      let ((caps : 1 bits), (capl : 1 bits), (pfn : 24 bits), (d : 1 bits), (v : 1 bits)) =
        (if ((bit_to_bool isOdd)) then
          ((get_TLBEntry_caps1 entry  :  1 words$word),
           (get_TLBEntry_capl1 entry  :  1 words$word),
           (get_TLBEntry_pfn1 entry  :  24 words$word),
           (get_TLBEntry_d1 entry  :  1 words$word),
           (get_TLBEntry_v1 entry  :  1 words$word))
        else
          ((get_TLBEntry_caps0 entry  :  1 words$word),
           (get_TLBEntry_capl0 entry  :  1 words$word),
           (get_TLBEntry_pfn0 entry  :  24 words$word),
           (get_TLBEntry_d0 entry  :  1 words$word),
           (get_TLBEntry_v0 entry  :  1 words$word))) in
      if ((~ ((bits_to_bool v)))) then
        (SignalExceptionTLB (if (((accessType = StoreData))) then XTLBInvS else XTLBInvL) vAddr
          : (( 64 words$word # bool)) M)
      else if ((((((accessType = StoreData))) /\ ((~ ((bits_to_bool d))))))) then
        (SignalExceptionTLB TLBMod vAddr  : (( 64 words$word # bool)) M)
      else
        let (res : 64 bits) =
          ((mips_zero_extend (( 64 : int):ii)
             ((subrange_subrange_concat
                 (((((((( 23 : int):ii) -
                             ((((evenOddBit - (( 12 : int):ii))) - (( 1 : int):ii)))))
                         +
                         ((evenOddBit - (( 1 : int):ii)))))
                     - (((( 0 : int):ii) - (( 1 : int):ii))))) pfn
                 (( 23 : int):ii) ((evenOddBit - (( 12 : int):ii))) vAddr
                 ((evenOddBit - (( 1 : int):ii))) (( 0 : int):ii)
                :  36 words$word))
            :  64 words$word)) in
        sail2_state_monad$returnS (res, bits_to_bool (if (((accessType = StoreData))) then caps else capl))))
   | NONE =>
      (SignalExceptionTLB (if (((accessType = StoreData))) then XTLBRefillS else XTLBRefillL) vAddr
        : (( 64 words$word # bool)) M)
   ))))`;


(*val TLBTranslateC : mword ty64 -> MemAccessType -> M (mword ty64 * bool)*)

val _ = Define `
 ((TLBTranslateC:(64)words$word -> MemAccessType ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word#bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr accessType=  (sail2_state_monad$bindS
   (getAccessLevel () ) (\ currentAccessLevel . 
   let compat32 =
     (((subrange_vec_dec vAddr (( 61 : int):ii) (( 31 : int):ii)  :  31 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1]
         :  31 words$word)) in
   let b__0 = ((subrange_vec_dec vAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)) in
   let ((requiredLevel : AccessLevel), (addr :  ( 64 bits)option)) =
     (if (((b__0 = (vec_of_bits [B1;B1]  :  2 words$word)))) then
       (case (compat32, (subrange_vec_dec vAddr (( 30 : int):ii) (( 29 : int):ii)  :  2 words$word)) of
         (T, b__1) =>
          if (((b__1 = (vec_of_bits [B1;B1]  :  2 words$word)))) then (Kernel, NONE)
          else if (((b__1 = (vec_of_bits [B1;B0]  :  2 words$word)))) then (Supervisor, NONE)
          else if (((b__1 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
            (Kernel,
             SOME ((concat_vec
                      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                        :  32 words$word)
                      ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                          ((subrange_vec_dec vAddr (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
                         :  32 words$word))
                     :  64 words$word)))
          else if (((b__1 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
            (Kernel,
             SOME ((concat_vec
                      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                        :  32 words$word)
                      ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                          ((subrange_vec_dec vAddr (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
                         :  32 words$word))
                     :  64 words$word)))
          else (case (T, b__1) of   (g__25, g__26) => (Kernel, NONE) )
       | (g__25, g__26) => (Kernel, NONE)
       )
     else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (Kernel,
        SOME ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                 ((subrange_vec_dec vAddr (( 58 : int):ii) (( 0 : int):ii)  :  59 words$word))
                :  64 words$word)))
     else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then (Supervisor, NONE)
     else (User, NONE)) in
   if ((~ ((grantsAccess currentAccessLevel requiredLevel)))) then
     (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
       : (( 64 words$word # bool)) M)
   else sail2_state_monad$bindS
     (case addr of
       SOME (a) => sail2_state_monad$returnS (a, F)
     | NONE =>
        if (((((~ compat32)) /\ ((((lem$w2ui ((subrange_vec_dec vAddr (( 61 : int):ii) (( 0 : int):ii)  :  62 words$word)))) > MAX_VA))))) then
          (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
            : (( 64 words$word # bool)) M)
        else (TLBTranslate2 vAddr accessType  : (( 64 words$word # bool)) M)
     ) (\ varstup .  let ((pa : 64 bits), (c : bool)) = varstup in
     if ((((lem$w2ui pa)) > MAX_PA)) then
       (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
         : (( 64 words$word # bool)) M)
     else sail2_state_monad$returnS (pa, c)))))`;


(*val TLBTranslate : mword ty64 -> MemAccessType -> M (mword ty64)*)

val _ = Define `
 ((TLBTranslate:(64)words$word -> MemAccessType ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr accessType=  (sail2_state_monad$bindS
   (TLBTranslateC vAddr accessType  : (( 64 words$word # bool)) M) (\ varstup .  let (addr, c) = varstup in
   sail2_state_monad$returnS addr)))`;


(*val MEMw_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> mword 'p8_times_n_ -> M unit*)

val _ = Define `
 ((MEMw_wrapper:(64)words$word -> int -> 'p8_times_n_ words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr size1 data=
    (let ledata = ((reverse_endianness data  :  'p8_times_n_ words$word)) in
   if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then sail2_state_monad$seqS
     (sail2_state_monad$write_regS UART_WDATA_ref ((subrange_vec_dec ledata (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))
     (sail2_state_monad$write_regS UART_WRITTEN_ref ((cast_unit_vec0 B1  :  1 words$word)))
   else sail2_state_monad$seqS (MEMea 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict addr size1) (MEMval instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict addr size1 ledata)))`;


(*val MEMw_conditional_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> mword 'p8_times_n_ -> M bool*)

val _ = Define `
 ((MEMw_conditional_wrapper:(64)words$word -> int -> 'p8_times_n_ words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr size1 data=  (sail2_state_monad$seqS
   (MEMea_conditional 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict addr size1)
   (MEMval_conditional 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict addr size1 ((reverse_endianness data  :  'p8_times_n_ words$word)))))`;


(*val addrWrapper : mword ty64 -> MemAccessType -> WordType -> mword ty64*)

val _ = Define `
 ((addrWrapper:(64)words$word -> MemAccessType -> WordType ->(64)words$word) addr accessType width=  addr)`;


(*val addrWrapperUnaligned : mword ty64 -> MemAccessType -> WordTypeUnaligned -> mword ty64*)

val _ = Define `
 ((addrWrapperUnaligned:(64)words$word -> MemAccessType -> WordTypeUnaligned ->(64)words$word) addr accessType width=  addr)`;


(*val TranslatePC : mword ty64 -> M (mword ty64)*)

val _ = Define `
 ((TranslatePC:(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr=  (sail2_state_monad$seqS
   (incrementCP0Count () )
   (if (((((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) <> (vec_of_bits [B0;B0]  :  2 words$word))))
   then
     (SignalExceptionBadAddr AdEL vAddr  : ( 64 words$word) M)
   else (TLBTranslate vAddr Instruction  : ( 64 words$word) M))))`;


val _ = Define `
 ((have_cp2:bool)=  F)`;


(*val ERETHook : unit -> unit*)

val _ = Define `
 ((ERETHook:unit -> unit) () =  () )`;


val _ = Define `
 ((init_cp2_state:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (skip () ))`;


val _ = Define `
 ((cp2_next_pc:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (skip () ) (skip () )))`;


val _ = Define `
 ((dump_cp2_state:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (skip () ) (skip () )))`;


(*val undefined_ast : unit -> M ast*)

val _ = Define `
 ((undefined_ast:unit ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_Comparison () ) (\ (u_0 : Comparison) .  sail2_state_monad$bindS
   (undefined_WordType () ) (\ (u_1 : WordType) .  sail2_state_monad$bindS
   (sail2_state_monad$undefined_boolS () ) (\ (u_3 : bool) .  sail2_state_monad$bindS
   (sail2_state_monad$undefined_boolS () ) (\ (u_2 : bool) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (u_4 : imm16) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (u_7 : regno) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (u_6 : regno) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (u_5 : regno) .  sail2_state_monad$bindS
   (undefined_unit () ) (\ (u_8 : unit) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 3 : int):ii)  : ( 3 words$word) M) (\ (u_9 : 3 bits) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (u_10 : 16 bits) .  sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 26 : int):ii)  : ( 26 words$word) M) (\ (u_11 : 26 bits) . 
   sail2_state$internal_pickS
     [DADDIU (u_6,u_5,u_4);DADDU (u_7,u_6,u_5);DADDI (u_6,u_5,u_10);DADD (u_7,u_6,u_5);ADD (u_7,u_6,u_5);ADDI (u_6,u_5,u_10);ADDU (u_7,u_6,u_5);ADDIU (u_6,u_5,u_10);DSUBU (u_7,u_6,u_5);DSUB (u_7,u_6,u_5);SUB0 (u_7,u_6,u_5);SUBU (u_7,u_6,u_5);AND (u_7,u_6,u_5);ANDI (u_6,u_5,u_10);OR (u_7,u_6,u_5);ORI (u_6,u_5,u_10);NOR (u_7,u_6,u_5);XOR (u_7,u_6,u_5);XORI (u_6,u_5,u_10);LUI (u_5,u_4);DSLL (u_7,u_6,u_5);DSLL32 (u_7,u_6,u_5);DSLLV (u_7,u_6,u_5);DSRA (u_7,u_6,u_5);DSRA32 (u_7,u_6,u_5);DSRAV (u_7,u_6,u_5);DSRL (u_7,u_6,u_5);DSRL32 (u_7,u_6,u_5);DSRLV (u_7,u_6,u_5);SLL (u_7,u_6,u_5);SLLV (u_7,u_6,u_5);SRA (u_7,u_6,u_5);SRAV (u_7,u_6,u_5);SRL (u_7,u_6,u_5);SRLV (u_7,u_6,u_5);SLT (u_7,u_6,u_5);SLTI (u_6,u_5,u_10);SLTU (u_7,u_6,u_5);SLTIU (u_6,u_5,u_10);MOVN (u_7,u_6,u_5);MOVZ (u_7,u_6,u_5);MFHI u_5;MFLO u_5;MTHI u_5;MTLO u_5;MUL (u_7,u_6,u_5);MULT (u_6,u_5);MULTU (u_6,u_5);DMULT (u_6,u_5);DMULTU (u_6,u_5);MADD (u_6,u_5);MADDU (u_6,u_5);MSUB (u_6,u_5);MSUBU (u_6,u_5);DIV0 (u_6,u_5);DIVU (u_6,u_5);DDIV (u_6,u_5);DDIVU (u_6,u_5);J u_11;JAL u_11;JR u_5;JALR (u_6,u_5);BEQ (u_6,u_5,u_4,u_3,u_2);BCMPZ (u_5,u_4,u_0,u_3,u_2);SYSCALL u_8;BREAK u_8;WAIT u_8;TRAPREG (u_6,u_5,u_0);TRAPIMM (u_5,u_4,u_0);Load (u_1,u_3,u_2,u_6,u_5,u_4);Store (u_1,u_2,u_6,u_5,u_4);LWL (u_6,u_5,u_10);LWR (u_6,u_5,u_10);SWL (u_6,u_5,u_10);SWR (u_6,u_5,u_10);LDL (u_6,u_5,u_10);LDR (u_6,u_5,u_10);SDL (u_6,u_5,u_10);SDR (u_6,u_5,u_10);CACHE (u_6,u_5,u_10);SYNC u_8;MFC0 (u_6,u_5,u_9,u_2);HCF u_8;MTC0 (u_6,u_5,u_9,u_2);TLBWI u_8;TLBWR u_8;TLBR u_8;TLBP u_8;RDHWR (u_6,u_5);ERET u_8;RI u_8]))))))))))))))`;


(*val execute : ast -> M unit*)

(*val decode : mword ty32 -> maybe ast*)

(*val extendLoad : forall 'sz . Size 'sz => mword 'sz -> bool -> mword ty64*)

val _ = Define `
 ((extendLoad:'sz words$word -> bool ->(64)words$word) memResult sign=
    (if sign then (mips_sign_extend (( 64 : int):ii) memResult  :  64 words$word)
   else (mips_zero_extend (( 64 : int):ii) memResult  :  64 words$word)))`;


(*val TLBWriteEntry : mword ty6 -> M unit*)

val _ = Define `
 ((TLBWriteEntry:(6)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) idx=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS TLBPageMask_ref  : ( 16 words$word) M) (\ pagemask . 
   let b__0 = pagemask in sail2_state_monad$seqS
   (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word))))
    then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      sail2_state_monad$returnS () 
    else SignalException MCheck)
   (let i = (lem$w2ui idx) in
   let entry = (access_list_dec TLBEntries i) in sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_pagemask entry pagemask)
   (sail2_state_monad$read_regS TLBEntryHi_ref)) (\ (w__0 : TLBEntryHiReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_r entry ((get_TLBEntryHiReg_R w__0  :  2 words$word)))
   (sail2_state_monad$read_regS TLBEntryHi_ref)) (\ (w__1 : TLBEntryHiReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_vpn2 entry ((get_TLBEntryHiReg_VPN2 w__1  :  27 words$word)))
   (sail2_state_monad$read_regS TLBEntryHi_ref)) (\ (w__2 : TLBEntryHiReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_asid entry ((get_TLBEntryHiReg_ASID w__2  :  8 words$word)))
   (sail2_state$and_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS TLBEntryLo0_ref) (\ (w__3 : TLBEntryLoReg) . 
      sail2_state_monad$returnS ((bits_to_bool ((get_TLBEntryLoReg_G w__3  :  1 words$word))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS TLBEntryLo1_ref) (\ (w__4 : TLBEntryLoReg) . 
      sail2_state_monad$returnS ((bits_to_bool ((get_TLBEntryLoReg_G w__4  :  1 words$word)))))))) (\ (w__5 : bool) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (set_TLBEntry_g entry ((bool_to_bits w__5  :  1 words$word)))
   (set_TLBEntry_valid entry ((cast_unit_vec0 B1  :  1 words$word))))
   (sail2_state_monad$read_regS TLBEntryLo0_ref)) (\ (w__6 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_caps0 entry ((get_TLBEntryLoReg_CapS w__6  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo0_ref)) (\ (w__7 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_capl0 entry ((get_TLBEntryLoReg_CapL w__7  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo0_ref)) (\ (w__8 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_pfn0 entry ((get_TLBEntryLoReg_PFN w__8  :  24 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo0_ref)) (\ (w__9 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_c0 entry ((get_TLBEntryLoReg_C w__9  :  3 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo0_ref)) (\ (w__10 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_d0 entry ((get_TLBEntryLoReg_D w__10  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo0_ref)) (\ (w__11 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_v0 entry ((get_TLBEntryLoReg_V w__11  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo1_ref)) (\ (w__12 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_caps1 entry ((get_TLBEntryLoReg_CapS w__12  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo1_ref)) (\ (w__13 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_capl1 entry ((get_TLBEntryLoReg_CapL w__13  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo1_ref)) (\ (w__14 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_pfn1 entry ((get_TLBEntryLoReg_PFN w__14  :  24 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo1_ref)) (\ (w__15 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_c1 entry ((get_TLBEntryLoReg_C w__15  :  3 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo1_ref)) (\ (w__16 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_TLBEntry_d1 entry ((get_TLBEntryLoReg_D w__16  :  1 words$word)))
   (sail2_state_monad$read_regS TLBEntryLo1_ref)) (\ (w__17 : TLBEntryLoReg) . 
   set_TLBEntry_v1 entry ((get_TLBEntryLoReg_V w__17  :  1 words$word))))))))))))))))))))))`;


val _ = Define `
 ((decode:(32)words$word ->(ast)option) v__0=
    (if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (DADDIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B0;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DADDU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (DADDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DADD (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (ADD (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ADDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (ADDU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ADDIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSUBU (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSUB (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SUB0 (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SUBU (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (AND (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ANDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (OR (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ORI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (NOR (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (XOR (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (XORI (rs,rt,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  11 words$word)))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LUI (rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSLL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSLL32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSLLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRA (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRA32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSRAV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRL32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSRLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (SLL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SLLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (SRA (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SRAV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (SRL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SRLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SLT (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SLTI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SLTU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SLTIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MOVN (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MOVZ (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MFHI rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MFLO rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 0 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B1]
                     :  21 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     SOME (MTHI rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 0 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B1;B1]
                     :  21 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     SOME (MTLO rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MUL (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MULT (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MULTU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DMULT (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DMULTU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MADD (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MADDU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MSUB (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MSUBU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DIV0 (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DIVU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DDIV (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DDIVU (rs,rt))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word)))) then
     let (offset : 26 bits) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 0 : int):ii)  :  26 words$word)) in
     SOME (J offset)
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word)))) then
     let (offset : 26 bits) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 0 : int):ii)  :  26 words$word)) in
     SOME (JAL offset)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 20 : int):ii) (( 11 : int):ii)  :  10 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  10 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word)))))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     SOME (JR rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word)))))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (JALR (rs,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,F,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,F,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,T,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',T,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,T,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GT',F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GT',F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LE,F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LE,F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word))))))) then
     SOME (SYSCALL () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word))))))) then
     SOME (BREAK () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B1;B0;B0;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (WAIT () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,GE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,GEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,LT'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,LTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,EQ'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,NE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,EQ'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,NE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,GE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,GEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,LT'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,LTU))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (B,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (B,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (H,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (H,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (W0,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (W0,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (D,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (W0,T,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (D,F,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (B,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (H,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (W0,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (D,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (W0,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (D,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LWL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LWR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SWL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SWR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LDL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LDR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SDL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SDR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (op : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (CACHE (base,op,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 11 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  21 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1]  :  6 words$word))))))) then
     SOME (SYNC () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MFC0 (rt,rd,sel,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MFC0 (rt,rd,sel,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     SOME (HCF () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     SOME (HCF () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MTC0 (rt,rd,sel,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MTC0 (rt,rd,sel,T))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B1;B0]
                 :  32 words$word)))) then
     SOME (TLBWI () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B1;B1;B0]
                 :  32 words$word)))) then
     SOME (TLBWR () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1]
                 :  32 words$word)))) then
     SOME (TLBR () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (TLBP () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (RDHWR (rt,rd))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B1;B1;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (ERET () )
   else SOME (RI () )))`;


(*val execute_XORI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_XORI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((xor_vec w__0 ((mips_zero_extend (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_XOR : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_XOR:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((xor_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_WAIT : unit -> M unit*)

val _ = Define `
 ((execute_WAIT:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__16=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  sail2_state_monad$write_regS nextPC_ref w__0)))`;


(*val execute_TRAPREG : mword ty5 -> mword ty5 -> Comparison -> M unit*)

val _ = Define `
 ((execute_TRAPREG:(5)words$word ->(5)words$word -> Comparison ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt cmp=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val . 
   let condition = (compare cmp rs_val rt_val) in
   if condition then SignalException Tr
   else sail2_state_monad$returnS () ))))`;


(*val execute_TRAPIMM : mword ty5 -> mword ty16 -> Comparison -> M unit*)

val _ = Define `
 ((execute_TRAPIMM:(5)words$word ->(16)words$word -> Comparison ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs imm cmp=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val . 
   let (imm_val : 64 bits) = ((mips_sign_extend (( 64 : int):ii) imm  :  64 words$word)) in
   let condition = (compare cmp rs_val imm_val) in
   if condition then SignalException Tr
   else sail2_state_monad$returnS () )))`;


(*val execute_TLBWR : unit -> M unit*)

val _ = Define `
 ((execute_TLBWR:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__20=  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (checkCP0Access () )
   (sail2_state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M)) (\ (w__0 :  6 words$word) .  TLBWriteEntry w__0)))`;


(*val execute_TLBWI : unit -> M unit*)

val _ = Define `
 ((execute_TLBWI:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__19=  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (checkCP0Access () )
   (sail2_state_monad$read_regS TLBIndex_ref  : ( 6 words$word) M)) (\ (w__0 :  6 words$word) .  TLBWriteEntry w__0)))`;


(*val execute_TLBR : unit -> M unit*)

val _ = Define `
 ((execute_TLBR:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__21=  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (checkCP0Access () )
   (sail2_state_monad$read_regS TLBIndex_ref  : ( 6 words$word) M)) (\ (w__0 : TLBIndexT) . 
   let i = (lem$w2ui w__0) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS ((access_list_dec TLBEntries i))) (\ entry .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBPageMask_ref ((get_TLBEntry_pagemask entry  :  16 words$word)))
   (set_TLBEntryHiReg_R TLBEntryHi_ref ((get_TLBEntry_r entry  :  2 words$word))))
   (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref ((get_TLBEntry_vpn2 entry  :  27 words$word))))
   (set_TLBEntryHiReg_ASID TLBEntryHi_ref ((get_TLBEntry_asid entry  :  8 words$word))))
   (set_TLBEntryLoReg_CapS TLBEntryLo0_ref ((get_TLBEntry_caps0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_CapL TLBEntryLo0_ref ((get_TLBEntry_capl0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_PFN TLBEntryLo0_ref ((get_TLBEntry_pfn0 entry  :  24 words$word))))
   (set_TLBEntryLoReg_C TLBEntryLo0_ref ((get_TLBEntry_c0 entry  :  3 words$word))))
   (set_TLBEntryLoReg_D TLBEntryLo0_ref ((get_TLBEntry_d0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_V TLBEntryLo0_ref ((get_TLBEntry_v0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_G TLBEntryLo0_ref ((get_TLBEntry_g entry  :  1 words$word))))
   (set_TLBEntryLoReg_CapS TLBEntryLo1_ref ((get_TLBEntry_caps1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_CapL TLBEntryLo1_ref ((get_TLBEntry_capl1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_PFN TLBEntryLo1_ref ((get_TLBEntry_pfn1 entry  :  24 words$word))))
   (set_TLBEntryLoReg_C TLBEntryLo1_ref ((get_TLBEntry_c1 entry  :  3 words$word))))
   (set_TLBEntryLoReg_D TLBEntryLo1_ref ((get_TLBEntry_d1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_V TLBEntryLo1_ref ((get_TLBEntry_v1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_G TLBEntryLo1_ref ((get_TLBEntry_g entry  :  1 words$word)))))))`;


(*val execute_TLBP : unit -> M unit*)

val _ = Define `
 ((execute_TLBP:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__22=  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (checkCP0Access () )
   (sail2_state_monad$read_regS TLBEntryHi_ref)) (\ (w__0 : TLBEntryHiReg) .  sail2_state_monad$bindS
   (tlbSearch ((get_TLBEntryHiReg_bits w__0  :  64 words$word))  : ( ( 6 words$word)option) M) (\ result . 
   (case result of
     SOME (idx) => sail2_state_monad$seqS
      (sail2_state_monad$write_regS TLBProbe_ref (vec_of_bits [B0]  :  1 words$word)) (sail2_state_monad$write_regS TLBIndex_ref idx)
   | NONE => sail2_state_monad$seqS
      (sail2_state_monad$write_regS TLBProbe_ref (vec_of_bits [B1]  :  1 words$word))
      (sail2_state_monad$write_regS TLBIndex_ref (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))
   )))))`;


(*val execute_Store : WordType -> bool -> mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_Store:WordType -> bool ->(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) width conditional base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (vAddr : 64 bits) =
     ((addrWrapper ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
        StoreData width
       :  64 words$word)) in sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val . 
   if ((~ ((isAddressAligned vAddr width)))) then SignalExceptionBadAddr AdES vAddr
   else sail2_state_monad$bindS
     (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr . 
     if conditional then sail2_state_monad$bindS
       (sail2_state_monad$read_regS CP0LLBit_ref  : ( 1 words$word) M) (\ (w__1 : 1 bits) .  sail2_state_monad$bindS
       (if ((bit_to_bool ((access_vec_dec w__1 (( 0 : int):ii))))) then
          (case width of
            W0 =>
             MEMw_conditional_wrapper pAddr (( 4 : int):ii)
               ((subrange_vec_dec rt_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          | D => MEMw_conditional_wrapper pAddr (( 8 : int):ii) rt_val
          | _ => sail2_state_monad$throwS (Error_internal_error () )
          )
        else sail2_state_monad$returnS F) (\ (success : bool) . 
       wGPR rt ((mips_zero_extend (( 64 : int):ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
     else
       (case width of
         B => MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec rt_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
       | H => MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec rt_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
       | W0 => MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec rt_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
       | D => MEMw_wrapper pAddr (( 8 : int):ii) rt_val
       ))))))`;


(*val execute_SYSCALL : unit -> M unit*)

val _ = Define `
 ((execute_SYSCALL:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__14=  (SignalException Sys))`;


(*val execute_SYNC : unit -> M unit*)

val _ = Define `
 ((execute_SYNC:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__17=  (MEM_sync () ))`;


(*val execute_SWR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SWR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) StoreData
        WR
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr . 
   let wordAddr =
     ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word))
        (vec_of_bits [B0;B0]  :  2 words$word)
       :  64 words$word)) in sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__12 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   if (((b__12 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
   else if (((b__12 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
   else if (((b__12 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
   else MEMw_wrapper wordAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))))))`;


(*val execute_SWL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SWL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) StoreData
        WL
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__8 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   if (((b__8 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
   else if (((b__8 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 8 : int):ii)  :  24 words$word))
   else if (((b__8 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word))
   else MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word)))))))`;


(*val execute_SUBU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SUBU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     wGPR rd
       ((mips_sign_extend (( 64 : int):ii)
           ((sub_vec ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
               ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
              :  32 words$word))
          :  64 words$word))))))`;


(*val execute_SUB : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SUB:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let (temp33 : 33 bits) =
       ((sub_vec
          ((mips_sign_extend (( 33 : int):ii) ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
             :  33 words$word))
          ((mips_sign_extend (( 33 : int):ii) ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
             :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec temp33 (( 32 : int):ii)))))
            ((bit_to_bool ((access_vec_dec temp33 (( 31 : int):ii))))))) then
       SignalException Ov
     else
       wGPR rd
         ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec temp33 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  64 words$word))))))`;


(*val execute_SRLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
   if ((NotWordVal temp)) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (shift_bits_right 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     wGPR rd ((mips_sign_extend (( 64 : int):ii) w__2  :  64 words$word)))))))`;


(*val execute_SRL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   if ((NotWordVal temp)) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (shift_bits_right 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     wGPR rd ((mips_sign_extend (( 64 : int):ii) w__1  :  64 words$word))))))`;


(*val execute_SRAV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRAV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
   if ((NotWordVal temp)) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (shift_bits_right_arith 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     wGPR rd ((mips_sign_extend (( 64 : int):ii) w__2  :  64 words$word)))))))`;


(*val execute_SRA : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRA:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   if ((NotWordVal temp)) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (shift_bits_right_arith 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     wGPR rd ((mips_sign_extend (( 64 : int):ii) w__1  :  64 words$word))))))`;


(*val execute_SLTU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLTU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val . 
   wGPR rd
     ((mips_zero_extend (( 64 : int):ii)
         (if ((zopz0zI_u rs_val rt_val)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word))))))`;


(*val execute_SLTIU : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SLTIU:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val . 
   let (immext : 64 bits) = ((mips_sign_extend (( 64 : int):ii) imm  :  64 words$word)) in
   wGPR rt
     ((mips_zero_extend (( 64 : int):ii)
         (if ((zopz0zI_u rs_val immext)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word)))))`;


(*val execute_SLTI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SLTI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=
    (let imm_val = (integer_word$w2i imm) in sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs_val = (integer_word$w2i w__0) in
   wGPR rt
     ((mips_zero_extend (( 64 : int):ii)
         (if ((rs_val < imm_val)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word)))))`;


(*val execute_SLT : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLT:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd
     ((mips_zero_extend (( 64 : int):ii)
         (if ((zopz0zI_s w__0 w__1)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word))))))`;


(*val execute_SLLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rt32 = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (shift_bits_left instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
   wGPR rd ((mips_sign_extend (( 64 : int):ii) w__2  :  64 words$word)))))))`;


(*val execute_SLL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rt32 = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (shift_bits_left instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   wGPR rd ((mips_sign_extend (( 64 : int):ii) w__1  :  64 words$word))))))`;


(*val execute_SDR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SDR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) StoreData
        DR
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let wordAddr =
     ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 3 : int):ii)  :  61 words$word))
        (vec_of_bits [B0;B0;B0]  :  3 words$word)
       :  64 words$word)) in
   let b__40 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   if (((b__40 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
   else if (((b__40 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
   else if (((b__40 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
   else if (((b__40 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
   else if (((b__40 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 5 : int):ii) ((subrange_vec_dec reg_val (( 39 : int):ii) (( 0 : int):ii)  :  40 words$word))
   else if (((b__40 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 6 : int):ii) ((subrange_vec_dec reg_val (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
   else if (((b__40 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 7 : int):ii) ((subrange_vec_dec reg_val (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
   else MEMw_wrapper wordAddr (( 8 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))))`;


(*val execute_SDL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SDL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) StoreData
        DL
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__32 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   if (((b__32 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 8 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
   else if (((b__32 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 7 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 8 : int):ii)  :  56 words$word))
   else if (((b__32 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 6 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 16 : int):ii)  :  48 words$word))
   else if (((b__32 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 5 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 24 : int):ii)  :  40 words$word))
   else if (((b__32 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
   else if (((b__32 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 40 : int):ii)  :  24 words$word))
   else if (((b__32 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 48 : int):ii)  :  16 words$word))
   else MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word)))))))`;


(*val execute_RI : unit -> M unit*)

val _ = Define `
 ((execute_RI:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__24=  (SignalException ResI))`;


(*val execute_RDHWR : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_RDHWR:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd=  (sail2_state_monad$bindS
   (getAccessLevel () ) (\ accessLevel . 
   let (haveAccessLevel : bool) = (accessLevel = Kernel) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
   let (haveCU0 : bool) =
     (B1 = ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 0 : int):ii)))) in
   let rdi = (lem$w2ui rd) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS CP0HWREna_ref  : ( 32 words$word) M) (\ (w__1 : 32 bits) . 
   let (haveHWREna : bool) = (B1 = ((access_vec_dec w__1 rdi))) in sail2_state_monad$seqS
   (if ((~ (((haveAccessLevel \/ (((haveCU0 \/ haveHWREna)))))))) then SignalException ResI
    else sail2_state_monad$returnS () )
   (let b__146 = rd in sail2_state_monad$bindS
   (if (((b__146 = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) then
      sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))) then
      sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS CP0Count_ref  : ( 32 words$word) M) (\ (w__2 : 32 bits) . 
      sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) w__2  :  64 words$word)))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))) then
      sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B1]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))) then
      (sail2_state_monad$read_regS CP0UserLocal_ref  : ( 64 words$word) M)
    else (SignalException ResI  : ( 64 words$word) M)) (\ (temp : 64 bits) . 
   wGPR rt temp)))))))`;


(*val execute_ORI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ORI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((or_vec w__0 ((mips_zero_extend (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_OR : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_OR:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((or_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_NOR : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_NOR:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((not_vec ((or_vec w__0 w__1  :  64 words$word))  :  64 words$word))))))`;


(*val execute_MULTU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MULTU:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (result : 64 bits) .  sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     HI_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
        :  64 words$word)))
   (sail2_state_monad$write_regS
     LO_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
        :  64 words$word))))))))`;


(*val execute_MULT : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MULT:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (result : 64 bits) .  sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     HI_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
        :  64 words$word)))
   (sail2_state_monad$write_regS
     LO_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
        :  64 words$word))))))))`;


(*val execute_MUL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MUL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal . 
   let (result : 64 bits) =
     ((mips_sign_extend (( 64 : int):ii)
        ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (w__1 :  64 words$word) . 
   wGPR rd w__1)))))`;


(*val execute_MTLO : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MTLO:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  sail2_state_monad$write_regS LO_ref w__0)))`;


(*val execute_MTHI : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MTHI:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  sail2_state_monad$write_regS HI_ref w__0)))`;


(*val execute_MTC0 : mword ty5 -> mword ty5 -> mword ty3 -> bool -> M unit*)

val _ = Define `
 ((execute_MTC0:(5)words$word ->(5)words$word ->(3)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sel double=  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (checkCP0Access () )
   (rGPR rt  : ( 64 words$word) M)) (\ reg_val . 
   (case (rd, sel) of
     (b__108, b__109) =>
      if ((((((b__108 = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS TLBIndex_ref ((mask (( 6 : int):ii) reg_val  :  6 words$word))
      else if ((((((b__108 = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS () 
      else if ((((((b__108 = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        set_TLBEntryLoReg_bits TLBEntryLo0_ref reg_val
      else if ((((((b__108 = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        set_TLBEntryLoReg_bits TLBEntryLo1_ref reg_val
      else if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        set_ContextReg_PTEBase TLBContext_ref
          ((subrange_vec_dec reg_val (( 63 : int):ii) (( 23 : int):ii)  :  41 words$word))
      else if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS CP0UserLocal_ref reg_val
      else if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS TLBPageMask_ref ((subrange_vec_dec reg_val (( 28 : int):ii) (( 13 : int):ii)  :  16 words$word))
      else if ((((((b__108 = (vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$seqS
        (sail2_state_monad$write_regS TLBWired_ref ((mask (( 6 : int):ii) reg_val  :  6 words$word)))
        (sail2_state_monad$write_regS TLBRandom_ref TLBIndexMax)
      else if ((((((b__108 = (vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS
          CP0HWREna_ref
          ((concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 29 : int):ii)  :  3 words$word))
              ((concat_vec
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                B0;B0]
                    :  25 words$word) ((subrange_vec_dec reg_val (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
                 :  29 words$word))
             :  32 words$word))
      else if ((((((b__108 = (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS () 
      else if ((((((b__108 = (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS CP0Count_ref ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
      else if ((((((b__108 = (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$seqS (sail2_state_monad$seqS
        (set_TLBEntryHiReg_R TLBEntryHi_ref
          ((subrange_vec_dec reg_val (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)))
        (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref
          ((subrange_vec_dec reg_val (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word))))
        (set_TLBEntryHiReg_ASID TLBEntryHi_ref
          ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))
      else if ((((((b__108 = (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS CP0Compare_ref ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))
        (sail2_state_monad$read_regS CP0Cause_ref)) (\ (w__0 : CauseReg) . 
        set_CauseReg_IP CP0Cause_ref
          ((and_vec ((get_CauseReg_IP w__0  :  8 words$word))
              (vec_of_bits [B0;B1;B1;B1;B1;B1;B1;B1]  :  8 words$word)
             :  8 words$word)))
      else if ((((((b__108 = (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
        (set_StatusReg_CU CP0Status_ref ((subrange_vec_dec reg_val (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)))
        (set_StatusReg_BEV CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 22 : int):ii)))  :  1 words$word))))
        (set_StatusReg_IM CP0Status_ref ((subrange_vec_dec reg_val (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word))))
        (set_StatusReg_KX CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 7 : int):ii)))  :  1 words$word))))
        (set_StatusReg_SX CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 6 : int):ii)))  :  1 words$word))))
        (set_StatusReg_UX CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 5 : int):ii)))  :  1 words$word))))
        (set_StatusReg_KSU CP0Status_ref ((subrange_vec_dec reg_val (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word))))
        (set_StatusReg_ERL CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 2 : int):ii)))  :  1 words$word))))
        (set_StatusReg_EXL CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 1 : int):ii)))  :  1 words$word))))
        (set_StatusReg_IE CP0Status_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 0 : int):ii)))  :  1 words$word)))
      else if ((((((b__108 = (vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (set_CauseReg_IV CP0Cause_ref
          ((cast_unit_vec0 ((access_vec_dec reg_val (( 23 : int):ii)))  :  1 words$word)))
        (sail2_state_monad$read_regS CP0Cause_ref)) (\ (w__1 : CauseReg) . 
        let ip = ((get_CauseReg_IP w__1  :  8 words$word)) in
        set_CauseReg_IP CP0Cause_ref
          ((concat_vec ((subrange_vec_dec ip (( 7 : int):ii) (( 2 : int):ii)  :  6 words$word))
              ((subrange_vec_dec reg_val (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word))
             :  8 words$word)))
      else if ((((((b__108 = (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS CP0EPC_ref reg_val
      else if ((((((b__108 = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS CP0ConfigK0_ref ((subrange_vec_dec reg_val (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
      else if ((((((b__108 = (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        set_XContextReg_XPTEBase TLBXContext_ref
          ((subrange_vec_dec reg_val (( 63 : int):ii) (( 33 : int):ii)  :  31 words$word))
      else if ((((((b__108 = (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))) /\ (((b__109 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$write_regS CP0ErrorEPC_ref reg_val
      else SignalException ResI
   ))))`;


(*val execute_MSUBU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MSUBU:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((sub_vec
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word)) mul_result
       :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     HI_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
        :  64 words$word)))
   (sail2_state_monad$write_regS
     LO_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
        :  64 words$word))))))))))`;


(*val execute_MSUB : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MSUB:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((sub_vec
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word)) mul_result
       :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     HI_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
        :  64 words$word)))
   (sail2_state_monad$write_regS
     LO_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
        :  64 words$word))))))))))`;


(*val execute_MOVZ : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MOVZ:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   if (((w__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then sail2_state_monad$bindS
     (rGPR rs  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else sail2_state_monad$returnS () )))`;


(*val execute_MOVN : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MOVN:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   if (((w__0 <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then sail2_state_monad$bindS
     (rGPR rs  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else sail2_state_monad$returnS () )))`;


(*val execute_MFLO : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MFLO:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)))`;


(*val execute_MFHI : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MFHI:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)))`;


(*val execute_MFC0 : mword ty5 -> mword ty5 -> mword ty3 -> bool -> M unit*)

val _ = Define `
 ((execute_MFC0:(5)words$word ->(5)words$word ->(3)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sel double=  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (checkCP0Access () )
   (case (rd, sel) of
     (b__48, b__49) =>
      if ((((((b__48 = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBIndex_ref  : ( 6 words$word) M) (\ (w__0 : TLBIndexT) . 
        let (idx : 31 bits) = ((mips_zero_extend (( 31 : int):ii) w__0  :  31 words$word)) in sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBProbe_ref  : ( 1 words$word) M) (\ (w__1 : 1 bits) . 
        sail2_state_monad$returnS ((concat_vec
                   (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  32 words$word) ((concat_vec w__1 idx  :  32 words$word))
                  :  64 words$word))))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M) (\ (w__2 : TLBIndexT) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) w__2  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBEntryLo0_ref) (\ (w__3 : TLBEntryLoReg) . 
        sail2_state_monad$returnS ((get_TLBEntryLoReg_bits w__3  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBEntryLo1_ref) (\ (w__4 : TLBEntryLoReg) . 
        sail2_state_monad$returnS ((get_TLBEntryLoReg_bits w__4  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBContext_ref) (\ (w__5 : ContextReg) . 
        sail2_state_monad$returnS ((get_ContextReg_bits w__5  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
        (sail2_state_monad$read_regS CP0UserLocal_ref  : ( 64 words$word) M)
      else if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBPageMask_ref  : ( 16 words$word) M) (\ (w__7 : 16 bits) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii)
                   ((concat_vec w__7
                       (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
                      :  28 words$word))
                  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBWired_ref  : ( 6 words$word) M) (\ (w__8 : TLBIndexT) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) w__8  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS CP0HWREna_ref  : ( 32 words$word) M) (\ (w__9 : 32 bits) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) w__9  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        (sail2_state_monad$read_regS CP0BadVAddr_ref  : ( 64 words$word) M)
      else if ((((((b__48 = (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS CP0Count_ref  : ( 32 words$word) M) (\ (w__11 : 32 bits) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) w__11  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBEntryHi_ref) (\ (w__12 : TLBEntryHiReg) . 
        sail2_state_monad$returnS ((get_TLBEntryHiReg_bits w__12  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS CP0Compare_ref  : ( 32 words$word) M) (\ (w__13 : 32 bits) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) w__13  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS CP0Status_ref) (\ (w__14 : StatusReg) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) ((get_StatusReg_bits w__14  :  32 words$word))  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS CP0Cause_ref) (\ (w__15 : CauseReg) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) ((get_CauseReg_bits w__15  :  32 words$word))  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        (sail2_state_monad$read_regS CP0EPC_ref  : ( 64 words$word) M)
      else if ((((((b__48 = (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii)
                   (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  32 words$word)
                  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B1;B1;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B1;B1;B1]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS CP0ConfigK0_ref  : ( 3 words$word) M) (\ (w__17 : 3 bits) . 
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii)
                   ((concat_vec (vec_of_bits [B1]  :  1 words$word)
                       ((concat_vec
                           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  15 words$word)
                           ((concat_vec (vec_of_bits [B1]  :  1 words$word)
                               ((concat_vec (vec_of_bits [B1;B0]  :  2 words$word)
                                   ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                                       ((concat_vec (vec_of_bits [B0;B0;B1]  :  3 words$word)
                                           ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                               w__17
                                              :  7 words$word))
                                          :  10 words$word))
                                      :  13 words$word))
                                  :  15 words$word))
                              :  16 words$word))
                          :  31 words$word))
                      :  32 words$word))
                  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii)
                   ((concat_vec (vec_of_bits [B1]  :  1 words$word)
                       ((concat_vec TLBIndexMax
                           ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                               ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                                   ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                                       ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                                           ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                                               ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                                                   ((concat_vec
                                                       ((bool_to_bits have_cp2  :  1 words$word))
                                                       ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                                                           ((concat_vec
                                                               (vec_of_bits [B0]  :  1 words$word)
                                                               ((concat_vec
                                                                   (vec_of_bits [B0]  :  1 words$word)
                                                                   ((concat_vec
                                                                       (vec_of_bits [B0]
                                                                         :  1 words$word)
                                                                       ((concat_vec
                                                                           (vec_of_bits [B0]
                                                                             :  1 words$word)
                                                                           (vec_of_bits [B0]
                                                                             :  1 words$word)
                                                                          :  2 words$word))
                                                                      :  3 words$word))
                                                                  :  4 words$word))
                                                              :  5 words$word))
                                                          :  6 words$word))
                                                      :  7 words$word))
                                                  :  10 words$word))
                                              :  13 words$word))
                                          :  16 words$word))
                                      :  19 words$word))
                                  :  22 words$word))
                              :  25 words$word))
                          :  31 words$word))
                      :  32 words$word))
                  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii)
                   ((concat_vec (vec_of_bits [B1]  :  1 words$word)
                       ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                           ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                               ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                   ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                       ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                           ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                               ((concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                                   (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
                                                  :  8 words$word))
                                              :  12 words$word))
                                          :  16 words$word))
                                      :  20 words$word))
                                  :  24 words$word))
                              :  28 words$word))
                          :  31 words$word))
                      :  32 words$word))
                  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) then
        sail2_state_monad$returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                 :  64 words$word)
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) then
        sail2_state_monad$returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                 :  64 words$word)
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        (sail2_state_monad$read_regS CP0LLAddr_ref  : ( 64 words$word) M)
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        sail2_state_monad$returnS ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
      else if ((((((b__48 = (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS TLBXContext_ref) (\ (w__19 : XContextReg) . 
        sail2_state_monad$returnS ((get_XContextReg_bits w__19  :  64 words$word)))
      else if ((((((b__48 = (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))) /\ (((b__49 = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
        (sail2_state_monad$read_regS CP0ErrorEPC_ref  : ( 64 words$word) M)
      else (SignalException ResI  : ( 64 words$word) M)
   )) (\ (result : 64 bits) . 
   wGPR rt
     (if double then result
      else
        (mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  64 words$word)))))`;


(*val execute_MADDU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MADDU:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((add_vec mul_result
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     HI_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
        :  64 words$word)))
   (sail2_state_monad$write_regS
     LO_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
        :  64 words$word))))))))))`;


(*val execute_MADD : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MADD:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      sail2_state_monad$returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((add_vec mul_result
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     HI_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
        :  64 words$word)))
   (sail2_state_monad$write_regS
     LO_ref
     ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
        :  64 words$word))))))))))`;


(*val execute_Load : WordType -> bool -> bool -> mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_Load:WordType -> bool -> bool ->(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) width sign linked base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (vAddr : 64 bits) =
     ((addrWrapper ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
        LoadData width
       :  64 words$word)) in
   if ((~ ((isAddressAligned vAddr width)))) then SignalExceptionBadAddr AdEL vAddr
   else sail2_state_monad$bindS
     (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
     (if linked then sail2_state_monad$seqS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
        (sail2_state_monad$write_regS CP0LLAddr_ref pAddr))
        (case width of
          W0 => sail2_state_monad$bindS
           (MEMr_reserve_wrapper pAddr (( 4 : int):ii)  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
           sail2_state_monad$returnS ((extendLoad w__1 sign  :  64 words$word)))
        | D => sail2_state_monad$bindS
           (MEMr_reserve_wrapper pAddr (( 8 : int):ii)  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
           sail2_state_monad$returnS ((extendLoad w__2 sign  :  64 words$word)))
        | _ => sail2_state_monad$throwS (Error_internal_error () )
        )
      else
        (case width of
          B => sail2_state_monad$bindS
           (MEMr_wrapper (( 8 : int):ii) pAddr (( 1 : int):ii)  : ( 8 words$word) M) (\ (w__5 :  8 words$word) . 
           sail2_state_monad$returnS ((extendLoad w__5 sign  :  64 words$word)))
        | H => sail2_state_monad$bindS
           (MEMr_wrapper (( 16 : int):ii) pAddr (( 2 : int):ii)  : ( 16 words$word) M) (\ (w__6 :  16 words$word) . 
           sail2_state_monad$returnS ((extendLoad w__6 sign  :  64 words$word)))
        | W0 => sail2_state_monad$bindS
           (MEMr_wrapper (( 32 : int):ii) pAddr (( 4 : int):ii)  : ( 32 words$word) M) (\ (w__7 :  32 words$word) . 
           sail2_state_monad$returnS ((extendLoad w__7 sign  :  64 words$word)))
        | D => sail2_state_monad$bindS
           (MEMr_wrapper (( 64 : int):ii) pAddr (( 8 : int):ii)  : ( 64 words$word) M) (\ (w__8 :  64 words$word) . 
           sail2_state_monad$returnS ((extendLoad w__8 sign  :  64 words$word)))
        )) (\ (memResult : 64 bits) . 
     wGPR rt memResult)))))`;


(*val execute_LWR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LWR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData WR
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (MEMr_wrapper (( 32 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word))
          (vec_of_bits [B0;B0]  :  2 words$word)
         :  64 words$word)) (( 4 : int):ii)
     : ( 32 words$word) M) (\ mem_val .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__4 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   let (result : 32 bits) =
     (if (((b__4 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 8 : int):ii)  :  24 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))
         :  32 words$word)
     else if (((b__4 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word))
         :  32 words$word)
     else if (((b__4 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):ii) (( 8 : int):ii)  :  24 words$word))
         :  32 words$word)
     else mem_val) in
   wGPR rt ((mips_sign_extend (( 64 : int):ii) result  :  64 words$word))))))))`;


(*val execute_LWL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LWL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData WL
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (MEMr_wrapper (( 32 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word))
          (vec_of_bits [B0;B0]  :  2 words$word)
         :  64 words$word)) (( 4 : int):ii)
     : ( 32 words$word) M) (\ mem_val .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__0 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   let (result : 32 bits) =
     (if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then mem_val
     else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec mem_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
         :  32 words$word)
     else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec mem_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
         :  32 words$word)
     else
       (concat_vec ((subrange_vec_dec mem_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
         :  32 words$word)) in
   wGPR rt ((mips_sign_extend (( 64 : int):ii) result  :  64 words$word))))))))`;


(*val execute_LUI : mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LUI:(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt imm=
    (wGPR rt
     ((mips_sign_extend (( 64 : int):ii)
         ((concat_vec imm
             (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)
            :  32 words$word))
        :  64 words$word))))`;


(*val execute_LDR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LDR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData DR
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (MEMr_wrapper (( 64 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 3 : int):ii)  :  61 words$word))
          (vec_of_bits [B0;B0;B0]  :  3 words$word)
         :  64 words$word)) (( 8 : int):ii)
     : ( 64 words$word) M) (\ mem_val .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__24 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   wGPR rt
     (if (((b__24 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 8 : int):ii)  :  56 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 16 : int):ii)  :  48 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 48 : int):ii)  :  16 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 24 : int):ii)  :  40 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 40 : int):ii)  :  24 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 40 : int):ii)  :  24 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 24 : int):ii)  :  40 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 48 : int):ii)  :  16 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 16 : int):ii)  :  48 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 8 : int):ii)  :  56 words$word))
          :  64 words$word)
      else mem_val)))))))`;


(*val execute_LDL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LDL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base rt offset=  (sail2_state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let vAddr =
     ((addrWrapperUnaligned
        ((add_vec ((mips_sign_extend (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData DL
       :  64 words$word)) in sail2_state_monad$bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  sail2_state_monad$bindS
   (MEMr_wrapper (( 64 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 3 : int):ii)  :  61 words$word))
          (vec_of_bits [B0;B0;B0]  :  3 words$word)
         :  64 words$word)) (( 8 : int):ii)
     : ( 64 words$word) M) (\ mem_val .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__16 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   wGPR rt
     (if (((b__16 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then mem_val
      else if (((b__16 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
           ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
           ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 39 : int):ii) (( 0 : int):ii)  :  40 words$word))
           ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
           ((subrange_vec_dec reg_val (( 39 : int):ii) (( 0 : int):ii)  :  40 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
           ((subrange_vec_dec reg_val (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
          :  64 words$word)
      else
        (concat_vec ((subrange_vec_dec mem_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
           ((subrange_vec_dec reg_val (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
          :  64 words$word))))))))`;


(*val execute_JR : mword ty5 -> M unit*)

val _ = Define `
 ((execute_JR:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs=  (sail2_state_monad$bindS (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  execute_branch w__0)))`;


(*val execute_JALR : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_JALR:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (execute_branch w__0)
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) . 
   wGPR rd ((add_vec_int w__1 (( 8 : int):ii)  :  64 words$word))))))`;


(*val execute_JAL : mword ty26 -> M unit*)

val _ = Define `
 ((execute_JAL:(26)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) offset=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (execute_branch
     ((concat_vec
         ((subrange_vec_dec ((add_vec_int w__0 (( 4 : int):ii)  :  64 words$word)) (( 63 : int):ii) (( 28 : int):ii)  :  36 words$word))
         ((concat_vec offset (vec_of_bits [B0;B0]  :  2 words$word)  :  28 words$word))
        :  64 words$word)))
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) . 
   wGPR (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word) ((add_vec_int w__1 (( 8 : int):ii)  :  64 words$word))))))`;


(*val execute_J : mword ty26 -> M unit*)

val _ = Define `
 ((execute_J:(26)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) offset=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) . 
   execute_branch
     ((concat_vec
         ((subrange_vec_dec ((add_vec_int w__0 (( 4 : int):ii)  :  64 words$word)) (( 63 : int):ii) (( 28 : int):ii)  :  36 words$word))
         ((concat_vec offset (vec_of_bits [B0;B0]  :  2 words$word)  :  28 words$word))
        :  64 words$word)))))`;


(*val execute_HCF : unit -> unit*)

val _ = Define `
 ((execute_HCF:unit -> unit) g__18=  () )`;


(*val execute_ERET : unit -> M unit*)

val _ = Define `
 ((execute_ERET:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__23=  (sail2_state_monad$seqS
   (checkCP0Access () )
   (let (_ : unit) = (ERETHook () ) in sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0LLBit_ref (vec_of_bits [B0]  :  1 words$word))
   (sail2_state_monad$read_regS CP0Status_ref)) (\ (w__0 : StatusReg) . 
   if (((((bits_to_bool ((get_StatusReg_ERL w__0  :  1 words$word)))) = ((bit_to_bool B1))))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS CP0ErrorEPC_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  sail2_state_monad$seqS
     (sail2_state_monad$write_regS nextPC_ref w__1) (set_StatusReg_ERL CP0Status_ref (vec_of_bits [B0]  :  1 words$word)))
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS CP0EPC_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) .  sail2_state_monad$seqS
     (sail2_state_monad$write_regS nextPC_ref w__2) (set_StatusReg_EXL CP0Status_ref (vec_of_bits [B0]  :  1 words$word)))))))`;


(*val execute_DSUBU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSUBU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((sub_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_DSUB : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSUB:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let (temp65 : 65 bits) =
     ((sub_vec ((mips_sign_extend (( 65 : int):ii) w__0  :  65 words$word))
        ((mips_sign_extend (( 65 : int):ii) w__1  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec temp65 (( 64 : int):ii)))))
          ((bit_to_bool ((access_vec_dec temp65 (( 63 : int):ii))))))) then
     SignalException Ov
   else wGPR rd ((subrange_vec_dec temp65 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))))))`;


(*val execute_DSRLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) in sail2_state_monad$bindS
   (shift_bits_right instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)))))`;


(*val execute_DSRL32 : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRL32:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   let sa32 = ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word)) in sail2_state_monad$bindS
   (shift_bits_right instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict temp sa32  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  sail2_state_monad$bindS
   (shift_bits_right instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRAV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRAV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) in sail2_state_monad$bindS
   (shift_bits_right_arith 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)))))`;


(*val execute_DSRA32 : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRA32:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   let sa32 = ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word)) in sail2_state_monad$bindS
   (shift_bits_right_arith 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict temp sa32  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRA : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRA:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  sail2_state_monad$bindS
   (shift_bits_right_arith 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSLLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSLLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  sail2_state_monad$bindS
   (shift_bits_left instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict w__0 ((subrange_vec_dec w__1 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word))  : ( 64 words$word) M) (\ (w__2 :
      64 words$word) . 
   wGPR rd w__2)))))`;


(*val execute_DSLL32 : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSLL32:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (shift_bits_left instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict w__0 ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word))
     : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd w__1))))`;


(*val execute_DSLL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSLL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rt rd sa=  (sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (shift_bits_left instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict w__0 sa  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1))))`;


(*val execute_DMULTU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DMULTU:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let result = ((mult_vec w__0 w__1  :  128 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS HI_ref ((subrange_vec_dec result (( 127 : int):ii) (( 64 : int):ii)  :  64 words$word)))
   (sail2_state_monad$write_regS LO_ref ((subrange_vec_dec result (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))))`;


(*val execute_DMULT : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DMULT:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let result = ((mults_vec w__0 w__1  :  128 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS HI_ref ((subrange_vec_dec result (( 127 : int):ii) (( 64 : int):ii)  :  64 words$word)))
   (sail2_state_monad$write_regS LO_ref ((subrange_vec_dec result (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))))`;


(*val execute_DIVU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DIVU:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ (((((NotWordVal rtVal)) \/ (((rtVal = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  64 words$word)))))))))) then sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 : 32 bits) .  sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__1 : 32 bits) . 
      sail2_state_monad$returnS (w__0, w__1)))
    else
      let si = (lem$w2ui ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let ti = (lem$w2ui ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let qi = (hardware_quot si ti) in
      let ri = (hardware_mod si ti) in
      sail2_state_monad$returnS ((to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) qi  :  32 words$word),
              (to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) ri  :  32 words$word))) (\ varstup .  let (q, r) = varstup in sail2_state_monad$seqS
   (sail2_state_monad$write_regS HI_ref ((mips_sign_extend (( 64 : int):ii) r  :  64 words$word)))
   (sail2_state_monad$write_regS LO_ref ((mips_sign_extend (( 64 : int):ii) q  :  64 words$word))))))))`;


(*val execute_DIV : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DIV:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  sail2_state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ (((((NotWordVal rtVal)) \/ (((rtVal = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  64 words$word)))))))))) then sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 : 32 bits) .  sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__1 : 32 bits) . 
      sail2_state_monad$returnS (w__0, w__1)))
    else
      let si = (integer_word$w2i ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let ti = (integer_word$w2i ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let qi = (hardware_quot si ti) in
      let ri = (si - ((ti * qi))) in
      sail2_state_monad$returnS ((to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) qi  :  32 words$word),
              (to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) ri  :  32 words$word))) (\ varstup .  let (q, r) = varstup in sail2_state_monad$seqS
   (sail2_state_monad$write_regS HI_ref ((mips_sign_extend (( 64 : int):ii) r  :  64 words$word)))
   (sail2_state_monad$write_regS LO_ref ((mips_sign_extend (( 64 : int):ii) q  :  64 words$word))))))))`;


(*val execute_DDIVU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DDIVU:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rsVal = (lem$w2ui w__0) in sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rtVal = (lem$w2ui w__1) in sail2_state_monad$bindS
   (if (((rtVal = (( 0 : int):ii)))) then sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__2 : 64 bits) .  sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__3 : 64 bits) . 
      sail2_state_monad$returnS (w__2, w__3)))
    else
      let qi = (hardware_quot rsVal rtVal) in
      let ri = (hardware_mod rsVal rtVal) in
      sail2_state_monad$returnS ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) qi  :  64 words$word),
              (to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ri  :  64 words$word))) (\ varstup .  let (q, r) = varstup in sail2_state_monad$seqS
   (sail2_state_monad$write_regS LO_ref q) (sail2_state_monad$write_regS HI_ref r))))))`;


(*val execute_DDIV : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DDIV:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rsVal = (integer_word$w2i w__0) in sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rtVal = (integer_word$w2i w__1) in sail2_state_monad$bindS
   (if (((rtVal = (( 0 : int):ii)))) then sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__2 : 64 bits) .  sail2_state_monad$bindS
      (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__3 : 64 bits) . 
      sail2_state_monad$returnS (w__2, w__3)))
    else
      let qi = (hardware_quot rsVal rtVal) in
      let ri = (rsVal - ((qi * rtVal))) in
      sail2_state_monad$returnS ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) qi  :  64 words$word),
              (to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ri  :  64 words$word))) (\ varstup .  let (q, r) = varstup in sail2_state_monad$seqS
   (sail2_state_monad$write_regS LO_ref q) (sail2_state_monad$write_regS HI_ref r))))))`;


(*val execute_DADDU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DADDU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((add_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_DADDIU : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_DADDIU:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((add_vec w__0 ((mips_sign_extend (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_DADDI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_DADDI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (sum65 : 65 bits) =
     ((add_vec ((mips_sign_extend (( 65 : int):ii) w__0  :  65 words$word))
        ((mips_sign_extend (( 65 : int):ii) imm  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec sum65 (( 64 : int):ii)))))
          ((bit_to_bool ((access_vec_dec sum65 (( 63 : int):ii))))))) then
     SignalException Ov
   else wGPR rt ((subrange_vec_dec sum65 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))`;


(*val execute_DADD : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DADD:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let (sum65 : 65 bits) =
     ((add_vec ((mips_sign_extend (( 65 : int):ii) w__0  :  65 words$word))
        ((mips_sign_extend (( 65 : int):ii) w__1  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec sum65 (( 64 : int):ii)))))
          ((bit_to_bool ((access_vec_dec sum65 (( 63 : int):ii))))))) then
     SignalException Ov
   else wGPR rd ((subrange_vec_dec sum65 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))))))`;


(*val execute_CACHE : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_CACHE:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) base op imm=  (checkCP0Access () ))`;


(*val execute_BREAK : unit -> M unit*)

val _ = Define `
 ((execute_BREAK:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__15=  (SignalException Bp))`;


(*val execute_BEQ : mword ty5 -> mword ty5 -> mword ty16 -> bool -> bool -> M unit*)

val _ = Define `
 ((execute_BEQ:(5)words$word ->(5)words$word ->(16)words$word -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rd imm ne likely=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rd  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   if ((bits_to_bool
          ((xor_vec ((bool_to_bits (((w__0 = w__1)))  :  1 words$word))
              ((bool_to_bits ne  :  1 words$word))
             :  1 words$word)))) then
     let (offset : 64 bits) =
       ((add_vec_int
          ((mips_sign_extend (( 64 : int):ii)
              ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
             :  64 words$word)) (( 4 : int):ii)
         :  64 words$word)) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
     execute_branch ((add_vec w__2 offset  :  64 words$word)))
   else if likely then sail2_state_monad$bindS
     (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__3 :  64 words$word) . 
     sail2_state_monad$write_regS nextPC_ref ((add_vec_int w__3 (( 8 : int):ii)  :  64 words$word)))
   else sail2_state_monad$returnS () ))))`;


(*val execute_BCMPZ : mword ty5 -> mword ty16 -> Comparison -> bool -> bool -> M unit*)

val _ = Define `
 ((execute_BCMPZ:(5)words$word ->(16)words$word -> Comparison -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs imm cmp link likely=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) . 
   let linkVal = ((add_vec_int w__0 (( 8 : int):ii)  :  64 words$word)) in sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ regVal . 
   let condition =
     (compare cmp regVal ((mips_zero_extend (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))) in sail2_state_monad$seqS
   (if condition then
      let (offset : 64 bits) =
        ((add_vec_int
           ((mips_sign_extend (( 64 : int):ii)
               ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
              :  64 words$word)) (( 4 : int):ii)
          :  64 words$word)) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
      execute_branch ((add_vec w__1 offset  :  64 words$word)))
    else if likely then sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
      sail2_state_monad$write_regS nextPC_ref ((add_vec_int w__2 (( 8 : int):ii)  :  64 words$word)))
    else sail2_state_monad$returnS () )
   (if link then wGPR (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word) linkVal
   else sail2_state_monad$returnS () )))))`;


(*val execute_ANDI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ANDI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((and_vec w__0 ((mips_zero_extend (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_AND : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_AND:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((and_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_ADDU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_ADDU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     wGPR rd
       ((mips_sign_extend (( 64 : int):ii)
           ((add_vec ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
               ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
              :  32 words$word))
          :  64 words$word))))))`;


(*val execute_ADDIU : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ADDIU:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA . 
   if ((NotWordVal opA)) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rt w__0)
   else
     wGPR rt
       ((mips_sign_extend (( 64 : int):ii)
           ((add_vec ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
               ((mips_sign_extend (( 32 : int):ii) imm  :  32 words$word))
              :  32 words$word))
          :  64 words$word)))))`;


(*val execute_ADDI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ADDI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt imm=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA . 
   if ((NotWordVal opA)) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rt w__0)
   else
     let (sum33 : 33 bits) =
       ((add_vec
          ((mips_sign_extend (( 33 : int):ii) ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
             :  33 words$word)) ((mips_sign_extend (( 33 : int):ii) imm  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec sum33 (( 32 : int):ii)))))
            ((bit_to_bool ((access_vec_dec sum33 (( 31 : int):ii))))))) then
       SignalException Ov
     else
       wGPR rt
         ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec sum33 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  64 words$word)))))`;


(*val execute_ADD : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_ADD:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs rt rd=  (sail2_state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (opA : 64 bits) .  sail2_state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (opB : 64 bits) . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then sail2_state_monad$bindS
     (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let (sum33 : 33 bits) =
       ((add_vec
          ((mips_sign_extend (( 33 : int):ii) ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
             :  33 words$word))
          ((mips_sign_extend (( 33 : int):ii) ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
             :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec sum33 (( 32 : int):ii)))))
            ((bit_to_bool ((access_vec_dec sum33 (( 31 : int):ii))))))) then
       SignalException Ov
     else
       wGPR rd
         ((mips_sign_extend (( 64 : int):ii) ((subrange_vec_dec sum33 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  64 words$word))))))`;


val _ = Define `
 ((execute:ast ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) merge_var=
    ((case merge_var of
     DADDIU (rs,rt,imm) => execute_DADDIU rs rt imm
   | DADDU (rs,rt,rd) => execute_DADDU rs rt rd
   | DADDI (rs,rt,imm) => execute_DADDI rs rt imm
   | DADD (rs,rt,rd) => execute_DADD rs rt rd
   | ADD (rs,rt,rd) => execute_ADD rs rt rd
   | ADDI (rs,rt,imm) => execute_ADDI rs rt imm
   | ADDU (rs,rt,rd) => execute_ADDU rs rt rd
   | ADDIU (rs,rt,imm) => execute_ADDIU rs rt imm
   | DSUBU (rs,rt,rd) => execute_DSUBU rs rt rd
   | DSUB (rs,rt,rd) => execute_DSUB rs rt rd
   | SUB0 (rs,rt,rd) => execute_SUB rs rt rd
   | SUBU (rs,rt,rd) => execute_SUBU rs rt rd
   | AND (rs,rt,rd) => execute_AND rs rt rd
   | ANDI (rs,rt,imm) => execute_ANDI rs rt imm
   | OR (rs,rt,rd) => execute_OR rs rt rd
   | ORI (rs,rt,imm) => execute_ORI rs rt imm
   | NOR (rs,rt,rd) => execute_NOR rs rt rd
   | XOR (rs,rt,rd) => execute_XOR rs rt rd
   | XORI (rs,rt,imm) => execute_XORI rs rt imm
   | LUI (rt,imm) => execute_LUI rt imm
   | DSLL (rt,rd,sa) => execute_DSLL rt rd sa
   | DSLL32 (rt,rd,sa) => execute_DSLL32 rt rd sa
   | DSLLV (rs,rt,rd) => execute_DSLLV rs rt rd
   | DSRA (rt,rd,sa) => execute_DSRA rt rd sa
   | DSRA32 (rt,rd,sa) => execute_DSRA32 rt rd sa
   | DSRAV (rs,rt,rd) => execute_DSRAV rs rt rd
   | DSRL (rt,rd,sa) => execute_DSRL rt rd sa
   | DSRL32 (rt,rd,sa) => execute_DSRL32 rt rd sa
   | DSRLV (rs,rt,rd) => execute_DSRLV rs rt rd
   | SLL (rt,rd,sa) => execute_SLL rt rd sa
   | SLLV (rs,rt,rd) => execute_SLLV rs rt rd
   | SRA (rt,rd,sa) => execute_SRA rt rd sa
   | SRAV (rs,rt,rd) => execute_SRAV rs rt rd
   | SRL (rt,rd,sa) => execute_SRL rt rd sa
   | SRLV (rs,rt,rd) => execute_SRLV rs rt rd
   | SLT (rs,rt,rd) => execute_SLT rs rt rd
   | SLTI (rs,rt,imm) => execute_SLTI rs rt imm
   | SLTU (rs,rt,rd) => execute_SLTU rs rt rd
   | SLTIU (rs,rt,imm) => execute_SLTIU rs rt imm
   | MOVN (rs,rt,rd) => execute_MOVN rs rt rd
   | MOVZ (rs,rt,rd) => execute_MOVZ rs rt rd
   | MFHI (rd) => execute_MFHI rd
   | MFLO (rd) => execute_MFLO rd
   | MTHI (rs) => execute_MTHI rs
   | MTLO (rs) => execute_MTLO rs
   | MUL (rs,rt,rd) => execute_MUL rs rt rd
   | MULT (rs,rt) => execute_MULT rs rt
   | MULTU (rs,rt) => execute_MULTU rs rt
   | DMULT (rs,rt) => execute_DMULT rs rt
   | DMULTU (rs,rt) => execute_DMULTU rs rt
   | MADD (rs,rt) => execute_MADD rs rt
   | MADDU (rs,rt) => execute_MADDU rs rt
   | MSUB (rs,rt) => execute_MSUB rs rt
   | MSUBU (rs,rt) => execute_MSUBU rs rt
   | DIV0 (rs,rt) => execute_DIV rs rt
   | DIVU (rs,rt) => execute_DIVU rs rt
   | DDIV (rs,rt) => execute_DDIV rs rt
   | DDIVU (rs,rt) => execute_DDIVU rs rt
   | J (offset) => execute_J offset
   | JAL (offset) => execute_JAL offset
   | JR (rs) => execute_JR rs
   | JALR (rs,rd) => execute_JALR rs rd
   | BEQ (rs,rd,imm,ne,likely) => execute_BEQ rs rd imm ne likely
   | BCMPZ (rs,imm,cmp,link,likely) => execute_BCMPZ rs imm cmp link likely
   | SYSCALL (g__14) => execute_SYSCALL g__14
   | BREAK (g__15) => execute_BREAK g__15
   | WAIT (g__16) => execute_WAIT g__16
   | TRAPREG (rs,rt,cmp) => execute_TRAPREG rs rt cmp
   | TRAPIMM (rs,imm,cmp) => execute_TRAPIMM rs imm cmp
   | Load (width,sign,linked,base,rt,offset) => execute_Load width sign linked base rt offset
   | Store (width,conditional,base,rt,offset) => execute_Store width conditional base rt offset
   | LWL (base,rt,offset) => execute_LWL base rt offset
   | LWR (base,rt,offset) => execute_LWR base rt offset
   | SWL (base,rt,offset) => execute_SWL base rt offset
   | SWR (base,rt,offset) => execute_SWR base rt offset
   | LDL (base,rt,offset) => execute_LDL base rt offset
   | LDR (base,rt,offset) => execute_LDR base rt offset
   | SDL (base,rt,offset) => execute_SDL base rt offset
   | SDR (base,rt,offset) => execute_SDR base rt offset
   | CACHE (base,op,imm) => execute_CACHE base op imm
   | SYNC (g__17) => execute_SYNC g__17
   | MFC0 (rt,rd,sel,double) => execute_MFC0 rt rd sel double
   | HCF (g__18) => sail2_state_monad$returnS ((execute_HCF g__18))
   | MTC0 (rt,rd,sel,double) => execute_MTC0 rt rd sel double
   | TLBWI (g__19) => execute_TLBWI g__19
   | TLBWR (g__20) => execute_TLBWR g__20
   | TLBR (g__21) => execute_TLBR g__21
   | TLBP (g__22) => execute_TLBP g__22
   | RDHWR (rt,rd) => execute_RDHWR rt rd
   | ERET (g__23) => execute_ERET g__23
   | RI (g__24) => execute_RI g__24
   )))`;


(*val supported_instructions : ast -> maybe ast*)

val _ = Define `
 ((supported_instructions:ast ->(ast)option) instr=  (SOME instr))`;


(*val initialize_registers : unit -> M unit*)

val _ = Define `
 ((initialize_registers:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS PC_ref w__0)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__1 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS nextPC_ref w__1)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__2 : 1 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBProbe_ref w__2)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 6 : int):ii)  : ( 6 words$word) M)) (\ (w__3 : TLBIndexT) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBIndex_ref w__3)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 6 : int):ii)  : ( 6 words$word) M)) (\ (w__4 : TLBIndexT) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBRandom_ref w__4)
   (undefined_TLBEntryLoReg () )) (\ (w__5 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntryLo0_ref w__5)
   (undefined_TLBEntryLoReg () )) (\ (w__6 : TLBEntryLoReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntryLo1_ref w__6)
   (undefined_ContextReg () )) (\ (w__7 : ContextReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBContext_ref w__7)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M)) (\ (w__8 : 16 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBPageMask_ref w__8)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 6 : int):ii)  : ( 6 words$word) M)) (\ (w__9 : TLBIndexT) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBWired_ref w__9)
   (undefined_TLBEntryHiReg () )) (\ (w__10 : TLBEntryHiReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntryHi_ref w__10)
   (undefined_XContextReg () )) (\ (w__11 : XContextReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBXContext_ref w__11)
   (undefined_TLBEntry () )) (\ (w__12 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry00_ref w__12)
   (undefined_TLBEntry () )) (\ (w__13 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry01_ref w__13)
   (undefined_TLBEntry () )) (\ (w__14 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry02_ref w__14)
   (undefined_TLBEntry () )) (\ (w__15 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry03_ref w__15)
   (undefined_TLBEntry () )) (\ (w__16 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry04_ref w__16)
   (undefined_TLBEntry () )) (\ (w__17 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry05_ref w__17)
   (undefined_TLBEntry () )) (\ (w__18 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry06_ref w__18)
   (undefined_TLBEntry () )) (\ (w__19 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry07_ref w__19)
   (undefined_TLBEntry () )) (\ (w__20 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry08_ref w__20)
   (undefined_TLBEntry () )) (\ (w__21 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry09_ref w__21)
   (undefined_TLBEntry () )) (\ (w__22 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry10_ref w__22)
   (undefined_TLBEntry () )) (\ (w__23 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry11_ref w__23)
   (undefined_TLBEntry () )) (\ (w__24 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry12_ref w__24)
   (undefined_TLBEntry () )) (\ (w__25 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry13_ref w__25)
   (undefined_TLBEntry () )) (\ (w__26 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry14_ref w__26)
   (undefined_TLBEntry () )) (\ (w__27 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry15_ref w__27)
   (undefined_TLBEntry () )) (\ (w__28 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry16_ref w__28)
   (undefined_TLBEntry () )) (\ (w__29 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry17_ref w__29)
   (undefined_TLBEntry () )) (\ (w__30 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry18_ref w__30)
   (undefined_TLBEntry () )) (\ (w__31 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry19_ref w__31)
   (undefined_TLBEntry () )) (\ (w__32 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry20_ref w__32)
   (undefined_TLBEntry () )) (\ (w__33 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry21_ref w__33)
   (undefined_TLBEntry () )) (\ (w__34 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry22_ref w__34)
   (undefined_TLBEntry () )) (\ (w__35 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry23_ref w__35)
   (undefined_TLBEntry () )) (\ (w__36 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry24_ref w__36)
   (undefined_TLBEntry () )) (\ (w__37 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry25_ref w__37)
   (undefined_TLBEntry () )) (\ (w__38 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry26_ref w__38)
   (undefined_TLBEntry () )) (\ (w__39 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry27_ref w__39)
   (undefined_TLBEntry () )) (\ (w__40 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry28_ref w__40)
   (undefined_TLBEntry () )) (\ (w__41 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry29_ref w__41)
   (undefined_TLBEntry () )) (\ (w__42 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry30_ref w__42)
   (undefined_TLBEntry () )) (\ (w__43 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry31_ref w__43)
   (undefined_TLBEntry () )) (\ (w__44 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry32_ref w__44)
   (undefined_TLBEntry () )) (\ (w__45 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry33_ref w__45)
   (undefined_TLBEntry () )) (\ (w__46 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry34_ref w__46)
   (undefined_TLBEntry () )) (\ (w__47 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry35_ref w__47)
   (undefined_TLBEntry () )) (\ (w__48 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry36_ref w__48)
   (undefined_TLBEntry () )) (\ (w__49 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry37_ref w__49)
   (undefined_TLBEntry () )) (\ (w__50 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry38_ref w__50)
   (undefined_TLBEntry () )) (\ (w__51 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry39_ref w__51)
   (undefined_TLBEntry () )) (\ (w__52 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry40_ref w__52)
   (undefined_TLBEntry () )) (\ (w__53 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry41_ref w__53)
   (undefined_TLBEntry () )) (\ (w__54 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry42_ref w__54)
   (undefined_TLBEntry () )) (\ (w__55 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry43_ref w__55)
   (undefined_TLBEntry () )) (\ (w__56 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry44_ref w__56)
   (undefined_TLBEntry () )) (\ (w__57 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry45_ref w__57)
   (undefined_TLBEntry () )) (\ (w__58 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry46_ref w__58)
   (undefined_TLBEntry () )) (\ (w__59 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry47_ref w__59)
   (undefined_TLBEntry () )) (\ (w__60 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry48_ref w__60)
   (undefined_TLBEntry () )) (\ (w__61 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry49_ref w__61)
   (undefined_TLBEntry () )) (\ (w__62 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry50_ref w__62)
   (undefined_TLBEntry () )) (\ (w__63 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry51_ref w__63)
   (undefined_TLBEntry () )) (\ (w__64 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry52_ref w__64)
   (undefined_TLBEntry () )) (\ (w__65 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry53_ref w__65)
   (undefined_TLBEntry () )) (\ (w__66 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry54_ref w__66)
   (undefined_TLBEntry () )) (\ (w__67 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry55_ref w__67)
   (undefined_TLBEntry () )) (\ (w__68 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry56_ref w__68)
   (undefined_TLBEntry () )) (\ (w__69 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry57_ref w__69)
   (undefined_TLBEntry () )) (\ (w__70 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry58_ref w__70)
   (undefined_TLBEntry () )) (\ (w__71 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry59_ref w__71)
   (undefined_TLBEntry () )) (\ (w__72 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry60_ref w__72)
   (undefined_TLBEntry () )) (\ (w__73 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry61_ref w__73)
   (undefined_TLBEntry () )) (\ (w__74 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry62_ref w__74)
   (undefined_TLBEntry () )) (\ (w__75 : TLBEntry) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS TLBEntry63_ref w__75)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M)) (\ (w__76 : 32 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0Compare_ref w__76)
   (undefined_CauseReg () )) (\ (w__77 : CauseReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0Cause_ref w__77)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__78 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0EPC_ref w__78)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__79 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0ErrorEPC_ref w__79)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__80 : 1 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0LLBit_ref w__80)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__81 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0LLAddr_ref w__81)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__82 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0BadVAddr_ref w__82)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M)) (\ (w__83 : 32 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0Count_ref w__83)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M)) (\ (w__84 : 32 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0HWREna_ref w__84)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__85 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0UserLocal_ref w__85)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 3 : int):ii)  : ( 3 words$word) M)) (\ (w__86 : 3 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0ConfigK0_ref w__86)
   (undefined_StatusReg () )) (\ (w__87 : StatusReg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS CP0Status_ref w__87)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__88 : 1 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS branchPending_ref w__88)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__89 : 1 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS inBranchDelay_ref w__89)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__90 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS delayedPC_ref w__90)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__91 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS HI_ref w__91)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__92 : 64 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS LO_ref w__92)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__93 :  64 words$word) .  sail2_state_monad$bindS
   (undefined_vector (( 32 : int):ii) w__93  : ( ( 64 words$word)list) M) (\ (w__94 : ( 64 bits) list) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS GPR_ref w__94)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M)) (\ (w__95 : 8 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS UART_WDATA_ref w__95)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__96 : 1 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS UART_WRITTEN_ref w__96)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M)) (\ (w__97 : 8 bits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS UART_RDATA_ref w__97)
   (undefined_bitvector 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__98 : 1 bits) . 
   sail2_state_monad$write_regS UART_RVALID_ref w__98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`;


val _ = Define `
((initial_regstate:regstate)=
   (<| UART_RVALID := ((vec_of_bits [B0]  :  1 words$word)); 
     UART_RDATA := ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)); 
     UART_WRITTEN := ((vec_of_bits [B0]  :  1 words$word)); 
     UART_WDATA := ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)); 
     GPR :=
       ([(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word)]); 
     LO :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     HI :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     delayedPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     inBranchDelay := ((vec_of_bits [B0]  :  1 words$word)); 
     branchPending := ((vec_of_bits [B0]  :  1 words$word)); 
     CP0Status :=
       (<| StatusReg_StatusReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0]
               :  32 words$word)) |>); 
     CP0ConfigK0 := ((vec_of_bits [B0;B0;B0]  :  3 words$word)); 
     CP0UserLocal :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0HWREna :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0]
         :  32 words$word)); 
     CP0Count :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0]
         :  32 words$word)); 
     CP0BadVAddr :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0LLAddr :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0LLBit := ((vec_of_bits [B0]  :  1 words$word)); 
     CP0ErrorEPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0EPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0Cause :=
       (<| CauseReg_CauseReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0]
               :  32 words$word)) |>); 
     CP0Compare :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0]
         :  32 words$word)); 
     TLBEntry63 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry62 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry61 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry60 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry59 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry58 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry57 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry56 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry55 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry54 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry53 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry52 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry51 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry50 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry49 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry48 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry47 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry46 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry45 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry44 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry43 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry42 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry41 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry40 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry39 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry38 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry37 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry36 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry35 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry34 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry33 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry32 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry31 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry30 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry29 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry28 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry27 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry26 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry25 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry24 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry23 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry22 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry21 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry20 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry19 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry18 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry17 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry16 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry15 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry14 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry13 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry12 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry11 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry10 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry09 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry08 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry07 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry06 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry05 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry04 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry03 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry02 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry01 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntry00 :=
       (<| TLBEntry_TLBEntry_chunk_1 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0]
               :  53 words$word)); 
           TLBEntry_TLBEntry_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBXContext :=
       (<| XContextReg_XContextReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntryHi :=
       (<| TLBEntryHiReg_TLBEntryHiReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBWired := ((vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)); 
     TLBPageMask := ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)); 
     TLBContext :=
       (<| ContextReg_ContextReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntryLo1 :=
       (<| TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBEntryLo0 :=
       (<| TLBEntryLoReg_TLBEntryLoReg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     TLBRandom := ((vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)); 
     TLBIndex := ((vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)); 
     TLBProbe := ((vec_of_bits [B0]  :  1 words$word)); 
     nextPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     PC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)) |>))`;



val _ = export_theory()

