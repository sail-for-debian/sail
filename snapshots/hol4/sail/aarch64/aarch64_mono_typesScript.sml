(*Generated by Lem from aarch64_mono_types.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_instr_kindsTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_operators_mwordsTheory sail2_promptTheory sail2_stringTheory;

val _ = numLib.prefer_num();



val _ = new_theory "aarch64_mono_types"

(*Generated by Sail from aarch64_mono.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
val _ = type_abbrev((*  'n *) "bits" , ``:  'n words$word``);

val _ = Hol_datatype `
 exception  =
    Error_Undefined of (unit)
  | Error_See of (string)
  | Error_Implementation_Defined of (string)
  | Error_ReservedEncoding of (unit)
  | Error_ExceptionTaken of (unit)`;




val _ = Hol_datatype `
 boolean = FALSE | TRUE`;




val _ = Hol_datatype `
 signal = LOW | HIGH`;




val _ = Hol_datatype `
 RetCode =
  RC_OK
  | RC_UNDEFINED
  | RC_UNPREDICTABLE
  | RC_SEE
  | RC_IMPLEMENTATION_DEFINED
  | RC_SUBARCHITECTURE_DEFINED
  | RC_EXCEPTION_TAKEN
  | RC_ASSERT_FAILED
  | RC_UNMATCHED_CASE`;




val _ = type_abbrev( "CPACRType"  , ``: 32 bits``);

val _ = type_abbrev( "CNTKCTLType"  , ``: 32 bits``);

val _ = type_abbrev( "ESRType"  , ``: 32 bits``);

val _ = type_abbrev( "FPCRType"  , ``: 32 bits``);

val _ = type_abbrev( "MAIRType"  , ``: 64 bits``);

val _ = type_abbrev( "SCRType"  , ``: 32 bits``);

val _ = type_abbrev( "SCTLRType"  , ``: 32 bits``);

val _ = Hol_datatype `
 FPConvOp =
  FPConvOp_CVT_FtoI
  | FPConvOp_CVT_ItoF
  | FPConvOp_MOV_FtoI
  | FPConvOp_MOV_ItoF
  | FPConvOp_CVT_FtoI_JS`;




val _ = Hol_datatype `
 Exception =
  Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_PACTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_ERetTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_FIQ`;




val _ = Hol_datatype `
 ArchVersion = ARMv8p0 | ARMv8p1 | ARMv8p2 | ARMv8p3`;




val _ = Hol_datatype `
 Unpredictable =
  Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_OORTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_ZEROPMSEVFR
  | Unpredictable_NOOPTYPES
  | Unpredictable_ZEROMINLATENCY
  | Unpredictable_CLEARERRITEZERO
  | Unpredictable_TBD`;




val _ = Hol_datatype `
 Constraint =
  Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK`;




val _ = Hol_datatype `
 InstrSet = InstrSet_A64 | InstrSet_A32 | InstrSet_T32`;




val _ = Hol_datatype `
 ProcState  =
  <| ProcState_N : 1 bits;
     ProcState_Z : 1 bits;
     ProcState_C : 1 bits;
     ProcState_V : 1 bits;
     ProcState_D : 1 bits;
     ProcState_A : 1 bits;
     ProcState_I : 1 bits;
     ProcState_F : 1 bits;
     ProcState_PAN : 1 bits;
     ProcState_UAO : 1 bits;
     ProcState_SS : 1 bits;
     ProcState_IL : 1 bits;
     ProcState_EL : 2 bits;
     ProcState_nRW : 1 bits;
     ProcState_SP : 1 bits;
     ProcState_Q : 1 bits;
     ProcState_GE : 4 bits;
     ProcState_IT : 8 bits;
     ProcState_J : 1 bits;
     ProcState_T : 1 bits;
     ProcState_E : 1 bits;
     ProcState_M : 5 bits  |>`;



val _ = Hol_datatype `
 BranchType =
  BranchType_CALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_JMP
  | BranchType_EXCEPTION
  | BranchType_UNKNOWN`;




val _ = Hol_datatype `
 ExceptionRecord  =
  <| ExceptionRecord_typ : Exception;
     ExceptionRecord_syndrome : 25 bits;
     ExceptionRecord_vaddress : 64 bits;
     ExceptionRecord_ipavalid : bool;
     ExceptionRecord_ipaddress : 52 bits  |>`;



val _ = Hol_datatype `
 Fault =
  Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint`;




val _ = Hol_datatype `
 AccType =
  AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_DC
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT`;




val _ = Hol_datatype `
 FaultRecord  =
  <| FaultRecord_typ : Fault;
     FaultRecord_acctype : AccType;
     FaultRecord_ipaddress : 52 bits;
     FaultRecord_s2fs1walk : bool;
     FaultRecord_write : bool;
     FaultRecord_level : ii;
     FaultRecord_extflag : 1 bits;
     FaultRecord_secondstage : bool;
     FaultRecord_domain : 4 bits;
     FaultRecord_errortype : 2 bits;
     FaultRecord_debugmoe : 4 bits  |>`;



val _ = Hol_datatype `
 MBReqDomain =
  MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem`;




val _ = Hol_datatype `
 MBReqTypes = MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All`;




val _ = Hol_datatype `
 MemType = MemType_Normal | MemType_Device`;




val _ = Hol_datatype `
 DeviceType = DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE`;




val _ = Hol_datatype `
 MemAttrHints  =
  <| MemAttrHints_attrs : 2 bits; MemAttrHints_hints : 2 bits; MemAttrHints_transient : bool  |>`;



val _ = Hol_datatype `
 MemoryAttributes  =
  <| MemoryAttributes_typ : MemType;
     MemoryAttributes_device : DeviceType;
     MemoryAttributes_inner : MemAttrHints;
     MemoryAttributes_outer : MemAttrHints;
     MemoryAttributes_shareable : bool;
     MemoryAttributes_outershareable : bool  |>`;



val _ = Hol_datatype `
 FullAddress  = <| FullAddress_physicaladdress : 52 bits; FullAddress_NS : 1 bits  |>`;



val _ = Hol_datatype `
 AddressDescriptor  =
  <| AddressDescriptor_fault : FaultRecord;
     AddressDescriptor_memattrs : MemoryAttributes;
     AddressDescriptor_paddress : FullAddress;
     AddressDescriptor_vaddress : 64 bits  |>`;



val _ = Hol_datatype `
 DescriptorUpdate  =
  <| DescriptorUpdate_AF : bool;
     DescriptorUpdate_AP : bool;
     DescriptorUpdate_descaddr : AddressDescriptor  |>`;



val _ = Hol_datatype `
 MemAtomicOp =
  MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP`;




val _ = Hol_datatype `
 FPType = FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN`;




val _ = Hol_datatype `
 FPExc =
  FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm`;




val _ = Hol_datatype `
 FPRounding =
  FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD`;




val _ = Hol_datatype `
 SysRegAccess =
  SysRegAccess_OK
  | SysRegAccess_UNDEFINED
  | SysRegAccess_TrapToEL1
  | SysRegAccess_TrapToEL2
  | SysRegAccess_TrapToEL3`;




val _ = Hol_datatype `
 SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX`;




val _ = Hol_datatype `
 ShiftType = ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR`;




val _ = Hol_datatype `
 PrefetchHint = Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC`;




val _ = Hol_datatype `
 InterruptID =
  InterruptID_PMUIRQ
  | InterruptID_COMMIRQ
  | InterruptID_CTIIRQ
  | InterruptID_COMMRX
  | InterruptID_COMMTX`;




val _ = Hol_datatype `
 CrossTriggerOut =
  CrossTriggerOut_DebugRequest
  | CrossTriggerOut_RestartRequest
  | CrossTriggerOut_IRQ
  | CrossTriggerOut_RSVD3
  | CrossTriggerOut_TraceExtIn0
  | CrossTriggerOut_TraceExtIn1
  | CrossTriggerOut_TraceExtIn2
  | CrossTriggerOut_TraceExtIn3`;




val _ = Hol_datatype `
 CrossTriggerIn =
  CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3`;




val _ = Hol_datatype `
 MemBarrierOp = MemBarrierOp_DSB | MemBarrierOp_DMB | MemBarrierOp_ISB`;




val _ = Hol_datatype `
 AccessDescriptor  =
  <| AccessDescriptor_acctype : AccType;
     AccessDescriptor_page_table_walk : bool;
     AccessDescriptor_secondstage : bool;
     AccessDescriptor_s2fs1walk : bool;
     AccessDescriptor_level : ii  |>`;



val _ = Hol_datatype `
 Permissions  =
  <| Permissions_ap : 3 bits;
     Permissions_xn : 1 bits;
     Permissions_xxn : 1 bits;
     Permissions_pxn : 1 bits  |>`;



val _ = Hol_datatype `
 TLBRecord  =
  <| TLBRecord_perms : Permissions;
     TLBRecord_nG : 1 bits;
     TLBRecord_domain : 4 bits;
     TLBRecord_contiguous : bool;
     TLBRecord_level : ii;
     TLBRecord_blocksize : ii;
     TLBRecord_descupdate : DescriptorUpdate;
     TLBRecord_CnP : 1 bits;
     TLBRecord_addrdesc : AddressDescriptor  |>`;



val _ = Hol_datatype `
 ImmediateOp = ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC`;




val _ = Hol_datatype `
 MoveWideOp = MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K`;




val _ = Hol_datatype `
 SystemAccessType = SystemAccessType_RT | SystemAccessType_RRT | SystemAccessType_DT`;




val _ = Hol_datatype `
 VBitOp = VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR`;




val _ = Hol_datatype `
 TimeStamp = TimeStamp_None | TimeStamp_Virtual | TimeStamp_Physical`;




val _ = Hol_datatype `
 PrivilegeLevel = PL3 | PL2 | PL1 | PL0`;




val _ = Hol_datatype `
 AArch32_SErrorSyndrome  =
  <| AArch32_SErrorSyndrome_AET : 2 bits; AArch32_SErrorSyndrome_ExT : 1 bits  |>`;



val _ = Hol_datatype `
 SystemOp = Sys_AT | Sys_DC | Sys_IC | Sys_TLBI | Sys_SYS`;




val _ = Hol_datatype `
 PCSample  =
  <| PCSample_valid_name : bool;
     PCSample_pc : 64 bits;
     PCSample_el : 2 bits;
     PCSample_rw : 1 bits;
     PCSample_ns : 1 bits;
     PCSample_contextidr : 32 bits;
     PCSample_contextidr_el2 : 32 bits;
     PCSample_vmid : 16 bits  |>`;



val _ = Hol_datatype `
 ReduceOp =
  ReduceOp_FMINNUM | ReduceOp_FMAXNUM | ReduceOp_FMIN | ReduceOp_FMAX | ReduceOp_FADD | ReduceOp_ADD`;




val _ = Hol_datatype `
 LogicalOp = LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR`;




val _ = Hol_datatype `
 ExtendType =
  ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX`;




val _ = Hol_datatype `
 SystemHintOp =
  SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB`;




val _ = Hol_datatype `
 MemOp = MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH`;




val _ = Hol_datatype `
 OpType = OpType_Load | OpType_Store | OpType_LoadAtomic | OpType_Branch | OpType_Other`;




val _ = Hol_datatype `
 FPUnaryOp = FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT`;




val _ = Hol_datatype `
 CompareOp = CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT`;




val _ = Hol_datatype `
 PSTATEField =
  PSTATEField_DAIFSet | PSTATEField_DAIFClr | PSTATEField_PAN | PSTATEField_UAO | PSTATEField_SP`;




val _ = Hol_datatype `
 FPMaxMinOp = FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM`;




val _ = Hol_datatype `
 CountOp = CountOp_CLZ | CountOp_CLS | CountOp_CNT`;




val _ = Hol_datatype `
 VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL`;




val _ = Hol_datatype `
 VBitOps = VBitOps_VBIF | VBitOps_VBIT | VBitOps_VBSL`;




val _ = Hol_datatype `
 VCGEtype = VCGEtype_signed | VCGEtype_unsigned | VCGEtype_fp`;




val _ = Hol_datatype `
 VCGTtype = VCGTtype_signed | VCGTtype_unsigned | VCGTtype_fp`;




val _ = Hol_datatype `
 InstrEnc = A64 | A32 | T16 | T32`;






val _ = Hol_datatype `
 register_value  =
    Regval_vector of ((ii # bool # register_value list))
  | Regval_list of ( register_value list)
  | Regval_option of ( register_value option)
  | Regval_ProcState of (ProcState)
  | Regval___InstrEnc of (InstrEnc)
  | Regval_bool of (bool)
  | Regval_signal of (signal)
  | Regval_vector_128_dec_bit of ( 128 words$word)
  | Regval_vector_1_dec_bit of ( 1 words$word)
  | Regval_vector_32_dec_bit of ( 32 words$word)
  | Regval_vector_4_dec_bit of ( 4 words$word)
  | Regval_vector_52_dec_bit of ( 52 words$word)
  | Regval_vector_64_dec_bit of ( 64 words$word)`;




val _ = Hol_datatype `
 regstate  =
  <| APDAKeyHi_EL1 :  64 words$word;
     APDAKeyLo_EL1 :  64 words$word;
     APDBKeyHi_EL1 :  64 words$word;
     APDBKeyLo_EL1 :  64 words$word;
     APGAKeyHi_EL1 :  64 words$word;
     APGAKeyLo_EL1 :  64 words$word;
     APIAKeyHi_EL1 :  64 words$word;
     APIAKeyLo_EL1 :  64 words$word;
     APIBKeyHi_EL1 :  64 words$word;
     APIBKeyLo_EL1 :  64 words$word;
     CONTEXTIDR_EL1 :  32 words$word;
     CONTEXTIDR_EL2 :  32 words$word;
     CPACR_EL1 :  32 words$word;
     CPTR_EL2 :  32 words$word;
     CPTR_EL3 :  32 words$word;
     DBGBCR_EL1 : ( 32 words$word) list;
     DBGBVR_EL1 : ( 64 words$word) list;
     DBGEN : signal;
     DBGOSDLR :  32 words$word;
     DBGOSLSR :  32 words$word;
     DBGPRCR :  32 words$word;
     DBGPRCR_EL1 :  32 words$word;
     DBGWCR_EL1 : ( 32 words$word) list;
     DBGWVR_EL1 : ( 64 words$word) list;
     DLR :  32 words$word;
     DLR_EL0 :  64 words$word;
     DSPSR :  32 words$word;
     DSPSR_EL0 :  32 words$word;
     EDSCR :  32 words$word;
     ELR_EL1 :  64 words$word;
     ELR_EL2 :  64 words$word;
     ELR_EL3 :  64 words$word;
     ELR_hyp :  32 words$word;
     ESR_EL1 :  32 words$word;
     ESR_EL2 :  32 words$word;
     ESR_EL3 :  32 words$word;
     EventRegister :  1 words$word;
     FAR_EL1 :  64 words$word;
     FAR_EL2 :  64 words$word;
     FAR_EL3 :  64 words$word;
     FPCR :  32 words$word;
     FPEXC :  32 words$word;
     FPSCR :  32 words$word;
     FPSR :  32 words$word;
     HCR :  32 words$word;
     HCR2 :  32 words$word;
     HCR_EL2 :  64 words$word;
     HDCR :  32 words$word;
     HDFAR :  32 words$word;
     HIFAR :  32 words$word;
     HPFAR :  32 words$word;
     HPFAR_EL2 :  64 words$word;
     HSCTLR :  32 words$word;
     HSR :  32 words$word;
     HVBAR :  32 words$word;
     ID_AA64DFR0_EL1 :  64 words$word;
     LR_mon :  32 words$word;
     MAIR_EL1 :  64 words$word;
     MAIR_EL2 :  64 words$word;
     MAIR_EL3 :  64 words$word;
     MDCR_EL2 :  32 words$word;
     MDCR_EL3 :  32 words$word;
     MDSCR_EL1 :  32 words$word;
     OSDLR_EL1 :  32 words$word;
     OSLSR_EL1 :  32 words$word;
     PSTATE : ProcState;
     RC0 : ( 64 words$word) list;
     RVBAR_EL1 :  64 words$word;
     RVBAR_EL2 :  64 words$word;
     RVBAR_EL3 :  64 words$word;
     SCR :  32 words$word;
     SCR_EL3 :  32 words$word;
     SCTLR :  32 words$word;
     SCTLR_EL1 :  32 words$word;
     SCTLR_EL2 :  32 words$word;
     SCTLR_EL3 :  32 words$word;
     SDCR :  32 words$word;
     SDER :  32 words$word;
     SPIDEN : signal;
     SPSR_EL1 :  32 words$word;
     SPSR_EL2 :  32 words$word;
     SPSR_EL3 :  32 words$word;
     SPSR_abt :  32 words$word;
     SPSR_fiq :  32 words$word;
     SPSR_hyp :  32 words$word;
     SPSR_irq :  32 words$word;
     SPSR_mon :  32 words$word;
     SPSR_svc :  32 words$word;
     SPSR_und :  32 words$word;
     SP_EL0 :  64 words$word;
     SP_EL1 :  64 words$word;
     SP_EL2 :  64 words$word;
     SP_EL3 :  64 words$word;
     SP_mon :  32 words$word;
     TCR_EL1 :  64 words$word;
     TCR_EL2 :  64 words$word;
     TCR_EL3 :  32 words$word;
     TTBCR :  32 words$word;
     TTBR0_EL1 :  64 words$word;
     TTBR0_EL2 :  64 words$word;
     TTBR0_EL3 :  64 words$word;
     TTBR1_EL1 :  64 words$word;
     TTBR1_EL2 :  64 words$word;
     VBAR :  32 words$word;
     VBAR_EL1 :  64 words$word;
     VBAR_EL2 :  64 words$word;
     VBAR_EL3 :  64 words$word;
     VDFSR :  32 words$word;
     VSESR_EL2 :  32 words$word;
     VTCR_EL2 :  32 words$word;
     VTTBR_EL2 :  64 words$word;
     PC :  64 words$word;
     R : ( 64 words$word) list;
     V : ( 128 words$word) list;
     BranchTaken : bool;
     ExclusiveLocal : bool;
     Memory :  52 words$word;
     PendingInterrupt : bool;
     PendingPhysicalSError : bool;
     Sleeping : bool;
     ThisInstr :  32 words$word;
     ThisInstrEnc : InstrEnc;
     currentCond :  4 words$word;
     unconditional : bool  |>`;





(*val ProcState_of_regval : register_value -> maybe ProcState*)

val _ = Define `
 ((ProcState_of_regval:register_value ->(ProcState)option) merge_var=
    ((case merge_var of   Regval_ProcState (v) => SOME v | g__281 => NONE )))`;


(*val regval_of_ProcState : ProcState -> register_value*)

val _ = Define `
 ((regval_of_ProcState:ProcState -> register_value) v=  (Regval_ProcState v))`;


(*val __InstrEnc_of_regval : register_value -> maybe __InstrEnc*)

val _ = Define `
 ((InstrEnc_of_regval:register_value ->(InstrEnc)option) merge_var=
    ((case merge_var of   Regval___InstrEnc (v) => SOME v | g__280 => NONE )))`;


(*val regval_of___InstrEnc : __InstrEnc -> register_value*)

val _ = Define `
 ((regval_of___InstrEnc:InstrEnc -> register_value) v=  (Regval___InstrEnc v))`;


(*val bool_of_regval : register_value -> maybe bool*)

val _ = Define `
 ((bool_of_regval:register_value ->(bool)option) merge_var=
    ((case merge_var of   Regval_bool (v) => SOME v | g__279 => NONE )))`;


(*val regval_of_bool : bool -> register_value*)

val _ = Define `
 ((regval_of_bool:bool -> register_value) v=  (Regval_bool v))`;


(*val signal_of_regval : register_value -> maybe signal*)

val _ = Define `
 ((signal_of_regval:register_value ->(signal)option) merge_var=
    ((case merge_var of   Regval_signal (v) => SOME v | g__278 => NONE )))`;


(*val regval_of_signal : signal -> register_value*)

val _ = Define `
 ((regval_of_signal:signal -> register_value) v=  (Regval_signal v))`;


(*val vector_128_dec_bit_of_regval : register_value -> maybe (mword ty128)*)

val _ = Define `
 ((vector_128_dec_bit_of_regval:register_value ->((128)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_128_dec_bit (v) => SOME v | g__277 => NONE )))`;


(*val regval_of_vector_128_dec_bit : mword ty128 -> register_value*)

val _ = Define `
 ((regval_of_vector_128_dec_bit:(128)words$word -> register_value) v=  (Regval_vector_128_dec_bit v))`;


(*val vector_1_dec_bit_of_regval : register_value -> maybe (mword ty1)*)

val _ = Define `
 ((vector_1_dec_bit_of_regval:register_value ->((1)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_1_dec_bit (v) => SOME v | g__276 => NONE )))`;


(*val regval_of_vector_1_dec_bit : mword ty1 -> register_value*)

val _ = Define `
 ((regval_of_vector_1_dec_bit:(1)words$word -> register_value) v=  (Regval_vector_1_dec_bit v))`;


(*val vector_32_dec_bit_of_regval : register_value -> maybe (mword ty32)*)

val _ = Define `
 ((vector_32_dec_bit_of_regval:register_value ->((32)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_32_dec_bit (v) => SOME v | g__275 => NONE )))`;


(*val regval_of_vector_32_dec_bit : mword ty32 -> register_value*)

val _ = Define `
 ((regval_of_vector_32_dec_bit:(32)words$word -> register_value) v=  (Regval_vector_32_dec_bit v))`;


(*val vector_4_dec_bit_of_regval : register_value -> maybe (mword ty4)*)

val _ = Define `
 ((vector_4_dec_bit_of_regval:register_value ->((4)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_4_dec_bit (v) => SOME v | g__274 => NONE )))`;


(*val regval_of_vector_4_dec_bit : mword ty4 -> register_value*)

val _ = Define `
 ((regval_of_vector_4_dec_bit:(4)words$word -> register_value) v=  (Regval_vector_4_dec_bit v))`;


(*val vector_52_dec_bit_of_regval : register_value -> maybe (mword ty52)*)

val _ = Define `
 ((vector_52_dec_bit_of_regval:register_value ->((52)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_52_dec_bit (v) => SOME v | g__273 => NONE )))`;


(*val regval_of_vector_52_dec_bit : mword ty52 -> register_value*)

val _ = Define `
 ((regval_of_vector_52_dec_bit:(52)words$word -> register_value) v=  (Regval_vector_52_dec_bit v))`;


(*val vector_64_dec_bit_of_regval : register_value -> maybe (mword ty64)*)

val _ = Define `
 ((vector_64_dec_bit_of_regval:register_value ->((64)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_64_dec_bit (v) => SOME v | g__272 => NONE )))`;


(*val regval_of_vector_64_dec_bit : mword ty64 -> register_value*)

val _ = Define `
 ((regval_of_vector_64_dec_bit:(64)words$word -> register_value) v=  (Regval_vector_64_dec_bit v))`;




(*val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
val _ = Define `
 ((vector_of_regval:(register_value -> 'a option) -> register_value ->('a list)option) of_regval1= 
  (\x .  (case x of
               Regval_vector (_, _, v) => just_list (MAP of_regval1 v)
           | _ => NONE
         )))`;


(*val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value*)
val _ = Define `
 ((regval_of_vector:('a -> register_value) -> int -> bool -> 'a list -> register_value) regval_of1 size1 is_inc xs=  (Regval_vector (size1, is_inc, MAP regval_of1 xs)))`;


(*val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
val _ = Define `
 ((list_of_regval:(register_value -> 'a option) -> register_value ->('a list)option) of_regval1= 
  (\x .  (case x of
               Regval_list v => just_list (MAP of_regval1 v)
           | _ => NONE
         )))`;


(*val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value*)
val _ = Define `
 ((regval_of_list:('a -> register_value) -> 'a list -> register_value) regval_of1 xs=  (Regval_list (MAP regval_of1 xs)))`;


(*val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)*)
val _ = Define `
 ((option_of_regval:(register_value -> 'a option) -> register_value ->('a option)option) of_regval1= 
  (\x .  (case x of
               Regval_option v => SOME (OPTION_BIND v of_regval1)
           | _ => NONE
         )))`;


(*val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value*)
val _ = Define `
 ((regval_of_option:('a -> register_value) -> 'a option -> register_value) regval_of1 v=  (Regval_option (OPTION_MAP regval_of1 v)))`;



val _ = Define `
 ((APDAKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDAKeyHi_EL1";
  read_from := (\ s .  s.APDAKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APDAKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDAKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDAKeyLo_EL1";
  read_from := (\ s .  s.APDAKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APDAKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDBKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDBKeyHi_EL1";
  read_from := (\ s .  s.APDBKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APDBKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDBKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDBKeyLo_EL1";
  read_from := (\ s .  s.APDBKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APDBKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APGAKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APGAKeyHi_EL1";
  read_from := (\ s .  s.APGAKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APGAKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APGAKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APGAKeyLo_EL1";
  read_from := (\ s .  s.APGAKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APGAKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIAKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIAKeyHi_EL1";
  read_from := (\ s .  s.APIAKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APIAKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIAKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIAKeyLo_EL1";
  read_from := (\ s .  s.APIAKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APIAKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIBKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIBKeyHi_EL1";
  read_from := (\ s .  s.APIBKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APIBKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIBKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIBKeyLo_EL1";
  read_from := (\ s .  s.APIBKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APIBKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CONTEXTIDR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CONTEXTIDR_EL1";
  read_from := (\ s .  s.CONTEXTIDR_EL1);
  write_to := (\ v s .  (( s with<| CONTEXTIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CONTEXTIDR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CONTEXTIDR_EL2";
  read_from := (\ s .  s.CONTEXTIDR_EL2);
  write_to := (\ v s .  (( s with<| CONTEXTIDR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CPACR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CPACR_EL1";
  read_from := (\ s .  s.CPACR_EL1);
  write_to := (\ v s .  (( s with<| CPACR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CPTR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CPTR_EL2";
  read_from := (\ s .  s.CPTR_EL2);
  write_to := (\ v s .  (( s with<| CPTR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CPTR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CPTR_EL3";
  read_from := (\ s .  s.CPTR_EL3);
  write_to := (\ v s .  (( s with<| CPTR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGBCR_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGBCR_EL1";
  read_from := (\ s .  s.DBGBCR_EL1);
  write_to := (\ v s .  (( s with<| DBGBCR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 16 : int)) F v) |>))`;


val _ = Define `
 ((DBGBVR_EL1_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "DBGBVR_EL1";
  read_from := (\ s .  s.DBGBVR_EL1);
  write_to := (\ v s .  (( s with<| DBGBVR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 16 : int)) F v) |>))`;


val _ = Define `
 ((DBGEN_ref:((regstate),(register_value),(signal))register_ref)=  (<|
  name := "DBGEN";
  read_from := (\ s .  s.DBGEN);
  write_to := (\ v s .  (( s with<| DBGEN := v |>)));
  of_regval := (\ v .  signal_of_regval v);
  regval_of := (\ v .  regval_of_signal v) |>))`;


val _ = Define `
 ((DBGOSDLR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGOSDLR";
  read_from := (\ s .  s.DBGOSDLR);
  write_to := (\ v s .  (( s with<| DBGOSDLR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGOSLSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGOSLSR";
  read_from := (\ s .  s.DBGOSLSR);
  write_to := (\ v s .  (( s with<| DBGOSLSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGPRCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGPRCR";
  read_from := (\ s .  s.DBGPRCR);
  write_to := (\ v s .  (( s with<| DBGPRCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGPRCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGPRCR_EL1";
  read_from := (\ s .  s.DBGPRCR_EL1);
  write_to := (\ v s .  (( s with<| DBGPRCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGWCR_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGWCR_EL1";
  read_from := (\ s .  s.DBGWCR_EL1);
  write_to := (\ v s .  (( s with<| DBGWCR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 16 : int)) F v) |>))`;


val _ = Define `
 ((DBGWVR_EL1_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "DBGWVR_EL1";
  read_from := (\ s .  s.DBGWVR_EL1);
  write_to := (\ v s .  (( s with<| DBGWVR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 16 : int)) F v) |>))`;


val _ = Define `
 ((DLR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DLR";
  read_from := (\ s .  s.DLR);
  write_to := (\ v s .  (( s with<| DLR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DLR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "DLR_EL0";
  read_from := (\ s .  s.DLR_EL0);
  write_to := (\ v s .  (( s with<| DLR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((DSPSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DSPSR";
  read_from := (\ s .  s.DSPSR);
  write_to := (\ v s .  (( s with<| DSPSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DSPSR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DSPSR_EL0";
  read_from := (\ s .  s.DSPSR_EL0);
  write_to := (\ v s .  (( s with<| DSPSR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDSCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDSCR";
  read_from := (\ s .  s.EDSCR);
  write_to := (\ v s .  (( s with<| EDSCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL1";
  read_from := (\ s .  s.ELR_EL1);
  write_to := (\ v s .  (( s with<| ELR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL2";
  read_from := (\ s .  s.ELR_EL2);
  write_to := (\ v s .  (( s with<| ELR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL3";
  read_from := (\ s .  s.ELR_EL3);
  write_to := (\ v s .  (( s with<| ELR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ELR_hyp_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ELR_hyp";
  read_from := (\ s .  s.ELR_hyp);
  write_to := (\ v s .  (( s with<| ELR_hyp := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL1";
  read_from := (\ s .  s.ESR_EL1);
  write_to := (\ v s .  (( s with<| ESR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL2";
  read_from := (\ s .  s.ESR_EL2);
  write_to := (\ v s .  (( s with<| ESR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL3";
  read_from := (\ s .  s.ESR_EL3);
  write_to := (\ v s .  (( s with<| ESR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EventRegister_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "EventRegister";
  read_from := (\ s .  s.EventRegister);
  write_to := (\ v s .  (( s with<| EventRegister := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL1";
  read_from := (\ s .  s.FAR_EL1);
  write_to := (\ v s .  (( s with<| FAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL2";
  read_from := (\ s .  s.FAR_EL2);
  write_to := (\ v s .  (( s with<| FAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL3";
  read_from := (\ s .  s.FAR_EL3);
  write_to := (\ v s .  (( s with<| FAR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((FPCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPCR";
  read_from := (\ s .  s.FPCR);
  write_to := (\ v s .  (( s with<| FPCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPEXC_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPEXC";
  read_from := (\ s .  s.FPEXC);
  write_to := (\ v s .  (( s with<| FPEXC := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPSCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPSCR";
  read_from := (\ s .  s.FPSCR);
  write_to := (\ v s .  (( s with<| FPSCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPSR";
  read_from := (\ s .  s.FPSR);
  write_to := (\ v s .  (( s with<| FPSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HCR";
  read_from := (\ s .  s.HCR);
  write_to := (\ v s .  (( s with<| HCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HCR2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HCR2";
  read_from := (\ s .  s.HCR2);
  write_to := (\ v s .  (( s with<| HCR2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HCR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "HCR_EL2";
  read_from := (\ s .  s.HCR_EL2);
  write_to := (\ v s .  (( s with<| HCR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((HDCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HDCR";
  read_from := (\ s .  s.HDCR);
  write_to := (\ v s .  (( s with<| HDCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HDFAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HDFAR";
  read_from := (\ s .  s.HDFAR);
  write_to := (\ v s .  (( s with<| HDFAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HIFAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HIFAR";
  read_from := (\ s .  s.HIFAR);
  write_to := (\ v s .  (( s with<| HIFAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HPFAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HPFAR";
  read_from := (\ s .  s.HPFAR);
  write_to := (\ v s .  (( s with<| HPFAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HPFAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "HPFAR_EL2";
  read_from := (\ s .  s.HPFAR_EL2);
  write_to := (\ v s .  (( s with<| HPFAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((HSCTLR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HSCTLR";
  read_from := (\ s .  s.HSCTLR);
  write_to := (\ v s .  (( s with<| HSCTLR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HSR";
  read_from := (\ s .  s.HSR);
  write_to := (\ v s .  (( s with<| HSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HVBAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HVBAR";
  read_from := (\ s .  s.HVBAR);
  write_to := (\ v s .  (( s with<| HVBAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64DFR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64DFR0_EL1";
  read_from := (\ s .  s.ID_AA64DFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64DFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((LR_mon_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "LR_mon";
  read_from := (\ s .  s.LR_mon);
  write_to := (\ v s .  (( s with<| LR_mon := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MAIR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MAIR_EL1";
  read_from := (\ s .  s.MAIR_EL1);
  write_to := (\ v s .  (( s with<| MAIR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MAIR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MAIR_EL2";
  read_from := (\ s .  s.MAIR_EL2);
  write_to := (\ v s .  (( s with<| MAIR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MAIR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MAIR_EL3";
  read_from := (\ s .  s.MAIR_EL3);
  write_to := (\ v s .  (( s with<| MAIR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MDCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDCR_EL2";
  read_from := (\ s .  s.MDCR_EL2);
  write_to := (\ v s .  (( s with<| MDCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MDCR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDCR_EL3";
  read_from := (\ s .  s.MDCR_EL3);
  write_to := (\ v s .  (( s with<| MDCR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MDSCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDSCR_EL1";
  read_from := (\ s .  s.MDSCR_EL1);
  write_to := (\ v s .  (( s with<| MDSCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSDLR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSDLR_EL1";
  read_from := (\ s .  s.OSDLR_EL1);
  write_to := (\ v s .  (( s with<| OSDLR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSLSR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSLSR_EL1";
  read_from := (\ s .  s.OSLSR_EL1);
  write_to := (\ v s .  (( s with<| OSLSR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PSTATE_ref:((regstate),(register_value),(ProcState))register_ref)=  (<|
  name := "PSTATE";
  read_from := (\ s .  s.PSTATE);
  write_to := (\ v s .  (( s with<| PSTATE := v |>)));
  of_regval := (\ v .  ProcState_of_regval v);
  regval_of := (\ v .  regval_of_ProcState v) |>))`;


val _ = Define `
 ((RC_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "RC";
  read_from := (\ s .  s.RC0);
  write_to := (\ v s .  (( s with<| RC0 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((RVBAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RVBAR_EL1";
  read_from := (\ s .  s.RVBAR_EL1);
  write_to := (\ v s .  (( s with<| RVBAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((RVBAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RVBAR_EL2";
  read_from := (\ s .  s.RVBAR_EL2);
  write_to := (\ v s .  (( s with<| RVBAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((RVBAR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RVBAR_EL3";
  read_from := (\ s .  s.RVBAR_EL3);
  write_to := (\ v s .  (( s with<| RVBAR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCR";
  read_from := (\ s .  s.SCR);
  write_to := (\ v s .  (( s with<| SCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SCR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCR_EL3";
  read_from := (\ s .  s.SCR_EL3);
  write_to := (\ v s .  (( s with<| SCR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCTLR";
  read_from := (\ s .  s.SCTLR);
  write_to := (\ v s .  (( s with<| SCTLR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCTLR_EL1";
  read_from := (\ s .  s.SCTLR_EL1);
  write_to := (\ v s .  (( s with<| SCTLR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCTLR_EL2";
  read_from := (\ s .  s.SCTLR_EL2);
  write_to := (\ v s .  (( s with<| SCTLR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCTLR_EL3";
  read_from := (\ s .  s.SCTLR_EL3);
  write_to := (\ v s .  (( s with<| SCTLR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SDCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SDCR";
  read_from := (\ s .  s.SDCR);
  write_to := (\ v s .  (( s with<| SDCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SDER_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SDER";
  read_from := (\ s .  s.SDER);
  write_to := (\ v s .  (( s with<| SDER := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPIDEN_ref:((regstate),(register_value),(signal))register_ref)=  (<|
  name := "SPIDEN";
  read_from := (\ s .  s.SPIDEN);
  write_to := (\ v s .  (( s with<| SPIDEN := v |>)));
  of_regval := (\ v .  signal_of_regval v);
  regval_of := (\ v .  regval_of_signal v) |>))`;


val _ = Define `
 ((SPSR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL1";
  read_from := (\ s .  s.SPSR_EL1);
  write_to := (\ v s .  (( s with<| SPSR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL2";
  read_from := (\ s .  s.SPSR_EL2);
  write_to := (\ v s .  (( s with<| SPSR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL3";
  read_from := (\ s .  s.SPSR_EL3);
  write_to := (\ v s .  (( s with<| SPSR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_abt_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_abt";
  read_from := (\ s .  s.SPSR_abt);
  write_to := (\ v s .  (( s with<| SPSR_abt := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_fiq_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_fiq";
  read_from := (\ s .  s.SPSR_fiq);
  write_to := (\ v s .  (( s with<| SPSR_fiq := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_hyp_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_hyp";
  read_from := (\ s .  s.SPSR_hyp);
  write_to := (\ v s .  (( s with<| SPSR_hyp := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_irq_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_irq";
  read_from := (\ s .  s.SPSR_irq);
  write_to := (\ v s .  (( s with<| SPSR_irq := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_mon_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_mon";
  read_from := (\ s .  s.SPSR_mon);
  write_to := (\ v s .  (( s with<| SPSR_mon := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_svc_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_svc";
  read_from := (\ s .  s.SPSR_svc);
  write_to := (\ v s .  (( s with<| SPSR_svc := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_und_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_und";
  read_from := (\ s .  s.SPSR_und);
  write_to := (\ v s .  (( s with<| SPSR_und := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL0";
  read_from := (\ s .  s.SP_EL0);
  write_to := (\ v s .  (( s with<| SP_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL1";
  read_from := (\ s .  s.SP_EL1);
  write_to := (\ v s .  (( s with<| SP_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL2";
  read_from := (\ s .  s.SP_EL2);
  write_to := (\ v s .  (( s with<| SP_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL3";
  read_from := (\ s .  s.SP_EL3);
  write_to := (\ v s .  (( s with<| SP_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_mon_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SP_mon";
  read_from := (\ s .  s.SP_mon);
  write_to := (\ v s .  (( s with<| SP_mon := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TCR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TCR_EL1";
  read_from := (\ s .  s.TCR_EL1);
  write_to := (\ v s .  (( s with<| TCR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TCR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TCR_EL2";
  read_from := (\ s .  s.TCR_EL2);
  write_to := (\ v s .  (( s with<| TCR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TCR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TCR_EL3";
  read_from := (\ s .  s.TCR_EL3);
  write_to := (\ v s .  (( s with<| TCR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TTBCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TTBCR";
  read_from := (\ s .  s.TTBCR);
  write_to := (\ v s .  (( s with<| TTBCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_EL1";
  read_from := (\ s .  s.TTBR0_EL1);
  write_to := (\ v s .  (( s with<| TTBR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_EL2";
  read_from := (\ s .  s.TTBR0_EL2);
  write_to := (\ v s .  (( s with<| TTBR0_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_EL3";
  read_from := (\ s .  s.TTBR0_EL3);
  write_to := (\ v s .  (( s with<| TTBR0_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR1_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR1_EL1";
  read_from := (\ s .  s.TTBR1_EL1);
  write_to := (\ v s .  (( s with<| TTBR1_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR1_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR1_EL2";
  read_from := (\ s .  s.TTBR1_EL2);
  write_to := (\ v s .  (( s with<| TTBR1_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VBAR";
  read_from := (\ s .  s.VBAR);
  write_to := (\ v s .  (( s with<| VBAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL1";
  read_from := (\ s .  s.VBAR_EL1);
  write_to := (\ v s .  (( s with<| VBAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL2";
  read_from := (\ s .  s.VBAR_EL2);
  write_to := (\ v s .  (( s with<| VBAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL3";
  read_from := (\ s .  s.VBAR_EL3);
  write_to := (\ v s .  (( s with<| VBAR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VDFSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VDFSR";
  read_from := (\ s .  s.VDFSR);
  write_to := (\ v s .  (( s with<| VDFSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VSESR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VSESR_EL2";
  read_from := (\ s .  s.VSESR_EL2);
  write_to := (\ v s .  (( s with<| VSESR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VTCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VTCR_EL2";
  read_from := (\ s .  s.VTCR_EL2);
  write_to := (\ v s .  (( s with<| VTCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VTTBR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VTTBR_EL2";
  read_from := (\ s .  s.VTTBR_EL2);
  write_to := (\ v s .  (( s with<| VTTBR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_PC";
  read_from := (\ s .  s.PC);
  write_to := (\ v s .  (( s with<| PC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((R_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_R";
  read_from := (\ s .  s.R);
  write_to := (\ v s .  (( s with<| R := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 31 : int)) F v) |>))`;


val _ = Define `
 ((V_ref:((regstate),(register_value),(((128)words$word)list))register_ref)=  (<|
  name := "_V";
  read_from := (\ s .  s.V);
  write_to := (\ v s .  (( s with<| V := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_128_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_128_dec_bit v)(( 32 : int)) F v) |>))`;


val _ = Define `
 ((BranchTaken_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__BranchTaken";
  read_from := (\ s .  s.BranchTaken);
  write_to := (\ v s .  (( s with<| BranchTaken := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((ExclusiveLocal_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__ExclusiveLocal";
  read_from := (\ s .  s.ExclusiveLocal);
  write_to := (\ v s .  (( s with<| ExclusiveLocal := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((Memory_ref:((regstate),(register_value),((52)words$word))register_ref)=  (<|
  name := "__Memory";
  read_from := (\ s .  s.Memory);
  write_to := (\ v s .  (( s with<| Memory := v |>)));
  of_regval := (\ v .  vector_52_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_52_dec_bit v) |>))`;


val _ = Define `
 ((PendingInterrupt_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__PendingInterrupt";
  read_from := (\ s .  s.PendingInterrupt);
  write_to := (\ v s .  (( s with<| PendingInterrupt := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((PendingPhysicalSError_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__PendingPhysicalSError";
  read_from := (\ s .  s.PendingPhysicalSError);
  write_to := (\ v s .  (( s with<| PendingPhysicalSError := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((Sleeping_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__Sleeping";
  read_from := (\ s .  s.Sleeping);
  write_to := (\ v s .  (( s with<| Sleeping := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((ThisInstr_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "__ThisInstr";
  read_from := (\ s .  s.ThisInstr);
  write_to := (\ v s .  (( s with<| ThisInstr := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ThisInstrEnc_ref:((regstate),(register_value),(InstrEnc))register_ref)=  (<|
  name := "__ThisInstrEnc";
  read_from := (\ s .  s.ThisInstrEnc);
  write_to := (\ v s .  (( s with<| ThisInstrEnc := v |>)));
  of_regval := (\ v .  InstrEnc_of_regval v);
  regval_of := (\ v .  regval_of___InstrEnc v) |>))`;


val _ = Define `
 ((currentCond_ref:((regstate),(register_value),((4)words$word))register_ref)=  (<|
  name := "__currentCond";
  read_from := (\ s .  s.currentCond);
  write_to := (\ v s .  (( s with<| currentCond := v |>)));
  of_regval := (\ v .  vector_4_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_4_dec_bit v) |>))`;


val _ = Define `
 ((unconditional_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__unconditional";
  read_from := (\ s .  s.unconditional);
  write_to := (\ v s .  (( s with<| unconditional := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


(*val get_regval : string -> regstate -> maybe register_value*)
val _ = Define `
 ((get_regval:string -> regstate ->(register_value)option) reg_name s=
   (if reg_name = "APDAKeyHi_EL1" then SOME (APDAKeyHi_EL1_ref.regval_of (APDAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APDAKeyLo_EL1" then SOME (APDAKeyLo_EL1_ref.regval_of (APDAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APDBKeyHi_EL1" then SOME (APDBKeyHi_EL1_ref.regval_of (APDBKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APDBKeyLo_EL1" then SOME (APDBKeyLo_EL1_ref.regval_of (APDBKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APGAKeyHi_EL1" then SOME (APGAKeyHi_EL1_ref.regval_of (APGAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APGAKeyLo_EL1" then SOME (APGAKeyLo_EL1_ref.regval_of (APGAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APIAKeyHi_EL1" then SOME (APIAKeyHi_EL1_ref.regval_of (APIAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APIAKeyLo_EL1" then SOME (APIAKeyLo_EL1_ref.regval_of (APIAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APIBKeyHi_EL1" then SOME (APIBKeyHi_EL1_ref.regval_of (APIBKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APIBKeyLo_EL1" then SOME (APIBKeyLo_EL1_ref.regval_of (APIBKeyLo_EL1_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_EL1" then SOME (CONTEXTIDR_EL1_ref.regval_of (CONTEXTIDR_EL1_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_EL2" then SOME (CONTEXTIDR_EL2_ref.regval_of (CONTEXTIDR_EL2_ref.read_from s)) else
  if reg_name = "CPACR_EL1" then SOME (CPACR_EL1_ref.regval_of (CPACR_EL1_ref.read_from s)) else
  if reg_name = "CPTR_EL2" then SOME (CPTR_EL2_ref.regval_of (CPTR_EL2_ref.read_from s)) else
  if reg_name = "CPTR_EL3" then SOME (CPTR_EL3_ref.regval_of (CPTR_EL3_ref.read_from s)) else
  if reg_name = "DBGBCR_EL1" then SOME (DBGBCR_EL1_ref.regval_of (DBGBCR_EL1_ref.read_from s)) else
  if reg_name = "DBGBVR_EL1" then SOME (DBGBVR_EL1_ref.regval_of (DBGBVR_EL1_ref.read_from s)) else
  if reg_name = "DBGEN" then SOME (DBGEN_ref.regval_of (DBGEN_ref.read_from s)) else
  if reg_name = "DBGOSDLR" then SOME (DBGOSDLR_ref.regval_of (DBGOSDLR_ref.read_from s)) else
  if reg_name = "DBGOSLSR" then SOME (DBGOSLSR_ref.regval_of (DBGOSLSR_ref.read_from s)) else
  if reg_name = "DBGPRCR" then SOME (DBGPRCR_ref.regval_of (DBGPRCR_ref.read_from s)) else
  if reg_name = "DBGPRCR_EL1" then SOME (DBGPRCR_EL1_ref.regval_of (DBGPRCR_EL1_ref.read_from s)) else
  if reg_name = "DBGWCR_EL1" then SOME (DBGWCR_EL1_ref.regval_of (DBGWCR_EL1_ref.read_from s)) else
  if reg_name = "DBGWVR_EL1" then SOME (DBGWVR_EL1_ref.regval_of (DBGWVR_EL1_ref.read_from s)) else
  if reg_name = "DLR" then SOME (DLR_ref.regval_of (DLR_ref.read_from s)) else
  if reg_name = "DLR_EL0" then SOME (DLR_EL0_ref.regval_of (DLR_EL0_ref.read_from s)) else
  if reg_name = "DSPSR" then SOME (DSPSR_ref.regval_of (DSPSR_ref.read_from s)) else
  if reg_name = "DSPSR_EL0" then SOME (DSPSR_EL0_ref.regval_of (DSPSR_EL0_ref.read_from s)) else
  if reg_name = "EDSCR" then SOME (EDSCR_ref.regval_of (EDSCR_ref.read_from s)) else
  if reg_name = "ELR_EL1" then SOME (ELR_EL1_ref.regval_of (ELR_EL1_ref.read_from s)) else
  if reg_name = "ELR_EL2" then SOME (ELR_EL2_ref.regval_of (ELR_EL2_ref.read_from s)) else
  if reg_name = "ELR_EL3" then SOME (ELR_EL3_ref.regval_of (ELR_EL3_ref.read_from s)) else
  if reg_name = "ELR_hyp" then SOME (ELR_hyp_ref.regval_of (ELR_hyp_ref.read_from s)) else
  if reg_name = "ESR_EL1" then SOME (ESR_EL1_ref.regval_of (ESR_EL1_ref.read_from s)) else
  if reg_name = "ESR_EL2" then SOME (ESR_EL2_ref.regval_of (ESR_EL2_ref.read_from s)) else
  if reg_name = "ESR_EL3" then SOME (ESR_EL3_ref.regval_of (ESR_EL3_ref.read_from s)) else
  if reg_name = "EventRegister" then SOME (EventRegister_ref.regval_of (EventRegister_ref.read_from s)) else
  if reg_name = "FAR_EL1" then SOME (FAR_EL1_ref.regval_of (FAR_EL1_ref.read_from s)) else
  if reg_name = "FAR_EL2" then SOME (FAR_EL2_ref.regval_of (FAR_EL2_ref.read_from s)) else
  if reg_name = "FAR_EL3" then SOME (FAR_EL3_ref.regval_of (FAR_EL3_ref.read_from s)) else
  if reg_name = "FPCR" then SOME (FPCR_ref.regval_of (FPCR_ref.read_from s)) else
  if reg_name = "FPEXC" then SOME (FPEXC_ref.regval_of (FPEXC_ref.read_from s)) else
  if reg_name = "FPSCR" then SOME (FPSCR_ref.regval_of (FPSCR_ref.read_from s)) else
  if reg_name = "FPSR" then SOME (FPSR_ref.regval_of (FPSR_ref.read_from s)) else
  if reg_name = "HCR" then SOME (HCR_ref.regval_of (HCR_ref.read_from s)) else
  if reg_name = "HCR2" then SOME (HCR2_ref.regval_of (HCR2_ref.read_from s)) else
  if reg_name = "HCR_EL2" then SOME (HCR_EL2_ref.regval_of (HCR_EL2_ref.read_from s)) else
  if reg_name = "HDCR" then SOME (HDCR_ref.regval_of (HDCR_ref.read_from s)) else
  if reg_name = "HDFAR" then SOME (HDFAR_ref.regval_of (HDFAR_ref.read_from s)) else
  if reg_name = "HIFAR" then SOME (HIFAR_ref.regval_of (HIFAR_ref.read_from s)) else
  if reg_name = "HPFAR" then SOME (HPFAR_ref.regval_of (HPFAR_ref.read_from s)) else
  if reg_name = "HPFAR_EL2" then SOME (HPFAR_EL2_ref.regval_of (HPFAR_EL2_ref.read_from s)) else
  if reg_name = "HSCTLR" then SOME (HSCTLR_ref.regval_of (HSCTLR_ref.read_from s)) else
  if reg_name = "HSR" then SOME (HSR_ref.regval_of (HSR_ref.read_from s)) else
  if reg_name = "HVBAR" then SOME (HVBAR_ref.regval_of (HVBAR_ref.read_from s)) else
  if reg_name = "ID_AA64DFR0_EL1" then SOME (ID_AA64DFR0_EL1_ref.regval_of (ID_AA64DFR0_EL1_ref.read_from s)) else
  if reg_name = "LR_mon" then SOME (LR_mon_ref.regval_of (LR_mon_ref.read_from s)) else
  if reg_name = "MAIR_EL1" then SOME (MAIR_EL1_ref.regval_of (MAIR_EL1_ref.read_from s)) else
  if reg_name = "MAIR_EL2" then SOME (MAIR_EL2_ref.regval_of (MAIR_EL2_ref.read_from s)) else
  if reg_name = "MAIR_EL3" then SOME (MAIR_EL3_ref.regval_of (MAIR_EL3_ref.read_from s)) else
  if reg_name = "MDCR_EL2" then SOME (MDCR_EL2_ref.regval_of (MDCR_EL2_ref.read_from s)) else
  if reg_name = "MDCR_EL3" then SOME (MDCR_EL3_ref.regval_of (MDCR_EL3_ref.read_from s)) else
  if reg_name = "MDSCR_EL1" then SOME (MDSCR_EL1_ref.regval_of (MDSCR_EL1_ref.read_from s)) else
  if reg_name = "OSDLR_EL1" then SOME (OSDLR_EL1_ref.regval_of (OSDLR_EL1_ref.read_from s)) else
  if reg_name = "OSLSR_EL1" then SOME (OSLSR_EL1_ref.regval_of (OSLSR_EL1_ref.read_from s)) else
  if reg_name = "PSTATE" then SOME (PSTATE_ref.regval_of (PSTATE_ref.read_from s)) else
  if reg_name = "RC" then SOME (RC_ref.regval_of (RC_ref.read_from s)) else
  if reg_name = "RVBAR_EL1" then SOME (RVBAR_EL1_ref.regval_of (RVBAR_EL1_ref.read_from s)) else
  if reg_name = "RVBAR_EL2" then SOME (RVBAR_EL2_ref.regval_of (RVBAR_EL2_ref.read_from s)) else
  if reg_name = "RVBAR_EL3" then SOME (RVBAR_EL3_ref.regval_of (RVBAR_EL3_ref.read_from s)) else
  if reg_name = "SCR" then SOME (SCR_ref.regval_of (SCR_ref.read_from s)) else
  if reg_name = "SCR_EL3" then SOME (SCR_EL3_ref.regval_of (SCR_EL3_ref.read_from s)) else
  if reg_name = "SCTLR" then SOME (SCTLR_ref.regval_of (SCTLR_ref.read_from s)) else
  if reg_name = "SCTLR_EL1" then SOME (SCTLR_EL1_ref.regval_of (SCTLR_EL1_ref.read_from s)) else
  if reg_name = "SCTLR_EL2" then SOME (SCTLR_EL2_ref.regval_of (SCTLR_EL2_ref.read_from s)) else
  if reg_name = "SCTLR_EL3" then SOME (SCTLR_EL3_ref.regval_of (SCTLR_EL3_ref.read_from s)) else
  if reg_name = "SDCR" then SOME (SDCR_ref.regval_of (SDCR_ref.read_from s)) else
  if reg_name = "SDER" then SOME (SDER_ref.regval_of (SDER_ref.read_from s)) else
  if reg_name = "SPIDEN" then SOME (SPIDEN_ref.regval_of (SPIDEN_ref.read_from s)) else
  if reg_name = "SPSR_EL1" then SOME (SPSR_EL1_ref.regval_of (SPSR_EL1_ref.read_from s)) else
  if reg_name = "SPSR_EL2" then SOME (SPSR_EL2_ref.regval_of (SPSR_EL2_ref.read_from s)) else
  if reg_name = "SPSR_EL3" then SOME (SPSR_EL3_ref.regval_of (SPSR_EL3_ref.read_from s)) else
  if reg_name = "SPSR_abt" then SOME (SPSR_abt_ref.regval_of (SPSR_abt_ref.read_from s)) else
  if reg_name = "SPSR_fiq" then SOME (SPSR_fiq_ref.regval_of (SPSR_fiq_ref.read_from s)) else
  if reg_name = "SPSR_hyp" then SOME (SPSR_hyp_ref.regval_of (SPSR_hyp_ref.read_from s)) else
  if reg_name = "SPSR_irq" then SOME (SPSR_irq_ref.regval_of (SPSR_irq_ref.read_from s)) else
  if reg_name = "SPSR_mon" then SOME (SPSR_mon_ref.regval_of (SPSR_mon_ref.read_from s)) else
  if reg_name = "SPSR_svc" then SOME (SPSR_svc_ref.regval_of (SPSR_svc_ref.read_from s)) else
  if reg_name = "SPSR_und" then SOME (SPSR_und_ref.regval_of (SPSR_und_ref.read_from s)) else
  if reg_name = "SP_EL0" then SOME (SP_EL0_ref.regval_of (SP_EL0_ref.read_from s)) else
  if reg_name = "SP_EL1" then SOME (SP_EL1_ref.regval_of (SP_EL1_ref.read_from s)) else
  if reg_name = "SP_EL2" then SOME (SP_EL2_ref.regval_of (SP_EL2_ref.read_from s)) else
  if reg_name = "SP_EL3" then SOME (SP_EL3_ref.regval_of (SP_EL3_ref.read_from s)) else
  if reg_name = "SP_mon" then SOME (SP_mon_ref.regval_of (SP_mon_ref.read_from s)) else
  if reg_name = "TCR_EL1" then SOME (TCR_EL1_ref.regval_of (TCR_EL1_ref.read_from s)) else
  if reg_name = "TCR_EL2" then SOME (TCR_EL2_ref.regval_of (TCR_EL2_ref.read_from s)) else
  if reg_name = "TCR_EL3" then SOME (TCR_EL3_ref.regval_of (TCR_EL3_ref.read_from s)) else
  if reg_name = "TTBCR" then SOME (TTBCR_ref.regval_of (TTBCR_ref.read_from s)) else
  if reg_name = "TTBR0_EL1" then SOME (TTBR0_EL1_ref.regval_of (TTBR0_EL1_ref.read_from s)) else
  if reg_name = "TTBR0_EL2" then SOME (TTBR0_EL2_ref.regval_of (TTBR0_EL2_ref.read_from s)) else
  if reg_name = "TTBR0_EL3" then SOME (TTBR0_EL3_ref.regval_of (TTBR0_EL3_ref.read_from s)) else
  if reg_name = "TTBR1_EL1" then SOME (TTBR1_EL1_ref.regval_of (TTBR1_EL1_ref.read_from s)) else
  if reg_name = "TTBR1_EL2" then SOME (TTBR1_EL2_ref.regval_of (TTBR1_EL2_ref.read_from s)) else
  if reg_name = "VBAR" then SOME (VBAR_ref.regval_of (VBAR_ref.read_from s)) else
  if reg_name = "VBAR_EL1" then SOME (VBAR_EL1_ref.regval_of (VBAR_EL1_ref.read_from s)) else
  if reg_name = "VBAR_EL2" then SOME (VBAR_EL2_ref.regval_of (VBAR_EL2_ref.read_from s)) else
  if reg_name = "VBAR_EL3" then SOME (VBAR_EL3_ref.regval_of (VBAR_EL3_ref.read_from s)) else
  if reg_name = "VDFSR" then SOME (VDFSR_ref.regval_of (VDFSR_ref.read_from s)) else
  if reg_name = "VSESR_EL2" then SOME (VSESR_EL2_ref.regval_of (VSESR_EL2_ref.read_from s)) else
  if reg_name = "VTCR_EL2" then SOME (VTCR_EL2_ref.regval_of (VTCR_EL2_ref.read_from s)) else
  if reg_name = "VTTBR_EL2" then SOME (VTTBR_EL2_ref.regval_of (VTTBR_EL2_ref.read_from s)) else
  if reg_name = "_PC" then SOME (PC_ref.regval_of (PC_ref.read_from s)) else
  if reg_name = "_R" then SOME (R_ref.regval_of (R_ref.read_from s)) else
  if reg_name = "_V" then SOME (V_ref.regval_of (V_ref.read_from s)) else
  if reg_name = "__BranchTaken" then SOME (BranchTaken_ref.regval_of (BranchTaken_ref.read_from s)) else
  if reg_name = "__ExclusiveLocal" then SOME (ExclusiveLocal_ref.regval_of (ExclusiveLocal_ref.read_from s)) else
  if reg_name = "__Memory" then SOME (Memory_ref.regval_of (Memory_ref.read_from s)) else
  if reg_name = "__PendingInterrupt" then SOME (PendingInterrupt_ref.regval_of (PendingInterrupt_ref.read_from s)) else
  if reg_name = "__PendingPhysicalSError" then SOME (PendingPhysicalSError_ref.regval_of (PendingPhysicalSError_ref.read_from s)) else
  if reg_name = "__Sleeping" then SOME (Sleeping_ref.regval_of (Sleeping_ref.read_from s)) else
  if reg_name = "__ThisInstr" then SOME (ThisInstr_ref.regval_of (ThisInstr_ref.read_from s)) else
  if reg_name = "__ThisInstrEnc" then SOME (ThisInstrEnc_ref.regval_of (ThisInstrEnc_ref.read_from s)) else
  if reg_name = "__currentCond" then SOME (currentCond_ref.regval_of (currentCond_ref.read_from s)) else
  if reg_name = "__unconditional" then SOME (unconditional_ref.regval_of (unconditional_ref.read_from s)) else
  NONE))`;


(*val set_regval : string -> register_value -> regstate -> maybe regstate*)
val _ = Define `
 ((set_regval:string -> register_value -> regstate ->(regstate)option) reg_name v s=
   (if reg_name = "APDAKeyHi_EL1" then OPTION_MAP (\ v .  APDAKeyHi_EL1_ref.write_to v s) (APDAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APDAKeyLo_EL1" then OPTION_MAP (\ v .  APDAKeyLo_EL1_ref.write_to v s) (APDAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APDBKeyHi_EL1" then OPTION_MAP (\ v .  APDBKeyHi_EL1_ref.write_to v s) (APDBKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APDBKeyLo_EL1" then OPTION_MAP (\ v .  APDBKeyLo_EL1_ref.write_to v s) (APDBKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APGAKeyHi_EL1" then OPTION_MAP (\ v .  APGAKeyHi_EL1_ref.write_to v s) (APGAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APGAKeyLo_EL1" then OPTION_MAP (\ v .  APGAKeyLo_EL1_ref.write_to v s) (APGAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APIAKeyHi_EL1" then OPTION_MAP (\ v .  APIAKeyHi_EL1_ref.write_to v s) (APIAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APIAKeyLo_EL1" then OPTION_MAP (\ v .  APIAKeyLo_EL1_ref.write_to v s) (APIAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APIBKeyHi_EL1" then OPTION_MAP (\ v .  APIBKeyHi_EL1_ref.write_to v s) (APIBKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APIBKeyLo_EL1" then OPTION_MAP (\ v .  APIBKeyLo_EL1_ref.write_to v s) (APIBKeyLo_EL1_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_EL1" then OPTION_MAP (\ v .  CONTEXTIDR_EL1_ref.write_to v s) (CONTEXTIDR_EL1_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_EL2" then OPTION_MAP (\ v .  CONTEXTIDR_EL2_ref.write_to v s) (CONTEXTIDR_EL2_ref.of_regval v) else
  if reg_name = "CPACR_EL1" then OPTION_MAP (\ v .  CPACR_EL1_ref.write_to v s) (CPACR_EL1_ref.of_regval v) else
  if reg_name = "CPTR_EL2" then OPTION_MAP (\ v .  CPTR_EL2_ref.write_to v s) (CPTR_EL2_ref.of_regval v) else
  if reg_name = "CPTR_EL3" then OPTION_MAP (\ v .  CPTR_EL3_ref.write_to v s) (CPTR_EL3_ref.of_regval v) else
  if reg_name = "DBGBCR_EL1" then OPTION_MAP (\ v .  DBGBCR_EL1_ref.write_to v s) (DBGBCR_EL1_ref.of_regval v) else
  if reg_name = "DBGBVR_EL1" then OPTION_MAP (\ v .  DBGBVR_EL1_ref.write_to v s) (DBGBVR_EL1_ref.of_regval v) else
  if reg_name = "DBGEN" then OPTION_MAP (\ v .  DBGEN_ref.write_to v s) (DBGEN_ref.of_regval v) else
  if reg_name = "DBGOSDLR" then OPTION_MAP (\ v .  DBGOSDLR_ref.write_to v s) (DBGOSDLR_ref.of_regval v) else
  if reg_name = "DBGOSLSR" then OPTION_MAP (\ v .  DBGOSLSR_ref.write_to v s) (DBGOSLSR_ref.of_regval v) else
  if reg_name = "DBGPRCR" then OPTION_MAP (\ v .  DBGPRCR_ref.write_to v s) (DBGPRCR_ref.of_regval v) else
  if reg_name = "DBGPRCR_EL1" then OPTION_MAP (\ v .  DBGPRCR_EL1_ref.write_to v s) (DBGPRCR_EL1_ref.of_regval v) else
  if reg_name = "DBGWCR_EL1" then OPTION_MAP (\ v .  DBGWCR_EL1_ref.write_to v s) (DBGWCR_EL1_ref.of_regval v) else
  if reg_name = "DBGWVR_EL1" then OPTION_MAP (\ v .  DBGWVR_EL1_ref.write_to v s) (DBGWVR_EL1_ref.of_regval v) else
  if reg_name = "DLR" then OPTION_MAP (\ v .  DLR_ref.write_to v s) (DLR_ref.of_regval v) else
  if reg_name = "DLR_EL0" then OPTION_MAP (\ v .  DLR_EL0_ref.write_to v s) (DLR_EL0_ref.of_regval v) else
  if reg_name = "DSPSR" then OPTION_MAP (\ v .  DSPSR_ref.write_to v s) (DSPSR_ref.of_regval v) else
  if reg_name = "DSPSR_EL0" then OPTION_MAP (\ v .  DSPSR_EL0_ref.write_to v s) (DSPSR_EL0_ref.of_regval v) else
  if reg_name = "EDSCR" then OPTION_MAP (\ v .  EDSCR_ref.write_to v s) (EDSCR_ref.of_regval v) else
  if reg_name = "ELR_EL1" then OPTION_MAP (\ v .  ELR_EL1_ref.write_to v s) (ELR_EL1_ref.of_regval v) else
  if reg_name = "ELR_EL2" then OPTION_MAP (\ v .  ELR_EL2_ref.write_to v s) (ELR_EL2_ref.of_regval v) else
  if reg_name = "ELR_EL3" then OPTION_MAP (\ v .  ELR_EL3_ref.write_to v s) (ELR_EL3_ref.of_regval v) else
  if reg_name = "ELR_hyp" then OPTION_MAP (\ v .  ELR_hyp_ref.write_to v s) (ELR_hyp_ref.of_regval v) else
  if reg_name = "ESR_EL1" then OPTION_MAP (\ v .  ESR_EL1_ref.write_to v s) (ESR_EL1_ref.of_regval v) else
  if reg_name = "ESR_EL2" then OPTION_MAP (\ v .  ESR_EL2_ref.write_to v s) (ESR_EL2_ref.of_regval v) else
  if reg_name = "ESR_EL3" then OPTION_MAP (\ v .  ESR_EL3_ref.write_to v s) (ESR_EL3_ref.of_regval v) else
  if reg_name = "EventRegister" then OPTION_MAP (\ v .  EventRegister_ref.write_to v s) (EventRegister_ref.of_regval v) else
  if reg_name = "FAR_EL1" then OPTION_MAP (\ v .  FAR_EL1_ref.write_to v s) (FAR_EL1_ref.of_regval v) else
  if reg_name = "FAR_EL2" then OPTION_MAP (\ v .  FAR_EL2_ref.write_to v s) (FAR_EL2_ref.of_regval v) else
  if reg_name = "FAR_EL3" then OPTION_MAP (\ v .  FAR_EL3_ref.write_to v s) (FAR_EL3_ref.of_regval v) else
  if reg_name = "FPCR" then OPTION_MAP (\ v .  FPCR_ref.write_to v s) (FPCR_ref.of_regval v) else
  if reg_name = "FPEXC" then OPTION_MAP (\ v .  FPEXC_ref.write_to v s) (FPEXC_ref.of_regval v) else
  if reg_name = "FPSCR" then OPTION_MAP (\ v .  FPSCR_ref.write_to v s) (FPSCR_ref.of_regval v) else
  if reg_name = "FPSR" then OPTION_MAP (\ v .  FPSR_ref.write_to v s) (FPSR_ref.of_regval v) else
  if reg_name = "HCR" then OPTION_MAP (\ v .  HCR_ref.write_to v s) (HCR_ref.of_regval v) else
  if reg_name = "HCR2" then OPTION_MAP (\ v .  HCR2_ref.write_to v s) (HCR2_ref.of_regval v) else
  if reg_name = "HCR_EL2" then OPTION_MAP (\ v .  HCR_EL2_ref.write_to v s) (HCR_EL2_ref.of_regval v) else
  if reg_name = "HDCR" then OPTION_MAP (\ v .  HDCR_ref.write_to v s) (HDCR_ref.of_regval v) else
  if reg_name = "HDFAR" then OPTION_MAP (\ v .  HDFAR_ref.write_to v s) (HDFAR_ref.of_regval v) else
  if reg_name = "HIFAR" then OPTION_MAP (\ v .  HIFAR_ref.write_to v s) (HIFAR_ref.of_regval v) else
  if reg_name = "HPFAR" then OPTION_MAP (\ v .  HPFAR_ref.write_to v s) (HPFAR_ref.of_regval v) else
  if reg_name = "HPFAR_EL2" then OPTION_MAP (\ v .  HPFAR_EL2_ref.write_to v s) (HPFAR_EL2_ref.of_regval v) else
  if reg_name = "HSCTLR" then OPTION_MAP (\ v .  HSCTLR_ref.write_to v s) (HSCTLR_ref.of_regval v) else
  if reg_name = "HSR" then OPTION_MAP (\ v .  HSR_ref.write_to v s) (HSR_ref.of_regval v) else
  if reg_name = "HVBAR" then OPTION_MAP (\ v .  HVBAR_ref.write_to v s) (HVBAR_ref.of_regval v) else
  if reg_name = "ID_AA64DFR0_EL1" then OPTION_MAP (\ v .  ID_AA64DFR0_EL1_ref.write_to v s) (ID_AA64DFR0_EL1_ref.of_regval v) else
  if reg_name = "LR_mon" then OPTION_MAP (\ v .  LR_mon_ref.write_to v s) (LR_mon_ref.of_regval v) else
  if reg_name = "MAIR_EL1" then OPTION_MAP (\ v .  MAIR_EL1_ref.write_to v s) (MAIR_EL1_ref.of_regval v) else
  if reg_name = "MAIR_EL2" then OPTION_MAP (\ v .  MAIR_EL2_ref.write_to v s) (MAIR_EL2_ref.of_regval v) else
  if reg_name = "MAIR_EL3" then OPTION_MAP (\ v .  MAIR_EL3_ref.write_to v s) (MAIR_EL3_ref.of_regval v) else
  if reg_name = "MDCR_EL2" then OPTION_MAP (\ v .  MDCR_EL2_ref.write_to v s) (MDCR_EL2_ref.of_regval v) else
  if reg_name = "MDCR_EL3" then OPTION_MAP (\ v .  MDCR_EL3_ref.write_to v s) (MDCR_EL3_ref.of_regval v) else
  if reg_name = "MDSCR_EL1" then OPTION_MAP (\ v .  MDSCR_EL1_ref.write_to v s) (MDSCR_EL1_ref.of_regval v) else
  if reg_name = "OSDLR_EL1" then OPTION_MAP (\ v .  OSDLR_EL1_ref.write_to v s) (OSDLR_EL1_ref.of_regval v) else
  if reg_name = "OSLSR_EL1" then OPTION_MAP (\ v .  OSLSR_EL1_ref.write_to v s) (OSLSR_EL1_ref.of_regval v) else
  if reg_name = "PSTATE" then OPTION_MAP (\ v .  PSTATE_ref.write_to v s) (PSTATE_ref.of_regval v) else
  if reg_name = "RC" then OPTION_MAP (\ v .  RC_ref.write_to v s) (RC_ref.of_regval v) else
  if reg_name = "RVBAR_EL1" then OPTION_MAP (\ v .  RVBAR_EL1_ref.write_to v s) (RVBAR_EL1_ref.of_regval v) else
  if reg_name = "RVBAR_EL2" then OPTION_MAP (\ v .  RVBAR_EL2_ref.write_to v s) (RVBAR_EL2_ref.of_regval v) else
  if reg_name = "RVBAR_EL3" then OPTION_MAP (\ v .  RVBAR_EL3_ref.write_to v s) (RVBAR_EL3_ref.of_regval v) else
  if reg_name = "SCR" then OPTION_MAP (\ v .  SCR_ref.write_to v s) (SCR_ref.of_regval v) else
  if reg_name = "SCR_EL3" then OPTION_MAP (\ v .  SCR_EL3_ref.write_to v s) (SCR_EL3_ref.of_regval v) else
  if reg_name = "SCTLR" then OPTION_MAP (\ v .  SCTLR_ref.write_to v s) (SCTLR_ref.of_regval v) else
  if reg_name = "SCTLR_EL1" then OPTION_MAP (\ v .  SCTLR_EL1_ref.write_to v s) (SCTLR_EL1_ref.of_regval v) else
  if reg_name = "SCTLR_EL2" then OPTION_MAP (\ v .  SCTLR_EL2_ref.write_to v s) (SCTLR_EL2_ref.of_regval v) else
  if reg_name = "SCTLR_EL3" then OPTION_MAP (\ v .  SCTLR_EL3_ref.write_to v s) (SCTLR_EL3_ref.of_regval v) else
  if reg_name = "SDCR" then OPTION_MAP (\ v .  SDCR_ref.write_to v s) (SDCR_ref.of_regval v) else
  if reg_name = "SDER" then OPTION_MAP (\ v .  SDER_ref.write_to v s) (SDER_ref.of_regval v) else
  if reg_name = "SPIDEN" then OPTION_MAP (\ v .  SPIDEN_ref.write_to v s) (SPIDEN_ref.of_regval v) else
  if reg_name = "SPSR_EL1" then OPTION_MAP (\ v .  SPSR_EL1_ref.write_to v s) (SPSR_EL1_ref.of_regval v) else
  if reg_name = "SPSR_EL2" then OPTION_MAP (\ v .  SPSR_EL2_ref.write_to v s) (SPSR_EL2_ref.of_regval v) else
  if reg_name = "SPSR_EL3" then OPTION_MAP (\ v .  SPSR_EL3_ref.write_to v s) (SPSR_EL3_ref.of_regval v) else
  if reg_name = "SPSR_abt" then OPTION_MAP (\ v .  SPSR_abt_ref.write_to v s) (SPSR_abt_ref.of_regval v) else
  if reg_name = "SPSR_fiq" then OPTION_MAP (\ v .  SPSR_fiq_ref.write_to v s) (SPSR_fiq_ref.of_regval v) else
  if reg_name = "SPSR_hyp" then OPTION_MAP (\ v .  SPSR_hyp_ref.write_to v s) (SPSR_hyp_ref.of_regval v) else
  if reg_name = "SPSR_irq" then OPTION_MAP (\ v .  SPSR_irq_ref.write_to v s) (SPSR_irq_ref.of_regval v) else
  if reg_name = "SPSR_mon" then OPTION_MAP (\ v .  SPSR_mon_ref.write_to v s) (SPSR_mon_ref.of_regval v) else
  if reg_name = "SPSR_svc" then OPTION_MAP (\ v .  SPSR_svc_ref.write_to v s) (SPSR_svc_ref.of_regval v) else
  if reg_name = "SPSR_und" then OPTION_MAP (\ v .  SPSR_und_ref.write_to v s) (SPSR_und_ref.of_regval v) else
  if reg_name = "SP_EL0" then OPTION_MAP (\ v .  SP_EL0_ref.write_to v s) (SP_EL0_ref.of_regval v) else
  if reg_name = "SP_EL1" then OPTION_MAP (\ v .  SP_EL1_ref.write_to v s) (SP_EL1_ref.of_regval v) else
  if reg_name = "SP_EL2" then OPTION_MAP (\ v .  SP_EL2_ref.write_to v s) (SP_EL2_ref.of_regval v) else
  if reg_name = "SP_EL3" then OPTION_MAP (\ v .  SP_EL3_ref.write_to v s) (SP_EL3_ref.of_regval v) else
  if reg_name = "SP_mon" then OPTION_MAP (\ v .  SP_mon_ref.write_to v s) (SP_mon_ref.of_regval v) else
  if reg_name = "TCR_EL1" then OPTION_MAP (\ v .  TCR_EL1_ref.write_to v s) (TCR_EL1_ref.of_regval v) else
  if reg_name = "TCR_EL2" then OPTION_MAP (\ v .  TCR_EL2_ref.write_to v s) (TCR_EL2_ref.of_regval v) else
  if reg_name = "TCR_EL3" then OPTION_MAP (\ v .  TCR_EL3_ref.write_to v s) (TCR_EL3_ref.of_regval v) else
  if reg_name = "TTBCR" then OPTION_MAP (\ v .  TTBCR_ref.write_to v s) (TTBCR_ref.of_regval v) else
  if reg_name = "TTBR0_EL1" then OPTION_MAP (\ v .  TTBR0_EL1_ref.write_to v s) (TTBR0_EL1_ref.of_regval v) else
  if reg_name = "TTBR0_EL2" then OPTION_MAP (\ v .  TTBR0_EL2_ref.write_to v s) (TTBR0_EL2_ref.of_regval v) else
  if reg_name = "TTBR0_EL3" then OPTION_MAP (\ v .  TTBR0_EL3_ref.write_to v s) (TTBR0_EL3_ref.of_regval v) else
  if reg_name = "TTBR1_EL1" then OPTION_MAP (\ v .  TTBR1_EL1_ref.write_to v s) (TTBR1_EL1_ref.of_regval v) else
  if reg_name = "TTBR1_EL2" then OPTION_MAP (\ v .  TTBR1_EL2_ref.write_to v s) (TTBR1_EL2_ref.of_regval v) else
  if reg_name = "VBAR" then OPTION_MAP (\ v .  VBAR_ref.write_to v s) (VBAR_ref.of_regval v) else
  if reg_name = "VBAR_EL1" then OPTION_MAP (\ v .  VBAR_EL1_ref.write_to v s) (VBAR_EL1_ref.of_regval v) else
  if reg_name = "VBAR_EL2" then OPTION_MAP (\ v .  VBAR_EL2_ref.write_to v s) (VBAR_EL2_ref.of_regval v) else
  if reg_name = "VBAR_EL3" then OPTION_MAP (\ v .  VBAR_EL3_ref.write_to v s) (VBAR_EL3_ref.of_regval v) else
  if reg_name = "VDFSR" then OPTION_MAP (\ v .  VDFSR_ref.write_to v s) (VDFSR_ref.of_regval v) else
  if reg_name = "VSESR_EL2" then OPTION_MAP (\ v .  VSESR_EL2_ref.write_to v s) (VSESR_EL2_ref.of_regval v) else
  if reg_name = "VTCR_EL2" then OPTION_MAP (\ v .  VTCR_EL2_ref.write_to v s) (VTCR_EL2_ref.of_regval v) else
  if reg_name = "VTTBR_EL2" then OPTION_MAP (\ v .  VTTBR_EL2_ref.write_to v s) (VTTBR_EL2_ref.of_regval v) else
  if reg_name = "_PC" then OPTION_MAP (\ v .  PC_ref.write_to v s) (PC_ref.of_regval v) else
  if reg_name = "_R" then OPTION_MAP (\ v .  R_ref.write_to v s) (R_ref.of_regval v) else
  if reg_name = "_V" then OPTION_MAP (\ v .  V_ref.write_to v s) (V_ref.of_regval v) else
  if reg_name = "__BranchTaken" then OPTION_MAP (\ v .  BranchTaken_ref.write_to v s) (BranchTaken_ref.of_regval v) else
  if reg_name = "__ExclusiveLocal" then OPTION_MAP (\ v .  ExclusiveLocal_ref.write_to v s) (ExclusiveLocal_ref.of_regval v) else
  if reg_name = "__Memory" then OPTION_MAP (\ v .  Memory_ref.write_to v s) (Memory_ref.of_regval v) else
  if reg_name = "__PendingInterrupt" then OPTION_MAP (\ v .  PendingInterrupt_ref.write_to v s) (PendingInterrupt_ref.of_regval v) else
  if reg_name = "__PendingPhysicalSError" then OPTION_MAP (\ v .  PendingPhysicalSError_ref.write_to v s) (PendingPhysicalSError_ref.of_regval v) else
  if reg_name = "__Sleeping" then OPTION_MAP (\ v .  Sleeping_ref.write_to v s) (Sleeping_ref.of_regval v) else
  if reg_name = "__ThisInstr" then OPTION_MAP (\ v .  ThisInstr_ref.write_to v s) (ThisInstr_ref.of_regval v) else
  if reg_name = "__ThisInstrEnc" then OPTION_MAP (\ v .  ThisInstrEnc_ref.write_to v s) (ThisInstrEnc_ref.of_regval v) else
  if reg_name = "__currentCond" then OPTION_MAP (\ v .  currentCond_ref.write_to v s) (currentCond_ref.of_regval v) else
  if reg_name = "__unconditional" then OPTION_MAP (\ v .  unconditional_ref.write_to v s) (unconditional_ref.of_regval v) else
  NONE))`;


val _ = Define `
 ((register_accessors:(string -> regstate ->(register_value)option)#(string -> register_value -> regstate ->(regstate)option))=  (get_regval, set_regval))`;



val _ = type_abbrev((* ( 'a, 'r) *) "MR" , ``:  (regstate, 'a, 'r, exception)monadR``);
val _ = type_abbrev((*  'a *) "M" , ``:  (regstate, 'a, exception)monad``);
val _ = export_theory()

