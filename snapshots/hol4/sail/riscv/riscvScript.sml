(*Generated by Lem from riscv.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_instr_kindsTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_operators_mwordsTheory sail2_promptTheory sail2_stringTheory riscv_typesTheory riscv_extrasTheory;

val _ = numLib.prefer_num();



val _ = new_theory "riscv"

(*Generated by Sail from riscv.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
(*open import Riscv_types*)
(*open import Riscv_extras*)

(*val spc_forwards : unit -> string*)

val _ = Define `
 ((spc_forwards:unit -> string) () =  " ")`;


(*val spc_backwards : string -> unit*)

val _ = Define `
 ((spc_backwards:string -> unit) s=  () )`;


(*val opt_spc_forwards : unit -> string*)

val _ = Define `
 ((opt_spc_forwards:unit -> string) () =  "")`;


(*val opt_spc_backwards : string -> unit*)

val _ = Define `
 ((opt_spc_backwards:string -> unit) s=  () )`;


(*val def_spc_forwards : unit -> string*)

val _ = Define `
 ((def_spc_forwards:unit -> string) () =  " ")`;


(*val def_spc_backwards : string -> unit*)

val _ = Define `
 ((def_spc_backwards:string -> unit) s=  () )`;










(*val builtin_and_vec : forall 'n. bits 'n -> bits 'n -> bits 'n*)



(*val builtin_or_vec : forall 'n. bits 'n -> bits 'n -> bits 'n*)



(*val __raw_SetSlice_int : forall 'w. integer -> ii -> ii -> bits 'w -> ii*)

(*val __GetSlice_int : forall 'n. Size 'n => integer -> ii -> ii -> mword 'n*)

val _ = Define `
 ((GetSlice_int:int -> int -> int -> 'n words$word) n m o1=  ((get_slice_int n m o1  :  'n words$word)))`;


(*val __raw_SetSlice_bits : forall 'n 'w. integer -> integer -> bits 'n -> ii -> bits 'w -> bits 'n*)

(*val __raw_GetSlice_bits : forall 'n 'w. integer -> integer -> bits 'n -> ii -> bits 'w*)

(*val cast_unit_vec : bitU -> mword ty1*)

val _ = Define `
 ((cast_unit_vec0:bitU ->(1)words$word) b=
    ((case b of   B0 => (vec_of_bits [B0]  :  1 words$word) | B1 => (vec_of_bits [B1]  :  1 words$word) )))`;


(*val DecStr : ii -> string*)

(*val HexStr : ii -> string*)

(*val __RISCV_write : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M bool*)

val _ = Define `
 ((RISCV_write:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (sail2_state_monad$seqS
   (write_ram (( 64 : int):ii) width
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
       :  64 words$word) addr data)
   (sail2_state_monad$returnS T)))`;


(*val __TraceMemoryWrite : forall 'int8_times_n 'm. integer -> bits 'm -> bits 'int8_times_n -> unit*)

(*val __RISCV_read : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> bool -> bool -> bool -> M (maybe (mword 'int8_times_n))*)

val _ = Define `
 ((RISCV_read:(64)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width aq rl res=
    ((case (aq, rl, res) of
     (F, F, F) => sail2_state_monad$bindS
      (MEMr (( 64 : int):ii) width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word) addr
        : ( 'int8_times_n words$word) M) (\ (w__0 :  'int8_times_n words$word) . 
      sail2_state_monad$returnS (SOME w__0))
   | (T, F, F) => sail2_state_monad$bindS
      (MEMr_acquire (( 64 : int):ii) width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word) addr
        : ( 'int8_times_n words$word) M) (\ (w__1 :  'int8_times_n words$word) . 
      sail2_state_monad$returnS (SOME w__1))
   | (T, T, F) => sail2_state_monad$bindS
      (MEMr_strong_acquire (( 64 : int):ii) width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word) addr
        : ( 'int8_times_n words$word) M) (\ (w__2 :  'int8_times_n words$word) . 
      sail2_state_monad$returnS (SOME w__2))
   | (F, F, T) => sail2_state_monad$bindS
      (MEMr_reserved (( 64 : int):ii) width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word) addr
        : ( 'int8_times_n words$word) M) (\ (w__3 :  'int8_times_n words$word) . 
      sail2_state_monad$returnS (SOME w__3))
   | (T, F, T) => sail2_state_monad$bindS
      (MEMr_reserved_acquire (( 64 : int):ii) width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word) addr
        : ( 'int8_times_n words$word) M) (\ (w__4 :  'int8_times_n words$word) . 
      sail2_state_monad$returnS (SOME w__4))
   | (T, T, T) => sail2_state_monad$bindS
      (MEMr_reserved_strong_acquire (( 64 : int):ii) width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word) addr
        : ( 'int8_times_n words$word) M) (\ (w__5 :  'int8_times_n words$word) . 
      sail2_state_monad$returnS (SOME w__5))
   | (F, T, F) => sail2_state_monad$returnS NONE
   | (F, T, T) => sail2_state_monad$returnS NONE
   )))`;


(*val __TraceMemoryRead : forall 'int8_times_n 'm. integer -> bits 'm -> bits 'int8_times_n -> unit*)

(*val ex_nat : ii -> integer*)

val _ = Define `
 ((ex_nat:int -> int) n=  n)`;


(*val ex_int : ii -> integer*)

val _ = Define `
 ((ex_int:int -> int) n=  n)`;


(*val coerce_int_nat : ii -> M ii*)

val _ = Define `
 ((coerce_int_nat:int ->(regstate)sail2_state_monad$sequential_state ->(((int),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) x=  (sail2_state_monad$seqS (sail2_state_monad$assert_expS T "") (sail2_state_monad$returnS x)))`;


(*val EXTS : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

(*val EXTZ : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((EXTS:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((sign_extend v m__tv  :  'm words$word)))`;


val _ = Define `
 ((EXTZ:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((zero_extend v m__tv  :  'm words$word)))`;


(*val zopz0zI_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zI_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zIzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

val _ = Define `
 ((zopz0zI_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) < ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zKzJ_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) >= ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zI_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) < ((lem$w2ui y))))`;


val _ = Define `
 ((zopz0zKzJ_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) >= ((lem$w2ui y))))`;


val _ = Define `
 ((zopz0zIzJ_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) <= ((lem$w2ui y))))`;


(*val bool_to_bits : bool -> mword ty1*)

val _ = Define `
 ((bool_to_bits:bool ->(1)words$word) x=  (if x then (vec_of_bits [B1]  :  1 words$word) else (vec_of_bits [B0]  :  1 words$word)))`;


(*val bit_to_bool : bitU -> bool*)

val _ = Define `
 ((bit_to_bool:bitU -> bool) b=  ((case b of   B1 => T | B0 => F )))`;


(*val vector64 : ii -> mword ty64*)

val _ = Define `
 ((vector64:int ->(64)words$word) n=  ((get_slice_int (( 64 : int):ii) n (( 0 : int):ii)  :  64 words$word)))`;


(*val to_bits : forall 'l. Size 'l => integer -> ii -> mword 'l*)

val _ = Define `
 ((to_bits:int -> int -> 'l words$word) l n=  ((get_slice_int l n (( 0 : int):ii)  :  'l words$word)))`;


(*val shift_right_arith64 : mword ty64 -> mword ty6 -> mword ty64*)

val _ = Define `
 ((shift_right_arith64:(64)words$word ->(6)words$word ->(64)words$word) (v : 64 bits) (shift : 6 bits)=
    (let (v128 : 128 bits) = ((EXTS (( 128 : int):ii) v  :  128 words$word)) in
   (subrange_vec_dec ((shift_bits_right v128 shift  :  128 words$word)) (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val shift_right_arith32 : mword ty32 -> mword ty5 -> mword ty32*)

val _ = Define `
 ((shift_right_arith32:(32)words$word ->(5)words$word ->(32)words$word) (v : 32 bits) (shift : 5 bits)=
    (let (v64 : 64 bits) = ((EXTS (( 64 : int):ii) v  :  64 words$word)) in
   (subrange_vec_dec ((shift_bits_right v64 shift  :  64 words$word)) (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((xlen:int)=  ((( 64 : int):ii)))`;


val _ = Define `
 ((xlen_max_unsigned:int)=  (((pow2 xlen)) - (( 1 : int):ii)))`;


val _ = Define `
 ((xlen_max_signed:int)=  (((pow2 ((xlen - (( 1 : int):ii))))) - (( 1 : int):ii)))`;


val _ = Define `
 ((xlen_min_signed:int)=  ((( 0 : int):ii) - ((pow2 ((xlen - (( 1 : int):ii)))))))`;


(*val regbits_to_regno : mword ty5 -> integer*)

val _ = Define `
 ((regbits_to_regno:(5)words$word -> int) b=
    (let r = (lem$w2ui b) in
   r))`;


(*val creg2reg_bits : mword ty3 -> mword ty5*)

val _ = Define `
 ((creg2reg_bits:(3)words$word ->(5)words$word) creg=  ((concat_vec (vec_of_bits [B0;B1]  :  2 words$word) creg  :  5 words$word)))`;


val _ = Define `
((zreg:(5)words$word)=  ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))`;


val _ = Define `
((ra:(5)words$word)=  ((vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))`;


val _ = Define `
((sp:(5)words$word)=  ((vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))`;


(*val rX : integer -> M (mword ty64)*)

val _ = Define `
 ((rX:int ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r=
    (let p0_ = r in
   if (((p0_ = (( 0 : int):ii)))) then
     sail2_state_monad$returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                          B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                          B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
              :  64 words$word)
   else if (((p0_ = (( 1 : int):ii)))) then (sail2_state_monad$read_regS x1_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 2 : int):ii)))) then (sail2_state_monad$read_regS x2_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 3 : int):ii)))) then (sail2_state_monad$read_regS x3_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 4 : int):ii)))) then (sail2_state_monad$read_regS x4_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 5 : int):ii)))) then (sail2_state_monad$read_regS x5_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 6 : int):ii)))) then (sail2_state_monad$read_regS x6_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 7 : int):ii)))) then (sail2_state_monad$read_regS x7_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 8 : int):ii)))) then (sail2_state_monad$read_regS x8_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 9 : int):ii)))) then (sail2_state_monad$read_regS x9_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 10 : int):ii)))) then (sail2_state_monad$read_regS x10_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 11 : int):ii)))) then (sail2_state_monad$read_regS x11_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 12 : int):ii)))) then (sail2_state_monad$read_regS x12_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 13 : int):ii)))) then (sail2_state_monad$read_regS x13_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 14 : int):ii)))) then (sail2_state_monad$read_regS x14_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 15 : int):ii)))) then (sail2_state_monad$read_regS x15_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 16 : int):ii)))) then (sail2_state_monad$read_regS x16_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 17 : int):ii)))) then (sail2_state_monad$read_regS x17_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 18 : int):ii)))) then (sail2_state_monad$read_regS x18_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 19 : int):ii)))) then (sail2_state_monad$read_regS x19_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 20 : int):ii)))) then (sail2_state_monad$read_regS x20_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 21 : int):ii)))) then (sail2_state_monad$read_regS x21_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 22 : int):ii)))) then (sail2_state_monad$read_regS x22_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 23 : int):ii)))) then (sail2_state_monad$read_regS x23_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 24 : int):ii)))) then (sail2_state_monad$read_regS x24_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 25 : int):ii)))) then (sail2_state_monad$read_regS x25_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 26 : int):ii)))) then (sail2_state_monad$read_regS x26_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 27 : int):ii)))) then (sail2_state_monad$read_regS x27_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 28 : int):ii)))) then (sail2_state_monad$read_regS x28_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 29 : int):ii)))) then (sail2_state_monad$read_regS x29_ref  : ( 64 words$word) M)
   else if (((p0_ = (( 30 : int):ii)))) then (sail2_state_monad$read_regS x30_ref  : ( 64 words$word) M)
   else (sail2_state_monad$read_regS x31_ref  : ( 64 words$word) M)))`;


(*val wX : integer -> mword ty64 -> M unit*)

val _ = Define `
 ((wX:int ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r v=
    (let p0_ = r in sail2_state_monad$seqS
   (if (((p0_ = (( 0 : int):ii)))) then sail2_state_monad$returnS () 
    else if (((p0_ = (( 1 : int):ii)))) then sail2_state_monad$write_regS x1_ref v
    else if (((p0_ = (( 2 : int):ii)))) then sail2_state_monad$write_regS x2_ref v
    else if (((p0_ = (( 3 : int):ii)))) then sail2_state_monad$write_regS x3_ref v
    else if (((p0_ = (( 4 : int):ii)))) then sail2_state_monad$write_regS x4_ref v
    else if (((p0_ = (( 5 : int):ii)))) then sail2_state_monad$write_regS x5_ref v
    else if (((p0_ = (( 6 : int):ii)))) then sail2_state_monad$write_regS x6_ref v
    else if (((p0_ = (( 7 : int):ii)))) then sail2_state_monad$write_regS x7_ref v
    else if (((p0_ = (( 8 : int):ii)))) then sail2_state_monad$write_regS x8_ref v
    else if (((p0_ = (( 9 : int):ii)))) then sail2_state_monad$write_regS x9_ref v
    else if (((p0_ = (( 10 : int):ii)))) then sail2_state_monad$write_regS x10_ref v
    else if (((p0_ = (( 11 : int):ii)))) then sail2_state_monad$write_regS x11_ref v
    else if (((p0_ = (( 12 : int):ii)))) then sail2_state_monad$write_regS x12_ref v
    else if (((p0_ = (( 13 : int):ii)))) then sail2_state_monad$write_regS x13_ref v
    else if (((p0_ = (( 14 : int):ii)))) then sail2_state_monad$write_regS x14_ref v
    else if (((p0_ = (( 15 : int):ii)))) then sail2_state_monad$write_regS x15_ref v
    else if (((p0_ = (( 16 : int):ii)))) then sail2_state_monad$write_regS x16_ref v
    else if (((p0_ = (( 17 : int):ii)))) then sail2_state_monad$write_regS x17_ref v
    else if (((p0_ = (( 18 : int):ii)))) then sail2_state_monad$write_regS x18_ref v
    else if (((p0_ = (( 19 : int):ii)))) then sail2_state_monad$write_regS x19_ref v
    else if (((p0_ = (( 20 : int):ii)))) then sail2_state_monad$write_regS x20_ref v
    else if (((p0_ = (( 21 : int):ii)))) then sail2_state_monad$write_regS x21_ref v
    else if (((p0_ = (( 22 : int):ii)))) then sail2_state_monad$write_regS x22_ref v
    else if (((p0_ = (( 23 : int):ii)))) then sail2_state_monad$write_regS x23_ref v
    else if (((p0_ = (( 24 : int):ii)))) then sail2_state_monad$write_regS x24_ref v
    else if (((p0_ = (( 25 : int):ii)))) then sail2_state_monad$write_regS x25_ref v
    else if (((p0_ = (( 26 : int):ii)))) then sail2_state_monad$write_regS x26_ref v
    else if (((p0_ = (( 27 : int):ii)))) then sail2_state_monad$write_regS x27_ref v
    else if (((p0_ = (( 28 : int):ii)))) then sail2_state_monad$write_regS x28_ref v
    else if (((p0_ = (( 29 : int):ii)))) then sail2_state_monad$write_regS x29_ref v
    else if (((p0_ = (( 30 : int):ii)))) then sail2_state_monad$write_regS x30_ref v
    else sail2_state_monad$write_regS x31_ref v)
   (sail2_state_monad$returnS (if (((r <> (( 0 : int):ii)))) then
             print_endline
               ((STRCAT "x"
                   ((STRCAT ((stringFromInteger r))
                       ((STRCAT " <- " ((string_of_bits v))))))))
           else () ))))`;


(*val reg_name_abi : mword ty5 -> string*)

val _ = Define `
 ((reg_name_abi:(5)words$word -> string) r=
    (let b__0 = r in
   if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))))) then
     "zero"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))))) then
     "ra"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))))) then
     "sp"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))))) then
     "gp"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))))) then
     "tp"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word)))))) then
     "t0"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word)))))) then
     "t1"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word)))))) then
     "t2"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))))) then
     "fp"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word)))))) then
     "s1"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word)))))) then
     "a0"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word)))))) then
     "a1"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))))) then
     "a2"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word)))))) then
     "a3"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word)))))) then
     "a4"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)))))) then
     "a5"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))))) then
     "a6"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word)))))) then
     "a7"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word)))))) then
     "s2"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word)))))) then
     "s3"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))))) then
     "s4"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B1]  :  5 words$word)))))) then
     "s5"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B0]  :  5 words$word)))))) then
     "s6"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B1]  :  5 words$word)))))) then
     "s7"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)))))) then
     "s8"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B1]  :  5 words$word)))))) then
     "s9"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word)))))) then
     "s10"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)))))) then
     "s11"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))))) then
     "t3"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))))) then
     "t4"
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))))) then
     "t5"
   else "t6"))`;


(*val Architecture_of_num : integer -> Architecture*)

val _ = Define `
 ((Architecture_of_num:int -> Architecture) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RV32
   else if (((p0_ = (( 1 : int):ii)))) then RV64
   else RV128))`;


(*val num_of_Architecture : Architecture -> integer*)

val _ = Define `
 ((num_of_Architecture:Architecture -> int) arg_=
    ((case arg_ of   RV32 => (( 0 : int):ii) | RV64 => (( 1 : int):ii) | RV128 => (( 2 : int):ii) )))`;


(*val architecture : mword ty2 -> maybe Architecture*)

val _ = Define `
 ((architecture:(2)words$word ->(Architecture)option) a=
    (let b__0 = a in
   if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then SOME RV32
   else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then SOME RV64
   else if (((b__0 = (vec_of_bits [B1;B1]  :  2 words$word)))) then SOME RV128
   else NONE))`;


(*val arch_to_bits : Architecture -> mword ty2*)

val _ = Define `
 ((arch_to_bits:Architecture ->(2)words$word) a=
    ((case a of
     RV32 => (vec_of_bits [B0;B1]  :  2 words$word)
   | RV64 => (vec_of_bits [B1;B0]  :  2 words$word)
   | RV128 => (vec_of_bits [B1;B1]  :  2 words$word)
   )))`;


(*val Privilege_of_num : integer -> Privilege*)

val _ = Define `
 ((Privilege_of_num:int -> Privilege) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then User
   else if (((p0_ = (( 1 : int):ii)))) then Supervisor
   else Machine))`;


(*val num_of_Privilege : Privilege -> integer*)

val _ = Define `
 ((num_of_Privilege:Privilege -> int) arg_=
    ((case arg_ of   User => (( 0 : int):ii) | Supervisor => (( 1 : int):ii) | Machine => (( 2 : int):ii) )))`;


(*val privLevel_to_bits : Privilege -> mword ty2*)

val _ = Define `
 ((privLevel_to_bits:Privilege ->(2)words$word) p=
    ((case p of
     User => (vec_of_bits [B0;B0]  :  2 words$word)
   | Supervisor => (vec_of_bits [B0;B1]  :  2 words$word)
   | Machine => (vec_of_bits [B1;B1]  :  2 words$word)
   )))`;


(*val privLevel_of_bits : mword ty2 -> Privilege*)

val _ = Define `
 ((privLevel_of_bits:(2)words$word -> Privilege) p=
    (let b__0 = p in
   if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then User
   else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then Supervisor
   else Machine))`;


(*val privLevel_to_str : Privilege -> string*)

val _ = Define `
 ((privLevel_to_str:Privilege -> string) p=  ((case p of   User => "U" | Supervisor => "S" | Machine => "M" )))`;


(*val AccessType_of_num : integer -> AccessType*)

val _ = Define `
 ((AccessType_of_num:int -> AccessType) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Read
   else if (((p0_ = (( 1 : int):ii)))) then Write
   else if (((p0_ = (( 2 : int):ii)))) then ReadWrite
   else Execute))`;


(*val num_of_AccessType : AccessType -> integer*)

val _ = Define `
 ((num_of_AccessType:AccessType -> int) arg_=
    ((case arg_ of   Read => (( 0 : int):ii) | Write => (( 1 : int):ii) | ReadWrite => (( 2 : int):ii) | Execute => (( 3 : int):ii) )))`;


(*val accessType_to_str : AccessType -> string*)

val _ = Define `
 ((accessType_to_str:AccessType -> string) a=
    ((case a of   Read => "R" | Write => "W" | ReadWrite => "RW" | Execute => "X" )))`;


(*val ReadType_of_num : integer -> ReadType*)

val _ = Define `
 ((ReadType_of_num:int -> ReadType) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Instruction
   else Data))`;


(*val num_of_ReadType : ReadType -> integer*)

val _ = Define `
 ((num_of_ReadType:ReadType -> int) arg_=  ((case arg_ of   Instruction => (( 0 : int):ii) | Data => (( 1 : int):ii) )))`;


(*val readType_to_str : ReadType -> string*)

val _ = Define `
 ((readType_to_str:ReadType -> string) r=  ((case r of   Instruction => "I" | Data => "D" )))`;


(*val ExceptionType_of_num : integer -> ExceptionType*)

val _ = Define `
 ((ExceptionType_of_num:int -> ExceptionType) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then E_Fetch_Addr_Align
   else if (((p0_ = (( 1 : int):ii)))) then E_Fetch_Access_Fault
   else if (((p0_ = (( 2 : int):ii)))) then E_Illegal_Instr
   else if (((p0_ = (( 3 : int):ii)))) then E_Breakpoint
   else if (((p0_ = (( 4 : int):ii)))) then E_Load_Addr_Align
   else if (((p0_ = (( 5 : int):ii)))) then E_Load_Access_Fault
   else if (((p0_ = (( 6 : int):ii)))) then E_SAMO_Addr_Align
   else if (((p0_ = (( 7 : int):ii)))) then E_SAMO_Access_Fault
   else if (((p0_ = (( 8 : int):ii)))) then E_U_EnvCall
   else if (((p0_ = (( 9 : int):ii)))) then E_S_EnvCall
   else if (((p0_ = (( 10 : int):ii)))) then E_Reserved_10
   else if (((p0_ = (( 11 : int):ii)))) then E_M_EnvCall
   else if (((p0_ = (( 12 : int):ii)))) then E_Fetch_Page_Fault
   else if (((p0_ = (( 13 : int):ii)))) then E_Load_Page_Fault
   else if (((p0_ = (( 14 : int):ii)))) then E_Reserved_14
   else E_SAMO_Page_Fault))`;


(*val num_of_ExceptionType : ExceptionType -> integer*)

val _ = Define `
 ((num_of_ExceptionType:ExceptionType -> int) arg_=
    ((case arg_ of
     E_Fetch_Addr_Align => (( 0 : int):ii)
   | E_Fetch_Access_Fault => (( 1 : int):ii)
   | E_Illegal_Instr => (( 2 : int):ii)
   | E_Breakpoint => (( 3 : int):ii)
   | E_Load_Addr_Align => (( 4 : int):ii)
   | E_Load_Access_Fault => (( 5 : int):ii)
   | E_SAMO_Addr_Align => (( 6 : int):ii)
   | E_SAMO_Access_Fault => (( 7 : int):ii)
   | E_U_EnvCall => (( 8 : int):ii)
   | E_S_EnvCall => (( 9 : int):ii)
   | E_Reserved_10 => (( 10 : int):ii)
   | E_M_EnvCall => (( 11 : int):ii)
   | E_Fetch_Page_Fault => (( 12 : int):ii)
   | E_Load_Page_Fault => (( 13 : int):ii)
   | E_Reserved_14 => (( 14 : int):ii)
   | E_SAMO_Page_Fault => (( 15 : int):ii)
   )))`;


(*val exceptionType_to_bits : ExceptionType -> mword ty4*)

val _ = Define `
 ((exceptionType_to_bits:ExceptionType ->(4)words$word) e=
    ((case e of
     E_Fetch_Addr_Align => (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
   | E_Fetch_Access_Fault => (vec_of_bits [B0;B0;B0;B1]  :  4 words$word)
   | E_Illegal_Instr => (vec_of_bits [B0;B0;B1;B0]  :  4 words$word)
   | E_Breakpoint => (vec_of_bits [B0;B0;B1;B1]  :  4 words$word)
   | E_Load_Addr_Align => (vec_of_bits [B0;B1;B0;B0]  :  4 words$word)
   | E_Load_Access_Fault => (vec_of_bits [B0;B1;B0;B1]  :  4 words$word)
   | E_SAMO_Addr_Align => (vec_of_bits [B0;B1;B1;B0]  :  4 words$word)
   | E_SAMO_Access_Fault => (vec_of_bits [B0;B1;B1;B1]  :  4 words$word)
   | E_U_EnvCall => (vec_of_bits [B1;B0;B0;B0]  :  4 words$word)
   | E_S_EnvCall => (vec_of_bits [B1;B0;B0;B1]  :  4 words$word)
   | E_Reserved_10 => (vec_of_bits [B1;B0;B1;B0]  :  4 words$word)
   | E_M_EnvCall => (vec_of_bits [B1;B0;B1;B1]  :  4 words$word)
   | E_Fetch_Page_Fault => (vec_of_bits [B1;B1;B0;B0]  :  4 words$word)
   | E_Load_Page_Fault => (vec_of_bits [B1;B1;B0;B1]  :  4 words$word)
   | E_Reserved_14 => (vec_of_bits [B1;B1;B1;B0]  :  4 words$word)
   | E_SAMO_Page_Fault => (vec_of_bits [B1;B1;B1;B1]  :  4 words$word)
   )))`;


(*val exceptionType_to_str : ExceptionType -> string*)

val _ = Define `
 ((exceptionType_to_str:ExceptionType -> string) e=
    ((case e of
     E_Fetch_Addr_Align => "misaligned-fetch"
   | E_Fetch_Access_Fault => "fetch-access-fault"
   | E_Illegal_Instr => "illegal-instruction"
   | E_Breakpoint => "breakpoint"
   | E_Load_Addr_Align => "misaligned-load"
   | E_Load_Access_Fault => "load-access-fault"
   | E_SAMO_Addr_Align => "misaliged-store/amo"
   | E_SAMO_Access_Fault => "store/amo-access-fault"
   | E_U_EnvCall => "u-call"
   | E_S_EnvCall => "s-call"
   | E_Reserved_10 => "reserved-0"
   | E_M_EnvCall => "m-call"
   | E_Fetch_Page_Fault => "fetch-page-fault"
   | E_Load_Page_Fault => "load-page-fault"
   | E_Reserved_14 => "reserved-1"
   | E_SAMO_Page_Fault => "store/amo-page-fault"
   )))`;


(*val InterruptType_of_num : integer -> InterruptType*)

val _ = Define `
 ((InterruptType_of_num:int -> InterruptType) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then I_U_Software
   else if (((p0_ = (( 1 : int):ii)))) then I_S_Software
   else if (((p0_ = (( 2 : int):ii)))) then I_M_Software
   else if (((p0_ = (( 3 : int):ii)))) then I_U_Timer
   else if (((p0_ = (( 4 : int):ii)))) then I_S_Timer
   else if (((p0_ = (( 5 : int):ii)))) then I_M_Timer
   else if (((p0_ = (( 6 : int):ii)))) then I_U_External
   else if (((p0_ = (( 7 : int):ii)))) then I_S_External
   else I_M_External))`;


(*val num_of_InterruptType : InterruptType -> integer*)

val _ = Define `
 ((num_of_InterruptType:InterruptType -> int) arg_=
    ((case arg_ of
     I_U_Software => (( 0 : int):ii)
   | I_S_Software => (( 1 : int):ii)
   | I_M_Software => (( 2 : int):ii)
   | I_U_Timer => (( 3 : int):ii)
   | I_S_Timer => (( 4 : int):ii)
   | I_M_Timer => (( 5 : int):ii)
   | I_U_External => (( 6 : int):ii)
   | I_S_External => (( 7 : int):ii)
   | I_M_External => (( 8 : int):ii)
   )))`;


(*val interruptType_to_bits : InterruptType -> mword ty4*)

val _ = Define `
 ((interruptType_to_bits:InterruptType ->(4)words$word) i=
    ((case i of
     I_U_Software => (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
   | I_S_Software => (vec_of_bits [B0;B0;B0;B1]  :  4 words$word)
   | I_M_Software => (vec_of_bits [B0;B0;B1;B1]  :  4 words$word)
   | I_U_Timer => (vec_of_bits [B0;B1;B0;B0]  :  4 words$word)
   | I_S_Timer => (vec_of_bits [B0;B1;B0;B1]  :  4 words$word)
   | I_M_Timer => (vec_of_bits [B0;B1;B1;B1]  :  4 words$word)
   | I_U_External => (vec_of_bits [B1;B0;B0;B0]  :  4 words$word)
   | I_S_External => (vec_of_bits [B1;B0;B0;B1]  :  4 words$word)
   | I_M_External => (vec_of_bits [B1;B0;B1;B1]  :  4 words$word)
   )))`;


(*val TrapVectorMode_of_num : integer -> TrapVectorMode*)

val _ = Define `
 ((TrapVectorMode_of_num:int -> TrapVectorMode) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then TV_Direct
   else if (((p0_ = (( 1 : int):ii)))) then TV_Vector
   else TV_Reserved))`;


(*val num_of_TrapVectorMode : TrapVectorMode -> integer*)

val _ = Define `
 ((num_of_TrapVectorMode:TrapVectorMode -> int) arg_=
    ((case arg_ of   TV_Direct => (( 0 : int):ii) | TV_Vector => (( 1 : int):ii) | TV_Reserved => (( 2 : int):ii) )))`;


(*val trapVectorMode_of_bits : mword ty2 -> TrapVectorMode*)

val _ = Define `
 ((trapVectorMode_of_bits:(2)words$word -> TrapVectorMode) m=
    (let b__0 = m in
   if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then TV_Direct
   else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then TV_Vector
   else TV_Reserved))`;


(*val not_implemented : forall 'a. string -> M 'a*)

val _ = Define `
 ((not_implemented:string ->(regstate)sail2_state_monad$sequential_state ->(('a,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) message=  (sail2_state_monad$throwS (Error_not_implemented message)))`;


(*val internal_error : forall 'a. string -> M 'a*)

val _ = Define `
 ((internal_error:string ->(regstate)sail2_state_monad$sequential_state ->(('a,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=  (sail2_state_monad$seqS (sail2_state_monad$assert_expS F s) (sail2_state_monad$throwS (Error_internal_error () ))))`;


(*val ExtStatus_of_num : integer -> ExtStatus*)

val _ = Define `
 ((ExtStatus_of_num:int -> ExtStatus) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Off
   else if (((p0_ = (( 1 : int):ii)))) then Initial
   else if (((p0_ = (( 2 : int):ii)))) then Clean
   else Dirty))`;


(*val num_of_ExtStatus : ExtStatus -> integer*)

val _ = Define `
 ((num_of_ExtStatus:ExtStatus -> int) arg_=
    ((case arg_ of   Off => (( 0 : int):ii) | Initial => (( 1 : int):ii) | Clean => (( 2 : int):ii) | Dirty => (( 3 : int):ii) )))`;


(*val extStatus_to_bits : ExtStatus -> mword ty2*)

val _ = Define `
 ((extStatus_to_bits:ExtStatus ->(2)words$word) e=
    ((case e of
     Off => (vec_of_bits [B0;B0]  :  2 words$word)
   | Initial => (vec_of_bits [B0;B1]  :  2 words$word)
   | Clean => (vec_of_bits [B1;B0]  :  2 words$word)
   | Dirty => (vec_of_bits [B1;B1]  :  2 words$word)
   )))`;


(*val extStatus_of_bits : mword ty2 -> ExtStatus*)

val _ = Define `
 ((extStatus_of_bits:(2)words$word -> ExtStatus) e=
    (let b__0 = e in
   if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then Off
   else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then Initial
   else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then Clean
   else Dirty))`;


(*val SATPMode_of_num : integer -> SATPMode*)

val _ = Define `
 ((SATPMode_of_num:int -> SATPMode) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Sbare
   else if (((p0_ = (( 1 : int):ii)))) then Sv32
   else Sv39))`;


(*val num_of_SATPMode : SATPMode -> integer*)

val _ = Define `
 ((num_of_SATPMode:SATPMode -> int) arg_=  ((case arg_ of   Sbare => (( 0 : int):ii) | Sv32 => (( 1 : int):ii) | Sv39 => (( 2 : int):ii) )))`;


(*val satpMode_of_bits : Architecture -> mword ty4 -> maybe SATPMode*)

val _ = Define `
 ((satpMode_of_bits:Architecture ->(4)words$word ->(SATPMode)option) (a : Architecture) (m : satp_mode)= 
  ((case (a, m) of
         (g__33, b__0) =>
   if (((b__0 = (vec_of_bits [B0;B0;B0;B0] : 4 words$word)))) then SOME Sbare
   else
     (case (g__33, b__0) of
           (RV32, b__1) =>
     if (((b__1 = (vec_of_bits [B0;B0;B0;B1] : 4 words$word)))) then
       SOME Sv32 else (case (RV32, b__1) of   (g__34, g__35) => NONE )
       | (RV64, b__2) =>
     if (((b__2 = (vec_of_bits [B1;B0;B0;B0] : 4 words$word)))) then
       SOME Sv39 else (case (RV64, b__2) of   (g__34, g__35) => NONE )
       | (g__34, g__35) => NONE
     )
   )))`;


(*val uop_of_num : integer -> uop*)

val _ = Define `
 ((uop_of_num:int -> uop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RISCV_LUI
   else RISCV_AUIPC))`;


(*val num_of_uop : uop -> integer*)

val _ = Define `
 ((num_of_uop:uop -> int) arg_=  ((case arg_ of   RISCV_LUI => (( 0 : int):ii) | RISCV_AUIPC => (( 1 : int):ii) )))`;


(*val bop_of_num : integer -> bop*)

val _ = Define `
 ((bop_of_num:int -> bop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RISCV_BEQ
   else if (((p0_ = (( 1 : int):ii)))) then RISCV_BNE
   else if (((p0_ = (( 2 : int):ii)))) then RISCV_BLT
   else if (((p0_ = (( 3 : int):ii)))) then RISCV_BGE
   else if (((p0_ = (( 4 : int):ii)))) then RISCV_BLTU
   else RISCV_BGEU))`;


(*val num_of_bop : bop -> integer*)

val _ = Define `
 ((num_of_bop:bop -> int) arg_=
    ((case arg_ of
     RISCV_BEQ => (( 0 : int):ii)
   | RISCV_BNE => (( 1 : int):ii)
   | RISCV_BLT => (( 2 : int):ii)
   | RISCV_BGE => (( 3 : int):ii)
   | RISCV_BLTU => (( 4 : int):ii)
   | RISCV_BGEU => (( 5 : int):ii)
   )))`;


(*val iop_of_num : integer -> iop*)

val _ = Define `
 ((iop_of_num:int -> iop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RISCV_ADDI
   else if (((p0_ = (( 1 : int):ii)))) then RISCV_SLTI
   else if (((p0_ = (( 2 : int):ii)))) then RISCV_SLTIU
   else if (((p0_ = (( 3 : int):ii)))) then RISCV_XORI
   else if (((p0_ = (( 4 : int):ii)))) then RISCV_ORI
   else RISCV_ANDI))`;


(*val num_of_iop : iop -> integer*)

val _ = Define `
 ((num_of_iop:iop -> int) arg_=
    ((case arg_ of
     RISCV_ADDI => (( 0 : int):ii)
   | RISCV_SLTI => (( 1 : int):ii)
   | RISCV_SLTIU => (( 2 : int):ii)
   | RISCV_XORI => (( 3 : int):ii)
   | RISCV_ORI => (( 4 : int):ii)
   | RISCV_ANDI => (( 5 : int):ii)
   )))`;


(*val sop_of_num : integer -> sop*)

val _ = Define `
 ((sop_of_num:int -> sop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RISCV_SLLI
   else if (((p0_ = (( 1 : int):ii)))) then RISCV_SRLI
   else RISCV_SRAI))`;


(*val num_of_sop : sop -> integer*)

val _ = Define `
 ((num_of_sop:sop -> int) arg_=
    ((case arg_ of   RISCV_SLLI => (( 0 : int):ii) | RISCV_SRLI => (( 1 : int):ii) | RISCV_SRAI => (( 2 : int):ii) )))`;


(*val rop_of_num : integer -> rop*)

val _ = Define `
 ((rop_of_num:int -> rop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RISCV_ADD
   else if (((p0_ = (( 1 : int):ii)))) then RISCV_SUB
   else if (((p0_ = (( 2 : int):ii)))) then RISCV_SLL
   else if (((p0_ = (( 3 : int):ii)))) then RISCV_SLT
   else if (((p0_ = (( 4 : int):ii)))) then RISCV_SLTU
   else if (((p0_ = (( 5 : int):ii)))) then RISCV_XOR
   else if (((p0_ = (( 6 : int):ii)))) then RISCV_SRL
   else if (((p0_ = (( 7 : int):ii)))) then RISCV_SRA
   else if (((p0_ = (( 8 : int):ii)))) then RISCV_OR
   else RISCV_AND))`;


(*val num_of_rop : rop -> integer*)

val _ = Define `
 ((num_of_rop:rop -> int) arg_=
    ((case arg_ of
     RISCV_ADD => (( 0 : int):ii)
   | RISCV_SUB => (( 1 : int):ii)
   | RISCV_SLL => (( 2 : int):ii)
   | RISCV_SLT => (( 3 : int):ii)
   | RISCV_SLTU => (( 4 : int):ii)
   | RISCV_XOR => (( 5 : int):ii)
   | RISCV_SRL => (( 6 : int):ii)
   | RISCV_SRA => (( 7 : int):ii)
   | RISCV_OR => (( 8 : int):ii)
   | RISCV_AND => (( 9 : int):ii)
   )))`;


(*val ropw_of_num : integer -> ropw*)

val _ = Define `
 ((ropw_of_num:int -> ropw) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then RISCV_ADDW
   else if (((p0_ = (( 1 : int):ii)))) then RISCV_SUBW
   else if (((p0_ = (( 2 : int):ii)))) then RISCV_SLLW
   else if (((p0_ = (( 3 : int):ii)))) then RISCV_SRLW
   else RISCV_SRAW))`;


(*val num_of_ropw : ropw -> integer*)

val _ = Define `
 ((num_of_ropw:ropw -> int) arg_=
    ((case arg_ of
     RISCV_ADDW => (( 0 : int):ii)
   | RISCV_SUBW => (( 1 : int):ii)
   | RISCV_SLLW => (( 2 : int):ii)
   | RISCV_SRLW => (( 3 : int):ii)
   | RISCV_SRAW => (( 4 : int):ii)
   )))`;


(*val amoop_of_num : integer -> amoop*)

val _ = Define `
 ((amoop_of_num:int -> amoop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then AMOSWAP
   else if (((p0_ = (( 1 : int):ii)))) then AMOADD
   else if (((p0_ = (( 2 : int):ii)))) then AMOXOR
   else if (((p0_ = (( 3 : int):ii)))) then AMOAND
   else if (((p0_ = (( 4 : int):ii)))) then AMOOR
   else if (((p0_ = (( 5 : int):ii)))) then AMOMIN
   else if (((p0_ = (( 6 : int):ii)))) then AMOMAX
   else if (((p0_ = (( 7 : int):ii)))) then AMOMINU
   else AMOMAXU))`;


(*val num_of_amoop : amoop -> integer*)

val _ = Define `
 ((num_of_amoop:amoop -> int) arg_=
    ((case arg_ of
     AMOSWAP => (( 0 : int):ii)
   | AMOADD => (( 1 : int):ii)
   | AMOXOR => (( 2 : int):ii)
   | AMOAND => (( 3 : int):ii)
   | AMOOR => (( 4 : int):ii)
   | AMOMIN => (( 5 : int):ii)
   | AMOMAX => (( 6 : int):ii)
   | AMOMINU => (( 7 : int):ii)
   | AMOMAXU => (( 8 : int):ii)
   )))`;


(*val csrop_of_num : integer -> csrop*)

val _ = Define `
 ((csrop_of_num:int -> csrop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then CSRRW
   else if (((p0_ = (( 1 : int):ii)))) then CSRRS
   else CSRRC))`;


(*val num_of_csrop : csrop -> integer*)

val _ = Define `
 ((num_of_csrop:csrop -> int) arg_=  ((case arg_ of   CSRRW => (( 0 : int):ii) | CSRRS => (( 1 : int):ii) | CSRRC => (( 2 : int):ii) )))`;


(*val word_width_of_num : integer -> word_width*)

val _ = Define `
 ((word_width_of_num:int -> word_width) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then BYTE
   else if (((p0_ = (( 1 : int):ii)))) then HALF
   else if (((p0_ = (( 2 : int):ii)))) then WORD
   else DOUBLE))`;


(*val num_of_word_width : word_width -> integer*)

val _ = Define `
 ((num_of_word_width:word_width -> int) arg_=
    ((case arg_ of   BYTE => (( 0 : int):ii) | HALF => (( 1 : int):ii) | WORD => (( 2 : int):ii) | DOUBLE => (( 3 : int):ii) )))`;


(*val reg_name_forwards : mword ty5 -> string*)

val _ = Define `
 ((reg_name_forwards:(5)words$word -> string) arg_=
    (let p0_ = arg_ in
   if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))
   then
     "zero"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))))) then
     "ra"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))))) then
     "sp"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))))) then
     "gp"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))))) then
     "tp"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word)))))) then
     "t0"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word)))))) then
     "t1"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word)))))) then
     "t2"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))))) then
     "fp"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word)))))) then
     "s1"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word)))))) then
     "a0"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word)))))) then
     "a1"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))))) then
     "a2"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word)))))) then
     "a3"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word)))))) then
     "a4"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)))))) then
     "a5"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))))) then
     "a6"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word)))))) then
     "a7"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word)))))) then
     "s2"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word)))))) then
     "s3"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))))) then
     "s4"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B1]  :  5 words$word)))))) then
     "s5"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B0]  :  5 words$word)))))) then
     "s6"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B1]  :  5 words$word)))))) then
     "s7"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)))))) then
     "s8"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B1]  :  5 words$word)))))) then
     "s9"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word)))))) then
     "s10"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)))))) then
     "s11"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))))) then
     "t3"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))))) then
     "t4"
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))))) then
     "t5"
   else "t6"))`;


(*val reg_name_backwards : string -> mword ty5*)

val _ = Define `
 ((reg_name_backwards:string ->(5)words$word) arg_=
    ((case arg_ of
     "zero" => (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
   | "ra" => (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)
   | "sp" => (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)
   | "gp" => (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)
   | "tp" => (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)
   | "t0" => (vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word)
   | "t1" => (vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word)
   | "t2" => (vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word)
   | "fp" => (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)
   | "s1" => (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word)
   | "a0" => (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word)
   | "a1" => (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word)
   | "a2" => (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)
   | "a3" => (vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word)
   | "a4" => (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word)
   | "a5" => (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)
   | "a6" => (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)
   | "a7" => (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word)
   | "s2" => (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word)
   | "s3" => (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word)
   | "s4" => (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)
   | "s5" => (vec_of_bits [B1;B0;B1;B0;B1]  :  5 words$word)
   | "s6" => (vec_of_bits [B1;B0;B1;B1;B0]  :  5 words$word)
   | "s7" => (vec_of_bits [B1;B0;B1;B1;B1]  :  5 words$word)
   | "s8" => (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)
   | "s9" => (vec_of_bits [B1;B1;B0;B0;B1]  :  5 words$word)
   | "s10" => (vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word)
   | "s11" => (vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)
   | "t3" => (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)
   | "t4" => (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)
   | "t5" => (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)
   | "t6" => (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word)
   )))`;


(*val reg_name_forwards_matches : mword ty5 -> bool*)

val _ = Define `
 ((reg_name_forwards_matches:(5)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))
   then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word)))))) then
     T
   else F))`;


(*val reg_name_backwards_matches : string -> bool*)

val _ = Define `
 ((reg_name_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "zero" => T
   | "ra" => T
   | "sp" => T
   | "gp" => T
   | "tp" => T
   | "t0" => T
   | "t1" => T
   | "t2" => T
   | "fp" => T
   | "s1" => T
   | "a0" => T
   | "a1" => T
   | "a2" => T
   | "a3" => T
   | "a4" => T
   | "a5" => T
   | "a6" => T
   | "a7" => T
   | "s2" => T
   | "s3" => T
   | "s4" => T
   | "s5" => T
   | "s6" => T
   | "s7" => T
   | "s8" => T
   | "s9" => T
   | "s10" => T
   | "s11" => T
   | "t3" => T
   | "t4" => T
   | "t5" => T
   | "t6" => T
   | _ => F
   )))`;


(*val reg_name_matches_prefix : string -> maybe ((mword ty5 * ii))*)

val _ = Define `
 ((reg_name_matches_prefix:string ->((5)words$word#int)option) arg_=
    (let stringappend_1814_0 = arg_ in
   if (((((string_startswith stringappend_1814_0 "zero")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "zero")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "zero")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "ra")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "ra")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "ra")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "sp")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "sp")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "sp")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "gp")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "gp")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "gp")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "tp")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "tp")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "tp")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t0")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t0")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t0")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t1")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t1")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t1")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t2")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t2")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t2")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "fp")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "fp")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "fp")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s1")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s1")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s1")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a0")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a0")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a0")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a1")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a1")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a1")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a2")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a2")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a2")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a3")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a3")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a3")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a4")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a4")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a4")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a5")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a5")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a5")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a6")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a6")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a6")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "a7")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "a7")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "a7")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s2")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s2")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s2")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s3")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s3")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s3")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s4")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s4")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s4")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s5")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s5")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s5")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s6")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s6")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s6")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s7")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s7")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s7")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s8")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s8")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s8")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s9")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s9")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s9")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s10")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s10")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s10")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "s11")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "s11")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "s11")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t3")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t3")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t3")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t4")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t4")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t4")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t5")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t5")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t5")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1814_0 "t6")) /\ (
  (case ((string_drop stringappend_1814_0 ((string_length "t6")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1814_0 ((string_length "t6")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val sep_forwards : unit -> string*)

val _ = Define `
 ((sep_forwards:unit -> string) arg_=
    ((case arg_ of
     ()  =>
      string_append ((opt_spc_forwards () ))
        ((string_append "," ((string_append ((def_spc_forwards () )) ""))))
   )))`;


(*val sep_backwards : string -> unit*)

val _ = Define `
 ((sep_backwards:string -> unit) arg_=
    (let stringappend_1807_0 = arg_ in  
  (case
  (case ((opt_spc_matches_prefix stringappend_1807_0)) of
        SOME (stringappend_1808_0,stringappend_1809_0) => (stringappend_1808_0, stringappend_1809_0)
  ) of
      (() , stringappend_1809_0) =>
  let stringappend_1810_0 = (string_drop stringappend_1807_0
                               stringappend_1809_0) in
  let stringappend_1811_0 = (string_drop stringappend_1810_0
                               ((string_length ","))) in
  (case
  (case ((opt_spc_matches_prefix stringappend_1811_0)) of
        SOME (stringappend_1812_0,stringappend_1813_0) => (stringappend_1812_0, stringappend_1813_0)
  ) of
      (() , stringappend_1813_0) =>
  (case ((string_drop stringappend_1811_0 stringappend_1813_0)) of
        "" => () 
  )
  )
  )))`;


(*val sep_forwards_matches : unit -> bool*)

val _ = Define `
 ((sep_forwards_matches:unit -> bool) arg_= 
  ((case arg_ of   ()  => T )))`;


(*val sep_backwards_matches : string -> bool*)

val _ = Define `
 ((sep_backwards_matches:string -> bool) arg_=
    (let stringappend_1800_0 = arg_ in
   if ((case ((opt_spc_matches_prefix stringappend_1800_0)) of
       SOME (stringappend_1801_0,stringappend_1802_0) =>
        let stringappend_1803_0 = (string_drop stringappend_1800_0 stringappend_1802_0) in
        if (((((string_startswith stringappend_1803_0 ",")) /\ (let stringappend_1804_0 = (string_drop stringappend_1803_0 ((string_length ","))) in
               if ((case ((opt_spc_matches_prefix stringappend_1804_0)) of
                   SOME (stringappend_1805_0,stringappend_1806_0) =>
                    (case ((string_drop stringappend_1804_0 stringappend_1806_0)) of
                      "" => T
                    | _ => F
                    )
                 | NONE => F
                 )) then
                 T
               else F)))) then
          T
        else F
     | NONE => F
     )) then  (case
 (case ((opt_spc_matches_prefix stringappend_1800_0)) of
       SOME (stringappend_1801_0,stringappend_1802_0) =>
 (stringappend_1801_0, stringappend_1802_0)
 ) of
     (() , stringappend_1802_0) =>
 let stringappend_1803_0 = (string_drop stringappend_1800_0
                              stringappend_1802_0) in
 let stringappend_1804_0 = (string_drop stringappend_1803_0
                              ((string_length ","))) in
 (case
 (case ((opt_spc_matches_prefix stringappend_1804_0)) of
       SOME (stringappend_1805_0,stringappend_1806_0) =>
 (stringappend_1805_0, stringappend_1806_0)
 ) of
     (() , stringappend_1806_0) =>
 (case ((string_drop stringappend_1804_0 stringappend_1806_0)) of   "" => T )
 )
 )
   else F))`;


(*val sep_matches_prefix : string -> maybe ((unit * ii))*)

val _ = Define `
 ((sep_matches_prefix:string ->(unit#int)option) arg_=
    (let stringappend_1793_0 = arg_ in
   if ((case ((opt_spc_matches_prefix stringappend_1793_0)) of
       SOME (stringappend_1794_0,stringappend_1795_0) =>
        let stringappend_1796_0 = (string_drop stringappend_1793_0 stringappend_1795_0) in
        if (((((string_startswith stringappend_1796_0 ",")) /\ (let stringappend_1797_0 = (string_drop stringappend_1796_0 ((string_length ","))) in
               if ((case ((opt_spc_matches_prefix stringappend_1797_0)) of
                   SOME (stringappend_1798_0,stringappend_1799_0) => 
  (case ((string_drop stringappend_1797_0 stringappend_1799_0)) of   s_ => T )
                 | NONE => F
                 )) then
                 T
               else F)))) then
          T
        else F
     | NONE => F
     )) then  (case
 (case ((opt_spc_matches_prefix stringappend_1793_0)) of
       SOME (stringappend_1794_0,stringappend_1795_0) =>
 (stringappend_1794_0, stringappend_1795_0)
 ) of
     (() , stringappend_1795_0) =>
 let stringappend_1796_0 = (string_drop stringappend_1793_0
                              stringappend_1795_0) in
 let stringappend_1797_0 = (string_drop stringappend_1796_0
                              ((string_length ","))) in
 (case
 (case ((opt_spc_matches_prefix stringappend_1797_0)) of
       SOME (stringappend_1798_0,stringappend_1799_0) =>
 (stringappend_1798_0, stringappend_1799_0)
 ) of
     (() , stringappend_1799_0) =>
 (case ((string_drop stringappend_1797_0 stringappend_1799_0)) of
       s_ => SOME (() , ((string_length arg_)) - ((string_length s_)))
 )
 )
 )
   else NONE))`;


(*val bool_bits_forwards : bool -> mword ty1*)

val _ = Define `
 ((bool_bits_forwards:bool ->(1)words$word) arg_=
    ((case arg_ of
     T => (vec_of_bits [B1]  :  1 words$word)
   | F => (vec_of_bits [B0]  :  1 words$word)
   )))`;


(*val bool_bits_backwards : mword ty1 -> bool*)

val _ = Define `
 ((bool_bits_backwards:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else F))`;


(*val bool_bits_forwards_matches : bool -> bool*)

val _ = Define `
 ((bool_bits_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


(*val bool_bits_backwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bool_bits_backwards_matches:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else F))`;


(*val bool_not_bits_forwards : bool -> mword ty1*)

val _ = Define `
 ((bool_not_bits_forwards:bool ->(1)words$word) arg_=
    ((case arg_ of
     T => (vec_of_bits [B0]  :  1 words$word)
   | F => (vec_of_bits [B1]  :  1 words$word)
   )))`;


(*val bool_not_bits_backwards : mword ty1 -> bool*)

val _ = Define `
 ((bool_not_bits_backwards:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else F))`;


(*val bool_not_bits_forwards_matches : bool -> bool*)

val _ = Define `
 ((bool_not_bits_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


(*val bool_not_bits_backwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bool_not_bits_backwards_matches:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else F))`;


(*val size_bits_forwards : word_width -> mword ty2*)

val _ = Define `
 ((size_bits_forwards:word_width ->(2)words$word) arg_=
    ((case arg_ of
     BYTE => (vec_of_bits [B0;B0]  :  2 words$word)
   | HALF => (vec_of_bits [B0;B1]  :  2 words$word)
   | WORD => (vec_of_bits [B1;B0]  :  2 words$word)
   | DOUBLE => (vec_of_bits [B1;B1]  :  2 words$word)
   )))`;


(*val size_bits_backwards : mword ty2 -> word_width*)

val _ = Define `
 ((size_bits_backwards:(2)words$word -> word_width) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0]  :  2 words$word)))) then BYTE
   else if (((p0_ = (vec_of_bits [B0;B1]  :  2 words$word)))) then HALF
   else if (((p0_ = (vec_of_bits [B1;B0]  :  2 words$word)))) then WORD
   else DOUBLE))`;


(*val size_bits_forwards_matches : word_width -> bool*)

val _ = Define `
 ((size_bits_forwards_matches:word_width -> bool) arg_= 
  ((case arg_ of   BYTE => T | HALF => T | WORD => T | DOUBLE => T )))`;


(*val size_bits_backwards_matches : mword ty2 -> bool*)

val _ = Define `
 ((size_bits_backwards_matches:(2)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0]  :  2 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B1]  :  2 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0]  :  2 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B1]  :  2 words$word)))) then T
   else F))`;


(*val size_mnemonic_forwards : word_width -> string*)

val _ = Define `
 ((size_mnemonic_forwards:word_width -> string) arg_=
    ((case arg_ of   BYTE => "b" | HALF => "h" | WORD => "w" | DOUBLE => "d" )))`;


(*val size_mnemonic_backwards : string -> word_width*)

val _ = Define `
 ((size_mnemonic_backwards:string -> word_width) arg_=
    ((case arg_ of   "b" => BYTE | "h" => HALF | "w" => WORD | "d" => DOUBLE )))`;


(*val size_mnemonic_forwards_matches : word_width -> bool*)

val _ = Define `
 ((size_mnemonic_forwards_matches:word_width -> bool) arg_= 
  ((case arg_ of   BYTE => T | HALF => T | WORD => T | DOUBLE => T )))`;


(*val size_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((size_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of   "b" => T | "h" => T | "w" => T | "d" => T | _ => F )))`;


(*val size_mnemonic_matches_prefix : string -> maybe ((word_width * ii))*)

val _ = Define `
 ((size_mnemonic_matches_prefix:string ->(word_width#int)option) arg_=
    (let stringappend_1789_0 = arg_ in
   if (((((string_startswith stringappend_1789_0 "b")) /\ (
  (case ((string_drop stringappend_1789_0 ((string_length "b")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1789_0 ((string_length "b")))) of
       s_ => SOME (BYTE, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1789_0 "h")) /\ (
  (case ((string_drop stringappend_1789_0 ((string_length "h")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1789_0 ((string_length "h")))) of
       s_ => SOME (HALF, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1789_0 "w")) /\ (
  (case ((string_drop stringappend_1789_0 ((string_length "w")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1789_0 ((string_length "w")))) of
       s_ => SOME (WORD, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1789_0 "d")) /\ (
  (case ((string_drop stringappend_1789_0 ((string_length "d")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1789_0 ((string_length "d")))) of
       s_ => SOME (DOUBLE, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val Mk_Misa : mword ty64 -> Misa*)

val _ = Define `
 ((Mk_Misa:(64)words$word -> Misa) v=  (<| Misa_Misa_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Misa_bits : Misa -> mword ty64*)

val _ = Define `
 ((get_Misa_bits:Misa ->(64)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Misa_bits : register_ref regstate register_value Misa -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Misa_bits:((regstate),(register_value),(Misa))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_bits : Misa -> mword ty64 -> Misa*)

val _ = Define `
 ((update_Misa_bits:Misa ->(64)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _update_SV39_PTE_bits : SV39_PTE -> mword ty64 -> SV39_PTE*)

(*val _get_SV39_PTE_bits : SV39_PTE -> mword ty64*)

(*val _set_SV39_PTE_bits : register_ref regstate register_value SV39_PTE -> mword ty64 -> M unit*)

(*val _get_Misa_MXL : Misa -> mword ty2*)

val _ = Define `
 ((get_Misa_MXL:Misa ->(2)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)))`;


(*val _set_Misa_MXL : register_ref regstate register_value Misa -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Misa_MXL:((regstate),(register_value),(Misa))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 63 : int):ii) (( 62 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_MXL : Misa -> mword ty2 -> Misa*)

val _ = Define `
 ((update_Misa_MXL:Misa ->(2)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 63 : int):ii) (( 62 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_Z : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_Z:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_Z : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_Z:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 25 : int):ii) (( 25 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_Z : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_Z:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 25 : int):ii) (( 25 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_Y : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_Y:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 24 : int):ii) (( 24 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_Y : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_Y:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 24 : int):ii) (( 24 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_Y : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_Y:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 24 : int):ii) (( 24 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_X : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_X:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 23 : int):ii) (( 23 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_X : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_X:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 23 : int):ii) (( 23 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_X : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_X:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 23 : int):ii) (( 23 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_X : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_X : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_X : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_W : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_W:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_W : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_W:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_W : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_W:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_W : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_W : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_W : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_V : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_V:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 21 : int):ii) (( 21 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_V : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_V:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_V : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_V:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_V : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_V : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_V : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_U : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_U:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_U : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_U:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_U : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_U:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_U : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_U : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_U : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_T : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_T:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 19 : int):ii) (( 19 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_T : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_T:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_T : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_T:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_S : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_S:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 18 : int):ii) (( 18 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_S : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_S:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_S : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_S:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_R : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_R:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 17 : int):ii) (( 17 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_R : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_R:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_R : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_R:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_R : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_R : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_R : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_Q : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_Q:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 16 : int):ii) (( 16 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_Q : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_Q:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 16 : int):ii) (( 16 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_Q : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_Q:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 16 : int):ii) (( 16 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_P : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_P:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 15 : int):ii) (( 15 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_P : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_P:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_P : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_P:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_O : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_O:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_O : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_O:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 14 : int):ii) (( 14 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_O : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_O:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 14 : int):ii) (( 14 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_N : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_N:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 13 : int):ii) (( 13 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_N : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_N:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_N : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_N:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_M : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_M:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_M : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_M:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_M : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_M:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_L : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_L:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_L : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_L:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_L : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_L:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_K : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_K:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_K : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_K:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_K : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_K:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_J : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_J:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_J : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_J:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_J : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_J:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_I : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_I:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_I : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_I:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_I : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_I:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_H : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_H:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_H : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_H:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_H : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_H:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_G : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_G:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_G : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_G:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_G : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_G:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_G : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_G : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_G : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_F : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_F:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_F : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_F:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_F : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_F:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_E : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_E:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_E : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_E:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_E : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_E:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_D : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_D:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_D : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_D:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_D : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_D:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_D : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_D : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_D : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_C : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_C:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_C : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_C:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_C : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_C:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_B : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_B:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_B : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_B:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_B : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_B:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Misa_A : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_A:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_A : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_A:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_A : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_A:Misa ->(1)words$word -> Misa) v x=
    ((v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_PTE_Bits_A : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_A : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_A : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val legalize_misa : Misa -> mword ty64 -> M Misa*)

val _ = Define `
 ((legalize_misa:Misa ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Misa),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Misa) (v : xlenbits)=
    (let v = (Mk_Misa v) in sail2_state_monad$bindS
   (sail2_state$and_boolS (sail2_state_monad$returnS (((((get_Misa_C v  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS nextPC_ref  : ( 64 words$word) M) (\ (w__0 : xlenbits) . 
      sail2_state_monad$returnS (((((cast_unit_vec0 ((access_vec_dec w__0 (( 1 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))))) (\ (w__1 : bool) . 
   sail2_state_monad$returnS (if w__1 then m
           else update_Misa_C m ((get_Misa_C v  :  1 words$word))))))`;


(*val Mk_Mstatus : mword ty64 -> Mstatus*)

val _ = Define `
 ((Mk_Mstatus:(64)words$word -> Mstatus) v=
    (<| Mstatus_Mstatus_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Mstatus_bits : Mstatus -> mword ty64*)

val _ = Define `
 ((get_Mstatus_bits:Mstatus ->(64)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Mstatus_bits : register_ref regstate register_value Mstatus -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Mstatus_bits:((regstate),(register_value),(Mstatus))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_bits : Mstatus -> mword ty64 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_bits:Mstatus ->(64)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_SD : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SD:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SD : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SD:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SD : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SD:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_SD : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SD : Sstatus -> mword ty1*)

(*val _set_Sstatus_SD : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_SXL : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_SXL:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 35 : int):ii) (( 34 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_SXL : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_SXL:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 35 : int):ii) (( 34 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SXL : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SXL:Mstatus ->(2)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 35 : int):ii) (( 34 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_UXL : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_UXL:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 33 : int):ii) (( 32 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_UXL : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_UXL:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 33 : int):ii) (( 32 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_UXL : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_UXL:Mstatus ->(2)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 33 : int):ii) (( 32 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_UXL : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_UXL : Sstatus -> mword ty2*)

(*val _set_Sstatus_UXL : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_TSR : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_TSR:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_TSR : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_TSR:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_TSR : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_TSR:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_TW : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_TW:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 21 : int):ii) (( 21 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_TW : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_TW:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_TW : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_TW:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_TVM : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_TVM:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_TVM : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_TVM:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_TVM : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_TVM:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_MXR : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MXR:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MXR : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MXR:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MXR : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MXR:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_MXR : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_MXR : Sstatus -> mword ty1*)

(*val _set_Sstatus_MXR : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_SUM : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SUM:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SUM : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SUM:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SUM : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SUM:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_SUM : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SUM : Sstatus -> mword ty1*)

(*val _set_Sstatus_SUM : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MPRV : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MPRV:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 17 : int):ii) (( 17 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MPRV : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MPRV:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MPRV : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MPRV:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_XS : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_XS:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_XS : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_XS:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_XS : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_XS:Mstatus ->(2)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_XS : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_XS : Sstatus -> mword ty2*)

(*val _set_Sstatus_XS : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_FS : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_FS:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_FS : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_FS:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_FS : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_FS:Mstatus ->(2)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_FS : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_FS : Sstatus -> mword ty2*)

(*val _set_Sstatus_FS : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_MPP : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_MPP:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 12 : int):ii) (( 11 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_MPP : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_MPP:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 12 : int):ii) (( 11 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MPP : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MPP:Mstatus ->(2)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 12 : int):ii) (( 11 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_SPP : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SPP:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SPP : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SPP:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SPP : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SPP:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_SPP : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SPP : Sstatus -> mword ty1*)

(*val _set_Sstatus_SPP : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MPIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MPIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MPIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MPIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MPIE:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_SPIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SPIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SPIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SPIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SPIE:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_SPIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SPIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_SPIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_UPIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_UPIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_UPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_UPIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_UPIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_UPIE:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_UPIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_UPIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_UPIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MIE:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mstatus_SIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SIE:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_SIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_SIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_UIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_UIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_UIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_UIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_UIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_UIE:Mstatus ->(1)words$word -> Mstatus) v x=
    ((v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sstatus_UIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_UIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_UIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val legalize_mstatus : Mstatus -> mword ty64 -> Mstatus*)

val _ = Define `
 ((legalize_mstatus:Mstatus ->(64)words$word -> Mstatus) (o1 : Mstatus) (v : xlenbits)=
    (let (m : Mstatus) = (Mk_Mstatus v) in
   let m = (update_Mstatus_XS m ((extStatus_to_bits Off  :  2 words$word))) in
   let m =
     (update_Mstatus_SD m
       ((bool_to_bits
           ((((((((extStatus_to_bits ((extStatus_of_bits ((get_Mstatus_FS m  :  2 words$word))))
                      :  2 words$word)) = ((extStatus_to_bits Dirty  :  2 words$word))))) \/ (((((extStatus_to_bits ((extStatus_of_bits ((get_Mstatus_XS m  :  2 words$word))))
                      :  2 words$word)) = ((extStatus_to_bits Dirty  :  2 words$word))))))))
          :  1 words$word))) in
   let m = (update_Mstatus_SXL m ((get_Mstatus_SXL o1  :  2 words$word))) in
   let m = (update_Mstatus_UXL m ((get_Mstatus_UXL o1  :  2 words$word))) in
   let m = (update_Mstatus_UPIE m ((bool_to_bits F  :  1 words$word))) in
   update_Mstatus_UIE m ((bool_to_bits F  :  1 words$word))))`;


(*val cur_Architecture : unit -> M Architecture*)

val _ = Define `
 ((cur_Architecture:unit ->(regstate)sail2_state_monad$sequential_state ->(((Architecture),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (case w__0 of
     Machine => sail2_state_monad$bindS
      (sail2_state_monad$read_regS misa_ref) (\ (w__1 : Misa) .  sail2_state_monad$returnS ((get_Misa_MXL w__1  :  2 words$word)))
   | Supervisor => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) .  sail2_state_monad$returnS ((get_Mstatus_SXL w__2  :  2 words$word)))
   | User => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__3 : Mstatus) .  sail2_state_monad$returnS ((get_Mstatus_UXL w__3  :  2 words$word)))
   ) (\ (a : arch_xlen) . 
   (case ((architecture a)) of
     SOME (a) => sail2_state_monad$returnS a
   | NONE => internal_error "Invalid current architecture"
   )))))`;


(*val in32BitMode : unit -> M bool*)

val _ = Define `
 ((in32BitMode:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS (cur_Architecture () ) (\ (w__0 : Architecture) .  sail2_state_monad$returnS (((w__0 = RV32))))))`;


(*val haveAtomics : unit -> M bool*)

val _ = Define `
 ((haveAtomics:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_A w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))`;


(*val haveRVC : unit -> M bool*)

val _ = Define `
 ((haveRVC:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_C w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))`;


(*val haveMulDiv : unit -> M bool*)

val _ = Define `
 ((haveMulDiv:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_M w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))`;


(*val haveFP : unit -> M bool*)

val _ = Define `
 ((haveFP:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$or_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
      sail2_state_monad$returnS (((((get_Misa_F w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS misa_ref) (\ (w__1 : Misa) . 
      sail2_state_monad$returnS (((((get_Misa_D w__1  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))))))`;


(*val pc_alignment_mask : unit -> M (mword ty64)*)

val _ = Define `
 ((pc_alignment_mask:unit ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS ((not_vec
              ((EXTZ (( 64 : int):ii)
                  (if (((((get_Misa_C w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
                   then
                     (vec_of_bits [B0;B0]  :  2 words$word)
                   else (vec_of_bits [B1;B0]  :  2 words$word))
                 :  64 words$word))
             :  64 words$word)))))`;


(*val Mk_Minterrupts : mword ty64 -> Minterrupts*)

val _ = Define `
 ((Mk_Minterrupts:(64)words$word -> Minterrupts) v=
    (<| Minterrupts_Minterrupts_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Minterrupts_bits : Minterrupts -> mword ty64*)

val _ = Define `
 ((get_Minterrupts_bits:Minterrupts ->(64)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Minterrupts_bits : register_ref regstate register_value Minterrupts -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Minterrupts_bits:((regstate),(register_value),(Minterrupts))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_bits : Minterrupts -> mword ty64 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_bits:Minterrupts ->(64)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_Minterrupts_MEI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_MEI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_MEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_MEI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_MEI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_MEI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Minterrupts_SEI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_SEI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_SEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_SEI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_SEI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_SEI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sinterrupts_SEI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_SEI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_SEI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_UEI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_UEI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_UEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_UEI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_UEI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_UEI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sinterrupts_UEI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_UEI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_UEI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_MTI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_MTI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_MTI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_MTI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_MTI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_MTI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Minterrupts_STI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_STI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_STI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_STI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_STI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_STI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sinterrupts_STI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_STI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_STI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_UTI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_UTI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_UTI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_UTI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_UTI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_UTI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sinterrupts_UTI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_UTI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_UTI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_MSI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_MSI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_MSI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_MSI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_MSI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_MSI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Minterrupts_SSI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_SSI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_SSI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_SSI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_SSI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_SSI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sinterrupts_SSI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_SSI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_SSI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_USI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_USI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_USI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_USI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_USI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_USI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    ((v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sinterrupts_USI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_USI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_USI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val legalize_mip : Minterrupts -> mword ty64 -> Minterrupts*)

val _ = Define `
 ((legalize_mip:Minterrupts ->(64)words$word -> Minterrupts) (o1 : Minterrupts) (v : xlenbits)=
    (let v = (Mk_Minterrupts v) in
   let m = (update_Minterrupts_SEI o1 ((get_Minterrupts_SEI v  :  1 words$word))) in
   let m = (update_Minterrupts_STI m ((get_Minterrupts_STI v  :  1 words$word))) in
   update_Minterrupts_SSI m ((get_Minterrupts_SSI v  :  1 words$word))))`;


(*val legalize_mie : Minterrupts -> mword ty64 -> Minterrupts*)

val _ = Define `
 ((legalize_mie:Minterrupts ->(64)words$word -> Minterrupts) (o1 : Minterrupts) (v : xlenbits)=
    (let v = (Mk_Minterrupts v) in
   let m = (update_Minterrupts_MEI o1 ((get_Minterrupts_MEI v  :  1 words$word))) in
   let m = (update_Minterrupts_MTI m ((get_Minterrupts_MTI v  :  1 words$word))) in
   let m = (update_Minterrupts_MSI m ((get_Minterrupts_MSI v  :  1 words$word))) in
   let m = (update_Minterrupts_SEI m ((get_Minterrupts_SEI v  :  1 words$word))) in
   let m = (update_Minterrupts_STI m ((get_Minterrupts_STI v  :  1 words$word))) in
   update_Minterrupts_SSI m ((get_Minterrupts_SSI v  :  1 words$word))))`;


(*val legalize_mideleg : Minterrupts -> mword ty64 -> Minterrupts*)

val _ = Define `
 ((legalize_mideleg:Minterrupts ->(64)words$word -> Minterrupts) (o1 : Minterrupts) (v : xlenbits)=
    (let m = (Mk_Minterrupts v) in
   let m = (update_Minterrupts_MEI m ((bool_to_bits F  :  1 words$word))) in
   let m = (update_Minterrupts_MTI m ((bool_to_bits F  :  1 words$word))) in
   update_Minterrupts_MSI m ((bool_to_bits F  :  1 words$word))))`;


(*val Mk_Medeleg : mword ty64 -> Medeleg*)

val _ = Define `
 ((Mk_Medeleg:(64)words$word -> Medeleg) v=
    (<| Medeleg_Medeleg_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Medeleg_bits : Medeleg -> mword ty64*)

val _ = Define `
 ((get_Medeleg_bits:Medeleg ->(64)words$word) v=  ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Medeleg_bits : register_ref regstate register_value Medeleg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Medeleg_bits:((regstate),(register_value),(Medeleg))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_bits : Medeleg -> mword ty64 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_bits:Medeleg ->(64)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_Medeleg_SAMO_Page_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SAMO_Page_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 15 : int):ii) (( 15 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SAMO_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SAMO_Page_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SAMO_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SAMO_Page_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Medeleg_Load_Page_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Load_Page_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 13 : int):ii) (( 13 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Load_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Load_Page_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Load_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Load_Page_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Medeleg_Fetch_Page_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Fetch_Page_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Fetch_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Fetch_Page_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Fetch_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Fetch_Page_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Medeleg_MEnvCall : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_MEnvCall:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_MEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_MEnvCall:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_MEnvCall : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_MEnvCall:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Medeleg_SEnvCall : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SEnvCall:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SEnvCall:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SEnvCall : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SEnvCall:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Medeleg_UEnvCall : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_UEnvCall:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_UEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_UEnvCall:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_UEnvCall : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_UEnvCall:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_UEnvCall : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_UEnvCall : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_UEnvCall : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_SAMO_Access_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SAMO_Access_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SAMO_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SAMO_Access_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SAMO_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SAMO_Access_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_SAMO_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_SAMO_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_SAMO_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_SAMO_Addr_Align : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SAMO_Addr_Align:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SAMO_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SAMO_Addr_Align:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SAMO_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SAMO_Addr_Align:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_SAMO_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_SAMO_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_SAMO_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Load_Access_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Load_Access_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Load_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Load_Access_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Load_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Load_Access_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_Load_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Load_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Load_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Load_Addr_Align : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Load_Addr_Align:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Load_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Load_Addr_Align:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Load_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Load_Addr_Align:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_Load_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Load_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Load_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Breakpoint : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Breakpoint:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Breakpoint : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Breakpoint:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Breakpoint : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Breakpoint:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_Breakpoint : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Breakpoint : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Breakpoint : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Illegal_Instr : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Illegal_Instr:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Illegal_Instr : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Illegal_Instr:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Illegal_Instr : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Illegal_Instr:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_Illegal_Instr : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Illegal_Instr : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Illegal_Instr : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Fetch_Access_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Fetch_Access_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Fetch_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Fetch_Access_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Fetch_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Fetch_Access_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_Fetch_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Fetch_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Fetch_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Fetch_Addr_Align : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Fetch_Addr_Align:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Fetch_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Fetch_Addr_Align:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Fetch_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Fetch_Addr_Align:Medeleg ->(1)words$word -> Medeleg) v x=
    ((v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _update_Sedeleg_Fetch_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Fetch_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Fetch_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val legalize_medeleg : Medeleg -> mword ty64 -> Medeleg*)

val _ = Define `
 ((legalize_medeleg:Medeleg ->(64)words$word -> Medeleg) (o1 : Medeleg) (v : xlenbits)=
    (let m = (Mk_Medeleg v) in
   update_Medeleg_MEnvCall m ((bool_to_bits F  :  1 words$word))))`;


(*val Mk_Mtvec : mword ty64 -> Mtvec*)

val _ = Define `
 ((Mk_Mtvec:(64)words$word -> Mtvec) v=  (<| Mtvec_Mtvec_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Mtvec_bits : Mtvec -> mword ty64*)

val _ = Define `
 ((get_Mtvec_bits:Mtvec ->(64)words$word) v=  ((subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Mtvec_bits : register_ref regstate register_value Mtvec -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Mtvec_bits:((regstate),(register_value),(Mtvec))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec r.Mtvec_Mtvec_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mtvec_bits : Mtvec -> mword ty64 -> Mtvec*)

val _ = Define `
 ((update_Mtvec_bits:Mtvec ->(64)words$word -> Mtvec) v x=
    ((v with<|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mtvec_Base : Mtvec -> mword ty62*)

val _ = Define `
 ((get_Mtvec_Base:Mtvec ->(62)words$word) v=  ((subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word)))`;


(*val _set_Mtvec_Base : register_ref regstate register_value Mtvec -> mword ty62 -> M unit*)

val _ = Define `
 ((set_Mtvec_Base:((regstate),(register_value),(Mtvec))register_ref ->(62)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec r.Mtvec_Mtvec_chunk_0 (( 63 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 61 : int):ii) (( 0 : int):ii)  :  62 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mtvec_Base : Mtvec -> mword ty62 -> Mtvec*)

val _ = Define `
 ((update_Mtvec_Base:Mtvec ->(62)words$word -> Mtvec) v x=
    ((v with<|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 63 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 61 : int):ii) (( 0 : int):ii)  :  62 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mtvec_Mode : Mtvec -> mword ty2*)

val _ = Define `
 ((get_Mtvec_Mode:Mtvec ->(2)words$word) v=  ((subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)))`;


(*val _set_Mtvec_Mode : register_ref regstate register_value Mtvec -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mtvec_Mode:((regstate),(register_value),(Mtvec))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec r.Mtvec_Mtvec_chunk_0 (( 1 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mtvec_Mode : Mtvec -> mword ty2 -> Mtvec*)

val _ = Define `
 ((update_Mtvec_Mode:Mtvec ->(2)words$word -> Mtvec) v x=
    ((v with<|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 1 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _update_Satp64_Mode : Satp64 -> mword ty4 -> Satp64*)

(*val _get_Satp64_Mode : Satp64 -> mword ty4*)

(*val _set_Satp64_Mode : register_ref regstate register_value Satp64 -> mword ty4 -> M unit*)

(*val legalize_tvec : Mtvec -> mword ty64 -> Mtvec*)

val _ = Define `
 ((legalize_tvec:Mtvec ->(64)words$word -> Mtvec) (o1 : Mtvec) (v : xlenbits)=
    (let v = (Mk_Mtvec v) in
   (case ((trapVectorMode_of_bits ((get_Mtvec_Mode v  :  2 words$word)))) of
     TV_Direct => v
   | TV_Vector => v
   | _ => update_Mtvec_Mode v ((get_Mtvec_Mode o1  :  2 words$word))
   )))`;


(*val Mk_Mcause : mword ty64 -> Mcause*)

val _ = Define `
 ((Mk_Mcause:(64)words$word -> Mcause) v=  (<| Mcause_Mcause_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Mcause_bits : Mcause -> mword ty64*)

val _ = Define `
 ((get_Mcause_bits:Mcause ->(64)words$word) v=  ((subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Mcause_bits : register_ref regstate register_value Mcause -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Mcause_bits:((regstate),(register_value),(Mcause))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec r.Mcause_Mcause_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mcause_bits : Mcause -> mword ty64 -> Mcause*)

val _ = Define `
 ((update_Mcause_bits:Mcause ->(64)words$word -> Mcause) v x=
    ((v with<|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mcause_IsInterrupt : Mcause -> mword ty1*)

val _ = Define `
 ((get_Mcause_IsInterrupt:Mcause ->(1)words$word) v=
    ((subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


(*val _set_Mcause_IsInterrupt : register_ref regstate register_value Mcause -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mcause_IsInterrupt:((regstate),(register_value),(Mcause))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec r.Mcause_Mcause_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mcause_IsInterrupt : Mcause -> mword ty1 -> Mcause*)

val _ = Define `
 ((update_Mcause_IsInterrupt:Mcause ->(1)words$word -> Mcause) v x=
    ((v with<|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val _get_Mcause_Cause : Mcause -> mword ty63*)

val _ = Define `
 ((get_Mcause_Cause:Mcause ->(63)words$word) v=  ((subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 62 : int):ii) (( 0 : int):ii)  :  63 words$word)))`;


(*val _set_Mcause_Cause : register_ref regstate register_value Mcause -> mword ty63 -> M unit*)

val _ = Define `
 ((set_Mcause_Cause:((regstate),(register_value),(Mcause))register_ref ->(63)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec r.Mcause_Mcause_chunk_0 (( 62 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 62 : int):ii) (( 0 : int):ii)  :  63 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mcause_Cause : Mcause -> mword ty63 -> Mcause*)

val _ = Define `
 ((update_Mcause_Cause:Mcause ->(63)words$word -> Mcause) v x=
    ((v with<|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 62 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 62 : int):ii) (( 0 : int):ii)  :  63 words$word))
          :  64 words$word))|>)))`;


(*val tvec_addr : Mtvec -> Mcause -> maybe (mword ty64)*)

val _ = Define `
 ((tvec_addr:Mtvec -> Mcause ->((64)words$word)option) (m : Mtvec) (c : Mcause)=
    (let (base : xlenbits) =
     ((concat_vec ((get_Mtvec_Base m  :  62 words$word)) (vec_of_bits [B0;B0]  :  2 words$word)
       :  64 words$word)) in
   (case ((trapVectorMode_of_bits ((get_Mtvec_Mode m  :  2 words$word)))) of
     TV_Direct => SOME base
   | TV_Vector =>
      if (((((get_Mcause_IsInterrupt c  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
      then
        SOME ((add_vec base
                 ((shift_bits_left
                     ((EXTZ (( 64 : int):ii) ((get_Mcause_Cause c  :  63 words$word))  :  64 words$word))
                     (vec_of_bits [B1;B0]  :  2 words$word)
                    :  64 words$word))
                :  64 words$word))
      else SOME base
   | TV_Reserved => NONE
   )))`;


(*val legalize_xepc : mword ty64 -> M (mword ty64)*)

val _ = Define `
 ((legalize_xepc:(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v=  (sail2_state_monad$bindS
   (haveRVC () ) (\ (w__0 : bool) . 
   sail2_state_monad$returnS ((and_vec v
              ((EXTS (( 64 : int):ii)
                  (if w__0 then (vec_of_bits [B1;B1;B0]  :  3 words$word)
                   else (vec_of_bits [B1;B0;B0]  :  3 words$word))
                 :  64 words$word))
             :  64 words$word)))))`;


(*val Mk_Counteren : mword ty32 -> Counteren*)

val _ = Define `
 ((Mk_Counteren:(32)words$word -> Counteren) v=
    (<| Counteren_Counteren_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


(*val _get_Counteren_bits : Counteren -> mword ty32*)

val _ = Define `
 ((get_Counteren_bits:Counteren ->(32)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


(*val _set_Counteren_bits : register_ref regstate register_value Counteren -> mword ty32 -> M unit*)

val _ = Define `
 ((set_Counteren_bits:((regstate),(register_value),(Counteren))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_bits : Counteren -> mword ty32 -> Counteren*)

val _ = Define `
 ((update_Counteren_bits:Counteren ->(32)words$word -> Counteren) v x=
    ((v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word))|>)))`;


(*val _get_Counteren_HPM : Counteren -> mword ty29*)

val _ = Define `
 ((get_Counteren_HPM:Counteren ->(29)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 3 : int):ii)  :  29 words$word)))`;


(*val _set_Counteren_HPM : register_ref regstate register_value Counteren -> mword ty29 -> M unit*)

val _ = Define `
 ((set_Counteren_HPM:((regstate),(register_value),(Counteren))register_ref ->(29)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_HPM : Counteren -> mword ty29 -> Counteren*)

val _ = Define `
 ((update_Counteren_HPM:Counteren ->(29)words$word -> Counteren) v x=
    ((v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
          :  32 words$word))|>)))`;


(*val _get_Counteren_IR : Counteren -> mword ty1*)

val _ = Define `
 ((get_Counteren_IR:Counteren ->(1)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_Counteren_IR : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Counteren_IR:((regstate),(register_value),(Counteren))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_IR : Counteren -> mword ty1 -> Counteren*)

val _ = Define `
 ((update_Counteren_IR:Counteren ->(1)words$word -> Counteren) v x=
    ((v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_Counteren_TM : Counteren -> mword ty1*)

val _ = Define `
 ((get_Counteren_TM:Counteren ->(1)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Counteren_TM : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Counteren_TM:((regstate),(register_value),(Counteren))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_TM : Counteren -> mword ty1 -> Counteren*)

val _ = Define `
 ((update_Counteren_TM:Counteren ->(1)words$word -> Counteren) v x=
    ((v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val _get_Counteren_CY : Counteren -> mword ty1*)

val _ = Define `
 ((get_Counteren_CY:Counteren ->(1)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Counteren_CY : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Counteren_CY:((regstate),(register_value),(Counteren))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_CY : Counteren -> mword ty1 -> Counteren*)

val _ = Define `
 ((update_Counteren_CY:Counteren ->(1)words$word -> Counteren) v x=
    ((v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word))|>)))`;


(*val legalize_mcounteren : Counteren -> mword ty64 -> Counteren*)

val _ = Define `
 ((legalize_mcounteren:Counteren ->(64)words$word -> Counteren) (c : Counteren) (v : xlenbits)=
    (let c = (update_Counteren_IR c ((cast_unit_vec0 ((access_vec_dec v (( 2 : int):ii)))  :  1 words$word))) in
   let c = (update_Counteren_TM c ((cast_unit_vec0 ((access_vec_dec v (( 1 : int):ii)))  :  1 words$word))) in
   update_Counteren_CY c ((cast_unit_vec0 ((access_vec_dec v (( 0 : int):ii)))  :  1 words$word))))`;


(*val legalize_scounteren : Counteren -> mword ty64 -> Counteren*)

val _ = Define `
 ((legalize_scounteren:Counteren ->(64)words$word -> Counteren) (c : Counteren) (v : xlenbits)=
    (let c = (update_Counteren_IR c ((cast_unit_vec0 ((access_vec_dec v (( 2 : int):ii)))  :  1 words$word))) in
   let c = (update_Counteren_TM c ((cast_unit_vec0 ((access_vec_dec v (( 1 : int):ii)))  :  1 words$word))) in
   update_Counteren_CY c ((cast_unit_vec0 ((access_vec_dec v (( 0 : int):ii)))  :  1 words$word))))`;


(*val retire_instruction : unit -> M unit*)

val _ = Define `
 ((retire_instruction:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS minstret_written_ref) (\ (w__0 : bool) . 
   if (((((bool_to_bits w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
     sail2_state_monad$write_regS minstret_written_ref F
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
     sail2_state_monad$write_regS minstret_ref ((add_vec_int w__1 (( 1 : int):ii)  :  64 words$word))))))`;


(*val Mk_Sstatus : mword ty64 -> Sstatus*)

val _ = Define `
 ((Mk_Sstatus:(64)words$word -> Sstatus) v=
    (<| Sstatus_Sstatus_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Sstatus_bits : Sstatus -> mword ty64*)

val _ = Define `
 ((get_Sstatus_bits:Sstatus ->(64)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Sstatus_bits : register_ref regstate register_value Sstatus -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Sstatus_bits:((regstate),(register_value),(Sstatus))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Sstatus_bits : Sstatus -> mword ty64 -> Sstatus*)

val _ = Define `
 ((update_Sstatus_bits:Sstatus ->(64)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_SD:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SD:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SD:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 63 : int):ii) (( 63 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_UXL:Sstatus ->(2)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 33 : int):ii) (( 32 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_Sstatus_UXL:((regstate),(register_value),(Sstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 33 : int):ii) (( 32 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_UXL:Sstatus ->(2)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 33 : int):ii) (( 32 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_MXR:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_MXR:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_MXR:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_SUM:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SUM:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SUM:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_XS:Sstatus ->(2)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_Sstatus_XS:((regstate),(register_value),(Sstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_XS:Sstatus ->(2)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_FS:Sstatus ->(2)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_Sstatus_FS:((regstate),(register_value),(Sstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_FS:Sstatus ->(2)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_SPP:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SPP:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SPP:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_SPIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SPIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SPIE:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_UPIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_UPIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_UPIE:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_SIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SIE:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sstatus_UIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_UIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_UIE:Sstatus ->(1)words$word -> Sstatus) v x=
    ((v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val lower_mstatus : Mstatus -> Sstatus*)

val _ = Define `
 ((lower_mstatus:Mstatus -> Sstatus) m=
    (let s = (Mk_Sstatus ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))) in
   let s = (update_Sstatus_SD s ((get_Mstatus_SD m  :  1 words$word))) in
   let s = (update_Sstatus_UXL s ((get_Mstatus_UXL m  :  2 words$word))) in
   let s = (update_Sstatus_MXR s ((get_Mstatus_MXR m  :  1 words$word))) in
   let s = (update_Sstatus_SUM s ((get_Mstatus_SUM m  :  1 words$word))) in
   let s = (update_Sstatus_XS s ((get_Mstatus_XS m  :  2 words$word))) in
   let s = (update_Sstatus_FS s ((get_Mstatus_FS m  :  2 words$word))) in
   let s = (update_Sstatus_SPP s ((get_Mstatus_SPP m  :  1 words$word))) in
   let s = (update_Sstatus_SPIE s ((get_Mstatus_SPIE m  :  1 words$word))) in
   let s = (update_Sstatus_UPIE s ((get_Mstatus_UPIE m  :  1 words$word))) in
   let s = (update_Sstatus_SIE s ((get_Mstatus_SIE m  :  1 words$word))) in
   update_Sstatus_UIE s ((get_Mstatus_UIE m  :  1 words$word))))`;


(*val lift_sstatus : Mstatus -> Sstatus -> Mstatus*)

val _ = Define `
 ((lift_sstatus:Mstatus -> Sstatus -> Mstatus) (m : Mstatus) (s : Sstatus)=
    (let m = (update_Mstatus_SD m ((get_Sstatus_SD s  :  1 words$word))) in
   let m = (update_Mstatus_MXR m ((get_Sstatus_MXR s  :  1 words$word))) in
   let m = (update_Mstatus_SUM m ((get_Sstatus_SUM s  :  1 words$word))) in
   let m = (update_Mstatus_XS m ((get_Sstatus_XS s  :  2 words$word))) in
   let m = (update_Mstatus_FS m ((get_Sstatus_FS s  :  2 words$word))) in
   let m = (update_Mstatus_SPP m ((get_Sstatus_SPP s  :  1 words$word))) in
   let m = (update_Mstatus_SPIE m ((get_Sstatus_SPIE s  :  1 words$word))) in
   let m = (update_Mstatus_UPIE m ((get_Sstatus_UPIE s  :  1 words$word))) in
   let m = (update_Mstatus_SIE m ((get_Sstatus_SIE s  :  1 words$word))) in
   update_Mstatus_UIE m ((get_Sstatus_UIE s  :  1 words$word))))`;


(*val legalize_sstatus : Mstatus -> mword ty64 -> Mstatus*)

val _ = Define `
 ((legalize_sstatus:Mstatus ->(64)words$word -> Mstatus) (m : Mstatus) (v : xlenbits)=  (lift_sstatus m ((Mk_Sstatus v))))`;


(*val Mk_Sedeleg : mword ty64 -> Sedeleg*)

val _ = Define `
 ((Mk_Sedeleg:(64)words$word -> Sedeleg) v=
    (<| Sedeleg_Sedeleg_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Sedeleg_bits : Sedeleg -> mword ty64*)

val _ = Define `
 ((get_Sedeleg_bits:Sedeleg ->(64)words$word) v=  ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Sedeleg_bits : register_ref regstate register_value Sedeleg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Sedeleg_bits:((regstate),(register_value),(Sedeleg))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Sedeleg_bits : Sedeleg -> mword ty64 -> Sedeleg*)

val _ = Define `
 ((update_Sedeleg_bits:Sedeleg ->(64)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_UEnvCall:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_UEnvCall:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_UEnvCall:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_SAMO_Access_Fault:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_SAMO_Access_Fault:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_SAMO_Access_Fault:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_SAMO_Addr_Align:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_SAMO_Addr_Align:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_SAMO_Addr_Align:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_Load_Access_Fault:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Load_Access_Fault:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Load_Access_Fault:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_Load_Addr_Align:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Load_Addr_Align:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Load_Addr_Align:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_Breakpoint:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Breakpoint:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Breakpoint:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_Illegal_Instr:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Illegal_Instr:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Illegal_Instr:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_Fetch_Access_Fault:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Fetch_Access_Fault:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Fetch_Access_Fault:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sedeleg_Fetch_Addr_Align:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Fetch_Addr_Align:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Fetch_Addr_Align:Sedeleg ->(1)words$word -> Sedeleg) v x=
    ((v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val legalize_sedeleg : Sedeleg -> mword ty64 -> Sedeleg*)

val _ = Define `
 ((legalize_sedeleg:Sedeleg ->(64)words$word -> Sedeleg) (s : Sedeleg) (v : xlenbits)=
    (Mk_Sedeleg ((EXTZ (( 64 : int):ii) ((subrange_vec_dec v (( 8 : int):ii) (( 0 : int):ii)  :  9 words$word))  :  64 words$word))))`;


(*val Mk_Sinterrupts : mword ty64 -> Sinterrupts*)

val _ = Define `
 ((Mk_Sinterrupts:(64)words$word -> Sinterrupts) v=
    (<| Sinterrupts_Sinterrupts_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Sinterrupts_bits : Sinterrupts -> mword ty64*)

val _ = Define `
 ((get_Sinterrupts_bits:Sinterrupts ->(64)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Sinterrupts_bits : register_ref regstate register_value Sinterrupts -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Sinterrupts_bits:((regstate),(register_value),(Sinterrupts))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Sinterrupts_bits : Sinterrupts -> mword ty64 -> Sinterrupts*)

val _ = Define `
 ((update_Sinterrupts_bits:Sinterrupts ->(64)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sinterrupts_SEI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_SEI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_SEI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sinterrupts_UEI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_UEI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_UEI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sinterrupts_STI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_STI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_STI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sinterrupts_UTI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_UTI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_UTI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sinterrupts_SSI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_SSI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_SSI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Sinterrupts_USI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_USI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_USI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    ((v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  64 words$word))|>)))`;


(*val lower_mip : Minterrupts -> Minterrupts -> Sinterrupts*)

val _ = Define `
 ((lower_mip:Minterrupts -> Minterrupts -> Sinterrupts) (m : Minterrupts) (d : Minterrupts)=
    (let (s : Sinterrupts) =
     (Mk_Sinterrupts ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))) in
   let s =
     (update_Sinterrupts_SEI s
       ((and_vec ((get_Minterrupts_SEI m  :  1 words$word)) ((get_Minterrupts_SEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_STI s
       ((and_vec ((get_Minterrupts_STI m  :  1 words$word)) ((get_Minterrupts_STI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_SSI s
       ((and_vec ((get_Minterrupts_SSI m  :  1 words$word)) ((get_Minterrupts_SSI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UEI s
       ((and_vec ((get_Minterrupts_UEI m  :  1 words$word)) ((get_Minterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UTI s
       ((and_vec ((get_Minterrupts_UTI m  :  1 words$word)) ((get_Minterrupts_UTI d  :  1 words$word))
          :  1 words$word))) in
   update_Sinterrupts_USI s
     ((and_vec ((get_Minterrupts_USI m  :  1 words$word)) ((get_Minterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val lower_mie : Minterrupts -> Minterrupts -> Sinterrupts*)

val _ = Define `
 ((lower_mie:Minterrupts -> Minterrupts -> Sinterrupts) (m : Minterrupts) (d : Minterrupts)=
    (let (s : Sinterrupts) =
     (Mk_Sinterrupts ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))) in
   let s =
     (update_Sinterrupts_SEI s
       ((and_vec ((get_Minterrupts_SEI m  :  1 words$word)) ((get_Minterrupts_SEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_STI s
       ((and_vec ((get_Minterrupts_STI m  :  1 words$word)) ((get_Minterrupts_STI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_SSI s
       ((and_vec ((get_Minterrupts_SSI m  :  1 words$word)) ((get_Minterrupts_SSI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UEI s
       ((and_vec ((get_Minterrupts_UEI m  :  1 words$word)) ((get_Minterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UTI s
       ((and_vec ((get_Minterrupts_UTI m  :  1 words$word)) ((get_Minterrupts_UTI d  :  1 words$word))
          :  1 words$word))) in
   update_Sinterrupts_USI s
     ((and_vec ((get_Minterrupts_USI m  :  1 words$word)) ((get_Minterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val lift_sip : Minterrupts -> Minterrupts -> Sinterrupts -> Minterrupts*)

val _ = Define `
 ((lift_sip:Minterrupts -> Minterrupts -> Sinterrupts -> Minterrupts) (o1 : Minterrupts) (d : Minterrupts) (s : Sinterrupts)=
    (let (m : Minterrupts) = o1 in
   let m =
     (update_Minterrupts_SSI m
       ((and_vec ((get_Sinterrupts_SSI s  :  1 words$word)) ((get_Minterrupts_SSI d  :  1 words$word))
          :  1 words$word))) in
   let m =
     (update_Minterrupts_UEI m
       ((and_vec ((get_Minterrupts_UEI m  :  1 words$word)) ((get_Minterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   update_Minterrupts_USI m
     ((and_vec ((get_Minterrupts_USI m  :  1 words$word)) ((get_Minterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val legalize_sip : Minterrupts -> Minterrupts -> mword ty64 -> Minterrupts*)

val _ = Define `
 ((legalize_sip:Minterrupts -> Minterrupts ->(64)words$word -> Minterrupts) (m : Minterrupts) (d : Minterrupts) (v : xlenbits)=
    (lift_sip m d ((Mk_Sinterrupts v))))`;


(*val lift_sie : Minterrupts -> Minterrupts -> Sinterrupts -> Minterrupts*)

val _ = Define `
 ((lift_sie:Minterrupts -> Minterrupts -> Sinterrupts -> Minterrupts) (o1 : Minterrupts) (d : Minterrupts) (s : Sinterrupts)=
    (let (m : Minterrupts) = o1 in
   let m =
     (if (((((get_Minterrupts_SEI d  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
       update_Minterrupts_SEI m ((get_Sinterrupts_SEI s  :  1 words$word))
     else m) in
   let m =
     (if (((((get_Minterrupts_STI d  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
       update_Minterrupts_STI m ((get_Sinterrupts_STI s  :  1 words$word))
     else m) in
   let m =
     (if (((((get_Minterrupts_SSI d  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
       update_Minterrupts_SSI m ((get_Sinterrupts_SSI s  :  1 words$word))
     else m) in
   let m =
     (if (((((get_Minterrupts_UEI d  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
       update_Minterrupts_UEI m ((get_Sinterrupts_UEI s  :  1 words$word))
     else m) in
   let m =
     (if (((((get_Minterrupts_UTI d  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
       update_Minterrupts_UTI m ((get_Sinterrupts_UTI s  :  1 words$word))
     else m) in
   if (((((get_Minterrupts_USI d  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
     update_Minterrupts_USI m ((get_Sinterrupts_USI s  :  1 words$word))
   else m))`;


(*val legalize_sie : Minterrupts -> Minterrupts -> mword ty64 -> Minterrupts*)

val _ = Define `
 ((legalize_sie:Minterrupts -> Minterrupts ->(64)words$word -> Minterrupts) (m : Minterrupts) (d : Minterrupts) (v : xlenbits)=
    (lift_sie m d ((Mk_Sinterrupts v))))`;


(*val Mk_Satp64 : mword ty64 -> Satp64*)

val _ = Define `
 ((Mk_Satp64:(64)words$word -> Satp64) v=  (<| Satp64_Satp64_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_Satp64_bits : Satp64 -> mword ty64*)

val _ = Define `
 ((get_Satp64_bits:Satp64 ->(64)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_Satp64_bits : register_ref regstate register_value Satp64 -> mword ty64 -> M unit*)

val _ = Define `
 ((set_Satp64_bits:((regstate),(register_value),(Satp64))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Satp64_bits : Satp64 -> mword ty64 -> Satp64*)

val _ = Define `
 ((update_Satp64_bits:Satp64 ->(64)words$word -> Satp64) v x=
    ((v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_Satp64_Mode:Satp64 ->(4)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 60 : int):ii)  :  4 words$word)))`;


val _ = Define `
 ((set_Satp64_Mode:((regstate),(register_value),(Satp64))register_ref ->(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 60 : int):ii)
             ((subrange_vec_dec v (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp64_Mode:Satp64 ->(4)words$word -> Satp64) v x=
    ((v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 60 : int):ii)
           ((subrange_vec_dec x (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
          :  64 words$word))|>)))`;


(*val _get_Satp64_Asid : Satp64 -> mword ty16*)

val _ = Define `
 ((get_Satp64_Asid:Satp64 ->(16)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 59 : int):ii) (( 44 : int):ii)  :  16 words$word)))`;


(*val _set_Satp64_Asid : register_ref regstate register_value Satp64 -> mword ty16 -> M unit*)

val _ = Define `
 ((set_Satp64_Asid:((regstate),(register_value),(Satp64))register_ref ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 59 : int):ii) (( 44 : int):ii)
             ((subrange_vec_dec v (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Satp64_Asid : Satp64 -> mword ty16 -> Satp64*)

val _ = Define `
 ((update_Satp64_Asid:Satp64 ->(16)words$word -> Satp64) v x=
    ((v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 59 : int):ii) (( 44 : int):ii)
           ((subrange_vec_dec x (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          :  64 words$word))|>)))`;


(*val _get_Satp64_PPN : Satp64 -> mword ty44*)

val _ = Define `
 ((get_Satp64_PPN:Satp64 ->(44)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word)))`;


(*val _set_Satp64_PPN : register_ref regstate register_value Satp64 -> mword ty44 -> M unit*)

val _ = Define `
 ((set_Satp64_PPN:((regstate),(register_value),(Satp64))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 43 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Satp64_PPN : Satp64 -> mword ty44 -> Satp64*)

val _ = Define `
 ((update_Satp64_PPN:Satp64 ->(44)words$word -> Satp64) v x=
    ((v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 43 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  64 words$word))|>)))`;


(*val legalize_satp : Architecture -> mword ty64 -> mword ty64 -> mword ty64*)

val _ = Define `
 ((legalize_satp:Architecture ->(64)words$word ->(64)words$word ->(64)words$word) (a : Architecture) (o1 : xlenbits) (v : xlenbits)=
    (let s = (Mk_Satp64 v) in
   (case ((satpMode_of_bits a ((get_Satp64_Mode s  :  4 words$word)))) of
     NONE => o1
   | SOME (Sv32) => o1
   | SOME (_) => (get_Satp64_bits s  :  64 words$word)
   )))`;


(*val csr_name : mword ty12 -> string*)

val _ = Define `
 ((csr_name:(12)words$word -> string) csr=
    (let b__0 = csr in
   if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "ustatus"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "uie"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     "utvec"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "fflags"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "frm"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "fcsr"
   else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "cycle"
   else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "time"
   else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "instret"
   else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "cycleh"
   else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "timeh"
   else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "instreth"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "sstatus"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "sedeleg"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "sideleg"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "sie"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     "stvec"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     "scounteren"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "sscratch"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "sepc"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "scause"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "stval"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "sip"
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "satp"
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word)))) then
     "mvendorid"
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word)))) then
     "marchid"
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word)))) then
     "mimpid"
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word)))) then
     "mhartid"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mstatus"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "misa"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "medeleg"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "mideleg"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "mie"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     "mtvec"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     "mcounteren"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mscratch"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "mepc"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "mcause"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "mtval"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "mip"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "pmpcfg0"
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)))) then
     "pmpaddr0"
   else if (((b__0 = (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mcycle"
   else if (((b__0 = (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "minstret"
   else if (((b__0 = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mcycleh"
   else if (((b__0 = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "minstreth"
   else if (((b__0 = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "tselect"
   else "UNKNOWN"))`;


(*val csr_name_map_forwards : mword ty12 -> string*)

val _ = Define `
 ((csr_name_map_forwards:(12)words$word -> string) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "ustatus"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "uie"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     "utvec"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "uscratch"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "uepc"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "ucause"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "utval"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "uip"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "fflags"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "frm"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "fcsr"
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "cycle"
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "time"
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "instret"
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "cycleh"
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "timeh"
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "instreth"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "sstatus"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "sedeleg"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "sideleg"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "sie"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     "stvec"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     "scounteren"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "sscratch"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "sepc"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "scause"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "stval"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "sip"
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "satp"
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word)))) then
     "mvendorid"
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word)))) then
     "marchid"
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word)))) then
     "mimpid"
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word)))) then
     "mhartid"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mstatus"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "misa"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "medeleg"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "mideleg"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "mie"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     "mtvec"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     "mcounteren"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mscratch"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "mepc"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "mcause"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "mtval"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     "mip"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "pmpcfg0"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "pmpcfg1"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "pmpcfg2"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     "pmpcfg3"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)))) then
     "pmpaddr0"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  :  12 words$word)))) then
     "pmpaddr1"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  :  12 words$word)))) then
     "pmpaddr2"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  :  12 words$word)))) then
     "pmpaddr3"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  :  12 words$word)))) then
     "pmpaddr4"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  :  12 words$word)))) then
     "pmpaddr5"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  :  12 words$word)))) then
     "pmpaddr6"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  :  12 words$word)))) then
     "pmpaddr7"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  :  12 words$word)))) then
     "pmpaddr8"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  :  12 words$word)))) then
     "pmpaddr9"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  :  12 words$word)))) then
     "pmpaddr10"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  :  12 words$word)))) then
     "pmpaddr11"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  :  12 words$word)))) then
     "pmpaddr12"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  :  12 words$word)))) then
     "pmpaddr13"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  :  12 words$word)))) then
     "pmpaddr14"
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  12 words$word)))) then
     "pmpaddr15"
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mcycle"
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "minstret"
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "mcycleh"
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "minstreth"
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     "tselect"
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     "tdata1"
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     "tdata2"
   else "tdata3"))`;


(*val csr_name_map_backwards : string -> mword ty12*)

val _ = Define `
 ((csr_name_map_backwards:string ->(12)words$word) arg_=
    ((case arg_ of
     "ustatus" => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "uie" => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)
   | "utvec" => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)
   | "uscratch" => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "uepc" => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "ucause" => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "utval" => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)
   | "uip" => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)
   | "fflags" => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "frm" => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "fcsr" => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)
   | "cycle" => (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "time" => (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "instret" => (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "cycleh" => (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "timeh" => (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "instreth" => (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "sstatus" => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "sedeleg" => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "sideleg" => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)
   | "sie" => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)
   | "stvec" => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)
   | "scounteren" => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)
   | "sscratch" => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "sepc" => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "scause" => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "stval" => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)
   | "sip" => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)
   | "satp" => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "mvendorid" => (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word)
   | "marchid" => (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word)
   | "mimpid" => (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word)
   | "mhartid" => (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word)
   | "mstatus" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "misa" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "medeleg" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "mideleg" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)
   | "mie" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)
   | "mtvec" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)
   | "mcounteren" => (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)
   | "mscratch" => (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "mepc" => (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)
   | "mcause" => (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "mtval" => (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)
   | "mip" => (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)
   | "pmpcfg0" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)
   | "pmpcfg1" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word)
   | "pmpcfg2" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word)
   | "pmpcfg3" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word)
   | "pmpaddr0" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)
   | "pmpaddr1" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  :  12 words$word)
   | "pmpaddr2" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  :  12 words$word)
   | "pmpaddr3" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  :  12 words$word)
   | "pmpaddr4" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  :  12 words$word)
   | "pmpaddr5" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  :  12 words$word)
   | "pmpaddr6" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  :  12 words$word)
   | "pmpaddr7" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  :  12 words$word)
   | "pmpaddr8" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  :  12 words$word)
   | "pmpaddr9" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  :  12 words$word)
   | "pmpaddr10" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  :  12 words$word)
   | "pmpaddr11" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  :  12 words$word)
   | "pmpaddr12" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  :  12 words$word)
   | "pmpaddr13" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  :  12 words$word)
   | "pmpaddr14" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  :  12 words$word)
   | "pmpaddr15" => (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  12 words$word)
   | "mcycle" => (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "minstret" => (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "mcycleh" => (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
   | "minstreth" => (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)
   | "tselect" => (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)
   | "tdata1" => (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word)
   | "tdata2" => (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word)
   | "tdata3" => (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word)
   )))`;


(*val csr_name_map_forwards_matches : mword ty12 -> bool*)

val _ = Define `
 ((csr_name_map_forwards_matches:(12)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     T
   else if (((p0_ = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     T
   else F))`;


(*val csr_name_map_backwards_matches : string -> bool*)

val _ = Define `
 ((csr_name_map_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "ustatus" => T
   | "uie" => T
   | "utvec" => T
   | "uscratch" => T
   | "uepc" => T
   | "ucause" => T
   | "utval" => T
   | "uip" => T
   | "fflags" => T
   | "frm" => T
   | "fcsr" => T
   | "cycle" => T
   | "time" => T
   | "instret" => T
   | "cycleh" => T
   | "timeh" => T
   | "instreth" => T
   | "sstatus" => T
   | "sedeleg" => T
   | "sideleg" => T
   | "sie" => T
   | "stvec" => T
   | "scounteren" => T
   | "sscratch" => T
   | "sepc" => T
   | "scause" => T
   | "stval" => T
   | "sip" => T
   | "satp" => T
   | "mvendorid" => T
   | "marchid" => T
   | "mimpid" => T
   | "mhartid" => T
   | "mstatus" => T
   | "misa" => T
   | "medeleg" => T
   | "mideleg" => T
   | "mie" => T
   | "mtvec" => T
   | "mcounteren" => T
   | "mscratch" => T
   | "mepc" => T
   | "mcause" => T
   | "mtval" => T
   | "mip" => T
   | "pmpcfg0" => T
   | "pmpcfg1" => T
   | "pmpcfg2" => T
   | "pmpcfg3" => T
   | "pmpaddr0" => T
   | "pmpaddr1" => T
   | "pmpaddr2" => T
   | "pmpaddr3" => T
   | "pmpaddr4" => T
   | "pmpaddr5" => T
   | "pmpaddr6" => T
   | "pmpaddr7" => T
   | "pmpaddr8" => T
   | "pmpaddr9" => T
   | "pmpaddr10" => T
   | "pmpaddr11" => T
   | "pmpaddr12" => T
   | "pmpaddr13" => T
   | "pmpaddr14" => T
   | "pmpaddr15" => T
   | "mcycle" => T
   | "minstret" => T
   | "mcycleh" => T
   | "minstreth" => T
   | "tselect" => T
   | "tdata1" => T
   | "tdata2" => T
   | "tdata3" => T
   | _ => F
   )))`;


(*val csr_name_map_matches_prefix : string -> maybe ((mword ty12 * ii))*)

val _ = Define `
 ((csr_name_map_matches_prefix:string ->((12)words$word#int)option) arg_=
    (let stringappend_1716_0 = arg_ in
   if (((((string_startswith stringappend_1716_0 "ustatus")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "ustatus")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "ustatus")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "uie")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "uie")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "uie")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "utvec")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "utvec")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "utvec")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "uscratch")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "uscratch")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "uscratch")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "uepc")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "uepc")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "uepc")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "ucause")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "ucause")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "ucause")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "utval")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "utval")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "utval")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "uip")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "uip")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "uip")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "fflags")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "fflags")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "fflags")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "frm")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "frm")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "frm")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "fcsr")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "fcsr")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "fcsr")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "cycle")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "cycle")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "cycle")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "time")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "time")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "time")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "instret")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "instret")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "instret")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "cycleh")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "cycleh")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "cycleh")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "timeh")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "timeh")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "timeh")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "instreth")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "instreth")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "instreth")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sstatus")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sstatus")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sstatus")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sedeleg")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sedeleg")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sedeleg")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sideleg")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sideleg")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sideleg")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sie")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sie")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sie")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "stvec")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "stvec")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "stvec")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "scounteren")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "scounteren")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "scounteren")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sscratch")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sscratch")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sscratch")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sepc")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sepc")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sepc")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "scause")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "scause")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "scause")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "stval")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "stval")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "stval")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "sip")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "sip")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "sip")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "satp")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "satp")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "satp")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mvendorid")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mvendorid")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mvendorid")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "marchid")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "marchid")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "marchid")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mimpid")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mimpid")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mimpid")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mhartid")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mhartid")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mhartid")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mstatus")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mstatus")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mstatus")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "misa")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "misa")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "misa")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "medeleg")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "medeleg")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "medeleg")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mideleg")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mideleg")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mideleg")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mie")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mie")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mie")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mtvec")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mtvec")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mtvec")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mcounteren")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mcounteren")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mcounteren")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mscratch")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mscratch")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mscratch")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mepc")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mepc")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mepc")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mcause")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mcause")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mcause")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mtval")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mtval")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mtval")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mip")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mip")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mip")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpcfg0")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg0")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg0")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpcfg1")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg1")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg1")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpcfg2")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg2")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg2")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpcfg3")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg3")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpcfg3")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr0")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr0")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr0")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr1")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr1")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr1")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr2")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr2")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr2")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr3")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr3")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr3")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr4")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr4")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr4")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr5")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr5")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr5")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr6")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr6")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr6")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr7")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr7")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr7")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr8")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr8")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr8")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr9")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr9")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr9")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr10")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr10")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr10")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr11")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr11")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr11")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr12")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr12")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr12")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr13")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr13")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr13")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr14")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr14")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr14")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "pmpaddr15")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr15")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "pmpaddr15")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mcycle")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mcycle")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mcycle")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "minstret")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "minstret")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "minstret")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "mcycleh")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "mcycleh")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "mcycleh")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "minstreth")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "minstreth")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "minstreth")))) of
       s_ =>
        SOME ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "tselect")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "tselect")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "tselect")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "tdata1")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "tdata1")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "tdata1")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "tdata2")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "tdata2")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "tdata2")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1716_0 "tdata3")) /\ (
  (case ((string_drop stringappend_1716_0 ((string_length "tdata3")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1716_0 ((string_length "tdata3")))) of
       s_ =>
        SOME ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  :  12 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val csrAccess : mword ty12 -> mword ty2*)

val _ = Define `
 ((csrAccess:(12)words$word ->(2)words$word) csr=  ((subrange_vec_dec csr (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)))`;


(*val csrPriv : mword ty12 -> mword ty2*)

val _ = Define `
 ((csrPriv:(12)words$word ->(2)words$word) csr=  ((subrange_vec_dec csr (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word)))`;


(*val is_CSR_defined : mword ty12 -> Privilege -> bool*)

val _ = Define `
 ((is_CSR_defined:(12)words$word -> Privilege -> bool) (csr : 12 bits) (p : Privilege)=
    (let b__0 = csr in
   if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)))) then
     F
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     ((((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))) \/ (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
   else if (((b__0 = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
     (((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))
   else F))`;


(*val check_CSR_access : mword ty2 -> mword ty2 -> Privilege -> bool -> bool*)

val _ = Define `
 ((check_CSR_access:(2)words$word ->(2)words$word -> Privilege -> bool -> bool) csrrw csrpr p isWrite=
    (((~ ((((((((bool_to_bits isWrite  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ (((csrrw = (vec_of_bits [B1;B1]  :  2 words$word))))))))) /\ ((zopz0zKzJ_u ((privLevel_to_bits p  :  2 words$word)) csrpr))))`;


(*val check_TVM_SATP : mword ty12 -> Privilege -> M bool*)

val _ = Define `
 ((check_TVM_SATP:(12)words$word -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege)=  (sail2_state_monad$bindS
   (sail2_state$and_boolS
     (sail2_state_monad$returnS (((csr = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))))
     (sail2_state$and_boolS
        (sail2_state_monad$returnS (((((privLevel_to_bits p  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
        ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
         sail2_state_monad$returnS (((((get_Mstatus_TVM w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))) (\ (w__2 :
     bool) . 
   sail2_state_monad$returnS ((~ w__2)))))`;


(*val check_Counteren : mword ty12 -> Privilege -> M bool*)

val _ = Define `
 ((check_Counteren:(12)words$word -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege)=
    ((case (csr, p) of
     (b__0, Supervisor) =>
      if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__0 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_CY w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
      else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__1 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_TM w__1  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
      else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__2 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_IR w__2  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
      else
        sail2_state_monad$returnS ((case (b__0, Supervisor) of
          (g__31, g__32) =>
           if (((((zopz0zIzJ_u (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)
                      csr)) /\ ((zopz0zIzJ_u csr
                      (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  :  12 words$word)))))) then
             F
           else T
        ))
   | (b__3, User) =>
      if (((b__3 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS scounteren_ref) (\ (w__6 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_CY w__6  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
      else if (((b__3 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS scounteren_ref) (\ (w__7 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_TM w__7  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
      else if (((b__3 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS scounteren_ref) (\ (w__8 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_IR w__8  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
      else
        sail2_state_monad$returnS ((case (b__3, User) of
          (g__31, g__32) =>
           if (((((zopz0zIzJ_u (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)
                      csr)) /\ ((zopz0zIzJ_u csr
                      (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  :  12 words$word)))))) then
             F
           else T
        ))
   | (g__31, g__32) =>
      sail2_state_monad$returnS (if (((((zopz0zIzJ_u (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)
                         csr)) /\ ((zopz0zIzJ_u csr
                         (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  :  12 words$word)))))) then
                F
              else T)
   )))`;


(*val check_CSR : mword ty12 -> Privilege -> bool -> M bool*)

val _ = Define `
 ((check_CSR:(12)words$word -> Privilege -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege) (isWrite : bool)=
    (sail2_state$and_boolS (sail2_state_monad$returnS ((is_CSR_defined csr p)))
     (sail2_state$and_boolS
        (sail2_state_monad$returnS ((check_CSR_access ((csrAccess csr  :  2 words$word)) ((csrPriv csr  :  2 words$word)) p
                    isWrite))) (sail2_state$and_boolS ((check_TVM_SATP csr p)) ((check_Counteren csr p))))))`;


(*val exception_delegatee : ExceptionType -> Privilege -> M Privilege*)

val _ = Define `
 ((exception_delegatee:ExceptionType -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((Privilege),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (e : ExceptionType) (p : Privilege)=
    (let idx = (num_of_ExceptionType e) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS medeleg_ref) (\ (w__0 : Medeleg) . 
   let super = (access_vec_dec ((get_Medeleg_bits w__0  :  64 words$word)) idx) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS sedeleg_ref) (\ (w__1 : Sedeleg) . 
   let user = (access_vec_dec ((get_Sedeleg_bits w__1  :  64 words$word)) idx) in sail2_state_monad$bindS
   (sail2_state$and_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS misa_ref) (\ (w__2 : Misa) . 
      sail2_state_monad$returnS (((((get_Misa_S w__2  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))))
     (sail2_state_monad$returnS ((bit_to_bool super)))) (\ (w__3 : bool) . 
   let deleg = (if w__3 then Supervisor else Machine) in
   sail2_state_monad$returnS (if ((zopz0zI_u ((privLevel_to_bits deleg  :  2 words$word))
                  ((privLevel_to_bits p  :  2 words$word)))) then
             p
           else deleg))))))`;


(*val findPendingInterrupt : mword ty64 -> maybe InterruptType*)

val _ = Define `
 ((findPendingInterrupt:(64)words$word ->(InterruptType)option) ip=
    (let ip = (Mk_Minterrupts ip) in
   if (((((get_Minterrupts_MEI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
     SOME I_M_External
   else if (((((get_Minterrupts_MSI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_M_Software
   else if (((((get_Minterrupts_MTI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_M_Timer
   else if (((((get_Minterrupts_SEI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_S_External
   else if (((((get_Minterrupts_SSI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_S_Software
   else if (((((get_Minterrupts_STI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_S_Timer
   else if (((((get_Minterrupts_UEI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_U_External
   else if (((((get_Minterrupts_USI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_U_Software
   else if (((((get_Minterrupts_UTI ip  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
   then
     SOME I_U_Timer
   else NONE))`;


(*val curInterrupt : Privilege -> Minterrupts -> Minterrupts -> Minterrupts -> M (maybe ((InterruptType * Privilege)))*)

val _ = Define `
 ((curInterrupt:Privilege -> Minterrupts -> Minterrupts -> Minterrupts ->(regstate)sail2_state_monad$sequential_state ->((((InterruptType#Privilege)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (priv : Privilege) (pend : Minterrupts) (enbl : Minterrupts) (delg : Minterrupts)=
    (let (en_mip : xlenbits) =
     ((and_vec ((get_Minterrupts_bits pend  :  64 words$word))
        ((get_Minterrupts_bits enbl  :  64 words$word))
       :  64 words$word)) in
   if (((en_mip = ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))) then
     sail2_state_monad$returnS NONE
   else sail2_state_monad$bindS
     (sail2_state$or_boolS
       (sail2_state_monad$returnS (((((privLevel_to_bits priv  :  2 words$word)) <> ((privLevel_to_bits Machine  :  2 words$word))))))
       (sail2_state$and_boolS
          (sail2_state_monad$returnS (((((privLevel_to_bits priv  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word))))))
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
           sail2_state_monad$returnS (((((get_Mstatus_MIE w__0  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))) (\ eff_mie .  sail2_state_monad$bindS
     (sail2_state$or_boolS
       (sail2_state_monad$returnS (((((privLevel_to_bits priv  :  2 words$word)) = ((privLevel_to_bits User  :  2 words$word))))))
       (sail2_state$and_boolS
          (sail2_state_monad$returnS (((((privLevel_to_bits priv  :  2 words$word)) = ((privLevel_to_bits Supervisor  :  2 words$word))))))
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) . 
           sail2_state_monad$returnS (((((get_Mstatus_SIE w__2  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))) (\ eff_sie . 
     let eff_mip =
       ((and_vec en_mip ((not_vec ((get_Minterrupts_bits delg  :  64 words$word))  :  64 words$word))
         :  64 words$word)) in
     let eff_sip = ((and_vec en_mip ((get_Minterrupts_bits delg  :  64 words$word))  :  64 words$word)) in
     if (((eff_mie /\ (((eff_mip <> ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word)))))))) then
       (case ((findPendingInterrupt eff_mip)) of
         SOME (i) =>
          let r = (i, Machine) in
          sail2_state_monad$returnS (SOME r)
       | NONE =>
          internal_error
            ((STRCAT "non-zero eff_mip="
                ((STRCAT ((string_of_bits eff_mip)) ", but nothing pending"))))
       )
     else if (((eff_sie /\ (((eff_sip <> ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))))))
     then
       (case ((findPendingInterrupt eff_sip)) of
         SOME (i) =>
          let r = (i, Supervisor) in
          sail2_state_monad$returnS (SOME r)
       | NONE =>
          internal_error
            ((STRCAT "non-zero eff_sip="
                ((STRCAT ((string_of_bits eff_sip)) ", but nothing pending"))))
       )
     else
       let p =
         (if (((((get_Minterrupts_MTI pend  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
         then
           "1"
         else "0") in
       let e =
         (if (((((get_Minterrupts_MTI enbl  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
         then
           "1"
         else "0") in
       let d =
         (if (((((get_Minterrupts_MTI delg  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
         then
           "1"
         else "0") in
       let (_ : unit) =
         (print_endline
           ((STRCAT " MTI: pend="
               ((STRCAT p
                   ((STRCAT " enbl=" ((STRCAT e ((STRCAT " delg=" d))))))))))) in
       let eff_mip =
         ((and_vec en_mip ((not_vec ((get_Minterrupts_bits delg  :  64 words$word))  :  64 words$word))
           :  64 words$word)) in
       let eff_sip = ((and_vec en_mip ((get_Minterrupts_bits delg  :  64 words$word))  :  64 words$word)) in sail2_state_monad$bindS
       (sail2_state_monad$read_regS mstatus_ref) (\ (w__8 : Mstatus) .  sail2_state_monad$bindS
       (sail2_state_monad$read_regS mstatus_ref) (\ (w__9 : Mstatus) .  sail2_state_monad$bindS
       (sail2_state_monad$read_regS mstatus_ref) (\ (w__10 : Mstatus) . 
       let (_ : unit) =
         (print_endline
           ((STRCAT "mstatus="
               ((STRCAT ((string_of_bits ((get_Mstatus_bits w__8  :  64 words$word))))
                   ((STRCAT " mie,sie="
                       ((STRCAT ((string_of_bits ((get_Mstatus_MIE w__9  :  1 words$word))))
                           ((STRCAT ","
                               ((STRCAT
                                   ((string_of_bits ((get_Mstatus_SIE w__10  :  1 words$word))))
                                   ((STRCAT " en_mip="
                                       ((STRCAT ((string_of_bits en_mip))
                                           ((STRCAT " eff_mip="
                                               ((STRCAT ((string_of_bits eff_mip))
                                                   ((STRCAT " eff_sip="
                                                       ((string_of_bits eff_sip))))))))))))))))))))))))) in
       sail2_state_monad$returnS NONE)))))))`;


(*val tval : maybe (mword ty64) -> mword ty64*)

val _ = Define `
 ((tval:((64)words$word)option ->(64)words$word) excinfo=
    ((case excinfo of
     SOME (e) => e
   | NONE => (EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word)
   )))`;


(*val handle_trap : Privilege -> bool -> mword ty4 -> mword ty64 -> maybe (mword ty64) -> M (mword ty64)*)

val _ = Define `
 ((handle_trap:Privilege -> bool ->(4)words$word ->(64)words$word ->(xlenbits)option ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (del_priv : Privilege) (intr : bool) (c : exc_code) (pc : xlenbits) (info :
   xlenbits option)=
    (let (_ : unit) =
     (print_endline
       ((STRCAT "handling "
           ((STRCAT (if intr then "int#" else "exc#")
               ((STRCAT ((string_of_bits c))
                   ((STRCAT " at priv "
                       ((STRCAT ((privLevel_to_str del_priv))
                           ((STRCAT " with tval "
                               ((string_of_bits ((tval info  :  64 words$word))))))))))))))))) in
   (case del_priv of
     Machine => sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mcause_IsInterrupt mcause_ref ((bool_to_bits intr  :  1 words$word)))
      (set_Mcause_Cause mcause_ref ((EXTZ (( 63 : int):ii) c  :  63 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_MPIE mstatus_ref ((get_Mstatus_MIE w__0  :  1 words$word)))
      (set_Mstatus_MIE mstatus_ref ((bool_to_bits F  :  1 words$word))))
      (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__1 : Privilege) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_MPP mstatus_ref ((privLevel_to_bits w__1  :  2 words$word)))
      (sail2_state_monad$write_regS mtval_ref ((tval info  :  64 words$word))))
      (sail2_state_monad$write_regS mepc_ref pc))
      (sail2_state_monad$write_regS cur_privilege_ref del_priv))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__3 : Mstatus) . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "CSR mstatus <- "
              ((STRCAT ((string_of_bits ((get_Mstatus_bits w__2  :  64 words$word))))
                  ((STRCAT " (input: "
                      ((STRCAT ((string_of_bits ((get_Mstatus_bits w__3  :  64 words$word)))) ")"))))))))) in
      let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS mtvec_ref) (\ (w__4 : Mtvec) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mcause_ref) (\ (w__5 : Mcause) . 
      (case ((tvec_addr w__4 w__5  :  ( 64 words$word)option)) of
        SOME (epc) => sail2_state_monad$returnS epc
      | NONE => (internal_error "Invalid mtvec mode"  : ( 64 words$word) M)
      )))))))
   | Supervisor => sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mcause_IsInterrupt scause_ref ((bool_to_bits intr  :  1 words$word)))
      (set_Mcause_Cause scause_ref ((EXTZ (( 63 : int):ii) c  :  63 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__8 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_SPIE mstatus_ref ((get_Mstatus_SIE w__8  :  1 words$word)))
      (set_Mstatus_SIE mstatus_ref ((bool_to_bits F  :  1 words$word))))
      (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__9 : Privilege) .  sail2_state_monad$bindS
      (case w__9 of
        User => sail2_state_monad$returnS ((bool_to_bits F  :  1 words$word))
      | Supervisor => sail2_state_monad$returnS ((bool_to_bits T  :  1 words$word))
      | Machine => (internal_error "invalid privilege for s-mode trap"  : ( 1 words$word) M)
      ) (\ (w__11 :  1 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_SPP mstatus_ref w__11)
      (sail2_state_monad$write_regS stval_ref ((tval info  :  64 words$word))))
      (sail2_state_monad$write_regS sepc_ref pc))
      (sail2_state_monad$write_regS cur_privilege_ref del_priv))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__12 : Mstatus) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__13 : Mstatus) . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "CSR mstatus <- "
              ((STRCAT ((string_of_bits ((get_Mstatus_bits w__12  :  64 words$word))))
                  ((STRCAT " (input: "
                      ((STRCAT ((string_of_bits ((get_Mstatus_bits w__13  :  64 words$word))))
                          ")"))))))))) in
      let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS stvec_ref) (\ (w__14 : Mtvec) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS scause_ref) (\ (w__15 : Mcause) . 
      (case ((tvec_addr w__14 w__15  :  ( 64 words$word)option)) of
        SOME (epc) => sail2_state_monad$returnS epc
      | NONE => (internal_error "Invalid stvec mode"  : ( 64 words$word) M)
      ))))))))
   | User => (internal_error "the N extension is currently unsupported"  : ( 64 words$word) M)
   )))`;


(*val handle_exception : Privilege -> ctl_result -> mword ty64 -> M (mword ty64)*)

val _ = Define `
 ((handle_exception:Privilege -> ctl_result ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (cur_priv : Privilege) (ctl : ctl_result) (pc : xlenbits)=
    ((case (cur_priv, ctl) of
     (_, CTL_TRAP (e)) => sail2_state_monad$bindS
      (exception_delegatee e.sync_exception_trap cur_priv) (\ del_priv . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "trapping from "
              ((STRCAT ((privLevel_to_str cur_priv))
                  ((STRCAT " to "
                      ((STRCAT ((privLevel_to_str del_priv))
                          ((STRCAT " to handle "
                              ((exceptionType_to_str e.sync_exception_trap))))))))))))) in
      (handle_trap del_priv F ((exceptionType_to_bits e.sync_exception_trap  :  4 words$word)) pc
         e.sync_exception_excinfo
        : ( 64 words$word) M))
   | (_, CTL_MRET (_)) => sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ prev_priv .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_MIE mstatus_ref ((get_Mstatus_MPIE w__1  :  1 words$word)))
      (set_Mstatus_MPIE mstatus_ref ((bool_to_bits T  :  1 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS cur_privilege_ref ((privLevel_of_bits ((get_Mstatus_MPP w__2  :  2 words$word)))))
      (set_Mstatus_MPP mstatus_ref ((privLevel_to_bits User  :  2 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__3 : Mstatus) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__4 : Mstatus) . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "CSR mstatus <- "
              ((STRCAT ((string_of_bits ((get_Mstatus_bits w__3  :  64 words$word))))
                  ((STRCAT " (input: "
                      ((STRCAT ((string_of_bits ((get_Mstatus_bits w__4  :  64 words$word)))) ")"))))))))) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__5 : Privilege) . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "ret-ing from "
              ((STRCAT ((privLevel_to_str prev_priv))
                  ((STRCAT " to " ((privLevel_to_str w__5))))))))) in
      let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS mepc_ref  : ( 64 words$word) M) (\ (w__6 :  64 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 64 words$word) M) (\ (w__7 :  64 words$word) . 
      sail2_state_monad$returnS ((and_vec w__6 w__7  :  64 words$word))))))))))
   | (_, CTL_SRET (_)) => sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ prev_priv .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__8 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_SIE mstatus_ref ((get_Mstatus_SPIE w__8  :  1 words$word)))
      (set_Mstatus_SPIE mstatus_ref ((bool_to_bits T  :  1 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__9 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS
        cur_privilege_ref
        (if (((((get_Mstatus_SPP w__9  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))
         then
           Supervisor
         else User))
      (set_Mstatus_SPP mstatus_ref ((bool_to_bits F  :  1 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__10 : Mstatus) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__11 : Mstatus) . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "CSR mstatus <- "
              ((STRCAT ((string_of_bits ((get_Mstatus_bits w__10  :  64 words$word))))
                  ((STRCAT " (input: "
                      ((STRCAT ((string_of_bits ((get_Mstatus_bits w__11  :  64 words$word))))
                          ")"))))))))) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__12 : Privilege) . 
      let (_ : unit) =
        (print_endline
          ((STRCAT "ret-ing from "
              ((STRCAT ((privLevel_to_str prev_priv))
                  ((STRCAT " to " ((privLevel_to_str w__12))))))))) in
      let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS sepc_ref  : ( 64 words$word) M) (\ (w__13 :  64 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 64 words$word) M) (\ (w__14 :  64 words$word) . 
      sail2_state_monad$returnS ((and_vec w__13 w__14  :  64 words$word))))))))))
   )))`;


(*val handle_mem_exception : mword ty64 -> ExceptionType -> M unit*)

val _ = Define `
 ((handle_mem_exception:(64)words$word -> ExceptionType ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (e : ExceptionType)=
    (let (t : sync_exception) = (<| sync_exception_trap := e;  sync_exception_excinfo := (SOME addr) |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  sail2_state_monad$bindS
   (handle_exception w__0 (CTL_TRAP t) w__1  : ( 64 words$word) M) (\ (w__2 : xlenbits) . 
   sail2_state_monad$write_regS nextPC_ref w__2)))))`;


(*val handle_decode_exception : mword ty64 -> M unit*)

val _ = Define `
 ((handle_decode_exception:(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) instbits=
    (let (t : sync_exception) =
     (<| sync_exception_trap := E_Illegal_Instr; 
        sync_exception_excinfo := (SOME instbits) |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  sail2_state_monad$bindS
   (handle_exception w__0 (CTL_TRAP t) w__1  : ( 64 words$word) M) (\ (w__2 : xlenbits) . 
   sail2_state_monad$write_regS nextPC_ref w__2)))))`;


(*val handle_interrupt : InterruptType -> Privilege -> M unit*)

val _ = Define `
 ((handle_interrupt:InterruptType -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (i : InterruptType) (del_priv : Privilege)=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (handle_trap del_priv T ((interruptType_to_bits i  :  4 words$word)) w__0 NONE
     : ( 64 words$word) M) (\ (w__1 : xlenbits) . 
   sail2_state_monad$write_regS nextPC_ref w__1))))`;


(*val handle_illegal : unit -> M unit*)

val _ = Define `
 ((handle_illegal:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (let (t : sync_exception) =
     (<| sync_exception_trap := E_Illegal_Instr; 
        sync_exception_excinfo := NONE |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  sail2_state_monad$bindS
   (handle_exception w__0 (CTL_TRAP t) w__1  : ( 64 words$word) M) (\ (w__2 : xlenbits) . 
   sail2_state_monad$write_regS nextPC_ref w__2)))))`;


(*val init_sys : unit -> M unit*)

val _ = Define `
 ((init_sys:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS cur_privilege_ref Machine)
   (sail2_state_monad$write_regS mhartid_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Misa_MXL misa_ref ((arch_to_bits RV64  :  2 words$word))))
   (set_Misa_A misa_ref ((bool_to_bits T  :  1 words$word))))
   (set_Misa_C misa_ref ((bool_to_bits T  :  1 words$word))))
   (set_Misa_I misa_ref ((bool_to_bits T  :  1 words$word))))
   (set_Misa_M misa_ref ((bool_to_bits T  :  1 words$word))))
   (set_Misa_U misa_ref ((bool_to_bits T  :  1 words$word))))
   (set_Misa_S misa_ref ((bool_to_bits T  :  1 words$word))))
   (sail2_state_monad$read_regS misa_ref)) (\ (w__0 : Misa) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_Mstatus_SXL mstatus_ref ((get_Misa_MXL w__0  :  2 words$word)))
   (sail2_state_monad$read_regS misa_ref)) (\ (w__1 : Misa) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (set_Mstatus_UXL mstatus_ref ((get_Misa_MXL w__1  :  2 words$word)))
   (set_Mstatus_SD mstatus_ref ((bool_to_bits F  :  1 words$word))))
   (set_Minterrupts_bits mip_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Minterrupts_bits mie_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Minterrupts_bits mideleg_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Medeleg_bits medeleg_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Mtvec_bits mtvec_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Mcause_bits mcause_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS mepc_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS mtval_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS mscratch_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS mcycle_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS mtime_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (set_Counteren_bits mcounteren_ref ((EXTZ (( 32 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  32 words$word))))
   (sail2_state_monad$write_regS minstret_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS minstret_written_ref F))
   (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) . 
   sail2_state_monad$returnS ((print_endline
              ((STRCAT "CSR mstatus <- "
                  ((STRCAT ((string_of_bits ((get_Mstatus_bits w__2  :  64 words$word))))
                      ((STRCAT " (input: "
                          ((STRCAT
                              ((string_of_bits
                                  ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))))
                              ")")))))))))))))))`;


(*val phys_mem_segments : unit -> list ((mword ty64 * mword ty64))*)

val _ = Define `
 ((phys_mem_segments:unit ->((64)words$word#(64)words$word)list) () =
    (((plat_rom_base ()   :  64 words$word), (plat_rom_size ()   :  64 words$word)) ::
     (((plat_ram_base ()   :  64 words$word), (plat_ram_size ()   :  64 words$word)) :: [])))`;


(*val within_phys_mem : mword ty64 -> integer -> bool*)

val _ = Define `
 ((within_phys_mem:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (if (((((zopz0zIzJ_u ((plat_ram_base ()   :  64 words$word)) addr)) /\ ((zopz0zIzJ_u ((add_vec_int addr width  :  64 words$word))
              ((add_vec ((plat_ram_base ()   :  64 words$word)) ((plat_ram_size ()   :  64 words$word))
                 :  64 words$word))))))) then
     T
   else if (((((zopz0zIzJ_u ((plat_rom_base ()   :  64 words$word)) addr)) /\ ((zopz0zIzJ_u ((add_vec_int addr width  :  64 words$word))
                   ((add_vec ((plat_rom_base ()   :  64 words$word)) ((plat_rom_size ()   :  64 words$word))
                      :  64 words$word))))))) then
     T
   else F))`;


(*val within_clint : mword ty64 -> integer -> bool*)

val _ = Define `
 ((within_clint:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((zopz0zIzJ_u ((plat_clint_base ()   :  64 words$word)) addr)) /\ ((zopz0zIzJ_u ((add_vec_int addr width  :  64 words$word))
         ((add_vec ((plat_clint_base ()   :  64 words$word)) ((plat_clint_size ()   :  64 words$word))
            :  64 words$word))))))`;


(*val within_htif_writable : mword ty64 -> integer -> bool*)

val _ = Define `
 ((within_htif_writable:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((plat_htif_tohost ()   :  64 words$word)) = addr))`;


(*val within_htif_readable : mword ty64 -> integer -> bool*)

val _ = Define `
 ((within_htif_readable:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((plat_htif_tohost ()   :  64 words$word)) = addr))`;


val _ = Define `
((MSIP_BASE:(64)words$word)=
   ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                B0;B0;B0;B0;B0;B0;B0;B0]
    :  64 words$word)))`;


val _ = Define `
((MTIMECMP_BASE:(64)words$word)=
   ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;
                B0;B0;B0;B0;B0;B0;B0;B0]
    :  64 words$word)))`;


val _ = Define `
((MTIME_BASE:(64)words$word)=
   ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;
                B1;B1;B1;B1;B1;B0;B0;B0]
    :  64 words$word)))`;


(*val clint_load : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((clint_load:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    (let addr = ((sub_vec addr ((plat_clint_base ()   :  64 words$word))  :  64 words$word)) in
   if ((((((addr = MSIP_BASE))) /\ ((((((width = (( 8 : int):ii)))) \/ (((width = (( 4 : int):ii))))))))))
   then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mip_ref) (\ (w__0 : Minterrupts) . 
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint["
             ((STRCAT ((string_of_bits addr))
                 ((STRCAT "] -> "
                     ((string_of_bits ((get_Minterrupts_MSI w__0  :  1 words$word))))))))))) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mip_ref) (\ (w__1 : Minterrupts) . 
     sail2_state_monad$returnS (MemValue ((zero_extend ((get_Minterrupts_MSI w__1  :  1 words$word))
                          (((( 8 : int):ii) * width))
                         :  'int8_times_n words$word)))))
   else if ((((((addr = MTIMECMP_BASE))) /\ (((width = (( 8 : int):ii))))))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__2 : xlenbits) . 
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint["
             ((STRCAT ((string_of_bits addr)) ((STRCAT "] -> " ((string_of_bits w__2))))))))) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__3 : xlenbits) . 
     sail2_state_monad$returnS (MemValue ((zero_extend w__3 (( 64 : int):ii)  :  'int8_times_n words$word)))))
   else if ((((((addr = MTIME_BASE))) /\ (((width = (( 8 : int):ii))))))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__4 : xlenbits) . 
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint["
             ((STRCAT ((string_of_bits addr)) ((STRCAT "] -> " ((string_of_bits w__4))))))))) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__5 : xlenbits) . 
     sail2_state_monad$returnS (MemValue ((zero_extend w__5 (( 64 : int):ii)  :  'int8_times_n words$word)))))
   else
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint[" ((STRCAT ((string_of_bits addr)) "] -> <not-mapped>"))))) in
     sail2_state_monad$returnS (MemException E_Load_Access_Fault)))`;


(*val clint_dispatch : unit -> M unit*)

val _ = Define `
 ((clint_dispatch:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__0 : xlenbits) . 
   let (_ : unit) = (print_endline ((STRCAT "clint::tick mtime <- " ((string_of_bits w__0))))) in sail2_state_monad$bindS (sail2_state_monad$seqS
   (set_Minterrupts_MTI mip_ref ((bool_to_bits F  :  1 words$word)))
   (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M)) (\ (w__1 : xlenbits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
   if ((zopz0zIzJ_u w__1 w__2)) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__3 : xlenbits) . 
     let (_ : unit) =
       (print_endline ((STRCAT " clint timer pending at mtime " ((string_of_bits w__3))))) in
     set_Minterrupts_MTI mip_ref ((bool_to_bits T  :  1 words$word)))
   else sail2_state_monad$returnS () )))))`;


(*val clint_store : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

val _ = Define `
 ((clint_store:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=
    (let addr = ((sub_vec addr ((plat_clint_base ()   :  64 words$word))  :  64 words$word)) in
   if ((((((addr = MSIP_BASE))) /\ ((((((width = (( 8 : int):ii)))) \/ (((width = (( 4 : int):ii))))))))))
   then
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint["
             ((STRCAT ((string_of_bits addr))
                 ((STRCAT "] <- "
                     ((STRCAT ((string_of_bits data))
                         ((STRCAT " (mip.MSI <- "
                             ((STRCAT
                                 ((string_of_bits
                                     ((cast_unit_vec0 ((access_vec_dec data (( 0 : int):ii)))  :  1 words$word))))
                                 ")"))))))))))))) in sail2_state_monad$seqS (sail2_state_monad$seqS
     (set_Minterrupts_MSI mip_ref
       ((bool_to_bits
           (((((cast_unit_vec0 ((access_vec_dec data (( 0 : int):ii)))  :  1 words$word)) = (vec_of_bits [B1]  :  1 words$word))))
          :  1 words$word)))
     (clint_dispatch () )) (sail2_state_monad$returnS (MemValue () ))
   else if ((((((addr = MTIMECMP_BASE))) /\ (((width = (( 8 : int):ii))))))) then
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint["
             ((STRCAT ((string_of_bits addr))
                 ((STRCAT "] <- " ((STRCAT ((string_of_bits data)) " (mtimecmp)"))))))))) in sail2_state_monad$seqS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS mtimecmp_ref ((zero_extend data (( 64 : int):ii)  :  64 words$word)))
     (clint_dispatch () )) (sail2_state_monad$returnS (MemValue () ))
   else
     let (_ : unit) =
       (print_endline
         ((STRCAT "clint["
             ((STRCAT ((string_of_bits addr))
                 ((STRCAT "] <- " ((STRCAT ((string_of_bits data)) " (<unmapped>)"))))))))) in
     sail2_state_monad$returnS (MemException E_SAMO_Access_Fault)))`;


(*val tick_clock : unit -> M unit*)

val _ = Define `
 ((tick_clock:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS mcycle_ref ((add_vec_int w__0 (( 1 : int):ii)  :  64 words$word)))
   (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) .  sail2_state_monad$seqS
   (sail2_state_monad$write_regS mtime_ref ((add_vec_int w__1 (( 1 : int):ii)  :  64 words$word))) (clint_dispatch () )))))`;


(*val Mk_htif_cmd : mword ty64 -> htif_cmd*)

val _ = Define `
 ((Mk_htif_cmd:(64)words$word -> htif_cmd) v=
    (<| htif_cmd_htif_cmd_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val _get_htif_cmd_bits : htif_cmd -> mword ty64*)

val _ = Define `
 ((get_htif_cmd_bits:htif_cmd ->(64)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val _set_htif_cmd_bits : register_ref regstate register_value htif_cmd -> mword ty64 -> M unit*)

val _ = Define `
 ((set_htif_cmd_bits:((regstate),(register_value),(htif_cmd))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_bits : htif_cmd -> mword ty64 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_bits:htif_cmd ->(64)words$word -> htif_cmd) v x=
    ((v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


(*val _get_htif_cmd_device : htif_cmd -> mword ty8*)

val _ = Define `
 ((get_htif_cmd_device:htif_cmd ->(8)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word)))`;


(*val _set_htif_cmd_device : register_ref regstate register_value htif_cmd -> mword ty8 -> M unit*)

val _ = Define `
 ((set_htif_cmd_device:((regstate),(register_value),(htif_cmd))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 56 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_device : htif_cmd -> mword ty8 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_device:htif_cmd ->(8)words$word -> htif_cmd) v x=
    ((v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 56 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word))|>)))`;


(*val _get_htif_cmd_cmd : htif_cmd -> mword ty8*)

val _ = Define `
 ((get_htif_cmd_cmd:htif_cmd ->(8)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 55 : int):ii) (( 48 : int):ii)  :  8 words$word)))`;


(*val _set_htif_cmd_cmd : register_ref regstate register_value htif_cmd -> mword ty8 -> M unit*)

val _ = Define `
 ((set_htif_cmd_cmd:((regstate),(register_value),(htif_cmd))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 55 : int):ii) (( 48 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_cmd : htif_cmd -> mword ty8 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_cmd:htif_cmd ->(8)words$word -> htif_cmd) v x=
    ((v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 55 : int):ii) (( 48 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word))|>)))`;


(*val _get_htif_cmd_payload : htif_cmd -> mword ty48*)

val _ = Define `
 ((get_htif_cmd_payload:htif_cmd ->(48)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word)))`;


(*val _set_htif_cmd_payload : register_ref regstate register_value htif_cmd -> mword ty48 -> M unit*)

val _ = Define `
 ((set_htif_cmd_payload:((regstate),(register_value),(htif_cmd))register_ref ->(48)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 47 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_payload : htif_cmd -> mword ty48 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_payload:htif_cmd ->(48)words$word -> htif_cmd) v x=
    ((v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 47 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
          :  64 words$word))|>)))`;


(*val htif_load : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((htif_load:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__0 : xlenbits) . 
   let (_ : unit) =
     (print_endline
       ((STRCAT "htif["
           ((STRCAT ((string_of_bits addr)) ((STRCAT "] -> " ((string_of_bits w__0))))))))) in
   if (((width = (( 8 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__1 : xlenbits) . 
     sail2_state_monad$returnS (MemValue ((zero_extend w__1 (( 64 : int):ii)  :  'int8_times_n words$word))))
   else sail2_state_monad$returnS (MemException E_Load_Access_Fault))))`;


(*val htif_store : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

val _ = Define `
 ((htif_store:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=
    (let (_ : unit) =
     (print_endline
       ((STRCAT "htif["
           ((STRCAT ((string_of_bits addr)) ((STRCAT "] <- " ((string_of_bits data))))))))) in
   let (cbits : xlenbits) = ((EXTZ (( 64 : int):ii) data  :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS htif_tohost_ref cbits)
   (let cmd = (Mk_htif_cmd cbits) in
   let b__0 = ((get_htif_cmd_device cmd  :  8 words$word)) in sail2_state_monad$seqS
   (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)))) then
      let (_ : unit) =
        (print_endline
          ((STRCAT "htif-syscall-proxy cmd: "
              ((string_of_bits ((get_htif_cmd_payload cmd  :  48 words$word))))))) in
      if (((((cast_unit_vec0 ((access_vec_dec ((get_htif_cmd_payload cmd  :  48 words$word)) (( 0 : int):ii)))
                :  1 words$word)) = (vec_of_bits [B1]  :  1 words$word)))) then sail2_state_monad$seqS
        (sail2_state_monad$write_regS htif_done_ref T)
        (sail2_state_monad$write_regS
          htif_exit_code_ref
          ((shift_bits_right
              ((zero_extend ((get_htif_cmd_payload cmd  :  48 words$word)) xlen  :  64 words$word))
              (vec_of_bits [B0;B1]  :  2 words$word)
             :  64 words$word)))
      else sail2_state_monad$returnS () 
    else
      sail2_state_monad$returnS (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)))) then
                let (_ : unit) =
                  (print_endline
                    ((STRCAT "htif-term cmd: "
                        ((string_of_bits ((get_htif_cmd_payload cmd  :  48 words$word))))))) in
                let b__2 = ((get_htif_cmd_cmd cmd  :  8 words$word)) in
                if (((b__2 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)))) then () 
                else if (((b__2 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)))) then
                  plat_term_write
                    ((subrange_vec_dec ((get_htif_cmd_payload cmd  :  48 words$word)) (( 7 : int):ii) (( 0 : int):ii)
                       :  8 words$word))
                else print_endline ((STRCAT "Unknown term cmd: " ((string_of_bits b__2))))
              else print_endline ((STRCAT "htif-???? cmd: " ((string_of_bits data))))))
   (sail2_state_monad$returnS (MemValue () )))))`;


(*val htif_tick : unit -> M unit*)

val _ = Define `
 ((htif_tick:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__0 : xlenbits) . 
   let (_ : unit) = (print_endline ((STRCAT "htif::tick " ((string_of_bits w__0))))) in
   sail2_state_monad$write_regS htif_tohost_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word)))))`;


(*val within_mmio_readable : mword ty64 -> integer -> bool*)

val _ = Define `
 ((within_mmio_readable:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((within_clint addr width)) \/ (((((within_htif_readable addr width)) /\ (((( 1 : int):ii) <= width)))))))`;


(*val within_mmio_writable : mword ty64 -> integer -> bool*)

val _ = Define `
 ((within_mmio_writable:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((within_clint addr width)) \/ (((((within_htif_writable addr width)) /\ ((width <= (( 8 : int):ii))))))))`;


(*val mmio_read : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((mmio_read:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (width : int)=
    (if ((within_clint addr width)) then
     (clint_load addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
   else if (((((within_htif_readable addr width)) /\ (((( 1 : int):ii) <= width))))) then
     (htif_load addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
   else sail2_state_monad$returnS (MemException E_Load_Access_Fault)))`;


(*val mmio_write : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

val _ = Define `
 ((mmio_write:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (width : int) (data : 'int8_times_n bits)=
    (if ((within_clint addr width)) then clint_store addr width data
   else if (((((within_htif_writable addr width)) /\ ((width <= (( 8 : int):ii)))))) then
     htif_store addr width data
   else sail2_state_monad$returnS (MemException E_SAMO_Access_Fault)))`;


(*val init_platform : unit -> M unit*)

val _ = Define `
 ((init_platform:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS htif_tohost_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word)))
   (sail2_state_monad$write_regS htif_done_ref F))
   (sail2_state_monad$write_regS htif_exit_code_ref ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word)))))`;


(*val tick_platform : unit -> M unit*)

val _ = Define `
 ((tick_platform:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (let (_ : unit) = (cancel_reservation () ) in
   htif_tick () ))`;


(*val is_aligned_addr : mword ty64 -> integer -> bool*)

val _ = Define `
 ((is_aligned_addr:(64)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((ex_int ((hardware_mod ((lem$w2ui addr)) width)))) = (( 0 : int):ii)))`;


(*val phys_mem_read : forall 'int8_times_n. Size 'int8_times_n => ReadType -> mword ty64 -> integer -> bool -> bool -> bool -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((phys_mem_read:ReadType ->(64)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ReadType) (addr : xlenbits) (width : int) (aq : bool) (rl : bool) (res :
  bool)=  (sail2_state_monad$bindS
   (RISCV_read addr width aq rl res  : ( ( 'int8_times_n words$word)option) M) (\ (w__0 :
      ( 'int8_times_n words$word)option) . 
   sail2_state_monad$returnS ((case (t, w__0) of
     (Instruction, NONE) => MemException E_Fetch_Access_Fault
   | (Data, NONE) => MemException E_Load_Access_Fault
   | (_, SOME (v)) =>
      let (_ : unit) =
        (print_endline
          ((STRCAT "mem["
              ((STRCAT ((readType_to_str t))
                  ((STRCAT ","
                      ((STRCAT ((string_of_bits addr))
                          ((STRCAT "] -> " ((string_of_bits v))))))))))))) in
      MemValue v
   )))))`;


(*val checked_mem_read : forall 'int8_times_n. Size 'int8_times_n => ReadType -> mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((checked_mem_read:ReadType ->(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ReadType) (addr : xlenbits) (width : int)=
    (if ((((((((readType_to_str t)) = ((readType_to_str Data))))) /\ ((within_mmio_readable addr width))))) then
     (mmio_read addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
   else if ((within_phys_mem addr width)) then
     (phys_mem_read t addr width F F F  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
   else sail2_state_monad$returnS (MemException E_Load_Access_Fault)))`;


(*val MEMr : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_strong_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_reserved : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_reserved_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_reserved_strong_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((MEMr0:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=  ((checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)))`;


val _ = Define `
 ((MEMr_acquire0:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    ((checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)))`;


val _ = Define `
 ((MEMr_strong_acquire0:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    ((checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)))`;


val _ = Define `
 ((MEMr_reserved0:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    ((checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)))`;


val _ = Define `
 ((MEMr_reserved_acquire0:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    ((checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)))`;


val _ = Define `
 ((MEMr_reserved_strong_acquire0:(64)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=
    ((checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)))`;


(*val mem_read : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> bool -> bool -> bool -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((mem_read:(64)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width aq rl res=
    (if ((((((aq \/ res))) /\ ((~ ((is_aligned_addr addr width))))))) then
     sail2_state_monad$returnS (MemException E_Load_Addr_Align)
   else
     (case (aq, rl, res) of
       (F, F, F) =>
        (checked_mem_read Data addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
     | (T, F, F) => (MEMr_acquire0 addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
     | (F, F, T) =>
        (MEMr_reserved0 addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
     | (T, F, T) =>
        (MEMr_reserved_acquire0 addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
     | (F, T, F) => sail2_state_monad$throwS (Error_not_implemented "load.rl")
     | (T, T, F) =>
        (MEMr_strong_acquire0 addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
     | (F, T, T) => sail2_state_monad$throwS (Error_not_implemented "lr.rl")
     | (T, T, T) =>
        (MEMr_reserved_strong_acquire0 addr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
     )))`;


(*val mem_write_ea : mword ty64 -> integer -> bool -> bool -> bool -> M (MemoryOpResult unit)*)

val _ = Define `
 ((mem_write_ea:(64)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width aq rl con=
    (if ((((((rl \/ con))) /\ ((~ ((is_aligned_addr addr width))))))) then
     sail2_state_monad$returnS (MemException E_SAMO_Addr_Align)
   else
     (case (aq, rl, con) of
       (F, F, F) => sail2_state_monad$seqS (MEMea addr width) (sail2_state_monad$returnS (MemValue () ))
     | (F, T, F) => sail2_state_monad$seqS (MEMea_release addr width) (sail2_state_monad$returnS (MemValue () ))
     | (F, F, T) => sail2_state_monad$seqS (MEMea_conditional addr width) (sail2_state_monad$returnS (MemValue () ))
     | (F, T, T) => sail2_state_monad$seqS (MEMea_conditional_release addr width) (sail2_state_monad$returnS (MemValue () ))
     | (T, F, F) => sail2_state_monad$throwS (Error_not_implemented "store.aq")
     | (T, T, F) => sail2_state_monad$seqS (MEMea_strong_release addr width) (sail2_state_monad$returnS (MemValue () ))
     | (T, F, T) => sail2_state_monad$throwS (Error_not_implemented "sc.aq")
     | (T, T, T) => sail2_state_monad$seqS (MEMea_conditional_strong_release addr width) (sail2_state_monad$returnS (MemValue () ))
     )))`;


(*val phys_mem_write : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

val _ = Define `
 ((phys_mem_write:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (width : int) (data : 'int8_times_n bits)=
    (let (_ : unit) =
     (print_endline
       ((STRCAT "mem["
           ((STRCAT ((string_of_bits addr)) ((STRCAT "] <- " ((string_of_bits data))))))))) in sail2_state_monad$bindS
   (RISCV_write addr width data) (\ (w__0 : bool) . 
   sail2_state_monad$returnS (if w__0 then MemValue () 
           else MemException E_SAMO_Access_Fault))))`;


(*val checked_mem_write : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

val _ = Define `
 ((checked_mem_write:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (width : int) (data : 'int8_times_n bits)=
    (if ((within_mmio_writable addr width)) then mmio_write addr width data
   else if ((within_phys_mem addr width)) then phys_mem_write addr width data
   else sail2_state_monad$returnS (MemException E_SAMO_Access_Fault)))`;


(*val MEMval : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_strong_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_conditional : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_conditional_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_conditional_strong_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

val _ = Define `
 ((MEMval:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (checked_mem_write addr width data))`;


val _ = Define `
 ((MEMval_release:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (checked_mem_write addr width data))`;


val _ = Define `
 ((MEMval_strong_release:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (checked_mem_write addr width data))`;


val _ = Define `
 ((MEMval_conditional:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (checked_mem_write addr width data))`;


val _ = Define `
 ((MEMval_conditional_release:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (checked_mem_write addr width data))`;


val _ = Define `
 ((MEMval_conditional_strong_release:(64)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=  (checked_mem_write addr width data))`;


(*val mem_write_value : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> bool -> bool -> bool -> M (MemoryOpResult unit)*)

val _ = Define `
 ((mem_write_value:(64)words$word -> int -> 'int8_times_n words$word -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width value aq rl con=
    (if ((((((rl \/ con))) /\ ((~ ((is_aligned_addr addr width))))))) then
     sail2_state_monad$returnS (MemException E_SAMO_Addr_Align)
   else
     (case (aq, rl, con) of
       (F, F, F) => checked_mem_write addr width value
     | (F, T, F) => MEMval_release addr width value
     | (F, F, T) => MEMval_conditional addr width value
     | (F, T, T) => MEMval_conditional_release addr width value
     | (T, F, F) => sail2_state_monad$throwS (Error_not_implemented "store.aq")
     | (T, T, F) => MEMval_strong_release addr width value
     | (T, F, T) => sail2_state_monad$throwS (Error_not_implemented "sc.aq")
     | (T, T, T) => MEMval_conditional_strong_release addr width value
     )))`;


val _ = Define `
 ((PAGESIZE_BITS:int)=  ((( 12 : int):ii)))`;


(*val Mk_PTE_Bits : mword ty8 -> PTE_Bits*)

val _ = Define `
 ((Mk_PTE_Bits:(8)words$word -> PTE_Bits) v=
    (<| PTE_Bits_PTE_Bits_chunk_0 := ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) |>))`;


(*val _get_PTE_Bits_bits : PTE_Bits -> mword ty8*)

val _ = Define `
 ((get_PTE_Bits_bits:PTE_Bits ->(8)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_PTE_Bits_bits : register_ref regstate register_value PTE_Bits -> mword ty8 -> M unit*)

val _ = Define `
 ((set_PTE_Bits_bits:((regstate),(register_value),(PTE_Bits))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_PTE_Bits_bits : PTE_Bits -> mword ty8 -> PTE_Bits*)

val _ = Define `
 ((update_PTE_Bits_bits:PTE_Bits ->(8)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_D:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_D:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_D:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_A:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_A:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_A:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_G:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_G:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_G:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_U:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_U:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_U:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_X:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_X:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_X:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_W:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_W:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_W:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_R:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_R:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_R:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


val _ = Define `
 ((get_PTE_Bits_V:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_V:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_V:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    ((v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word))|>)))`;


(*val isPTEPtr : mword ty8 -> bool*)

val _ = Define `
 ((isPTEPtr:(8)words$word -> bool) p=
    (let a = (Mk_PTE_Bits p) in
   ((((((get_PTE_Bits_R a  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) /\ ((((((((get_PTE_Bits_W a  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) /\ (((((get_PTE_Bits_X a  :  1 words$word)) = ((bool_to_bits F  :  1 words$word)))))))))))`;


(*val isInvalidPTE : mword ty8 -> bool*)

val _ = Define `
 ((isInvalidPTE:(8)words$word -> bool) p=
    (let a = (Mk_PTE_Bits p) in
   ((((((get_PTE_Bits_V a  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) \/ ((((((((get_PTE_Bits_W a  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ (((((get_PTE_Bits_R a  :  1 words$word)) = ((bool_to_bits F  :  1 words$word)))))))))))`;


(*val checkPTEPermission : AccessType -> Privilege -> bool -> bool -> PTE_Bits -> M bool*)

val _ = Define `
 ((checkPTEPermission:AccessType -> Privilege -> bool -> bool -> PTE_Bits ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) (p :
  PTE_Bits)=
    ((case (ac, priv) of
     (Read, User) =>
      sail2_state_monad$returnS ((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ mxr)))))))))
   | (Write, User) =>
      sail2_state_monad$returnS ((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ (((((get_PTE_Bits_W p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))
   | (ReadWrite, User) =>
      sail2_state_monad$returnS ((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ ((((((((get_PTE_Bits_W p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ mxr))))))))))))
   | (Execute, User) =>
      sail2_state_monad$returnS ((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ (((((get_PTE_Bits_X p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))
   | (Read, Supervisor) =>
      sail2_state_monad$returnS (((((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) \/ do_sum))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ mxr)))))))))
   | (Write, Supervisor) =>
      sail2_state_monad$returnS (((((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) \/ do_sum))) /\ (((((get_PTE_Bits_W p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))
   | (ReadWrite, Supervisor) =>
      sail2_state_monad$returnS (((((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) \/ do_sum))) /\ ((((((((get_PTE_Bits_W p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) /\ mxr))))))))))))
   | (Execute, Supervisor) =>
      sail2_state_monad$returnS ((((((((get_PTE_Bits_U p  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) /\ (((((get_PTE_Bits_X p  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))))
   | (_, Machine) => internal_error "m-mode mem perm check"
   )))`;


(*val update_PTE_Bits : PTE_Bits -> AccessType -> maybe PTE_Bits*)

val _ = Define `
 ((update_PTE_Bits:PTE_Bits -> AccessType ->(PTE_Bits)option) (p : PTE_Bits) (a : AccessType)=
    (let update_d =
     (((((((((accessType_to_str a)) = ((accessType_to_str Write))))) \/ (((((accessType_to_str a)) = ((accessType_to_str ReadWrite)))))))) /\ (((((get_PTE_Bits_D p  :  1 words$word)) = ((bool_to_bits F  :  1 words$word)))))) in
   let update_a = (((get_PTE_Bits_A p  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))) in
   if (((update_d \/ update_a))) then
     let np = (update_PTE_Bits_A p ((bool_to_bits T  :  1 words$word))) in
     let np = (if update_d then update_PTE_Bits_D p ((bool_to_bits T  :  1 words$word)) else np) in
     SOME np
   else NONE))`;


(*val PTW_Error_of_num : integer -> PTW_Error*)

val _ = Define `
 ((PTW_Error_of_num:int -> PTW_Error) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then PTW_Access
   else if (((p0_ = (( 1 : int):ii)))) then PTW_Invalid_PTE
   else if (((p0_ = (( 2 : int):ii)))) then PTW_No_Permission
   else if (((p0_ = (( 3 : int):ii)))) then PTW_Misaligned
   else PTW_PTE_Update))`;


(*val num_of_PTW_Error : PTW_Error -> integer*)

val _ = Define `
 ((num_of_PTW_Error:PTW_Error -> int) arg_=
    ((case arg_ of
     PTW_Access => (( 0 : int):ii)
   | PTW_Invalid_PTE => (( 1 : int):ii)
   | PTW_No_Permission => (( 2 : int):ii)
   | PTW_Misaligned => (( 3 : int):ii)
   | PTW_PTE_Update => (( 4 : int):ii)
   )))`;


(*val ptw_error_to_str : PTW_Error -> string*)

val _ = Define `
 ((ptw_error_to_str:PTW_Error -> string) e=
    ((case e of
     PTW_Access => "mem-access-error"
   | PTW_Invalid_PTE => "invalid-pte"
   | PTW_No_Permission => "no-permission"
   | PTW_Misaligned => "misaligned-superpage"
   | PTW_PTE_Update => "pte-update-needed"
   )))`;


(*val translationException : AccessType -> PTW_Error -> ExceptionType*)

val _ = Define `
 ((translationException:AccessType -> PTW_Error -> ExceptionType) (a : AccessType) (f : PTW_Error)=
    ((case (a, f) of
     (ReadWrite, PTW_Access) => E_SAMO_Access_Fault
   | (ReadWrite, _) => E_SAMO_Page_Fault
   | (Read, PTW_Access) => E_Load_Access_Fault
   | (Read, _) => E_Load_Page_Fault
   | (Write, PTW_Access) => E_SAMO_Access_Fault
   | (Write, _) => E_SAMO_Page_Fault
   | (Fetch, PTW_Access) => E_Fetch_Access_Fault
   | (Fetch, _) => E_Fetch_Page_Fault
   )))`;


val _ = Define `
 ((SV39_LEVEL_BITS:int)=  ((( 9 : int):ii)))`;


val _ = Define `
 ((SV39_LEVELS:int)=  ((( 3 : int):ii)))`;


val _ = Define `
 ((PTE39_LOG_SIZE:int)=  ((( 3 : int):ii)))`;


val _ = Define `
 ((PTE39_SIZE:int)=  ((( 8 : int):ii)))`;


(*val Mk_SV39_Vaddr : mword ty39 -> SV39_Vaddr*)

val _ = Define `
 ((Mk_SV39_Vaddr:(39)words$word -> SV39_Vaddr) v=
    (<| SV39_Vaddr_SV39_Vaddr_chunk_0 := ((subrange_vec_dec v (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word)) |>))`;


(*val _get_SV39_Vaddr_bits : SV39_Vaddr -> mword ty39*)

val _ = Define `
 ((get_SV39_Vaddr_bits:SV39_Vaddr ->(39)words$word) v=
    ((subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word)))`;


(*val _set_SV39_Vaddr_bits : register_ref regstate register_value SV39_Vaddr -> mword ty39 -> M unit*)

val _ = Define `
 ((set_SV39_Vaddr_bits:((regstate),(register_value),(SV39_Vaddr))register_ref ->(39)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word))
            :  39 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_Vaddr_bits : SV39_Vaddr -> mword ty39 -> SV39_Vaddr*)

val _ = Define `
 ((update_SV39_Vaddr_bits:SV39_Vaddr ->(39)words$word -> SV39_Vaddr) v x=
    ((v with<|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word))
          :  39 words$word))|>)))`;


(*val _get_SV39_Vaddr_VPNi : SV39_Vaddr -> mword ty27*)

val _ = Define `
 ((get_SV39_Vaddr_VPNi:SV39_Vaddr ->(27)words$word) v=
    ((subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)  :  27 words$word)))`;


(*val _set_SV39_Vaddr_VPNi : register_ref regstate register_value SV39_Vaddr -> mword ty27 -> M unit*)

val _ = Define `
 ((set_SV39_Vaddr_VPNi:((regstate),(register_value),(SV39_Vaddr))register_ref ->(27)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
            :  39 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_Vaddr_VPNi : SV39_Vaddr -> mword ty27 -> SV39_Vaddr*)

val _ = Define `
 ((update_SV39_Vaddr_VPNi:SV39_Vaddr ->(27)words$word -> SV39_Vaddr) v x=
    ((v with<|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
          :  39 words$word))|>)))`;


(*val _get_SV39_Vaddr_PgOfs : SV39_Vaddr -> mword ty12*)

val _ = Define `
 ((get_SV39_Vaddr_PgOfs:SV39_Vaddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


(*val _set_SV39_Vaddr_PgOfs : register_ref regstate register_value SV39_Vaddr -> mword ty12 -> M unit*)

val _ = Define `
 ((set_SV39_Vaddr_PgOfs:((regstate),(register_value),(SV39_Vaddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  39 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_Vaddr_PgOfs : SV39_Vaddr -> mword ty12 -> SV39_Vaddr*)

val _ = Define `
 ((update_SV39_Vaddr_PgOfs:SV39_Vaddr ->(12)words$word -> SV39_Vaddr) v x=
    ((v with<|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  39 words$word))|>)))`;


(*val _update_SV39_Paddr_PgOfs : SV39_Paddr -> mword ty12 -> SV39_Paddr*)

(*val _get_SV39_Paddr_PgOfs : SV39_Paddr -> mword ty12*)

(*val _set_SV39_Paddr_PgOfs : register_ref regstate register_value SV39_Paddr -> mword ty12 -> M unit*)

(*val Mk_SV39_Paddr : mword ty56 -> SV39_Paddr*)

val _ = Define `
 ((Mk_SV39_Paddr:(56)words$word -> SV39_Paddr) v=
    (<| SV39_Paddr_SV39_Paddr_chunk_0 := ((subrange_vec_dec v (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word)) |>))`;


(*val _get_SV39_Paddr_bits : SV39_Paddr -> mword ty56*)

val _ = Define `
 ((get_SV39_Paddr_bits:SV39_Paddr ->(56)words$word) v=
    ((subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word)))`;


(*val _set_SV39_Paddr_bits : register_ref regstate register_value SV39_Paddr -> mword ty56 -> M unit*)

val _ = Define `
 ((set_SV39_Paddr_bits:((regstate),(register_value),(SV39_Paddr))register_ref ->(56)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
            :  56 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_Paddr_bits : SV39_Paddr -> mword ty56 -> SV39_Paddr*)

val _ = Define `
 ((update_SV39_Paddr_bits:SV39_Paddr ->(56)words$word -> SV39_Paddr) v x=
    ((v with<|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
          :  56 words$word))|>)))`;


(*val _get_SV39_Paddr_PPNi : SV39_Paddr -> mword ty44*)

val _ = Define `
 ((get_SV39_Paddr_PPNi:SV39_Paddr ->(44)words$word) v=
    ((subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)  :  44 words$word)))`;


(*val _set_SV39_Paddr_PPNi : register_ref regstate register_value SV39_Paddr -> mword ty44 -> M unit*)

val _ = Define `
 ((set_SV39_Paddr_PPNi:((regstate),(register_value),(SV39_Paddr))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  56 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_Paddr_PPNi : SV39_Paddr -> mword ty44 -> SV39_Paddr*)

val _ = Define `
 ((update_SV39_Paddr_PPNi:SV39_Paddr ->(44)words$word -> SV39_Paddr) v x=
    ((v with<|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  56 words$word))|>)))`;


(*val _update_SV39_PTE_PPNi : SV39_PTE -> mword ty44 -> SV39_PTE*)

(*val _get_SV39_PTE_PPNi : SV39_PTE -> mword ty44*)

(*val _set_SV39_PTE_PPNi : register_ref regstate register_value SV39_PTE -> mword ty44 -> M unit*)

val _ = Define `
 ((get_SV39_Paddr_PgOfs:SV39_Paddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


val _ = Define `
 ((set_SV39_Paddr_PgOfs:((regstate),(register_value),(SV39_Paddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Paddr_SV39_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  56 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Paddr_PgOfs:SV39_Paddr ->(12)words$word -> SV39_Paddr) v x=
    ((v with<|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  56 words$word))|>)))`;


(*val Mk_SV39_PTE : mword ty64 -> SV39_PTE*)

val _ = Define `
 ((Mk_SV39_PTE:(64)words$word -> SV39_PTE) v=
    (<| SV39_PTE_SV39_PTE_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


val _ = Define `
 ((get_SV39_PTE_bits:SV39_PTE ->(64)words$word) v=
    ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


val _ = Define `
 ((set_SV39_PTE_bits:((regstate),(register_value),(SV39_PTE))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_PTE_bits:SV39_PTE ->(64)words$word -> SV39_PTE) v x=
    ((v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word))|>)))`;


val _ = Define `
 ((get_SV39_PTE_PPNi:SV39_PTE ->(44)words$word) v=
    ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)  :  44 words$word)))`;


val _ = Define `
 ((set_SV39_PTE_PPNi:((regstate),(register_value),(SV39_PTE))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_PTE_PPNi:SV39_PTE ->(44)words$word -> SV39_PTE) v x=
    ((v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  64 words$word))|>)))`;


(*val _get_SV39_PTE_RSW : SV39_PTE -> mword ty2*)

val _ = Define `
 ((get_SV39_PTE_RSW:SV39_PTE ->(2)words$word) v=  ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word)))`;


(*val _set_SV39_PTE_RSW : register_ref regstate register_value SV39_PTE -> mword ty2 -> M unit*)

val _ = Define `
 ((set_SV39_PTE_RSW:((regstate),(register_value),(SV39_PTE))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_PTE_RSW : SV39_PTE -> mword ty2 -> SV39_PTE*)

val _ = Define `
 ((update_SV39_PTE_RSW:SV39_PTE ->(2)words$word -> SV39_PTE) v x=
    ((v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word))|>)))`;


(*val _get_SV39_PTE_BITS : SV39_PTE -> mword ty8*)

val _ = Define `
 ((get_SV39_PTE_BITS:SV39_PTE ->(8)words$word) v=  ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_SV39_PTE_BITS : register_ref regstate register_value SV39_PTE -> mword ty8 -> M unit*)

val _ = Define `
 ((set_SV39_PTE_BITS:((regstate),(register_value),(SV39_PTE))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     ((r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word))|>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_PTE_BITS : SV39_PTE -> mword ty8 -> SV39_PTE*)

val _ = Define `
 ((update_SV39_PTE_BITS:SV39_PTE ->(8)words$word -> SV39_PTE) v x=
    ((v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word))|>)))`;


(*val curAsid64 : unit -> M (mword ty16)*)

val _ = Define `
 ((curAsid64:unit ->(regstate)sail2_state_monad$sequential_state ->((((16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS satp_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let satp64 = (Mk_Satp64 w__0) in
   sail2_state_monad$returnS ((get_Satp64_Asid satp64  :  16 words$word)))))`;


(*val curPTB39 : unit -> M (mword ty56)*)

val _ = Define `
 ((curPTB39:unit ->(regstate)sail2_state_monad$sequential_state ->((((56)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS satp_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let satp64 = (Mk_Satp64 w__0) in
   sail2_state_monad$returnS ((EXTZ (( 56 : int):ii)
              ((shiftl ((get_Satp64_PPN satp64  :  44 words$word)) PAGESIZE_BITS  :  44 words$word))
             :  56 words$word)))))`;


(*val walk39 : mword ty39 -> AccessType -> Privilege -> bool -> bool -> mword ty56 -> ii -> bool -> M PTW_Result*)

 val walk39_defn = Hol_defn "walk39" `
 ((walk39:(39)words$word -> AccessType -> Privilege -> bool -> bool ->(56)words$word -> int -> bool ->(regstate)sail2_state_monad$sequential_state ->(((PTW_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vaddr ac priv mxr do_sum ptb level global=
    (let va = (Mk_SV39_Vaddr vaddr) in
   let (pt_ofs : paddr39) =
     ((shiftl
        ((EXTZ (( 56 : int):ii)
            ((subrange_vec_dec
                ((shiftr ((get_SV39_Vaddr_VPNi va  :  27 words$word))
                    ((level * SV39_LEVEL_BITS))
                   :  27 words$word)) ((SV39_LEVEL_BITS - (( 1 : int):ii))) (( 0 : int):ii)
               :  9 words$word))
           :  56 words$word)) PTE39_LOG_SIZE
       :  56 words$word)) in
   let pte_addr = ((add_vec ptb pt_ofs  :  56 words$word)) in sail2_state_monad$bindS
   (phys_mem_read Data ((EXTZ (( 64 : int):ii) pte_addr  :  64 words$word)) (( 8 : int):ii) F F F
     : ( ( 64 words$word)MemoryOpResult) M) (\ (w__0 : ( 64 words$word) MemoryOpResult) . 
   (case w__0 of
     MemException (_) => sail2_state_monad$returnS (PTW_Failure PTW_Access)
   | MemValue (v) =>
      let pte = (Mk_SV39_PTE v) in
      let pbits = ((get_SV39_PTE_BITS pte  :  8 words$word)) in
      let pattr = (Mk_PTE_Bits pbits) in
      let is_global =
        (global \/ (((((get_PTE_Bits_G pattr  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))) in
      if ((isInvalidPTE pbits)) then sail2_state_monad$returnS (PTW_Failure PTW_Invalid_PTE)
      else if ((isPTEPtr pbits)) then
        if (((level = (( 0 : int):ii)))) then sail2_state_monad$returnS (PTW_Failure PTW_Invalid_PTE)
        else
          walk39 vaddr ac priv mxr do_sum
            ((EXTZ (( 56 : int):ii)
                ((shiftl ((get_SV39_PTE_PPNi pte  :  44 words$word)) PAGESIZE_BITS  :  44 words$word))
               :  56 words$word)) ((level - (( 1 : int):ii))) is_global
      else sail2_state_monad$bindS
        (checkPTEPermission ac priv mxr do_sum pattr) (\ (w__3 : bool) . 
        sail2_state_monad$returnS (if ((~ w__3)) then PTW_Failure PTW_No_Permission
                else if ((level > (( 0 : int):ii))) then
                  let mask =
                    ((sub_vec_int
                       ((shiftl
                           ((xor_vec ((get_SV39_PTE_PPNi pte  :  44 words$word))
                               ((xor_vec ((get_SV39_PTE_PPNi pte  :  44 words$word))
                                   ((EXTZ (( 44 : int):ii) (vec_of_bits [B1]  :  1 words$word)  :  44 words$word))
                                  :  44 words$word))
                              :  44 words$word)) ((level * SV39_LEVEL_BITS))
                          :  44 words$word)) (( 1 : int):ii)
                      :  44 words$word)) in
                  if (((((and_vec ((get_SV39_PTE_PPNi pte  :  44 words$word)) mask  :  44 words$word)) <> ((EXTZ (( 44 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  44 words$word))))) then
                    PTW_Failure PTW_Misaligned
                  else
                    let ppn =
                      ((or_vec ((get_SV39_PTE_PPNi pte  :  44 words$word))
                         ((and_vec
                             ((EXTZ (( 44 : int):ii) ((get_SV39_Vaddr_VPNi va  :  27 words$word))  :  44 words$word))
                             mask
                            :  44 words$word))
                        :  44 words$word)) in
                    PTW_Success ((concat_vec ppn ((get_SV39_Vaddr_PgOfs va  :  12 words$word))
                                   :  56 words$word),pte,pte_addr,level,is_global)
                else
                  PTW_Success ((concat_vec ((get_SV39_PTE_PPNi pte  :  44 words$word))
                                  ((get_SV39_Vaddr_PgOfs va  :  12 words$word))
                                 :  56 words$word),pte,pte_addr,level,is_global)))
   ))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn walk39_defn;

(*val make_TLB39_Entry : mword ty16 -> bool -> mword ty39 -> mword ty56 -> SV39_PTE -> ii -> mword ty56 -> M TLB39_Entry*)

val _ = Define `
 ((make_TLB39_Entry:(16)words$word -> bool ->(39)words$word ->(56)words$word -> SV39_PTE -> int ->(56)words$word ->(regstate)sail2_state_monad$sequential_state ->(((TLB39_Entry),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid global vAddr pAddr pte level pteAddr=
    (let (shift : ii) = (PAGESIZE_BITS + ((level * SV39_LEVEL_BITS))) in
   let (vAddrMask : vaddr39) =
     ((sub_vec_int
        ((shiftl
            ((xor_vec vAddr
                ((xor_vec vAddr ((EXTZ (( 39 : int):ii) (vec_of_bits [B1]  :  1 words$word)  :  39 words$word))
                   :  39 words$word))
               :  39 words$word)) shift
           :  39 words$word)) (( 1 : int):ii)
       :  39 words$word)) in
   let (vMatchMask : vaddr39) = ((not_vec vAddrMask  :  39 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__0 : xlenbits) . 
   sail2_state_monad$returnS (<| TLB39_Entry_asid := asid; 
              TLB39_Entry_global := global; 
              TLB39_Entry_pte := pte; 
              TLB39_Entry_pteAddr := pteAddr; 
              TLB39_Entry_vAddrMask := vAddrMask; 
              TLB39_Entry_vMatchMask := vMatchMask; 
              TLB39_Entry_vAddr := ((and_vec vAddr vMatchMask  :  39 words$word)); 
              TLB39_Entry_pAddr :=
                ((shiftl ((shiftr pAddr shift  :  56 words$word)) shift  :  56 words$word)); 
              TLB39_Entry_age := w__0 |>))))`;


val _ = Define `
 ((TLBEntries:int)=  ((( 32 : int):ii)))`;


(*val lookupTLB39 : mword ty16 -> mword ty39 -> M (maybe ((ii * TLB39_Entry)))*)

val _ = Define `
 ((lookupTLB39:(16)words$word ->(39)words$word ->(regstate)sail2_state_monad$sequential_state ->((((int#TLB39_Entry)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid vaddr=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS tlb39_ref) (\ (w__0 :  TLB39_Entry option) . 
   sail2_state_monad$returnS ((case w__0 of
     NONE => NONE
   | SOME (e) =>
      if ((((((e.TLB39_Entry_global \/ (((e.TLB39_Entry_asid = asid)))))) /\ (((e.TLB39_Entry_vAddr = ((and_vec e.TLB39_Entry_vMatchMask vaddr  :  39 words$word))))))))
      then
        SOME ((( 0 : int):ii), e)
      else NONE
   )))))`;


(*val addToTLB39 : mword ty16 -> mword ty39 -> mword ty56 -> SV39_PTE -> mword ty56 -> ii -> bool -> M unit*)

val _ = Define `
 ((addToTLB39:(16)words$word ->(39)words$word ->(56)words$word -> SV39_PTE ->(56)words$word -> int -> bool ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid vAddr pAddr pte pteAddr level global=  (sail2_state_monad$bindS
   (make_TLB39_Entry asid global vAddr pAddr pte level pteAddr) (\ ent . 
   sail2_state_monad$write_regS tlb39_ref (SOME ent))))`;


(*val writeTLB39 : ii -> TLB39_Entry -> M unit*)

val _ = Define `
 ((writeTLB39:int -> TLB39_Entry ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (idx : ii) (ent : TLB39_Entry)=  (sail2_state_monad$write_regS tlb39_ref (SOME ent)))`;


(*val flushTLB : maybe (mword ty16) -> maybe (mword ty39) -> M unit*)

val _ = Define `
 ((flushTLB:((16)words$word)option ->((39)words$word)option ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid addr=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS tlb39_ref) (\ (w__0 :  TLB39_Entry option) . 
   let (ent :  TLB39_Entry option) =
     ((case (w__0, asid, addr) of
       (NONE, _, _) => NONE
     | (SOME (e), NONE, NONE) => NONE
     | (SOME (e), NONE, SOME (a)) =>
        if (((e.TLB39_Entry_vAddr = ((and_vec e.TLB39_Entry_vMatchMask a  :  39 words$word))))) then
          NONE
        else SOME e
     | (SOME (e), SOME (i), NONE) =>
        if ((((((e.TLB39_Entry_asid = i))) /\ ((~ e.TLB39_Entry_global))))) then NONE
        else SOME e
     | (SOME (e), SOME (i), SOME (a)) =>
        if ((((((e.TLB39_Entry_asid = i))) /\ ((((((e.TLB39_Entry_vAddr = ((and_vec a e.TLB39_Entry_vMatchMask  :  39 words$word))))) /\ ((~ e.TLB39_Entry_global)))))))) then
          NONE
        else SOME e
     )) in
   sail2_state_monad$write_regS tlb39_ref ent)))`;


(*val translate39 : mword ty39 -> AccessType -> Privilege -> bool -> bool -> ii -> M TR39_Result*)

val _ = Define `
 ((translate39:(39)words$word -> AccessType -> Privilege -> bool -> bool -> int ->(regstate)sail2_state_monad$sequential_state ->(((TR39_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr ac priv mxr do_sum level=  (sail2_state_monad$bindS
   (curAsid64 ()   : ( 16 words$word) M) (\ asid .  sail2_state_monad$bindS
   (lookupTLB39 asid vAddr) (\ (w__0 :  ((ii # TLB39_Entry))option) . 
   (case w__0 of
     SOME (idx,ent) =>
      let pteBits = (Mk_PTE_Bits ((get_SV39_PTE_BITS ent.TLB39_Entry_pte  :  8 words$word))) in sail2_state_monad$bindS
      (checkPTEPermission ac priv mxr do_sum pteBits) (\ (w__1 : bool) . 
      if ((~ w__1)) then sail2_state_monad$returnS (TR39_Failure PTW_No_Permission)
      else
        (case ((update_PTE_Bits pteBits ac)) of
          NONE =>
           sail2_state_monad$returnS (TR39_Address ((or_vec ent.TLB39_Entry_pAddr
                                    ((EXTZ (( 56 : int):ii)
                                        ((and_vec vAddr ent.TLB39_Entry_vAddrMask  :  39 words$word))
                                       :  56 words$word))
                                   :  56 words$word)))
        | SOME (pbits) =>
           if ((~ ((plat_enable_dirty_update () )))) then sail2_state_monad$returnS (TR39_Failure PTW_PTE_Update)
           else
             let (n_ent : TLB39_Entry) = ent in
             let n_ent =
               ((n_ent with<|
                 TLB39_Entry_pte :=
                   ((update_SV39_PTE_BITS ent.TLB39_Entry_pte
                       ((get_PTE_Bits_bits pbits  :  8 words$word))))|>)) in sail2_state_monad$bindS (sail2_state_monad$seqS
             (writeTLB39 idx n_ent)
             (checked_mem_write ((EXTZ (( 64 : int):ii) ent.TLB39_Entry_pteAddr  :  64 words$word)) (( 8 : int):ii)
               ((get_SV39_PTE_bits ent.TLB39_Entry_pte  :  64 words$word)))) (\ (w__2 : unit
               MemoryOpResult) .  sail2_state_monad$seqS
             (case w__2 of
               MemValue (_) => sail2_state_monad$returnS () 
             | MemException (e) => internal_error "invalid physical address in TLB"
             )
             (sail2_state_monad$returnS (TR39_Address ((or_vec ent.TLB39_Entry_pAddr
                                      ((EXTZ (( 56 : int):ii)
                                          ((and_vec vAddr ent.TLB39_Entry_vAddrMask  :  39 words$word))
                                         :  56 words$word))
                                     :  56 words$word)))))
        ))
   | NONE => sail2_state_monad$bindS
      (curPTB39 ()   : ( 56 words$word) M) (\ (w__6 :  56 words$word) .  sail2_state_monad$bindS
      (walk39 vAddr ac priv mxr do_sum w__6 level F) (\ (w__7 : PTW_Result) . 
      (case w__7 of
        PTW_Failure (f) => sail2_state_monad$returnS (TR39_Failure f)
      | PTW_Success (pAddr,pte,pteAddr,level,global) =>
         (case ((update_PTE_Bits ((Mk_PTE_Bits ((get_SV39_PTE_BITS pte  :  8 words$word)))) ac)) of
           NONE => sail2_state_monad$seqS
            (addToTLB39 asid vAddr pAddr pte pteAddr level global) (sail2_state_monad$returnS (TR39_Address pAddr))
         | SOME (pbits) =>
            if ((~ ((plat_enable_dirty_update () )))) then sail2_state_monad$returnS (TR39_Failure PTW_PTE_Update)
            else
              let (w_pte : SV39_PTE) =
                (update_SV39_PTE_BITS pte ((get_PTE_Bits_bits pbits  :  8 words$word))) in sail2_state_monad$bindS
              (checked_mem_write ((EXTZ (( 64 : int):ii) pteAddr  :  64 words$word)) (( 8 : int):ii)
                ((get_SV39_PTE_bits w_pte  :  64 words$word))) (\ (w__8 : unit MemoryOpResult) . 
              (case w__8 of
                MemValue (_) => sail2_state_monad$seqS
                 (addToTLB39 asid vAddr pAddr w_pte pteAddr level global)
                 (sail2_state_monad$returnS (TR39_Address pAddr))
              | MemException (e) => sail2_state_monad$returnS (TR39_Failure PTW_Access)
              ))
         )
      )))
   )))))`;


(*val translationMode : Privilege -> M SATPMode*)

val _ = Define `
 ((translationMode:Privilege ->(regstate)sail2_state_monad$sequential_state ->(((SATPMode),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) priv=
    (if (((((privLevel_to_bits priv  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))))
   then
     sail2_state_monad$returnS Sbare
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
     let arch = (architecture ((get_Mstatus_SXL w__0  :  2 words$word))) in
     (case arch of
       SOME (RV64) => sail2_state_monad$bindS
        (sail2_state_monad$read_regS satp_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
        let (mbits : satp_mode) = ((get_Satp64_Mode ((Mk_Satp64 w__1))  :  4 words$word)) in
        (case ((satpMode_of_bits RV64 mbits)) of
          SOME (m) => sail2_state_monad$returnS m
        | NONE => internal_error "invalid RV64 translation mode in satp"
        ))
     | _ => internal_error "unsupported address translation arch"
     ))))`;


(*val translateAddr : mword ty64 -> AccessType -> ReadType -> M TR_Result*)

val _ = Define `
 ((translateAddr:(64)words$word -> AccessType -> ReadType ->(regstate)sail2_state_monad$sequential_state ->(((TR_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr ac rt=  (sail2_state_monad$bindS
   (case rt of
     Instruction => sail2_state_monad$read_regS cur_privilege_ref
   | Data => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
      if (((((get_Mstatus_MPRV w__1  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) . 
        sail2_state_monad$returnS ((privLevel_of_bits ((get_Mstatus_MPP w__2  :  2 words$word)))))
      else sail2_state_monad$read_regS cur_privilege_ref)
   ) (\ (effPriv : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__5 : Mstatus) . 
   let (mxr : bool) =
     (((get_Mstatus_MXR w__5  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__6 : Mstatus) . 
   let (do_sum : bool) =
     (((get_Mstatus_SUM w__6  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))) in sail2_state_monad$bindS
   (translationMode effPriv) (\ (mode : SATPMode) .  
  (case mode of
        Sbare => sail2_state_monad$returnS (TR_Address vAddr)
    | SV39 => sail2_state_monad$bindS
                (translate39
                   ((subrange_vec_dec vAddr (( 38 : int): ii)
                       (( 0 : int): ii) : 39 words$word)) ac effPriv 
                 mxr do_sum ((SV39_LEVELS - (( 1 : int): ii))))
                (\ (w__7 : TR39_Result) . 
                 sail2_state_monad$returnS
                   ((case w__7 of
                          TR39_Address (pa) => TR_Address
                                                 ((EXTZ (( 64 : int): ii) pa : 64 words$word))
                      | TR39_Failure (f) => TR_Failure
                                              ((translationException ac f))
                    )))
  )))))))`;


(*val decode : mword ty32 -> maybe ast*)

(*val decodeCompressed : mword ty16 -> maybe ast*)

(*val execute : ast -> M bool*)

(*val print_insn : ast -> string*)

(*val encdec_uop_forwards : uop -> mword ty7*)

val _ = Define `
 ((encdec_uop_forwards:uop ->(7)words$word) arg_=
    ((case arg_ of
     RISCV_LUI => (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  :  7 words$word)
   | RISCV_AUIPC => (vec_of_bits [B0;B0;B1;B0;B1;B1;B1]  :  7 words$word)
   )))`;


(*val encdec_uop_backwards : mword ty7 -> uop*)

val _ = Define `
 ((encdec_uop_backwards:(7)words$word -> uop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  :  7 words$word)))) then RISCV_LUI
   else RISCV_AUIPC))`;


(*val encdec_uop_forwards_matches : uop -> bool*)

val _ = Define `
 ((encdec_uop_forwards_matches:uop -> bool) arg_= 
  ((case arg_ of   RISCV_LUI => T | RISCV_AUIPC => T )))`;


(*val encdec_uop_backwards_matches : mword ty7 -> bool*)

val _ = Define `
 ((encdec_uop_backwards_matches:(7)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  :  7 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B0;B1;B0;B1;B1;B1]  :  7 words$word)))) then T
   else F))`;


(*val utype_mnemonic_forwards : uop -> string*)

val _ = Define `
 ((utype_mnemonic_forwards:uop -> string) arg_=  ((case arg_ of   RISCV_LUI => "lui" | RISCV_AUIPC => "auipc" )))`;


(*val utype_mnemonic_backwards : string -> uop*)

val _ = Define `
 ((utype_mnemonic_backwards:string -> uop) arg_=
    ((case arg_ of   "lui" => RISCV_LUI | "auipc" => RISCV_AUIPC )))`;


(*val utype_mnemonic_forwards_matches : uop -> bool*)

val _ = Define `
 ((utype_mnemonic_forwards_matches:uop -> bool) arg_= 
  ((case arg_ of   RISCV_LUI => T | RISCV_AUIPC => T )))`;


(*val utype_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((utype_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of   "lui" => T | "auipc" => T | _ => F )))`;


(*val utype_mnemonic_matches_prefix : string -> maybe ((uop * ii))*)

val _ = Define `
 ((utype_mnemonic_matches_prefix:string ->(uop#int)option) arg_=
    (let stringappend_1714_0 = arg_ in
   if (((((string_startswith stringappend_1714_0 "lui")) /\ (
  (case ((string_drop stringappend_1714_0 ((string_length "lui")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1714_0 ((string_length "lui")))) of
       s_ => SOME (RISCV_LUI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1714_0 "auipc")) /\ (
  (case ((string_drop stringappend_1714_0 ((string_length "auipc")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1714_0 ((string_length "auipc")))) of
       s_ => SOME (RISCV_AUIPC, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val encdec_bop_forwards : bop -> mword ty3*)

val _ = Define `
 ((encdec_bop_forwards:bop ->(3)words$word) arg_=
    ((case arg_ of
     RISCV_BEQ => (vec_of_bits [B0;B0;B0]  :  3 words$word)
   | RISCV_BNE => (vec_of_bits [B0;B0;B1]  :  3 words$word)
   | RISCV_BLT => (vec_of_bits [B1;B0;B0]  :  3 words$word)
   | RISCV_BGE => (vec_of_bits [B1;B0;B1]  :  3 words$word)
   | RISCV_BLTU => (vec_of_bits [B1;B1;B0]  :  3 words$word)
   | RISCV_BGEU => (vec_of_bits [B1;B1;B1]  :  3 words$word)
   )))`;


(*val encdec_bop_backwards : mword ty3 -> bop*)

val _ = Define `
 ((encdec_bop_backwards:(3)words$word -> bop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then RISCV_BEQ
   else if (((p0_ = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then RISCV_BNE
   else if (((p0_ = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then RISCV_BLT
   else if (((p0_ = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then RISCV_BGE
   else if (((p0_ = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then RISCV_BLTU
   else RISCV_BGEU))`;


(*val encdec_bop_forwards_matches : bop -> bool*)

val _ = Define `
 ((encdec_bop_forwards_matches:bop -> bool) arg_= 
  ((case arg_ of
         RISCV_BEQ => T
     | RISCV_BNE => T
     | RISCV_BLT => T
     | RISCV_BGE => T
     | RISCV_BLTU => T
     | RISCV_BGEU => T
   )))`;


(*val encdec_bop_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_bop_backwards_matches:(3)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B1;B1]  :  3 words$word)))) then T
   else F))`;


(*val btype_mnemonic_forwards : bop -> string*)

val _ = Define `
 ((btype_mnemonic_forwards:bop -> string) arg_=
    ((case arg_ of
     RISCV_BEQ => "beq"
   | RISCV_BNE => "bne"
   | RISCV_BLT => "blt"
   | RISCV_BGE => "bge"
   | RISCV_BLTU => "bltu"
   | RISCV_BGEU => "bgeu"
   )))`;


(*val btype_mnemonic_backwards : string -> bop*)

val _ = Define `
 ((btype_mnemonic_backwards:string -> bop) arg_=
    ((case arg_ of
     "beq" => RISCV_BEQ
   | "bne" => RISCV_BNE
   | "blt" => RISCV_BLT
   | "bge" => RISCV_BGE
   | "bltu" => RISCV_BLTU
   | "bgeu" => RISCV_BGEU
   )))`;


(*val btype_mnemonic_forwards_matches : bop -> bool*)

val _ = Define `
 ((btype_mnemonic_forwards_matches:bop -> bool) arg_= 
  ((case arg_ of
         RISCV_BEQ => T
     | RISCV_BNE => T
     | RISCV_BLT => T
     | RISCV_BGE => T
     | RISCV_BLTU => T
     | RISCV_BGEU => T
   )))`;


(*val btype_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((btype_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "beq" => T
   | "bne" => T
   | "blt" => T
   | "bge" => T
   | "bltu" => T
   | "bgeu" => T
   | _ => F
   )))`;


(*val btype_mnemonic_matches_prefix : string -> maybe ((bop * ii))*)

val _ = Define `
 ((btype_mnemonic_matches_prefix:string ->(bop#int)option) arg_=
    (let stringappend_1708_0 = arg_ in
   if (((((string_startswith stringappend_1708_0 "beq")) /\ (
  (case ((string_drop stringappend_1708_0 ((string_length "beq")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1708_0 ((string_length "beq")))) of
       s_ => SOME (RISCV_BEQ, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1708_0 "bne")) /\ (
  (case ((string_drop stringappend_1708_0 ((string_length "bne")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1708_0 ((string_length "bne")))) of
       s_ => SOME (RISCV_BNE, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1708_0 "blt")) /\ (
  (case ((string_drop stringappend_1708_0 ((string_length "blt")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1708_0 ((string_length "blt")))) of
       s_ => SOME (RISCV_BLT, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1708_0 "bge")) /\ (
  (case ((string_drop stringappend_1708_0 ((string_length "bge")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1708_0 ((string_length "bge")))) of
       s_ => SOME (RISCV_BGE, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1708_0 "bltu")) /\ (
  (case ((string_drop stringappend_1708_0 ((string_length "bltu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1708_0 ((string_length "bltu")))) of
       s_ => SOME (RISCV_BLTU, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1708_0 "bgeu")) /\ (
  (case ((string_drop stringappend_1708_0 ((string_length "bgeu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1708_0 ((string_length "bgeu")))) of
       s_ => SOME (RISCV_BGEU, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val encdec_iop_forwards : iop -> mword ty3*)

val _ = Define `
 ((encdec_iop_forwards:iop ->(3)words$word) arg_=
    ((case arg_ of
     RISCV_ADDI => (vec_of_bits [B0;B0;B0]  :  3 words$word)
   | RISCV_SLTI => (vec_of_bits [B0;B1;B0]  :  3 words$word)
   | RISCV_SLTIU => (vec_of_bits [B0;B1;B1]  :  3 words$word)
   | RISCV_XORI => (vec_of_bits [B1;B0;B0]  :  3 words$word)
   | RISCV_ORI => (vec_of_bits [B1;B1;B0]  :  3 words$word)
   | RISCV_ANDI => (vec_of_bits [B1;B1;B1]  :  3 words$word)
   )))`;


(*val encdec_iop_backwards : mword ty3 -> iop*)

val _ = Define `
 ((encdec_iop_backwards:(3)words$word -> iop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then RISCV_ADDI
   else if (((p0_ = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then RISCV_SLTI
   else if (((p0_ = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then RISCV_SLTIU
   else if (((p0_ = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then RISCV_XORI
   else if (((p0_ = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then RISCV_ORI
   else RISCV_ANDI))`;


(*val encdec_iop_forwards_matches : iop -> bool*)

val _ = Define `
 ((encdec_iop_forwards_matches:iop -> bool) arg_= 
  ((case arg_ of
         RISCV_ADDI => T
     | RISCV_SLTI => T
     | RISCV_SLTIU => T
     | RISCV_XORI => T
     | RISCV_ORI => T
     | RISCV_ANDI => T
   )))`;


(*val encdec_iop_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_iop_backwards_matches:(3)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B1;B1]  :  3 words$word)))) then T
   else F))`;


(*val itype_mnemonic_forwards : iop -> string*)

val _ = Define `
 ((itype_mnemonic_forwards:iop -> string) arg_=
    ((case arg_ of
     RISCV_ADDI => "addi"
   | RISCV_SLTI => "slti"
   | RISCV_SLTIU => "sltiu"
   | RISCV_XORI => "xori"
   | RISCV_ORI => "ori"
   | RISCV_ANDI => "andi"
   )))`;


(*val itype_mnemonic_backwards : string -> iop*)

val _ = Define `
 ((itype_mnemonic_backwards:string -> iop) arg_=
    ((case arg_ of
     "addi" => RISCV_ADDI
   | "slti" => RISCV_SLTI
   | "sltiu" => RISCV_SLTIU
   | "xori" => RISCV_XORI
   | "ori" => RISCV_ORI
   | "andi" => RISCV_ANDI
   )))`;


(*val itype_mnemonic_forwards_matches : iop -> bool*)

val _ = Define `
 ((itype_mnemonic_forwards_matches:iop -> bool) arg_= 
  ((case arg_ of
         RISCV_ADDI => T
     | RISCV_SLTI => T
     | RISCV_SLTIU => T
     | RISCV_XORI => T
     | RISCV_ORI => T
     | RISCV_ANDI => T
   )))`;


(*val itype_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((itype_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "addi" => T
   | "slti" => T
   | "sltiu" => T
   | "xori" => T
   | "ori" => T
   | "andi" => T
   | _ => F
   )))`;


(*val itype_mnemonic_matches_prefix : string -> maybe ((iop * ii))*)

val _ = Define `
 ((itype_mnemonic_matches_prefix:string ->(iop#int)option) arg_=
    (let stringappend_1702_0 = arg_ in
   if (((((string_startswith stringappend_1702_0 "addi")) /\ (
  (case ((string_drop stringappend_1702_0 ((string_length "addi")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1702_0 ((string_length "addi")))) of
       s_ => SOME (RISCV_ADDI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1702_0 "slti")) /\ (
  (case ((string_drop stringappend_1702_0 ((string_length "slti")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1702_0 ((string_length "slti")))) of
       s_ => SOME (RISCV_SLTI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1702_0 "sltiu")) /\ (
  (case ((string_drop stringappend_1702_0 ((string_length "sltiu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1702_0 ((string_length "sltiu")))) of
       s_ => SOME (RISCV_SLTIU, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1702_0 "xori")) /\ (
  (case ((string_drop stringappend_1702_0 ((string_length "xori")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1702_0 ((string_length "xori")))) of
       s_ => SOME (RISCV_XORI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1702_0 "ori")) /\ (
  (case ((string_drop stringappend_1702_0 ((string_length "ori")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1702_0 ((string_length "ori")))) of
       s_ => SOME (RISCV_ORI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1702_0 "andi")) /\ (
  (case ((string_drop stringappend_1702_0 ((string_length "andi")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1702_0 ((string_length "andi")))) of
       s_ => SOME (RISCV_ANDI, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val encdec_sop_forwards : sop -> mword ty3*)

val _ = Define `
 ((encdec_sop_forwards:sop ->(3)words$word) arg_=
    ((case arg_ of
     RISCV_SLLI => (vec_of_bits [B0;B0;B1]  :  3 words$word)
   | RISCV_SRLI => (vec_of_bits [B1;B0;B1]  :  3 words$word)
   | RISCV_SRAI => (vec_of_bits [B1;B0;B1]  :  3 words$word)
   )))`;


(*val encdec_sop_backwards : mword ty3 -> sop*)

val _ = Define `
 ((encdec_sop_backwards:(3)words$word -> sop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then RISCV_SLLI
   else if (((p0_ = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then RISCV_SRLI
   else RISCV_SRAI))`;


(*val encdec_sop_forwards_matches : sop -> bool*)

val _ = Define `
 ((encdec_sop_forwards_matches:sop -> bool) arg_= 
  ((case arg_ of   RISCV_SLLI => T | RISCV_SRLI => T | RISCV_SRAI => T )))`;


(*val encdec_sop_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_sop_backwards_matches:(3)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then T
   else F))`;


(*val shiftiop_mnemonic_forwards : sop -> string*)

val _ = Define `
 ((shiftiop_mnemonic_forwards:sop -> string) arg_=
    ((case arg_ of   RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" )))`;


(*val shiftiop_mnemonic_backwards : string -> sop*)

val _ = Define `
 ((shiftiop_mnemonic_backwards:string -> sop) arg_=
    ((case arg_ of   "slli" => RISCV_SLLI | "srli" => RISCV_SRLI | "srai" => RISCV_SRAI )))`;


(*val shiftiop_mnemonic_forwards_matches : sop -> bool*)

val _ = Define `
 ((shiftiop_mnemonic_forwards_matches:sop -> bool) arg_= 
  ((case arg_ of   RISCV_SLLI => T | RISCV_SRLI => T | RISCV_SRAI => T )))`;


(*val shiftiop_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((shiftiop_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of   "slli" => T | "srli" => T | "srai" => T | _ => F )))`;


(*val shiftiop_mnemonic_matches_prefix : string -> maybe ((sop * ii))*)

val _ = Define `
 ((shiftiop_mnemonic_matches_prefix:string ->(sop#int)option) arg_=
    (let stringappend_1699_0 = arg_ in
   if (((((string_startswith stringappend_1699_0 "slli")) /\ (
  (case ((string_drop stringappend_1699_0 ((string_length "slli")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1699_0 ((string_length "slli")))) of
       s_ => SOME (RISCV_SLLI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1699_0 "srli")) /\ (
  (case ((string_drop stringappend_1699_0 ((string_length "srli")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1699_0 ((string_length "srli")))) of
       s_ => SOME (RISCV_SRLI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1699_0 "srai")) /\ (
  (case ((string_drop stringappend_1699_0 ((string_length "srai")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1699_0 ((string_length "srai")))) of
       s_ => SOME (RISCV_SRAI, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val rtype_mnemonic_forwards : rop -> string*)

val _ = Define `
 ((rtype_mnemonic_forwards:rop -> string) arg_=
    ((case arg_ of
     RISCV_ADD => "add"
   | RISCV_SUB => "sub"
   | RISCV_SLL => "sll"
   | RISCV_SLT => "slt"
   | RISCV_SLTU => "sltu"
   | RISCV_XOR => "xor"
   | RISCV_SRL => "srl"
   | RISCV_SRA => "sra"
   | RISCV_OR => "or"
   | RISCV_AND => "and"
   )))`;


(*val rtype_mnemonic_backwards : string -> rop*)

val _ = Define `
 ((rtype_mnemonic_backwards:string -> rop) arg_=
    ((case arg_ of
     "add" => RISCV_ADD
   | "sub" => RISCV_SUB
   | "sll" => RISCV_SLL
   | "slt" => RISCV_SLT
   | "sltu" => RISCV_SLTU
   | "xor" => RISCV_XOR
   | "srl" => RISCV_SRL
   | "sra" => RISCV_SRA
   | "or" => RISCV_OR
   | "and" => RISCV_AND
   )))`;


(*val rtype_mnemonic_forwards_matches : rop -> bool*)

val _ = Define `
 ((rtype_mnemonic_forwards_matches:rop -> bool) arg_= 
  ((case arg_ of
         RISCV_ADD => T
     | RISCV_SUB => T
     | RISCV_SLL => T
     | RISCV_SLT => T
     | RISCV_SLTU => T
     | RISCV_XOR => T
     | RISCV_SRL => T
     | RISCV_SRA => T
     | RISCV_OR => T
     | RISCV_AND => T
   )))`;


(*val rtype_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((rtype_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "add" => T
   | "sub" => T
   | "sll" => T
   | "slt" => T
   | "sltu" => T
   | "xor" => T
   | "srl" => T
   | "sra" => T
   | "or" => T
   | "and" => T
   | _ => F
   )))`;


(*val rtype_mnemonic_matches_prefix : string -> maybe ((rop * ii))*)

val _ = Define `
 ((rtype_mnemonic_matches_prefix:string ->(rop#int)option) arg_=
    (let stringappend_1689_0 = arg_ in
   if (((((string_startswith stringappend_1689_0 "add")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "add")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "add")))) of
       s_ => SOME (RISCV_ADD, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "sub")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "sub")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "sub")))) of
       s_ => SOME (RISCV_SUB, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "sll")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "sll")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "sll")))) of
       s_ => SOME (RISCV_SLL, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "slt")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "slt")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "slt")))) of
       s_ => SOME (RISCV_SLT, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "sltu")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "sltu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "sltu")))) of
       s_ => SOME (RISCV_SLTU, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "xor")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "xor")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "xor")))) of
       s_ => SOME (RISCV_XOR, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "srl")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "srl")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "srl")))) of
       s_ => SOME (RISCV_SRL, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "sra")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "sra")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "sra")))) of
       s_ => SOME (RISCV_SRA, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "or")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "or")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "or")))) of
       s_ => SOME (RISCV_OR, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1689_0 "and")) /\ (
  (case ((string_drop stringappend_1689_0 ((string_length "and")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1689_0 ((string_length "and")))) of
       s_ => SOME (RISCV_AND, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val extend_value : forall 'int8_times_n . Size 'int8_times_n => bool -> MemoryOpResult (mword 'int8_times_n) -> MemoryOpResult (mword ty64)*)

val _ = Define `
 ((extend_value:bool ->('int8_times_n words$word)MemoryOpResult ->((64)words$word)MemoryOpResult) is_unsigned value=
    ((case value of
     MemValue (v) =>
      MemValue (if is_unsigned then (EXTZ (( 64 : int):ii) v  :  64 words$word)
                else (EXTS (( 64 : int):ii) v  :  64 words$word))
   | MemException (e) => MemException e
   )))`;


(*val process_load : forall 'int8_times_n . Size 'int8_times_n => mword ty5 -> mword ty64 -> MemoryOpResult (mword 'int8_times_n) -> bool -> M bool*)

val _ = Define `
 ((process_load:(5)words$word ->(64)words$word ->('int8_times_n words$word)MemoryOpResult -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd addr value is_unsigned=
    ((case ((extend_value is_unsigned value  : ( 64 words$word) MemoryOpResult)) of
     MemValue (result) => sail2_state_monad$seqS (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T)
   | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
   )))`;


(*val check_misaligned : mword ty64 -> word_width -> bool*)

val _ = Define `
 ((check_misaligned:(64)words$word -> word_width -> bool) (vaddr : xlenbits) (width : word_width)=
    (if ((plat_enable_misaligned_access () )) then F
   else
     (case width of
       BYTE => F
     | HALF =>
        (((cast_unit_vec0 ((access_vec_dec vaddr (( 0 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))
     | WORD =>
        ((((((cast_unit_vec0 ((access_vec_dec vaddr (( 0 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ (((((cast_unit_vec0 ((access_vec_dec vaddr (( 1 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))))
     | DOUBLE =>
        ((((((cast_unit_vec0 ((access_vec_dec vaddr (( 0 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ ((((((((cast_unit_vec0 ((access_vec_dec vaddr (( 1 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) \/ (((((cast_unit_vec0 ((access_vec_dec vaddr (( 2 : int):ii)))  :  1 words$word)) = ((bool_to_bits T  :  1 words$word)))))))))
     )))`;


(*val maybe_aq_forwards : bool -> string*)

val _ = Define `
 ((maybe_aq_forwards:bool -> string) arg_=  ((case arg_ of   T => ".aq" | F => "" )))`;


(*val maybe_aq_backwards : string -> bool*)

val _ = Define `
 ((maybe_aq_backwards:string -> bool) arg_=  ((case arg_ of   ".aq" => T | "" => F )))`;


(*val maybe_aq_forwards_matches : bool -> bool*)

val _ = Define `
 ((maybe_aq_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


(*val maybe_aq_backwards_matches : string -> bool*)

val _ = Define `
 ((maybe_aq_backwards_matches:string -> bool) arg_=  ((case arg_ of   ".aq" => T | "" => T | _ => F )))`;


(*val maybe_aq_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_aq_matches_prefix:string ->(bool#int)option) arg_=
    (let stringappend_1687_0 = arg_ in
   if (((((string_startswith stringappend_1687_0 ".aq")) /\ (
  (case ((string_drop stringappend_1687_0 ((string_length ".aq")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1687_0 ((string_length ".aq")))) of
       s_ => SOME (T, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1687_0 "")) /\ (
  (case ((string_drop stringappend_1687_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1687_0 ((string_length "")))) of
       s_ => SOME (F, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val maybe_rl_forwards : bool -> string*)

val _ = Define `
 ((maybe_rl_forwards:bool -> string) arg_=  ((case arg_ of   T => ".rl" | F => "" )))`;


(*val maybe_rl_backwards : string -> bool*)

val _ = Define `
 ((maybe_rl_backwards:string -> bool) arg_=  ((case arg_ of   ".rl" => T | "" => F )))`;


(*val maybe_rl_forwards_matches : bool -> bool*)

val _ = Define `
 ((maybe_rl_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


(*val maybe_rl_backwards_matches : string -> bool*)

val _ = Define `
 ((maybe_rl_backwards_matches:string -> bool) arg_=  ((case arg_ of   ".rl" => T | "" => T | _ => F )))`;


(*val maybe_rl_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_rl_matches_prefix:string ->(bool#int)option) arg_=
    (let stringappend_1685_0 = arg_ in
   if (((((string_startswith stringappend_1685_0 ".rl")) /\ (
  (case ((string_drop stringappend_1685_0 ((string_length ".rl")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1685_0 ((string_length ".rl")))) of
       s_ => SOME (T, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1685_0 "")) /\ (
  (case ((string_drop stringappend_1685_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1685_0 ((string_length "")))) of
       s_ => SOME (F, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val maybe_u_forwards : bool -> string*)

val _ = Define `
 ((maybe_u_forwards:bool -> string) arg_=  ((case arg_ of   T => "u" | F => "" )))`;


(*val maybe_u_backwards : string -> bool*)

val _ = Define `
 ((maybe_u_backwards:string -> bool) arg_=  ((case arg_ of   "u" => T | "" => F )))`;


(*val maybe_u_forwards_matches : bool -> bool*)

val _ = Define `
 ((maybe_u_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


(*val maybe_u_backwards_matches : string -> bool*)

val _ = Define `
 ((maybe_u_backwards_matches:string -> bool) arg_=  ((case arg_ of   "u" => T | "" => T | _ => F )))`;


(*val maybe_u_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_u_matches_prefix:string ->(bool#int)option) arg_=
    (let stringappend_1683_0 = arg_ in
   if (((((string_startswith stringappend_1683_0 "u")) /\ (
  (case ((string_drop stringappend_1683_0 ((string_length "u")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1683_0 ((string_length "u")))) of
       s_ => SOME (T, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1683_0 "")) /\ (
  (case ((string_drop stringappend_1683_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1683_0 ((string_length "")))) of
       s_ => SOME (F, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val shiftw_mnemonic_forwards : sop -> string*)

val _ = Define `
 ((shiftw_mnemonic_forwards:sop -> string) arg_=
    ((case arg_ of   RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" )))`;


(*val shiftw_mnemonic_backwards : string -> sop*)

val _ = Define `
 ((shiftw_mnemonic_backwards:string -> sop) arg_=
    ((case arg_ of   "slli" => RISCV_SLLI | "srli" => RISCV_SRLI | "srai" => RISCV_SRAI )))`;


(*val shiftw_mnemonic_forwards_matches : sop -> bool*)

val _ = Define `
 ((shiftw_mnemonic_forwards_matches:sop -> bool) arg_= 
  ((case arg_ of   RISCV_SLLI => T | RISCV_SRLI => T | RISCV_SRAI => T )))`;


(*val shiftw_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((shiftw_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of   "slli" => T | "srli" => T | "srai" => T | _ => F )))`;


(*val shiftw_mnemonic_matches_prefix : string -> maybe ((sop * ii))*)

val _ = Define `
 ((shiftw_mnemonic_matches_prefix:string ->(sop#int)option) arg_=
    (let stringappend_1680_0 = arg_ in
   if (((((string_startswith stringappend_1680_0 "slli")) /\ (
  (case ((string_drop stringappend_1680_0 ((string_length "slli")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1680_0 ((string_length "slli")))) of
       s_ => SOME (RISCV_SLLI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1680_0 "srli")) /\ (
  (case ((string_drop stringappend_1680_0 ((string_length "srli")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1680_0 ((string_length "srli")))) of
       s_ => SOME (RISCV_SRLI, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1680_0 "srai")) /\ (
  (case ((string_drop stringappend_1680_0 ((string_length "srai")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1680_0 ((string_length "srai")))) of
       s_ => SOME (RISCV_SRAI, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val rtypew_mnemonic_forwards : ropw -> string*)

val _ = Define `
 ((rtypew_mnemonic_forwards:ropw -> string) arg_=
    ((case arg_ of
     RISCV_ADDW => "addw"
   | RISCV_SUBW => "subw"
   | RISCV_SLLW => "sllw"
   | RISCV_SRLW => "srlw"
   | RISCV_SRAW => "sraw"
   )))`;


(*val rtypew_mnemonic_backwards : string -> ropw*)

val _ = Define `
 ((rtypew_mnemonic_backwards:string -> ropw) arg_=
    ((case arg_ of
     "addw" => RISCV_ADDW
   | "subw" => RISCV_SUBW
   | "sllw" => RISCV_SLLW
   | "srlw" => RISCV_SRLW
   | "sraw" => RISCV_SRAW
   )))`;


(*val rtypew_mnemonic_forwards_matches : ropw -> bool*)

val _ = Define `
 ((rtypew_mnemonic_forwards_matches:ropw -> bool) arg_= 
  ((case arg_ of
         RISCV_ADDW => T
     | RISCV_SUBW => T
     | RISCV_SLLW => T
     | RISCV_SRLW => T
     | RISCV_SRAW => T
   )))`;


(*val rtypew_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((rtypew_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "addw" => T
   | "subw" => T
   | "sllw" => T
   | "srlw" => T
   | "sraw" => T
   | _ => F
   )))`;


(*val rtypew_mnemonic_matches_prefix : string -> maybe ((ropw * ii))*)

val _ = Define `
 ((rtypew_mnemonic_matches_prefix:string ->(ropw#int)option) arg_=
    (let stringappend_1675_0 = arg_ in
   if (((((string_startswith stringappend_1675_0 "addw")) /\ (
  (case ((string_drop stringappend_1675_0 ((string_length "addw")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1675_0 ((string_length "addw")))) of
       s_ => SOME (RISCV_ADDW, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1675_0 "subw")) /\ (
  (case ((string_drop stringappend_1675_0 ((string_length "subw")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1675_0 ((string_length "subw")))) of
       s_ => SOME (RISCV_SUBW, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1675_0 "sllw")) /\ (
  (case ((string_drop stringappend_1675_0 ((string_length "sllw")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1675_0 ((string_length "sllw")))) of
       s_ => SOME (RISCV_SLLW, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1675_0 "srlw")) /\ (
  (case ((string_drop stringappend_1675_0 ((string_length "srlw")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1675_0 ((string_length "srlw")))) of
       s_ => SOME (RISCV_SRLW, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1675_0 "sraw")) /\ (
  (case ((string_drop stringappend_1675_0 ((string_length "sraw")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1675_0 ((string_length "sraw")))) of
       s_ => SOME (RISCV_SRAW, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val encdec_mul_op_forwards : bool -> bool -> bool -> mword ty3*)

val _ = Define `
 ((encdec_mul_op_forwards:bool -> bool -> bool ->(3)words$word) arg0 arg1 arg2=
    (let arg_ = (arg0, arg1, arg2) in
   (case arg_ of
     (F, T, T) => (vec_of_bits [B0;B0;B0]  :  3 words$word)
   | (T, T, T) => (vec_of_bits [B0;B0;B1]  :  3 words$word)
   | (T, T, F) => (vec_of_bits [B0;B1;B0]  :  3 words$word)
   | (T, F, F) => (vec_of_bits [B0;B1;B1]  :  3 words$word)
   )))`;


(*val encdec_mul_op_backwards : mword ty3 -> (bool * bool * bool)*)

val _ = Define `
 ((encdec_mul_op_backwards:(3)words$word -> bool#bool#bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then (F, T, T)
   else if (((p0_ = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then (T, T, T)
   else if (((p0_ = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then (T, T, F)
   else (T, F, F)))`;


(*val encdec_mul_op_forwards_matches : bool -> bool -> bool -> bool*)

val _ = Define `
 ((encdec_mul_op_forwards_matches:bool -> bool -> bool -> bool) arg0 arg1 arg2=
    (let arg_ = (arg0, arg1, arg2) in
   (case arg_ of
     (F, T, T) => T
   | (T, T, T) => T
   | (T, T, F) => T
   | (T, F, F) => T
   | _ => F
   )))`;


(*val encdec_mul_op_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_mul_op_backwards_matches:(3)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then T
   else F))`;


(*val mul_mnemonic_forwards : bool -> bool -> bool -> string*)

val _ = Define `
 ((mul_mnemonic_forwards:bool -> bool -> bool -> string) arg0 arg1 arg2=
    (let arg_ = (arg0, arg1, arg2) in
   (case arg_ of
     (F, T, T) => "mul"
   | (T, T, T) => "mulh"
   | (T, T, F) => "mulhsu"
   | (T, F, F) => "mulhu"
   )))`;


(*val mul_mnemonic_backwards : string -> (bool * bool * bool)*)

val _ = Define `
 ((mul_mnemonic_backwards:string -> bool#bool#bool) arg_=
    ((case arg_ of
     "mul" => (F, T, T)
   | "mulh" => (T, T, T)
   | "mulhsu" => (T, T, F)
   | "mulhu" => (T, F, F)
   )))`;


(*val mul_mnemonic_forwards_matches : bool -> bool -> bool -> bool*)

val _ = Define `
 ((mul_mnemonic_forwards_matches:bool -> bool -> bool -> bool) arg0 arg1 arg2=
    (let arg_ = (arg0, arg1, arg2) in
   (case arg_ of
     (F, T, T) => T
   | (T, T, T) => T
   | (T, T, F) => T
   | (T, F, F) => T
   | _ => F
   )))`;


(*val mul_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((mul_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "mul" => T
   | "mulh" => T
   | "mulhsu" => T
   | "mulhu" => T
   | _ => F
   )))`;


(*val mul_mnemonic_matches_prefix : string -> maybe (((bool * bool * bool) * ii))*)

val _ = Define `
 ((mul_mnemonic_matches_prefix:string ->((bool#bool#bool)#int)option) arg_=
    (let stringappend_1671_0 = arg_ in
   if (((((string_startswith stringappend_1671_0 "mul")) /\ (
  (case ((string_drop stringappend_1671_0 ((string_length "mul")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1671_0 ((string_length "mul")))) of
       s_ => SOME ((F, T, T), ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1671_0 "mulh")) /\ (
  (case ((string_drop stringappend_1671_0 ((string_length "mulh")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1671_0 ((string_length "mulh")))) of
       s_ => SOME ((T, T, T), ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1671_0 "mulhsu")) /\ (
  (case ((string_drop stringappend_1671_0 ((string_length "mulhsu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1671_0 ((string_length "mulhsu")))) of
       s_ => SOME ((T, T, F), ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1671_0 "mulhu")) /\ (
  (case ((string_drop stringappend_1671_0 ((string_length "mulhu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1671_0 ((string_length "mulhu")))) of
       s_ => SOME ((T, F, F), ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val maybe_not_u_forwards : bool -> string*)

val _ = Define `
 ((maybe_not_u_forwards:bool -> string) arg_=  ((case arg_ of   F => "u" | T => "" )))`;


(*val maybe_not_u_backwards : string -> bool*)

val _ = Define `
 ((maybe_not_u_backwards:string -> bool) arg_=  ((case arg_ of   "u" => F | "" => T )))`;


(*val maybe_not_u_forwards_matches : bool -> bool*)

val _ = Define `
 ((maybe_not_u_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   F => T | T => T )))`;


(*val maybe_not_u_backwards_matches : string -> bool*)

val _ = Define `
 ((maybe_not_u_backwards_matches:string -> bool) arg_=  ((case arg_ of   "u" => T | "" => T | _ => F )))`;


(*val maybe_not_u_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_not_u_matches_prefix:string ->(bool#int)option) arg_=
    (let stringappend_1669_0 = arg_ in
   if (((((string_startswith stringappend_1669_0 "u")) /\ (
  (case ((string_drop stringappend_1669_0 ((string_length "u")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1669_0 ((string_length "u")))) of
       s_ => SOME (F, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1669_0 "")) /\ (
  (case ((string_drop stringappend_1669_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1669_0 ((string_length "")))) of
       s_ => SOME (T, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val bit_maybe_r_forwards : mword ty1 -> string*)

val _ = Define `
 ((bit_maybe_r_forwards:(1)words$word -> string) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then "r"
   else ""))`;


(*val bit_maybe_r_backwards : string -> mword ty1*)

val _ = Define `
 ((bit_maybe_r_backwards:string ->(1)words$word) arg_=
    ((case arg_ of
     "r" => (vec_of_bits [B1]  :  1 words$word)
   | "" => (vec_of_bits [B0]  :  1 words$word)
   )))`;


(*val bit_maybe_r_forwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bit_maybe_r_forwards_matches:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else F))`;


(*val bit_maybe_r_backwards_matches : string -> bool*)

val _ = Define `
 ((bit_maybe_r_backwards_matches:string -> bool) arg_=  ((case arg_ of   "r" => T | "" => T | _ => F )))`;


(*val bit_maybe_r_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_r_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let stringappend_1667_0 = arg_ in
   if (((((string_startswith stringappend_1667_0 "r")) /\ (
  (case ((string_drop stringappend_1667_0 ((string_length "r")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1667_0 ((string_length "r")))) of
       s_ =>
        SOME ((vec_of_bits [B1]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1667_0 "")) /\ (
  (case ((string_drop stringappend_1667_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1667_0 ((string_length "")))) of
       s_ =>
        SOME ((vec_of_bits [B0]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val bit_maybe_w_forwards : mword ty1 -> string*)

val _ = Define `
 ((bit_maybe_w_forwards:(1)words$word -> string) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then "w"
   else ""))`;


(*val bit_maybe_w_backwards : string -> mword ty1*)

val _ = Define `
 ((bit_maybe_w_backwards:string ->(1)words$word) arg_=
    ((case arg_ of
     "w" => (vec_of_bits [B1]  :  1 words$word)
   | "" => (vec_of_bits [B0]  :  1 words$word)
   )))`;


(*val bit_maybe_w_forwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bit_maybe_w_forwards_matches:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else F))`;


(*val bit_maybe_w_backwards_matches : string -> bool*)

val _ = Define `
 ((bit_maybe_w_backwards_matches:string -> bool) arg_=  ((case arg_ of   "w" => T | "" => T | _ => F )))`;


(*val bit_maybe_w_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_w_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let stringappend_1665_0 = arg_ in
   if (((((string_startswith stringappend_1665_0 "w")) /\ (
  (case ((string_drop stringappend_1665_0 ((string_length "w")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1665_0 ((string_length "w")))) of
       s_ =>
        SOME ((vec_of_bits [B1]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1665_0 "")) /\ (
  (case ((string_drop stringappend_1665_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1665_0 ((string_length "")))) of
       s_ =>
        SOME ((vec_of_bits [B0]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val bit_maybe_i_forwards : mword ty1 -> string*)

val _ = Define `
 ((bit_maybe_i_forwards:(1)words$word -> string) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then "i"
   else ""))`;


(*val bit_maybe_i_backwards : string -> mword ty1*)

val _ = Define `
 ((bit_maybe_i_backwards:string ->(1)words$word) arg_=
    ((case arg_ of
     "i" => (vec_of_bits [B1]  :  1 words$word)
   | "" => (vec_of_bits [B0]  :  1 words$word)
   )))`;


(*val bit_maybe_i_forwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bit_maybe_i_forwards_matches:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else F))`;


(*val bit_maybe_i_backwards_matches : string -> bool*)

val _ = Define `
 ((bit_maybe_i_backwards_matches:string -> bool) arg_=  ((case arg_ of   "i" => T | "" => T | _ => F )))`;


(*val bit_maybe_i_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_i_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let stringappend_1663_0 = arg_ in
   if (((((string_startswith stringappend_1663_0 "i")) /\ (
  (case ((string_drop stringappend_1663_0 ((string_length "i")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1663_0 ((string_length "i")))) of
       s_ =>
        SOME ((vec_of_bits [B1]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1663_0 "")) /\ (
  (case ((string_drop stringappend_1663_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1663_0 ((string_length "")))) of
       s_ =>
        SOME ((vec_of_bits [B0]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val bit_maybe_o_forwards : mword ty1 -> string*)

val _ = Define `
 ((bit_maybe_o_forwards:(1)words$word -> string) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then "o"
   else ""))`;


(*val bit_maybe_o_backwards : string -> mword ty1*)

val _ = Define `
 ((bit_maybe_o_backwards:string ->(1)words$word) arg_=
    ((case arg_ of
     "o" => (vec_of_bits [B1]  :  1 words$word)
   | "" => (vec_of_bits [B0]  :  1 words$word)
   )))`;


(*val bit_maybe_o_forwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bit_maybe_o_forwards_matches:(1)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B1]  :  1 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B0]  :  1 words$word)))) then T
   else F))`;


(*val bit_maybe_o_backwards_matches : string -> bool*)

val _ = Define `
 ((bit_maybe_o_backwards_matches:string -> bool) arg_=  ((case arg_ of   "o" => T | "" => T | _ => F )))`;


(*val bit_maybe_o_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_o_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let stringappend_1661_0 = arg_ in
   if (((((string_startswith stringappend_1661_0 "o")) /\ (
  (case ((string_drop stringappend_1661_0 ((string_length "o")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1661_0 ((string_length "o")))) of
       s_ =>
        SOME ((vec_of_bits [B1]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1661_0 "")) /\ (
  (case ((string_drop stringappend_1661_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1661_0 ((string_length "")))) of
       s_ =>
        SOME ((vec_of_bits [B0]  :  1 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val fence_bits_forwards : mword ty4 -> string*)

val _ = Define `
 ((fence_bits_forwards:(4)words$word -> string) arg_=
    ((case arg_ of
     v__0 =>
      let (r : 1 bits) = ((subrange_vec_dec v__0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in
      let (w : 1 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
      let (i : 1 bits) = ((subrange_vec_dec v__0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
      let (o1 : 1 bits) = ((subrange_vec_dec v__0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
      string_append ((bit_maybe_r_forwards r))
        ((string_append ((bit_maybe_w_forwards w))
            ((string_append ((bit_maybe_i_forwards i))
                ((string_append ((bit_maybe_o_forwards o1)) ""))))))
   )))`;


(*val fence_bits_backwards : string -> mword ty4*)

val _ = Define `
 ((fence_bits_backwards:string ->(4)words$word) arg_=
    (let stringappend_1649_0 = arg_ in
   let (r, stringappend_1651_0) =
     ((case ((bit_maybe_r_matches_prefix stringappend_1649_0  :  (( 1 words$word # ii))option)) of
       SOME (stringappend_1650_0,stringappend_1651_0) => (stringappend_1650_0, stringappend_1651_0)
     )) in
   let stringappend_1652_0 = (string_drop stringappend_1649_0 stringappend_1651_0) in
   let (w, stringappend_1654_0) =
     ((case ((bit_maybe_w_matches_prefix stringappend_1652_0  :  (( 1 words$word # ii))option)) of
       SOME (stringappend_1653_0,stringappend_1654_0) => (stringappend_1653_0, stringappend_1654_0)
     )) in
   let stringappend_1655_0 = (string_drop stringappend_1652_0 stringappend_1654_0) in
   let (i, stringappend_1657_0) =
     ((case ((bit_maybe_i_matches_prefix stringappend_1655_0  :  (( 1 words$word # ii))option)) of
       SOME (stringappend_1656_0,stringappend_1657_0) => (stringappend_1656_0, stringappend_1657_0)
     )) in
   let stringappend_1658_0 = (string_drop stringappend_1655_0 stringappend_1657_0) in
   let (o1, stringappend_1660_0) =
     ((case ((bit_maybe_o_matches_prefix stringappend_1658_0  :  (( 1 words$word # ii))option)) of
       SOME (stringappend_1659_0,stringappend_1660_0) => (stringappend_1659_0, stringappend_1660_0)
     )) in
   (case ((string_drop stringappend_1658_0 stringappend_1660_0)) of
     "" => (concat_vec r ((concat_vec w ((concat_vec i o1  :  2 words$word))  :  3 words$word))  :  4 words$word)
   )))`;


(*val fence_bits_forwards_matches : mword ty4 -> bool*)

val _ = Define `
 ((fence_bits_forwards_matches:(4)words$word -> bool) arg_= 
  ((case arg_ of   v__1 => T )))`;


(*val fence_bits_backwards_matches : string -> bool*)

val _ = Define `
 ((fence_bits_backwards_matches:string -> bool) arg_=
    (let stringappend_1637_0 = arg_ in
   if ((case ((bit_maybe_r_matches_prefix stringappend_1637_0  :  (( 1 words$word # ii))option)) of
       SOME (stringappend_1638_0,stringappend_1639_0) =>
        let stringappend_1640_0 = (string_drop stringappend_1637_0 stringappend_1639_0) in
        if ((case ((bit_maybe_w_matches_prefix stringappend_1640_0  :  (( 1 words$word # ii))option)) of
            SOME (stringappend_1641_0,stringappend_1642_0) =>
             let stringappend_1643_0 = (string_drop stringappend_1640_0 stringappend_1642_0) in
             if ((case ((bit_maybe_i_matches_prefix stringappend_1643_0  :  (( 1 words$word # ii))option)) of
                 SOME (stringappend_1644_0,stringappend_1645_0) =>
                  let stringappend_1646_0 = (string_drop stringappend_1643_0 stringappend_1645_0) in
                  if ((case ((bit_maybe_o_matches_prefix stringappend_1646_0
                               :  (( 1 words$word # ii))option)) of
                      SOME (stringappend_1647_0,stringappend_1648_0) =>
                       (case ((string_drop stringappend_1646_0 stringappend_1648_0)) of
                         "" => T
                       | _ => F
                       )
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (r, stringappend_1639_0) =
       ((case ((bit_maybe_r_matches_prefix stringappend_1637_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1638_0,stringappend_1639_0) =>
          (stringappend_1638_0, stringappend_1639_0)
       )) in
     let stringappend_1640_0 = (string_drop stringappend_1637_0 stringappend_1639_0) in
     let (w, stringappend_1642_0) =
       ((case ((bit_maybe_w_matches_prefix stringappend_1640_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1641_0,stringappend_1642_0) =>
          (stringappend_1641_0, stringappend_1642_0)
       )) in
     let stringappend_1643_0 = (string_drop stringappend_1640_0 stringappend_1642_0) in
     let (i, stringappend_1645_0) =
       ((case ((bit_maybe_i_matches_prefix stringappend_1643_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1644_0,stringappend_1645_0) =>
          (stringappend_1644_0, stringappend_1645_0)
       )) in
     let stringappend_1646_0 = (string_drop stringappend_1643_0 stringappend_1645_0) in
     let (o1, stringappend_1648_0) =
       ((case ((bit_maybe_o_matches_prefix stringappend_1646_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1647_0,stringappend_1648_0) =>
          (stringappend_1647_0, stringappend_1648_0)
       )) in
     (case ((string_drop stringappend_1646_0 stringappend_1648_0)) of   "" => T )
   else F))`;


(*val fence_bits_matches_prefix : string -> maybe ((mword ty4 * ii))*)

val _ = Define `
 ((fence_bits_matches_prefix:string ->((4)words$word#int)option) arg_=
    (let stringappend_1625_0 = arg_ in
   if ((case ((bit_maybe_r_matches_prefix stringappend_1625_0  :  (( 1 words$word # ii))option)) of
       SOME (stringappend_1626_0,stringappend_1627_0) =>
        let stringappend_1628_0 = (string_drop stringappend_1625_0 stringappend_1627_0) in
        if ((case ((bit_maybe_w_matches_prefix stringappend_1628_0  :  (( 1 words$word # ii))option)) of
            SOME (stringappend_1629_0,stringappend_1630_0) =>
             let stringappend_1631_0 = (string_drop stringappend_1628_0 stringappend_1630_0) in
             if ((case ((bit_maybe_i_matches_prefix stringappend_1631_0  :  (( 1 words$word # ii))option)) of
                 SOME (stringappend_1632_0,stringappend_1633_0) =>
                  let stringappend_1634_0 = (string_drop stringappend_1631_0 stringappend_1633_0) in
                  if ((case ((bit_maybe_o_matches_prefix stringappend_1634_0
                               :  (( 1 words$word # ii))option)) of
                      SOME (stringappend_1635_0,stringappend_1636_0) => 
  (case ((string_drop stringappend_1634_0 stringappend_1636_0)) of   s_ => T )
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (r, stringappend_1627_0) =
       ((case ((bit_maybe_r_matches_prefix stringappend_1625_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1626_0,stringappend_1627_0) =>
          (stringappend_1626_0, stringappend_1627_0)
       )) in
     let stringappend_1628_0 = (string_drop stringappend_1625_0 stringappend_1627_0) in
     let (w, stringappend_1630_0) =
       ((case ((bit_maybe_w_matches_prefix stringappend_1628_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1629_0,stringappend_1630_0) =>
          (stringappend_1629_0, stringappend_1630_0)
       )) in
     let stringappend_1631_0 = (string_drop stringappend_1628_0 stringappend_1630_0) in
     let (i, stringappend_1633_0) =
       ((case ((bit_maybe_i_matches_prefix stringappend_1631_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1632_0,stringappend_1633_0) =>
          (stringappend_1632_0, stringappend_1633_0)
       )) in
     let stringappend_1634_0 = (string_drop stringappend_1631_0 stringappend_1633_0) in
     let (o1, stringappend_1636_0) =
       ((case ((bit_maybe_o_matches_prefix stringappend_1634_0  :  (( 1 words$word # ii))option)) of
         SOME (stringappend_1635_0,stringappend_1636_0) =>
          (stringappend_1635_0, stringappend_1636_0)
       )) in
     (case ((string_drop stringappend_1634_0 stringappend_1636_0)) of
       s_ =>
        SOME ((concat_vec r ((concat_vec w ((concat_vec i o1  :  2 words$word))  :  3 words$word))
                :  4 words$word),
              ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val aqrl_str : bool -> bool -> string*)

val _ = Define `
 ((aqrl_str:bool -> bool -> string) (aq : bool) (rl : bool)=
    ((case (aq, rl) of
     (F, F) => ""
   | (F, T) => ".rl"
   | (T, F) => ".aq"
   | (T, T) => ".aqrl"
   )))`;


(*val lrsc_width_str : word_width -> string*)

val _ = Define `
 ((lrsc_width_str:word_width -> string) width=
    ((case width of   BYTE => ".b" | HALF => ".h" | WORD => ".w" | DOUBLE => ".d" )))`;


(*val process_loadres : forall 'int8_times_n . Size 'int8_times_n => mword ty5 -> mword ty64 -> MemoryOpResult (mword 'int8_times_n) -> bool -> M bool*)

val _ = Define `
 ((process_loadres:(5)words$word ->(64)words$word ->('int8_times_n words$word)MemoryOpResult -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd addr value is_unsigned=
    ((case ((extend_value is_unsigned value  : ( 64 words$word) MemoryOpResult)) of
     MemValue (result) =>
      let (_ : unit) = (load_reservation addr) in sail2_state_monad$seqS
      (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T)
   | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
   )))`;


(*val encdec_amoop_forwards : amoop -> mword ty5*)

val _ = Define `
 ((encdec_amoop_forwards:amoop ->(5)words$word) arg_=
    ((case arg_ of
     AMOSWAP => (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)
   | AMOADD => (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
   | AMOXOR => (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)
   | AMOAND => (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)
   | AMOOR => (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)
   | AMOMIN => (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)
   | AMOMAX => (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)
   | AMOMINU => (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)
   | AMOMAXU => (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)
   )))`;


(*val encdec_amoop_backwards : mword ty5 -> amoop*)

val _ = Define `
 ((encdec_amoop_backwards:(5)words$word -> amoop) arg_=
    (let p0_ = arg_ in
   if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word))))))
   then
     AMOSWAP
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))))) then
     AMOADD
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))))) then
     AMOXOR
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))))) then
     AMOAND
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))))) then
     AMOOR
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))))) then
     AMOMIN
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))))) then
     AMOMAX
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)))))) then
     AMOMINU
   else AMOMAXU))`;


(*val encdec_amoop_forwards_matches : amoop -> bool*)

val _ = Define `
 ((encdec_amoop_forwards_matches:amoop -> bool) arg_= 
  ((case arg_ of
         AMOSWAP => T
     | AMOADD => T
     | AMOXOR => T
     | AMOAND => T
     | AMOOR => T
     | AMOMIN => T
     | AMOMAX => T
     | AMOMINU => T
     | AMOMAXU => T
   )))`;


(*val encdec_amoop_backwards_matches : mword ty5 -> bool*)

val _ = Define `
 ((encdec_amoop_backwards_matches:(5)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word))))))
   then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  :  5 words$word)))))) then
     T
   else if (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))))) then
     T
   else F))`;


(*val amo_mnemonic_forwards : amoop -> string*)

val _ = Define `
 ((amo_mnemonic_forwards:amoop -> string) arg_=
    ((case arg_ of
     AMOSWAP => "amoswap"
   | AMOADD => "amoadd"
   | AMOXOR => "amoxor"
   | AMOAND => "amoand"
   | AMOOR => "amoor"
   | AMOMIN => "amomin"
   | AMOMAX => "amomax"
   | AMOMINU => "amominu"
   | AMOMAXU => "amomaxu"
   )))`;


(*val amo_mnemonic_backwards : string -> amoop*)

val _ = Define `
 ((amo_mnemonic_backwards:string -> amoop) arg_=
    ((case arg_ of
     "amoswap" => AMOSWAP
   | "amoadd" => AMOADD
   | "amoxor" => AMOXOR
   | "amoand" => AMOAND
   | "amoor" => AMOOR
   | "amomin" => AMOMIN
   | "amomax" => AMOMAX
   | "amominu" => AMOMINU
   | "amomaxu" => AMOMAXU
   )))`;


(*val amo_mnemonic_forwards_matches : amoop -> bool*)

val _ = Define `
 ((amo_mnemonic_forwards_matches:amoop -> bool) arg_= 
  ((case arg_ of
         AMOSWAP => T
     | AMOADD => T
     | AMOXOR => T
     | AMOAND => T
     | AMOOR => T
     | AMOMIN => T
     | AMOMAX => T
     | AMOMINU => T
     | AMOMAXU => T
   )))`;


(*val amo_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((amo_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of
     "amoswap" => T
   | "amoadd" => T
   | "amoxor" => T
   | "amoand" => T
   | "amoor" => T
   | "amomin" => T
   | "amomax" => T
   | "amominu" => T
   | "amomaxu" => T
   | _ => F
   )))`;


(*val amo_mnemonic_matches_prefix : string -> maybe ((amoop * ii))*)

val _ = Define `
 ((amo_mnemonic_matches_prefix:string ->(amoop#int)option) arg_=
    (let stringappend_1616_0 = arg_ in
   if (((((string_startswith stringappend_1616_0 "amoswap")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amoswap")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amoswap")))) of
       s_ => SOME (AMOSWAP, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amoadd")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amoadd")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amoadd")))) of
       s_ => SOME (AMOADD, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amoxor")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amoxor")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amoxor")))) of
       s_ => SOME (AMOXOR, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amoand")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amoand")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amoand")))) of
       s_ => SOME (AMOAND, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amoor")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amoor")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amoor")))) of
       s_ => SOME (AMOOR, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amomin")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amomin")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amomin")))) of
       s_ => SOME (AMOMIN, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amomax")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amomax")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amomax")))) of
       s_ => SOME (AMOMAX, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amominu")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amominu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amominu")))) of
       s_ => SOME (AMOMINU, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1616_0 "amomaxu")) /\ (
  (case ((string_drop stringappend_1616_0 ((string_length "amomaxu")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1616_0 ((string_length "amomaxu")))) of
       s_ => SOME (AMOMAXU, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val encdec_csrop_forwards : csrop -> mword ty2*)

val _ = Define `
 ((encdec_csrop_forwards:csrop ->(2)words$word) arg_=
    ((case arg_ of
     CSRRW => (vec_of_bits [B0;B1]  :  2 words$word)
   | CSRRS => (vec_of_bits [B1;B0]  :  2 words$word)
   | CSRRC => (vec_of_bits [B1;B1]  :  2 words$word)
   )))`;


(*val encdec_csrop_backwards : mword ty2 -> csrop*)

val _ = Define `
 ((encdec_csrop_backwards:(2)words$word -> csrop) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B1]  :  2 words$word)))) then CSRRW
   else if (((p0_ = (vec_of_bits [B1;B0]  :  2 words$word)))) then CSRRS
   else CSRRC))`;


(*val encdec_csrop_forwards_matches : csrop -> bool*)

val _ = Define `
 ((encdec_csrop_forwards_matches:csrop -> bool) arg_= 
  ((case arg_ of   CSRRW => T | CSRRS => T | CSRRC => T )))`;


(*val encdec_csrop_backwards_matches : mword ty2 -> bool*)

val _ = Define `
 ((encdec_csrop_backwards_matches:(2)words$word -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (vec_of_bits [B0;B1]  :  2 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B0]  :  2 words$word)))) then T
   else if (((p0_ = (vec_of_bits [B1;B1]  :  2 words$word)))) then T
   else F))`;


(*val readCSR : mword ty12 -> M (mword ty64)*)

val _ = Define `
 ((readCSR:(12)words$word ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) csr=
    (let b__0 = csr in sail2_state_monad$bindS
   (if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mvendorid_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS marchid_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mimpid_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mhartid_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__4 : Mstatus) . 
      sail2_state_monad$returnS ((get_Mstatus_bits w__4  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS misa_ref) (\ (w__5 : Misa) .  sail2_state_monad$returnS ((get_Misa_bits w__5  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS medeleg_ref) (\ (w__6 : Medeleg) . 
      sail2_state_monad$returnS ((get_Medeleg_bits w__6  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mideleg_ref) (\ (w__7 : Minterrupts) . 
      sail2_state_monad$returnS ((get_Minterrupts_bits w__7  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mie_ref) (\ (w__8 : Minterrupts) . 
      sail2_state_monad$returnS ((get_Minterrupts_bits w__8  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mtvec_ref) (\ (w__9 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__9  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mcounteren_ref) (\ (w__10 : Counteren) . 
      sail2_state_monad$returnS ((EXTZ (( 64 : int):ii) ((get_Counteren_bits w__10  :  32 words$word))  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mscratch_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mepc_ref  : ( 64 words$word) M) (\ (w__12 :  64 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 64 words$word) M) (\ (w__13 :  64 words$word) . 
      sail2_state_monad$returnS ((and_vec w__12 w__13  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mcause_ref) (\ (w__14 : Mcause) . 
      sail2_state_monad$returnS ((get_Mcause_bits w__14  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mtval_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mip_ref) (\ (w__16 : Minterrupts) . 
      sail2_state_monad$returnS ((get_Minterrupts_bits w__16  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS pmpcfg0_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS pmpaddr0_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__19 : Mstatus) . 
      sail2_state_monad$returnS ((get_Sstatus_bits ((lower_mstatus w__19))  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS sedeleg_ref) (\ (w__20 : Sedeleg) . 
      sail2_state_monad$returnS ((get_Sedeleg_bits w__20  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS sideleg_ref) (\ (w__21 : Sinterrupts) . 
      sail2_state_monad$returnS ((get_Sinterrupts_bits w__21  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mie_ref) (\ (w__22 : Minterrupts) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mideleg_ref) (\ (w__23 : Minterrupts) . 
      sail2_state_monad$returnS ((get_Sinterrupts_bits ((lower_mie w__22 w__23))  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS stvec_ref) (\ (w__24 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__24  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS scounteren_ref) (\ (w__25 : Counteren) . 
      sail2_state_monad$returnS ((EXTZ (( 64 : int):ii) ((get_Counteren_bits w__25  :  32 words$word))  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS sscratch_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS sepc_ref  : ( 64 words$word) M) (\ (w__27 :  64 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 64 words$word) M) (\ (w__28 :  64 words$word) . 
      sail2_state_monad$returnS ((and_vec w__27 w__28  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS scause_ref) (\ (w__29 : Mcause) . 
      sail2_state_monad$returnS ((get_Mcause_bits w__29  :  64 words$word)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then
      (sail2_state_monad$read_regS stval_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mip_ref) (\ (w__31 : Minterrupts) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mideleg_ref) (\ (w__32 : Minterrupts) . 
      sail2_state_monad$returnS ((get_Sinterrupts_bits ((lower_mip w__31 w__32))  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS satp_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then
      (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then
      (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M)
    else if (((b__0 = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS tselect_ref  : ( 64 words$word) M) (\ (w__37 :  64 words$word) . 
      sail2_state_monad$returnS ((not_vec w__37  :  64 words$word)))
    else
      let (_ : unit) = (print_bits "unhandled read to CSR " csr) in
      sail2_state_monad$returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) (\ (res : xlenbits) . 
   let (_ : unit) =
     (print_endline
       ((STRCAT "CSR "
           ((STRCAT ((csr_name csr)) ((STRCAT " -> " ((string_of_bits res))))))))) in
   sail2_state_monad$returnS res)))`;


(*val writeCSR : mword ty12 -> mword ty64 -> M unit*)

val _ = Define `
 ((writeCSR:(12)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (value : xlenbits)=
    (let b__0 = csr in sail2_state_monad$bindS
   (if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mstatus_ref ((legalize_mstatus w__0 value)))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__1 : Mstatus) . 
      sail2_state_monad$returnS (SOME ((get_Mstatus_bits w__1  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS misa_ref) (\ (w__2 : Misa) .  sail2_state_monad$bindS
      (legalize_misa w__2 value) (\ (w__3 : Misa) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS misa_ref w__3)
      (sail2_state_monad$read_regS misa_ref)) (\ (w__4 : Misa) .  sail2_state_monad$returnS (SOME ((get_Misa_bits w__4  :  64 words$word))))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS medeleg_ref) (\ (w__5 : Medeleg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS medeleg_ref ((legalize_medeleg w__5 value)))
      (sail2_state_monad$read_regS medeleg_ref)) (\ (w__6 : Medeleg) . 
      sail2_state_monad$returnS (SOME ((get_Medeleg_bits w__6  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mideleg_ref) (\ (w__7 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mideleg_ref ((legalize_mideleg w__7 value)))
      (sail2_state_monad$read_regS mideleg_ref)) (\ (w__8 : Minterrupts) . 
      sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__8  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mie_ref) (\ (w__9 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mie_ref ((legalize_mie w__9 value)))
      (sail2_state_monad$read_regS mie_ref)) (\ (w__10 : Minterrupts) . 
      sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__10  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mtvec_ref) (\ (w__11 : Mtvec) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mtvec_ref ((legalize_tvec w__11 value)))
      (sail2_state_monad$read_regS mtvec_ref)) (\ (w__12 : Mtvec) . 
      sail2_state_monad$returnS (SOME ((get_Mtvec_bits w__12  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mcounteren_ref) (\ (w__13 : Counteren) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mcounteren_ref ((legalize_mcounteren w__13 value)))
      (sail2_state_monad$read_regS mcounteren_ref)) (\ (w__14 : Counteren) . 
      sail2_state_monad$returnS (SOME ((EXTZ (( 64 : int):ii) ((get_Counteren_bits w__14  :  32 words$word))  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mscratch_ref value)
      (sail2_state_monad$read_regS mscratch_ref  : ( 64 words$word) M)) (\ (w__15 :  64 words$word) .  sail2_state_monad$returnS (SOME w__15))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (legalize_xepc value  : ( 64 words$word) M) (\ (w__16 : xlenbits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mepc_ref w__16)
      (sail2_state_monad$read_regS mepc_ref  : ( 64 words$word) M)) (\ (w__17 :  64 words$word) .  sail2_state_monad$returnS (SOME w__17)))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (set_Mcause_bits mcause_ref value)
      (sail2_state_monad$read_regS mcause_ref)) (\ (w__18 : Mcause) . 
      sail2_state_monad$returnS (SOME ((get_Mcause_bits w__18  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mtval_ref value)
      (sail2_state_monad$read_regS mtval_ref  : ( 64 words$word) M)) (\ (w__19 :  64 words$word) .  sail2_state_monad$returnS (SOME w__19))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mip_ref) (\ (w__20 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mip_ref ((legalize_mip w__20 value)))
      (sail2_state_monad$read_regS mip_ref)) (\ (w__21 : Minterrupts) . 
      sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__21  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS pmpcfg0_ref value)
      (sail2_state_monad$read_regS pmpcfg0_ref  : ( 64 words$word) M)) (\ (w__22 :  64 words$word) .  sail2_state_monad$returnS (SOME w__22))
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS pmpaddr0_ref value)
      (sail2_state_monad$read_regS pmpaddr0_ref  : ( 64 words$word) M)) (\ (w__23 :  64 words$word) .  sail2_state_monad$returnS (SOME w__23))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__24 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mstatus_ref ((legalize_sstatus w__24 value)))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__25 : Mstatus) . 
      sail2_state_monad$returnS (SOME ((get_Mstatus_bits w__25  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS sedeleg_ref) (\ (w__26 : Sedeleg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS sedeleg_ref ((legalize_sedeleg w__26 value)))
      (sail2_state_monad$read_regS sedeleg_ref)) (\ (w__27 : Sedeleg) . 
      sail2_state_monad$returnS (SOME ((get_Sedeleg_bits w__27  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (set_Sinterrupts_bits sideleg_ref value)
      (sail2_state_monad$read_regS sideleg_ref)) (\ (w__28 : Sinterrupts) . 
      sail2_state_monad$returnS (SOME ((get_Sinterrupts_bits w__28  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mie_ref) (\ (w__29 : Minterrupts) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mideleg_ref) (\ (w__30 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mie_ref ((legalize_sie w__29 w__30 value)))
      (sail2_state_monad$read_regS mie_ref)) (\ (w__31 : Minterrupts) . 
      sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__31  :  64 words$word))))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS stvec_ref) (\ (w__32 : Mtvec) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS stvec_ref ((legalize_tvec w__32 value)))
      (sail2_state_monad$read_regS stvec_ref)) (\ (w__33 : Mtvec) . 
      sail2_state_monad$returnS (SOME ((get_Mtvec_bits w__33  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS scounteren_ref) (\ (w__34 : Counteren) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS scounteren_ref ((legalize_scounteren w__34 value)))
      (sail2_state_monad$read_regS scounteren_ref)) (\ (w__35 : Counteren) . 
      sail2_state_monad$returnS (SOME ((EXTZ (( 64 : int):ii) ((get_Counteren_bits w__35  :  32 words$word))  :  64 words$word)))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS sscratch_ref value)
      (sail2_state_monad$read_regS sscratch_ref  : ( 64 words$word) M)) (\ (w__36 :  64 words$word) .  sail2_state_monad$returnS (SOME w__36))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  :  12 words$word)))) then sail2_state_monad$bindS
      (legalize_xepc value  : ( 64 words$word) M) (\ (w__37 : xlenbits) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS sepc_ref w__37)
      (sail2_state_monad$read_regS sepc_ref  : ( 64 words$word) M)) (\ (w__38 :  64 words$word) .  sail2_state_monad$returnS (SOME w__38)))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (set_Mcause_bits scause_ref value)
      (sail2_state_monad$read_regS scause_ref)) (\ (w__39 : Mcause) . 
      sail2_state_monad$returnS (SOME ((get_Mcause_bits w__39  :  64 words$word))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS stval_ref value)
      (sail2_state_monad$read_regS stval_ref  : ( 64 words$word) M)) (\ (w__40 :  64 words$word) .  sail2_state_monad$returnS (SOME w__40))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mip_ref) (\ (w__41 : Minterrupts) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mideleg_ref) (\ (w__42 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mip_ref ((legalize_sip w__41 w__42 value)))
      (sail2_state_monad$read_regS mip_ref)) (\ (w__43 : Minterrupts) . 
      sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__43  :  64 words$word))))))
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS
      (cur_Architecture () ) (\ (w__44 : Architecture) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS satp_ref  : ( 64 words$word) M) (\ (w__45 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS satp_ref ((legalize_satp w__44 w__45 value  :  64 words$word)))
      (sail2_state_monad$read_regS satp_ref  : ( 64 words$word) M)) (\ (w__46 :  64 words$word) .  sail2_state_monad$returnS (SOME w__46))))
    else if (((b__0 = (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS tselect_ref value)
      (sail2_state_monad$read_regS tselect_ref  : ( 64 words$word) M)) (\ (w__47 :  64 words$word) .  sail2_state_monad$returnS (SOME w__47))
    else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS mcycle_ref value)
      (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M)) (\ (w__48 :  64 words$word) .  sail2_state_monad$returnS (SOME w__48))
    else if (((b__0 = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS minstret_ref value)
      (sail2_state_monad$write_regS minstret_written_ref T))
      (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M)) (\ (w__49 :  64 words$word) .  sail2_state_monad$returnS (SOME w__49))
    else sail2_state_monad$returnS NONE) (\ (res :  xlenbits option) . 
   sail2_state_monad$returnS ((case res of
     SOME (v) =>
      print_endline
        ((STRCAT "CSR "
            ((STRCAT ((csr_name csr))
                ((STRCAT " <- "
                    ((STRCAT ((string_of_bits v))
                        ((STRCAT " (input: " ((STRCAT ((string_of_bits value)) ")"))))))))))))
   | NONE => print_bits "unhandled write to CSR " csr
   )))))`;


(*val maybe_i_forwards : bool -> string*)

val _ = Define `
 ((maybe_i_forwards:bool -> string) arg_=  ((case arg_ of   T => "i" | F => "" )))`;


(*val maybe_i_backwards : string -> bool*)

val _ = Define `
 ((maybe_i_backwards:string -> bool) arg_=  ((case arg_ of   "i" => T | "" => F )))`;


(*val maybe_i_forwards_matches : bool -> bool*)

val _ = Define `
 ((maybe_i_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


(*val maybe_i_backwards_matches : string -> bool*)

val _ = Define `
 ((maybe_i_backwards_matches:string -> bool) arg_=  ((case arg_ of   "i" => T | "" => T | _ => F )))`;


(*val maybe_i_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_i_matches_prefix:string ->(bool#int)option) arg_=
    (let stringappend_1614_0 = arg_ in
   if (((((string_startswith stringappend_1614_0 "i")) /\ (
  (case ((string_drop stringappend_1614_0 ((string_length "i")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1614_0 ((string_length "i")))) of
       s_ => SOME (T, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1614_0 "")) /\ (
  (case ((string_drop stringappend_1614_0 ((string_length "")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1614_0 ((string_length "")))) of
       s_ => SOME (F, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


(*val csr_mnemonic_forwards : csrop -> string*)

val _ = Define `
 ((csr_mnemonic_forwards:csrop -> string) arg_=
    ((case arg_ of   CSRRW => "csrrw" | CSRRS => "csrrs" | CSRRC => "csrrc" )))`;


(*val csr_mnemonic_backwards : string -> csrop*)

val _ = Define `
 ((csr_mnemonic_backwards:string -> csrop) arg_=
    ((case arg_ of   "csrrw" => CSRRW | "csrrs" => CSRRS | "csrrc" => CSRRC )))`;


(*val csr_mnemonic_forwards_matches : csrop -> bool*)

val _ = Define `
 ((csr_mnemonic_forwards_matches:csrop -> bool) arg_= 
  ((case arg_ of   CSRRW => T | CSRRS => T | CSRRC => T )))`;


(*val csr_mnemonic_backwards_matches : string -> bool*)

val _ = Define `
 ((csr_mnemonic_backwards_matches:string -> bool) arg_=
    ((case arg_ of   "csrrw" => T | "csrrs" => T | "csrrc" => T | _ => F )))`;


(*val csr_mnemonic_matches_prefix : string -> maybe ((csrop * ii))*)

val _ = Define `
 ((csr_mnemonic_matches_prefix:string ->(csrop#int)option) arg_=
    (let stringappend_1611_0 = arg_ in
   if (((((string_startswith stringappend_1611_0 "csrrw")) /\ (
  (case ((string_drop stringappend_1611_0 ((string_length "csrrw")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1611_0 ((string_length "csrrw")))) of
       s_ => SOME (CSRRW, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1611_0 "csrrs")) /\ (
  (case ((string_drop stringappend_1611_0 ((string_length "csrrs")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1611_0 ((string_length "csrrs")))) of
       s_ => SOME (CSRRS, ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_1611_0 "csrrc")) /\ (
  (case ((string_drop stringappend_1611_0 ((string_length "csrrc")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_1611_0 ((string_length "csrrc")))) of
       s_ => SOME (CSRRC, ((string_length arg_)) - ((string_length s_)))
     )
   else NONE))`;


val _ = Define `
 ((decodeCompressed:(16)words$word ->(ast)option) v__2=
    (if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) /\ ((((((((regbits_to_regno ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)))) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (nzi1 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzi0 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     if ((((((nzi1 = (vec_of_bits [B0]  :  1 words$word)))) /\ (((((regbits_to_regno nzi0)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) then
       SOME (NOP () )
     else NONE
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
     let (nz54 : 2 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 11 : int):ii)  :  2 words$word)) in
     let (nz96 : 4 bits) = ((subrange_vec_dec v__2 (( 10 : int):ii) (( 7 : int):ii)  :  4 words$word)) in
     let (nz2 : 1 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (nz3 : 1 bits) = ((subrange_vec_dec v__2 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (rd : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let nzimm =
       ((concat_vec nz96 ((concat_vec nz54 ((concat_vec nz3 nz2  :  2 words$word))  :  4 words$word))
         :  8 words$word)) in
     if (((nzimm = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)))) then NONE
     else SOME (C_ADDI4SPN (rd,nzimm))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
     let (ui53 : 3 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs1 : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (ui2 : 1 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (ui6 : 1 bits) = ((subrange_vec_dec v__2 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (rd : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let uimm = ((concat_vec ui6 ((concat_vec ui53 ui2  :  4 words$word))  :  5 words$word)) in
     SOME (C_LW (uimm,rs1,rd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
     let (ui53 : 3 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs1 : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (ui76 : 2 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (rd : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let uimm = ((concat_vec ui76 ui53  :  5 words$word)) in
     SOME (C_LD (uimm,rs1,rd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
     let (ui53 : 3 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs1 : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (ui2 : 1 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (ui6 : 1 bits) = ((subrange_vec_dec v__2 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let uimm = ((concat_vec ui6 ((concat_vec ui53 ui2  :  4 words$word))  :  5 words$word)) in
     SOME (C_SW (uimm,rs1,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
     let (ui53 : 3 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs1 : 3 bits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (ui76 : 2 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (rs2 : 3 bits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let uimm = ((concat_vec ui76 ui53  :  5 words$word)) in
     SOME (C_SD (uimm,rs1,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (nzi5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rsd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (nzi40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let nzi = ((concat_vec nzi5 nzi40  :  6 words$word)) in
     if ((((((nzi = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) \/ (((((regbits_to_regno rsd)) = ((regbits_to_regno zreg)))))))) then
       NONE
     else SOME (C_ADDI (nzi,rsd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (imm5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rsd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     SOME (C_ADDIW ((concat_vec imm5 imm40  :  6 words$word),rsd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (imm5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     if (((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) then NONE
     else SOME (C_LI ((concat_vec imm5 imm40  :  6 words$word),rd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) /\ ((((((((regbits_to_regno ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)))) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (nzi9 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzi4 : 1 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (nzi6 : 1 bits) = ((subrange_vec_dec v__2 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (nzi87 : 2 bits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
     let (nzi5 : 1 bits) = ((subrange_vec_dec v__2 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     let nzimm =
       ((concat_vec nzi9
          ((concat_vec nzi87 ((concat_vec nzi6 ((concat_vec nzi5 nzi4  :  2 words$word))  :  3 words$word))
             :  5 words$word))
         :  6 words$word)) in
     if (((nzimm = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) then NONE
     else SOME (C_ADDI16SP nzimm)
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (imm17 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm1612 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     if ((((((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) \/ (((((regbits_to_regno rd)) = ((regbits_to_regno sp)))))))) then
       NONE
     else SOME (C_LUI ((concat_vec imm17 imm1612  :  6 words$word),rd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let (shamt : 6 bits) = ((concat_vec nzui5 nzui40  :  6 words$word)) in
     if (((shamt = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) then NONE
     else SOME (C_SRLI (shamt,rsd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let (shamt : 6 bits) = ((concat_vec nzui5 nzui40  :  6 words$word)) in
     if (((shamt = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) then NONE
     else SOME (C_SRAI (shamt,rsd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (i5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (i40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     SOME (C_ANDI ((concat_vec i5 i40  :  6 words$word),rsd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     SOME (C_SUB (rsd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     SOME (C_XOR (rsd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     SOME (C_OR (rsd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     SOME (C_AND (rsd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B1]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     SOME (C_SUBW (rsd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B1]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))))))))) then
     let (rsd : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregbits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     SOME (C_ADDW (rsd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (i11 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i4 : 1 bits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
     let (i98 : 2 bits) = ((subrange_vec_dec v__2 (( 10 : int):ii) (( 9 : int):ii)  :  2 words$word)) in
     let (i10 : 1 bits) = ((subrange_vec_dec v__2 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)) in
     let (i6 : 1 bits) = ((subrange_vec_dec v__2 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let (i7 : 1 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (i31 : 3 bits) = ((subrange_vec_dec v__2 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__2 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     SOME (C_J ((concat_vec i11
                   ((concat_vec i10
                       ((concat_vec i98
                           ((concat_vec i7
                               ((concat_vec i6
                                   ((concat_vec i5 ((concat_vec i4 i31  :  4 words$word))  :  5 words$word))
                                  :  6 words$word))
                              :  7 words$word))
                          :  9 words$word))
                      :  10 words$word))
                  :  11 words$word)))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (i8 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i43 : 2 bits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) in
     let (rs : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (i76 : 2 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (i21 : 2 bits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__2 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     SOME (C_BEQZ ((concat_vec i8
                      ((concat_vec i76
                          ((concat_vec i5 ((concat_vec i43 i21  :  4 words$word))  :  5 words$word))
                         :  7 words$word))
                     :  8 words$word),rs))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
     let (i8 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i43 : 2 bits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) in
     let (rs : cregbits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (i76 : 2 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (i21 : 2 bits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__2 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     SOME (C_BNEZ ((concat_vec i8
                      ((concat_vec i76
                          ((concat_vec i5 ((concat_vec i43 i21  :  4 words$word))  :  5 words$word))
                         :  7 words$word))
                     :  8 words$word),rs))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rsd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let (shamt : 6 bits) = ((concat_vec nzui5 nzui40  :  6 words$word)) in
     if ((((((shamt = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) \/ (((((regbits_to_regno rsd)) = ((regbits_to_regno zreg)))))))) then
       NONE
     else SOME (C_SLLI (shamt,rsd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (ui5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (ui42 : 3 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 4 : int):ii)  :  3 words$word)) in
     let (ui76 : 2 bits) = ((subrange_vec_dec v__2 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
     let (uimm : 6 bits) = ((concat_vec ui76 ((concat_vec ui5 ui42  :  4 words$word))  :  6 words$word)) in
     if (((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) then NONE
     else SOME (C_LWSP (uimm,rd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (ui5 : 1 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (ui43 : 2 bits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (ui86 : 3 bits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let (uimm : 6 bits) = ((concat_vec ui86 ((concat_vec ui5 ui43  :  3 words$word))  :  6 words$word)) in
     if (((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) then NONE
     else SOME (C_LDSP (uimm,rd))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (ui52 : 4 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 9 : int):ii)  :  4 words$word)) in
     let (ui76 : 2 bits) = ((subrange_vec_dec v__2 (( 8 : int):ii) (( 7 : int):ii)  :  2 words$word)) in
     let (rs2 : regbits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let (uimm : 6 bits) = ((concat_vec ui76 ui52  :  6 words$word)) in
     SOME (C_SWSP (uimm,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B1]  :  3 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (ui53 : 3 bits) = ((subrange_vec_dec v__2 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (ui86 : 3 bits) = ((subrange_vec_dec v__2 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : regbits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let (uimm : 6 bits) = ((concat_vec ui86 ui53  :  6 words$word)) in
     SOME (C_SDSP (uimm,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (vec_of_bits [B1;B0;B0;B0]  :  4 words$word)))) /\ (((((subrange_vec_dec v__2 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0]  :  7 words$word))))))) then
     let (rs1 : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     if (((((regbits_to_regno rs1)) = ((regbits_to_regno zreg))))) then NONE
     else SOME (C_JR rs1)
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (vec_of_bits [B1;B0;B0;B1]  :  4 words$word)))) /\ (((((subrange_vec_dec v__2 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0]  :  7 words$word))))))) then
     let (rs1 : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     if (((((regbits_to_regno rs1)) = ((regbits_to_regno zreg))))) then NONE
     else SOME (C_JALR rs1)
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (vec_of_bits [B1;B0;B0;B0]  :  4 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (rd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (rs2 : regbits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     if ((((((((regbits_to_regno rs2)) = ((regbits_to_regno zreg))))) \/ (((((regbits_to_regno rd)) = ((regbits_to_regno zreg)))))))) then
       NONE
     else SOME (C_MV (rd,rs2))
   else if ((((((((subrange_vec_dec v__2 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (vec_of_bits [B1;B0;B0;B1]  :  4 words$word)))) /\ (((((subrange_vec_dec v__2 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
     let (rsd : regbits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (rs2 : regbits) = ((subrange_vec_dec v__2 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     if ((((((((regbits_to_regno rsd)) = ((regbits_to_regno zreg))))) \/ (((((regbits_to_regno rs2)) = ((regbits_to_regno zreg)))))))) then
       NONE
     else SOME (C_ADD (rsd,rs2))
   else if (((v__2 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) then
     SOME (C_ILLEGAL () )
   else NONE))`;


(*val execute_WFI : unit -> M bool*)

 val _ = Define `
 ((execute_WFI:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__26=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) . 
   (case w__0 of
     Machine => sail2_state_monad$returnS T
   | Supervisor => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
      if (((((get_Mstatus_TW w__1  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then sail2_state_monad$seqS
        (handle_illegal () ) (sail2_state_monad$returnS F)
      else sail2_state_monad$returnS T)
   | User => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS F)
   ))))`;


(*val execute_UTYPE : mword ty20 -> mword ty5 -> uop -> M bool*)

 val _ = Define `
 ((execute_UTYPE:(20)words$word ->(5)words$word -> uop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rd op=
    (let (off : xlenbits) =
     ((EXTS (( 64 : int):ii)
        ((concat_vec imm (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
           :  32 words$word))
       :  64 words$word)) in sail2_state_monad$bindS
   (case op of
     RISCV_LUI => sail2_state_monad$returnS off
   | RISCV_AUIPC => sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
      sail2_state_monad$returnS ((add_vec w__0 off  :  64 words$word)))
   ) (\ (ret : xlenbits) .  sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ret) (sail2_state_monad$returnS T))))`;


(*val execute_THREAD_START : unit -> bool*)

 val _ = Define `
 ((execute_THREAD_START:unit -> bool) g__29=  T)`;


(*val execute_STORECON : bool -> bool -> mword ty5 -> mword ty5 -> word_width -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_STORECON:bool -> bool ->(5)words$word ->(5)words$word -> word_width ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) aq rl rs2 rs1 width rd=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (vaddr : xlenbits) . 
   let (aligned : bool) =
     ((case width of
       BYTE => T
     | HALF =>
        (((cast_unit_vec0 ((access_vec_dec vaddr (( 0 : int):ii)))  :  1 words$word)) = (vec_of_bits [B0]  :  1 words$word))
     | WORD =>
        (((subrange_vec_dec vaddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))
     | DOUBLE =>
        (((subrange_vec_dec vaddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word))
     )) in
   if ((~ aligned)) then sail2_state_monad$seqS (handle_mem_exception vaddr E_SAMO_Addr_Align) (sail2_state_monad$returnS F)
   else sail2_state_monad$bindS
     (speculate_conditional_success vaddr) (\ (w__0 : bool) . 
     if (((((bool_to_bits w__0  :  1 words$word)) = ((bool_to_bits F  :  1 words$word))))) then sail2_state_monad$seqS
       (wX ((regbits_to_regno rd)) ((EXTZ (( 64 : int):ii) (vec_of_bits [B1]  :  1 words$word)  :  64 words$word)))
       (sail2_state_monad$returnS T)
     else sail2_state_monad$bindS
       (translateAddr vaddr Write Data) (\ (w__1 : TR_Result) . 
       (case w__1 of
         TR_Failure (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS F)
       | TR_Address (addr) => sail2_state_monad$bindS
          (case width of
            WORD => mem_write_ea addr (( 4 : int):ii) aq rl T
          | DOUBLE => mem_write_ea addr (( 8 : int):ii) aq rl T
          | _ => internal_error "STORECON expected word or double"
          ) (\ (eares : unit MemoryOpResult) . 
          (case eares of
            MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
          | MemValue (_) => sail2_state_monad$bindS
             (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val .  sail2_state_monad$bindS
             (case width of
               WORD =>
                mem_write_value addr (( 4 : int):ii)
                  ((subrange_vec_dec rs2_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) aq rl T
             | DOUBLE => mem_write_value addr (( 8 : int):ii) rs2_val aq rl T
             | _ => internal_error "STORECON expected word or double"
             ) (\ (res : unit MemoryOpResult) . 
             (case res of
               MemValue (_) => sail2_state_monad$seqS
                (wX ((regbits_to_regno rd))
                  ((EXTZ (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word)))
                (let (_ : unit) = (cancel_reservation () ) in
                sail2_state_monad$returnS T)
             | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
             )))
          ))
       ))))))`;


(*val execute_STORE : mword ty12 -> mword ty5 -> mword ty5 -> word_width -> bool -> bool -> M bool*)

 val _ = Define `
 ((execute_STORE:(12)words$word ->(5)words$word ->(5)words$word -> word_width -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs2 rs1 width aq rl=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (vaddr : xlenbits) = ((add_vec w__0 ((EXTS (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)) in
   if ((check_misaligned vaddr width)) then sail2_state_monad$seqS
     (handle_mem_exception vaddr E_SAMO_Addr_Align) (sail2_state_monad$returnS F)
   else sail2_state_monad$bindS
     (translateAddr vaddr Write Data) (\ (w__1 : TR_Result) . 
     (case w__1 of
       TR_Failure (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS F)
     | TR_Address (addr) => sail2_state_monad$bindS
        (case width of
          BYTE => mem_write_ea addr (( 1 : int):ii) aq rl F
        | HALF => mem_write_ea addr (( 2 : int):ii) aq rl F
        | WORD => mem_write_ea addr (( 4 : int):ii) aq rl F
        | DOUBLE => mem_write_ea addr (( 8 : int):ii) aq rl F
        ) (\ (eares : unit MemoryOpResult) . 
        (case eares of
          MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
        | MemValue (_) => sail2_state_monad$bindS
           (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val .  sail2_state_monad$bindS
           (case width of
             BYTE =>
              mem_write_value addr (( 1 : int):ii) ((subrange_vec_dec rs2_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) aq
                rl F
           | HALF =>
              mem_write_value addr (( 2 : int):ii) ((subrange_vec_dec rs2_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
                aq rl F
           | WORD =>
              mem_write_value addr (( 4 : int):ii) ((subrange_vec_dec rs2_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                aq rl F
           | DOUBLE => mem_write_value addr (( 8 : int):ii) rs2_val aq rl F
           ) (\ (res : unit MemoryOpResult) . 
           (case res of
             MemValue (_) => sail2_state_monad$returnS T
           | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
           )))
        ))
     )))))`;


(*val execute_STOP_FETCHING : unit -> bool*)

 val _ = Define `
 ((execute_STOP_FETCHING:unit -> bool) g__28=  T)`;


(*val execute_SRET : unit -> M bool*)

 val _ = Define `
 ((execute_SRET:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__24=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$seqS
   (case w__0 of
     User => handle_illegal () 
   | Supervisor => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
      if (((((get_Mstatus_TSR w__1  :  1 words$word)) = ((bool_to_bits T  :  1 words$word))))) then
        handle_illegal () 
      else sail2_state_monad$bindS
        (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__2 : Privilege) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__3 :  64 words$word) .  sail2_state_monad$bindS
        (handle_exception w__2 (CTL_SRET () ) w__3  : ( 64 words$word) M) (\ (w__4 : xlenbits) . 
        sail2_state_monad$write_regS nextPC_ref w__4))))
   | Machine => sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__5 : Privilege) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__6 :  64 words$word) .  sail2_state_monad$bindS
      (handle_exception w__5 (CTL_SRET () ) w__6  : ( 64 words$word) M) (\ (w__7 : xlenbits) . 
      sail2_state_monad$write_regS nextPC_ref w__7)))
   )
   (sail2_state_monad$returnS F))))`;


(*val execute_SHIFTW : mword ty5 -> mword ty5 -> mword ty5 -> sop -> M bool*)

 val _ = Define `
 ((execute_SHIFTW:(5)words$word ->(5)words$word ->(5)words$word -> sop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) shamt rs1 rd op=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (result : 32 bits) =
     ((case op of
       RISCV_SLLI => (shift_bits_left rs1_val shamt  :  32 words$word)
     | RISCV_SRLI => (shift_bits_right rs1_val shamt  :  32 words$word)
     | RISCV_SRAI => (shift_right_arith32 rs1_val shamt  :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ((EXTS (( 64 : int):ii) result  :  64 words$word))) (sail2_state_monad$returnS T))))`;


(*val execute_SHIFTIOP : mword ty6 -> mword ty5 -> mword ty5 -> sop -> M bool*)

 val _ = Define `
 ((execute_SHIFTIOP:(6)words$word ->(5)words$word ->(5)words$word -> sop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) shamt rs1 rd op=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val . 
   let (result : xlenbits) =
     ((case op of
       RISCV_SLLI => (shift_bits_left rs1_val shamt  :  64 words$word)
     | RISCV_SRLI => (shift_bits_right rs1_val shamt  :  64 words$word)
     | RISCV_SRAI => (shift_right_arith64 rs1_val shamt  :  64 words$word)
     )) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T))))`;


(*val execute_SFENCE_VMA : mword ty5 -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_SFENCE_VMA:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs1 rs2=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) . 
   if (((((privLevel_to_bits w__0  :  2 words$word)) = ((privLevel_to_bits User  :  2 words$word)))))
   then sail2_state_monad$seqS
     (handle_illegal () ) (sail2_state_monad$returnS F)
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) . 
     let p__20 =
       (architecture ((get_Mstatus_SXL w__1  :  2 words$word)), (get_Mstatus_TVM w__2  :  1 words$word)) in
     (case p__20 of
       (SOME (RV64), v_0) =>
        if (((v_0 = ((bool_to_bits T  :  1 words$word))))) then sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS F)
        else if (((v_0 = ((bool_to_bits F  :  1 words$word))))) then sail2_state_monad$bindS
          (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then sail2_state_monad$returnS NONE
           else sail2_state_monad$bindS
             (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__3 :  64 words$word) . 
             sail2_state_monad$returnS (SOME ((subrange_vec_dec w__3 (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word))))) (\ (addr :
             vaddr39 option) .  sail2_state_monad$bindS
          (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then sail2_state_monad$returnS NONE
           else sail2_state_monad$bindS
             (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ (w__4 :  64 words$word) . 
             sail2_state_monad$returnS (SOME ((subrange_vec_dec w__4 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))) (\ (asid :
             asid64 option) .  sail2_state_monad$seqS
          (flushTLB asid addr) (sail2_state_monad$returnS T)))
        else
          (case (SOME RV64, v_0) of
            (g__18, g__19) => internal_error "unimplemented sfence architecture"
          )
     | (g__18, g__19) => internal_error "unimplemented sfence architecture"
     ))))))`;


(*val execute_RTYPEW : mword ty5 -> mword ty5 -> mword ty5 -> ropw -> M bool*)

 val _ = Define `
 ((execute_RTYPEW:(5)words$word ->(5)words$word ->(5)words$word -> ropw ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd op=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rs2_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (result : 32 bits) =
     ((case op of
       RISCV_ADDW => (add_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SUBW => (sub_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SLLW =>
        (shift_bits_left rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SRLW =>
        (shift_bits_right rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SRAW =>
        (shift_right_arith32 rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ((EXTS (( 64 : int):ii) result  :  64 words$word))) (sail2_state_monad$returnS T)))))`;


(*val execute_RTYPE : mword ty5 -> mword ty5 -> mword ty5 -> rop -> M bool*)

 val _ = Define `
 ((execute_RTYPE:(5)words$word ->(5)words$word ->(5)words$word -> rop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd op=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val . 
   let (result : xlenbits) =
     ((case op of
       RISCV_ADD => (add_vec rs1_val rs2_val  :  64 words$word)
     | RISCV_SUB => (sub_vec rs1_val rs2_val  :  64 words$word)
     | RISCV_SLL =>
        (shift_bits_left rs1_val ((subrange_vec_dec rs2_val (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word))
          :  64 words$word)
     | RISCV_SLT =>
        (EXTZ (( 64 : int):ii) ((bool_to_bits ((zopz0zI_s rs1_val rs2_val))  :  1 words$word))  :  64 words$word)
     | RISCV_SLTU =>
        (EXTZ (( 64 : int):ii) ((bool_to_bits ((zopz0zI_u rs1_val rs2_val))  :  1 words$word))  :  64 words$word)
     | RISCV_XOR => (xor_vec rs1_val rs2_val  :  64 words$word)
     | RISCV_SRL =>
        (shift_bits_right rs1_val ((subrange_vec_dec rs2_val (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word))
          :  64 words$word)
     | RISCV_SRA =>
        (shift_right_arith64 rs1_val ((subrange_vec_dec rs2_val (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word))
          :  64 words$word)
     | RISCV_OR => (or_vec rs1_val rs2_val  :  64 words$word)
     | RISCV_AND => (and_vec rs1_val rs2_val  :  64 words$word)
     )) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T)))))`;


(*val execute_RISCV_JALR : mword ty12 -> mword ty5 -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_RISCV_JALR:(12)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS nextPC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) w__0)
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) . 
   let (newPC : xlenbits) = ((add_vec w__1 ((EXTS (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     nextPC_ref
     ((concat_vec ((subrange_vec_dec newPC (( 63 : int):ii) (( 1 : int):ii)  :  63 words$word))
         (vec_of_bits [B0]  :  1 words$word)
        :  64 words$word)))
   (sail2_state_monad$returnS T)))))`;


(*val execute_RISCV_JAL : mword ty21 -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_RISCV_JAL:(21)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rd=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (pc : xlenbits) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS nextPC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) w__0)
   (let (offset : xlenbits) = ((EXTS (( 64 : int):ii) imm  :  64 words$word)) in sail2_state_monad$seqS
   (sail2_state_monad$write_regS nextPC_ref ((add_vec pc offset  :  64 words$word))) (sail2_state_monad$returnS T))))))`;


(*val execute_REMW : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

 val _ = Define `
 ((execute_REMW:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rs2_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
   let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
   let (r : ii) = (if (((rs2_int = (( 0 : int):ii)))) then rs1_int else hardware_mod rs1_int rs2_int) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ((EXTS (( 64 : int):ii) ((to_bits (( 32 : int):ii) r  :  32 words$word))  :  64 words$word)))
   (sail2_state_monad$returnS T)))))`;


(*val execute_REM : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

 val _ = Define `
 ((execute_REM:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val . 
   let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
   let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
   let (r : ii) = (if (((rs2_int = (( 0 : int):ii)))) then rs1_int else hardware_mod rs1_int rs2_int) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ((to_bits xlen r  :  64 words$word))) (sail2_state_monad$returnS T)))))`;


(*val execute_NOP : unit -> bool*)

 val _ = Define `
 ((execute_NOP:unit -> bool) g__27=  T)`;


(*val execute_MULW : mword ty5 -> mword ty5 -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_MULW:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rs2_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (rs1_int : ii) = (integer_word$w2i rs1_val) in
   let (rs2_int : ii) = (integer_word$w2i rs2_val) in
   let result32 =
     ((subrange_vec_dec ((to_bits (( 64 : int):ii) ((rs1_int * rs2_int))  :  64 words$word)) (( 31 : int):ii)
        (( 0 : int):ii)
       :  32 words$word)) in
   let (result : xlenbits) = ((EXTS (( 64 : int):ii) result32  :  64 words$word)) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T)))))`;


(*val execute_MUL : mword ty5 -> mword ty5 -> mword ty5 -> bool -> bool -> bool -> M bool*)

 val _ = Define `
 ((execute_MUL:(5)words$word ->(5)words$word ->(5)words$word -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd high signed1 signed2=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val . 
   let (rs1_int : ii) = (if signed1 then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
   let (rs2_int : ii) = (if signed2 then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
   let result128 = ((to_bits (( 128 : int):ii) ((rs1_int * rs2_int))  :  128 words$word)) in
   let result =
     (if high then (subrange_vec_dec result128 (( 127 : int):ii) (( 64 : int):ii)  :  64 words$word)
     else (subrange_vec_dec result128 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T)))))`;


(*val execute_MRET : unit -> M bool*)

 val _ = Define `
 ((execute_MRET:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__23=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$seqS
   (if (((((privLevel_to_bits w__0  :  2 words$word)) = ((privLevel_to_bits Machine  :  2 words$word)))))
    then sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) .  sail2_state_monad$bindS
      (handle_exception w__1 (CTL_MRET () ) w__2  : ( 64 words$word) M) (\ (w__3 : xlenbits) . 
      sail2_state_monad$write_regS nextPC_ref w__3)))
    else handle_illegal () )
   (sail2_state_monad$returnS F))))`;


(*val execute_LOADRES : bool -> bool -> mword ty5 -> word_width -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_LOADRES:bool -> bool ->(5)words$word -> word_width ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) aq rl rs1 width rd=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (vaddr : xlenbits) . 
   let (aligned : bool) =
     ((case width of
       BYTE => T
     | HALF =>
        (((cast_unit_vec0 ((access_vec_dec vaddr (( 0 : int):ii)))  :  1 words$word)) = (vec_of_bits [B0]  :  1 words$word))
     | WORD =>
        (((subrange_vec_dec vaddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))
     | DOUBLE =>
        (((subrange_vec_dec vaddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word))
     )) in
   if ((~ aligned)) then sail2_state_monad$seqS (handle_mem_exception vaddr E_SAMO_Addr_Align) (sail2_state_monad$returnS F)
   else sail2_state_monad$bindS
     (translateAddr vaddr Read Data) (\ (w__0 : TR_Result) . 
     (case w__0 of
       TR_Failure (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS F)
     | TR_Address (addr) =>
        (case width of
          WORD => sail2_state_monad$bindS
           (mem_read addr (( 4 : int):ii) aq rl T  : ( ( 32 words$word)MemoryOpResult) M) (\ (w__1 : ( 32 words$word)
             MemoryOpResult) . 
           process_loadres rd vaddr w__1 F)
        | DOUBLE => sail2_state_monad$bindS
           (mem_read addr (( 8 : int):ii) aq rl T  : ( ( 64 words$word)MemoryOpResult) M) (\ (w__3 : ( 64 words$word)
             MemoryOpResult) . 
           process_loadres rd vaddr w__3 F)
        | _ => internal_error "LOADRES expected WORD or DOUBLE"
        )
     )))))`;


(*val execute_LOAD : mword ty12 -> mword ty5 -> mword ty5 -> bool -> word_width -> bool -> bool -> M bool*)

 val _ = Define `
 ((execute_LOAD:(12)words$word ->(5)words$word ->(5)words$word -> bool -> word_width -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd is_unsigned width aq rl=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (vaddr : xlenbits) = ((add_vec w__0 ((EXTS (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)) in
   if ((check_misaligned vaddr width)) then sail2_state_monad$seqS
     (handle_mem_exception vaddr E_Load_Addr_Align) (sail2_state_monad$returnS F)
   else sail2_state_monad$bindS
     (translateAddr vaddr Read Data) (\ (w__1 : TR_Result) . 
     (case w__1 of
       TR_Failure (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS F)
     | TR_Address (addr) =>
        (case width of
          BYTE => sail2_state_monad$bindS
           (mem_read addr (( 1 : int):ii) aq rl F  : ( ( 8 words$word)MemoryOpResult) M) (\ (w__2 : ( 8 words$word)
             MemoryOpResult) . 
           process_load rd vaddr w__2 is_unsigned)
        | HALF => sail2_state_monad$bindS
           (mem_read addr (( 2 : int):ii) aq rl F  : ( ( 16 words$word)MemoryOpResult) M) (\ (w__4 : ( 16 words$word)
             MemoryOpResult) . 
           process_load rd vaddr w__4 is_unsigned)
        | WORD => sail2_state_monad$bindS
           (mem_read addr (( 4 : int):ii) aq rl F  : ( ( 32 words$word)MemoryOpResult) M) (\ (w__6 : ( 32 words$word)
             MemoryOpResult) . 
           process_load rd vaddr w__6 is_unsigned)
        | DOUBLE => sail2_state_monad$bindS
           (mem_read addr (( 8 : int):ii) aq rl F  : ( ( 64 words$word)MemoryOpResult) M) (\ (w__8 : ( 64 words$word)
             MemoryOpResult) . 
           process_load rd vaddr w__8 is_unsigned)
        )
     )))))`;


(*val execute_ITYPE : mword ty12 -> mword ty5 -> mword ty5 -> iop -> M bool*)

 val _ = Define `
 ((execute_ITYPE:(12)words$word ->(5)words$word ->(5)words$word -> iop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd op=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val . 
   let (immext : xlenbits) = ((EXTS (( 64 : int):ii) imm  :  64 words$word)) in
   let (result : xlenbits) =
     ((case op of
       RISCV_ADDI => (add_vec rs1_val immext  :  64 words$word)
     | RISCV_SLTI =>
        (EXTZ (( 64 : int):ii) ((bool_to_bits ((zopz0zI_s rs1_val immext))  :  1 words$word))  :  64 words$word)
     | RISCV_SLTIU =>
        (EXTZ (( 64 : int):ii) ((bool_to_bits ((zopz0zI_u rs1_val immext))  :  1 words$word))  :  64 words$word)
     | RISCV_XORI => (xor_vec rs1_val immext  :  64 words$word)
     | RISCV_ORI => (or_vec rs1_val immext  :  64 words$word)
     | RISCV_ANDI => (and_vec rs1_val immext  :  64 words$word)
     )) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) result) (sail2_state_monad$returnS T))))`;


(*val execute_ILLEGAL : mword ty32 -> M bool*)

 val _ = Define `
 ((execute_ILLEGAL:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=  (sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS F)))`;


(*val execute_FENCEI : unit -> M bool*)

 val _ = Define `
 ((execute_FENCEI:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__21=  (sail2_state_monad$seqS (MEM_fence_i () ) (sail2_state_monad$returnS T)))`;


(*val execute_FENCE : mword ty4 -> mword ty4 -> M bool*)

 val _ = Define `
 ((execute_FENCE:(4)words$word ->(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) pred succ=  (sail2_state_monad$seqS
   (case (pred, succ) of
     (v__132, v__133) =>
      if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))) then
        MEM_fence_rw_rw () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))) then
        MEM_fence_r_rw () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
        MEM_fence_r_r () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
        MEM_fence_rw_w () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
        MEM_fence_w_w () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))) then
        MEM_fence_w_rw () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
        MEM_fence_rw_r () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
        MEM_fence_r_w () 
      else if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
        MEM_fence_w_r () 
      else
        sail2_state_monad$returnS (if ((((((((subrange_vec_dec v__132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
                  () 
                else
                  let (_ : unit) = (print_endline "FIXME: unsupported fence") in
                  () )
   )
   (sail2_state_monad$returnS T)))`;


(*val execute_ECALL : unit -> M bool*)

 val _ = Define `
 ((execute_ECALL:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__22=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) . 
   let (t : sync_exception) =
     (<| sync_exception_trap :=
          ((case w__0 of
            User => E_U_EnvCall
          | Supervisor => E_S_EnvCall
          | Machine => E_M_EnvCall
          )); 
        sync_exception_excinfo := NONE |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) .  sail2_state_monad$bindS
   (handle_exception w__1 (CTL_TRAP t) w__2  : ( 64 words$word) M) (\ (w__3 : xlenbits) .  sail2_state_monad$seqS
   (sail2_state_monad$write_regS nextPC_ref w__3) (sail2_state_monad$returnS F)))))))`;


(*val execute_EBREAK : unit -> M bool*)

 val _ = Define `
 ((execute_EBREAK:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__25=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$seqS
   (handle_mem_exception w__0 E_Breakpoint) (sail2_state_monad$returnS F))))`;


(*val execute_DIVW : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

 val _ = Define `
 ((execute_DIVW:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rs2_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
   let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
   let (q : ii) = (if (((rs2_int = (( 0 : int):ii)))) then ((( 0 : int)-( 1 : int)):ii) else hardware_quot rs1_int rs2_int) in
   let (q' : ii) =
     (if (((s /\ ((q > ((((pow2 (( 31 : int):ii))) - (( 1 : int):ii)))))))) then
       (( 0 : int):ii) - ((ex_int ((pow0 (( 2 : int):ii) (( 31 : int):ii)))))
     else q) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ((EXTS (( 64 : int):ii) ((to_bits (( 32 : int):ii) q'  :  32 words$word))  :  64 words$word)))
   (sail2_state_monad$returnS T)))))`;


(*val execute_DIV : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

 val _ = Define `
 ((execute_DIV:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val . 
   let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
   let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
   let (q : ii) = (if (((rs2_int = (( 0 : int):ii)))) then ((( 0 : int)-( 1 : int)):ii) else hardware_quot rs1_int rs2_int) in
   let (q' : ii) = (if (((s /\ ((q > xlen_max_signed))))) then xlen_min_signed else q) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd)) ((to_bits xlen q'  :  64 words$word))) (sail2_state_monad$returnS T)))))`;


(*val execute_C_ILLEGAL : unit -> M bool*)

 val _ = Define `
 ((execute_C_ILLEGAL:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) g__30=  (sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS F)))`;


(*val execute_C_ADDIW : mword ty6 -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_C_ADDIW:(6)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rsd=
    (let (imm : 32 bits) = ((EXTS (( 32 : int):ii) imm  :  32 words$word)) in sail2_state_monad$bindS
   (rX ((regbits_to_regno rsd))  : ( 64 words$word) M) (\ rs_val . 
   let (res : 32 bits) =
     ((add_vec ((subrange_vec_dec rs_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) imm  :  32 words$word)) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rsd)) ((EXTS (( 64 : int):ii) res  :  64 words$word))) (sail2_state_monad$returnS T))))`;


(*val execute_CSR : mword ty12 -> mword ty5 -> mword ty5 -> bool -> csrop -> M bool*)

 val _ = Define `
 ((execute_CSR:(12)words$word ->(5)words$word ->(5)words$word -> bool -> csrop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) csr rs1 rd is_imm op=  (sail2_state_monad$bindS
   (if is_imm then sail2_state_monad$returnS ((EXTZ (( 64 : int):ii) rs1  :  64 words$word))
    else (rX ((regbits_to_regno rs1))  : ( 64 words$word) M)) (\ (rs1_val : xlenbits) . 
   let (isWrite : bool) =
     ((case op of
       CSRRW => T
     | _ => if is_imm then (((lem$w2ui rs1_val)) <> (( 0 : int):ii)) else (((lem$w2ui rs1)) <> (( 0 : int):ii))
     )) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (check_CSR csr w__1 isWrite) (\ (w__2 : bool) . 
   if ((~ w__2)) then sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS F)
   else sail2_state_monad$bindS
     (readCSR csr  : ( 64 words$word) M) (\ csr_val .  sail2_state_monad$seqS (sail2_state_monad$seqS
     (if isWrite then
        let (new_val : xlenbits) =
          ((case op of
            CSRRW => rs1_val
          | CSRRS => (or_vec csr_val rs1_val  :  64 words$word)
          | CSRRC => (and_vec csr_val ((not_vec rs1_val  :  64 words$word))  :  64 words$word)
          )) in
        writeCSR csr new_val
      else sail2_state_monad$returnS () )
     (wX ((regbits_to_regno rd)) csr_val)) (sail2_state_monad$returnS T)))))))`;


(*val execute_BTYPE : mword ty13 -> mword ty5 -> mword ty5 -> bop -> M bool*)

 val _ = Define `
 ((execute_BTYPE:(13)words$word ->(5)words$word ->(5)words$word -> bop ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs2 rs1 op=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ rs2_val . 
   let (taken : bool) =
     ((case op of
       RISCV_BEQ => (rs1_val = rs2_val)
     | RISCV_BNE => (rs1_val <> rs2_val)
     | RISCV_BLT => zopz0zI_s rs1_val rs2_val
     | RISCV_BGE => zopz0zKzJ_s rs1_val rs2_val
     | RISCV_BLTU => zopz0zI_u rs1_val rs2_val
     | RISCV_BGEU => zopz0zKzJ_u rs1_val rs2_val
     )) in sail2_state_monad$seqS
   (if taken then sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
      sail2_state_monad$write_regS nextPC_ref ((add_vec w__0 ((EXTS (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))
    else sail2_state_monad$returnS () )
   (sail2_state_monad$returnS T)))))`;


(*val execute_AMO : amoop -> bool -> bool -> mword ty5 -> mword ty5 -> word_width -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_AMO:amoop -> bool -> bool ->(5)words$word ->(5)words$word -> word_width ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) op aq rl rs2 rs1 width rd=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (vaddr : xlenbits) .  sail2_state_monad$bindS
   (translateAddr vaddr ReadWrite Data) (\ (w__0 : TR_Result) . 
   (case w__0 of
     TR_Failure (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS F)
   | TR_Address (addr) => sail2_state_monad$bindS
      (case width of
        WORD => mem_write_ea addr (( 4 : int):ii) (((aq /\ rl))) rl T
      | DOUBLE => mem_write_ea addr (( 8 : int):ii) (((aq /\ rl))) rl T
      | _ => internal_error "AMO expected WORD or DOUBLE"
      ) (\ (eares : unit MemoryOpResult) . 
      (case eares of
        MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
      | MemValue (_) => sail2_state_monad$bindS
         (case width of
           WORD => sail2_state_monad$bindS
            (mem_read addr (( 4 : int):ii) aq (((aq /\ rl))) T  : ( ( 32 words$word)MemoryOpResult) M) (\ (w__4 : ( 32 words$word)
              MemoryOpResult) . 
            sail2_state_monad$returnS ((extend_value F w__4  : ( 64 words$word) MemoryOpResult)))
         | DOUBLE => sail2_state_monad$bindS
            (mem_read addr (( 8 : int):ii) aq (((aq /\ rl))) T  : ( ( 64 words$word)MemoryOpResult) M) (\ (w__5 : ( 64 words$word)
              MemoryOpResult) . 
            sail2_state_monad$returnS ((extend_value F w__5  : ( 64 words$word) MemoryOpResult)))
         | _ => (internal_error "AMO expected WORD or DOUBLE"  : ( ( 64 words$word)MemoryOpResult) M)
         ) (\ (rval : xlenbits MemoryOpResult) . 
         (case rval of
           MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
         | MemValue (loaded) => sail2_state_monad$bindS
            (rX ((regbits_to_regno rs2))  : ( 64 words$word) M) (\ (rs2_val : xlenbits) . 
            let (result : xlenbits) =
              ((case op of
                AMOSWAP => rs2_val
              | AMOADD => (add_vec rs2_val loaded  :  64 words$word)
              | AMOXOR => (xor_vec rs2_val loaded  :  64 words$word)
              | AMOAND => (and_vec rs2_val loaded  :  64 words$word)
              | AMOOR => (or_vec rs2_val loaded  :  64 words$word)
              | AMOMIN => (vector64 ((int_min ((integer_word$w2i rs2_val)) ((integer_word$w2i loaded))))  :  64 words$word)
              | AMOMAX => (vector64 ((int_max ((integer_word$w2i rs2_val)) ((integer_word$w2i loaded))))  :  64 words$word)
              | AMOMINU => (vector64 ((int_min ((lem$w2ui rs2_val)) ((lem$w2ui loaded))))  :  64 words$word)
              | AMOMAXU => (vector64 ((int_max ((lem$w2ui rs2_val)) ((lem$w2ui loaded))))  :  64 words$word)
              )) in sail2_state_monad$bindS
            (case width of
              WORD =>
               mem_write_value addr (( 4 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 (((aq /\ rl))) rl T
            | DOUBLE => mem_write_value addr (( 8 : int):ii) result (((aq /\ rl))) rl T
            | _ => internal_error "AMO expected WORD or DOUBLE"
            ) (\ (wval : unit MemoryOpResult) . 
            (case wval of
              MemValue (_) => sail2_state_monad$seqS (wX ((regbits_to_regno rd)) loaded) (sail2_state_monad$returnS T)
            | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS F)
            )))
         ))
      ))
   )))))`;


(*val execute_ADDIW : mword ty12 -> mword ty5 -> mword ty5 -> M bool*)

 val _ = Define `
 ((execute_ADDIW:(12)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd=  (sail2_state_monad$bindS
   (rX ((regbits_to_regno rs1))  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (result : xlenbits) = ((add_vec ((EXTS (( 64 : int):ii) imm  :  64 words$word)) w__0  :  64 words$word)) in sail2_state_monad$seqS
   (wX ((regbits_to_regno rd))
     ((EXTS (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word)))
   (sail2_state_monad$returnS T))))`;


 val execute_defn = Hol_defn "execute" `
 ((execute:ast ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) merge_var=
    ((case merge_var of
     C_ADDI4SPN (rdc,nzimm) =>
      let (imm : 12 bits) =
        ((concat_vec (vec_of_bits [B0;B0]  :  2 words$word)
           ((concat_vec nzimm (vec_of_bits [B0;B0]  :  2 words$word)  :  10 words$word))
          :  12 words$word)) in
      let rd = ((creg2reg_bits rdc  :  5 words$word)) in
      execute (ITYPE (imm,sp,rd,RISCV_ADDI))
   | C_LW (uimm,rsc,rdc) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0]  :  2 words$word)  :  7 words$word))
          :  12 words$word)) in
      let rd = ((creg2reg_bits rdc  :  5 words$word)) in
      let rs = ((creg2reg_bits rsc  :  5 words$word)) in
      execute (LOAD (imm,rs,rd,F,WORD,F,F))
   | C_LD (uimm,rsc,rdc) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0;B0]  :  3 words$word)  :  8 words$word))
          :  12 words$word)) in
      let rd = ((creg2reg_bits rdc  :  5 words$word)) in
      let rs = ((creg2reg_bits rsc  :  5 words$word)) in
      execute (LOAD (imm,rs,rd,F,DOUBLE,F,F))
   | C_SW (uimm,rsc1,rsc2) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0]  :  2 words$word)  :  7 words$word))
          :  12 words$word)) in
      let rs1 = ((creg2reg_bits rsc1  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rsc2  :  5 words$word)) in
      execute (STORE (imm,rs2,rs1,WORD,F,F))
   | C_SD (uimm,rsc1,rsc2) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0;B0]  :  3 words$word)  :  8 words$word))
          :  12 words$word)) in
      let rs1 = ((creg2reg_bits rsc1  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rsc2  :  5 words$word)) in
      execute (STORE (imm,rs2,rs1,DOUBLE,F,F))
   | C_ADDI (nzi,rsd) =>
      let (imm : 12 bits) = ((EXTS (( 12 : int):ii) nzi  :  12 words$word)) in
      execute (ITYPE (imm,rsd,rsd,RISCV_ADDI))
   | C_JAL (imm) =>
      execute
        (RISCV_JAL ((EXTS (( 21 : int):ii) ((concat_vec imm (vec_of_bits [B0]  :  1 words$word)  :  12 words$word))
                      :  21 words$word),ra))
   | C_LI (imm,rd) =>
      let (imm : 12 bits) = ((EXTS (( 12 : int):ii) imm  :  12 words$word)) in
      execute (ITYPE (imm,zreg,rd,RISCV_ADDI))
   | C_ADDI16SP (imm) =>
      let (imm : 12 bits) =
        ((EXTS (( 12 : int):ii) ((concat_vec imm (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)  :  10 words$word))
          :  12 words$word)) in
      execute (ITYPE (imm,sp,sp,RISCV_ADDI))
   | C_LUI (imm,rd) =>
      let (res : 20 bits) = ((EXTS (( 20 : int):ii) imm  :  20 words$word)) in
      execute (UTYPE (res,rd,RISCV_LUI))
   | C_SRLI (shamt,rsd) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      execute (SHIFTIOP (shamt,rsd,rsd,RISCV_SRLI))
   | C_SRAI (shamt,rsd) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      execute (SHIFTIOP (shamt,rsd,rsd,RISCV_SRAI))
   | C_ANDI (imm,rsd) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      execute (ITYPE ((EXTS (( 12 : int):ii) imm  :  12 words$word),rsd,rsd,RISCV_ANDI))
   | C_SUB (rsd,rs2) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rs2  :  5 words$word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_SUB))
   | C_XOR (rsd,rs2) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rs2  :  5 words$word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_XOR))
   | C_OR (rsd,rs2) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rs2  :  5 words$word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_OR))
   | C_AND (rsd,rs2) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rs2  :  5 words$word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_AND))
   | C_SUBW (rsd,rs2) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rs2  :  5 words$word)) in
      execute (RTYPEW (rs2,rsd,rsd,RISCV_SUBW))
   | C_ADDW (rsd,rs2) =>
      let rsd = ((creg2reg_bits rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_bits rs2  :  5 words$word)) in
      execute (RTYPEW (rs2,rsd,rsd,RISCV_ADDW))
   | C_J (imm) =>
      execute
        (RISCV_JAL ((EXTS (( 21 : int):ii) ((concat_vec imm (vec_of_bits [B0]  :  1 words$word)  :  12 words$word))
                      :  21 words$word),zreg))
   | C_BEQZ (imm,rs) =>
      execute
        (BTYPE ((EXTS (( 13 : int):ii) ((concat_vec imm (vec_of_bits [B0]  :  1 words$word)  :  9 words$word))
                  :  13 words$word),zreg,(creg2reg_bits rs  :  5 words$word),RISCV_BEQ))
   | C_BNEZ (imm,rs) =>
      execute
        (BTYPE ((EXTS (( 13 : int):ii) ((concat_vec imm (vec_of_bits [B0]  :  1 words$word)  :  9 words$word))
                  :  13 words$word),zreg,(creg2reg_bits rs  :  5 words$word),RISCV_BNE))
   | C_SLLI (shamt,rsd) => execute (SHIFTIOP (shamt,rsd,rsd,RISCV_SLLI))
   | C_LWSP (uimm,rd) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0]  :  2 words$word)  :  8 words$word))
          :  12 words$word)) in
      execute (LOAD (imm,sp,rd,F,WORD,F,F))
   | C_LDSP (uimm,rd) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0;B0]  :  3 words$word)  :  9 words$word))
          :  12 words$word)) in
      execute (LOAD (imm,sp,rd,F,DOUBLE,F,F))
   | C_SWSP (uimm,rs2) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0]  :  2 words$word)  :  8 words$word))
          :  12 words$word)) in
      execute (STORE (imm,rs2,sp,WORD,F,F))
   | C_SDSP (uimm,rs2) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (vec_of_bits [B0;B0;B0]  :  3 words$word)  :  9 words$word))
          :  12 words$word)) in
      execute (STORE (imm,rs2,sp,DOUBLE,F,F))
   | C_JR (rs1) =>
      execute (RISCV_JALR ((EXTZ (( 12 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  12 words$word),rs1,zreg))
   | C_JALR (rs1) =>
      execute (RISCV_JALR ((EXTZ (( 12 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  12 words$word),rs1,ra))
   | C_MV (rd,rs2) => execute (RTYPE (rs2,zreg,rd,RISCV_ADD))
   | C_ADD (rsd,rs2) => execute (RTYPE (rs2,rsd,rsd,RISCV_ADD))
   | UTYPE (imm,rd,op) => execute_UTYPE imm rd op
   | RISCV_JAL (imm,rd) => execute_RISCV_JAL imm rd
   | RISCV_JALR (imm,rs1,rd) => execute_RISCV_JALR imm rs1 rd
   | BTYPE (imm,rs2,rs1,op) => execute_BTYPE imm rs2 rs1 op
   | ITYPE (imm,rs1,rd,op) => execute_ITYPE imm rs1 rd op
   | SHIFTIOP (shamt,rs1,rd,op) => execute_SHIFTIOP shamt rs1 rd op
   | RTYPE (rs2,rs1,rd,op) => execute_RTYPE rs2 rs1 rd op
   | LOAD (imm,rs1,rd,is_unsigned,width,aq,rl) => execute_LOAD imm rs1 rd is_unsigned width aq rl
   | STORE (imm,rs2,rs1,width,aq,rl) => execute_STORE imm rs2 rs1 width aq rl
   | ADDIW (imm,rs1,rd) => execute_ADDIW imm rs1 rd
   | SHIFTW (shamt,rs1,rd,op) => execute_SHIFTW shamt rs1 rd op
   | RTYPEW (rs2,rs1,rd,op) => execute_RTYPEW rs2 rs1 rd op
   | MUL (rs2,rs1,rd,high,signed1,signed2) => execute_MUL rs2 rs1 rd high signed1 signed2
   | DIV0 (rs2,rs1,rd,s) => execute_DIV rs2 rs1 rd s
   | REM (rs2,rs1,rd,s) => execute_REM rs2 rs1 rd s
   | MULW (rs2,rs1,rd) => execute_MULW rs2 rs1 rd
   | DIVW (rs2,rs1,rd,s) => execute_DIVW rs2 rs1 rd s
   | REMW (rs2,rs1,rd,s) => execute_REMW rs2 rs1 rd s
   | FENCE (pred,succ) => execute_FENCE pred succ
   | FENCEI (g__21) => execute_FENCEI g__21
   | ECALL (g__22) => execute_ECALL g__22
   | MRET (g__23) => execute_MRET g__23
   | SRET (g__24) => execute_SRET g__24
   | EBREAK (g__25) => execute_EBREAK g__25
   | WFI (g__26) => execute_WFI g__26
   | SFENCE_VMA (rs1,rs2) => execute_SFENCE_VMA rs1 rs2
   | LOADRES (aq,rl,rs1,width,rd) => execute_LOADRES aq rl rs1 width rd
   | STORECON (aq,rl,rs2,rs1,width,rd) => execute_STORECON aq rl rs2 rs1 width rd
   | AMO (op,aq,rl,rs2,rs1,width,rd) => execute_AMO op aq rl rs2 rs1 width rd
   | CSR (csr,rs1,rd,is_imm,op) => execute_CSR csr rs1 rd is_imm op
   | NOP (g__27) => sail2_state_monad$returnS ((execute_NOP g__27))
   | C_ADDIW (imm,rsd) => execute_C_ADDIW imm rsd
   | STOP_FETCHING (g__28) => sail2_state_monad$returnS ((execute_STOP_FETCHING g__28))
   | THREAD_START (g__29) => sail2_state_monad$returnS ((execute_THREAD_START g__29))
   | ILLEGAL (s) => execute_ILLEGAL s
   | C_ILLEGAL (g__30) => execute_C_ILLEGAL g__30
   )))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn execute_defn;

(*val assembly_forwards : ast -> string*)

val _ = Define `
 ((assembly_forwards:ast -> string) arg_=
    ((case arg_ of
     UTYPE (imm,rd,op) =>
      string_append ((utype_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () )) ((string_append ((string_of_bits imm)) ""))))))))
   | RISCV_JAL (imm,rd) =>
      string_append "jal"
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () )) ((string_append ((string_of_bits imm)) ""))))))))
   | RISCV_JALR (imm,rs1,rd) =>
      string_append "jalr"
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) ""))))))))))))
   | BTYPE (imm,rs2,rs1,op) =>
      string_append ((btype_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rs1))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs2))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) ""))))))))))))
   | ITYPE (imm,rs1,rd,op) =>
      string_append ((itype_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) ""))))))))))))
   | SHIFTIOP (shamt,rs1,rd,op) =>
      string_append ((shiftiop_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((string_of_bits shamt)) ""))))))))))
   | RTYPE (rs2,rs1,rd,op) =>
      string_append ((rtype_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) ""))))))))))))
   | LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl) =>
      string_append "l"
        ((string_append ((size_mnemonic_forwards size1))
            ((string_append ((maybe_u_forwards is_unsigned))
                ((string_append ((maybe_aq_forwards aq))
                    ((string_append ((maybe_rl_forwards rl))
                        ((string_append ((spc_forwards () ))
                            ((string_append ((reg_name_forwards rd))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs1))
                                        ((string_append ((sep_forwards () ))
                                            ((string_append ((string_of_bits imm)) ""))))))))))))))))))))
   | STORE (imm,rs1,rd,size1,aq,rl) =>
      string_append "s"
        ((string_append ((size_mnemonic_forwards size1))
            ((string_append ((maybe_aq_forwards aq))
                ((string_append ((maybe_rl_forwards rl))
                    ((string_append ((spc_forwards () ))
                        ((string_append ((reg_name_forwards rd))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs1))
                                    ((string_append ((sep_forwards () ))
                                        ((string_append ((string_of_bits imm)) ""))))))))))))))))))
   | ADDIW (imm,rs1,rd) =>
      string_append "addiw"
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) ""))))))))))))
   | SHIFTW (shamt,rs1,rd,op) =>
      string_append ((shiftw_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits shamt)) ""))))))))))))
   | RTYPEW (rs2,rs1,rd,op) =>
      string_append ((rtypew_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) ""))))))))))))
   | MUL (rs2,rs1,rd,high,signed1,signed2) =>
      string_append ((mul_mnemonic_forwards high signed1 signed2))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) ""))))))))))))
   | DIV0 (rs2,rs1,rd,s) =>
      string_append "div"
        ((string_append ((maybe_not_u_forwards s))
            ((string_append ((spc_forwards () ))
                ((string_append ((reg_name_forwards rd))
                    ((string_append ((sep_forwards () ))
                        ((string_append ((reg_name_forwards rs1))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs2)) ""))))))))))))))
   | REM (rs2,rs1,rd,s) =>
      string_append "rem"
        ((string_append ((maybe_not_u_forwards s))
            ((string_append ((spc_forwards () ))
                ((string_append ((reg_name_forwards rd))
                    ((string_append ((sep_forwards () ))
                        ((string_append ((reg_name_forwards rs1))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs2)) ""))))))))))))))
   | MULW (rs2,rs1,rd) =>
      string_append "mulw"
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) ""))))))))))))
   | DIVW (rs2,rs1,rd,s) =>
      string_append "div"
        ((string_append ((maybe_not_u_forwards s))
            ((string_append "w"
                ((string_append ((spc_forwards () ))
                    ((string_append ((reg_name_forwards rd))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs1))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs2)) ""))))))))))))))))
   | REMW (rs2,rs1,rd,s) =>
      string_append "rem"
        ((string_append ((maybe_not_u_forwards s))
            ((string_append "w"
                ((string_append ((spc_forwards () ))
                    ((string_append ((reg_name_forwards rd))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs1))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs2)) ""))))))))))))))))
   | FENCE (pred,succ) =>
      string_append "fence"
        ((string_append ((spc_forwards () ))
            ((string_append ((fence_bits_forwards pred))
                ((string_append ((sep_forwards () ))
                    ((string_append ((fence_bits_forwards succ)) ""))))))))
   | FENCEI (() ) => "fence.i"
   | ECALL (() ) => "ecall"
   | MRET (() ) => "mret"
   | SRET (() ) => "sret"
   | EBREAK (() ) => "ebreak"
   | WFI (() ) => "wfi"
   | SFENCE_VMA (rs1,rs2) =>
      string_append "sfence.vma"
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rs1))
                ((string_append ((sep_forwards () )) ((string_append ((reg_name_forwards rs2)) ""))))))))
   | LOADRES (aq,rl,rs1,size1,rd) =>
      string_append "lr."
        ((string_append ((maybe_aq_forwards aq))
            ((string_append ((maybe_rl_forwards rl))
                ((string_append ((size_mnemonic_forwards size1))
                    ((string_append ((spc_forwards () ))
                        ((string_append ((reg_name_forwards rd))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs1)) ""))))))))))))))
   | STORECON (aq,rl,rs2,rs1,size1,rd) =>
      string_append "sc."
        ((string_append ((maybe_aq_forwards aq))
            ((string_append ((maybe_rl_forwards rl))
                ((string_append ((size_mnemonic_forwards size1))
                    ((string_append ((spc_forwards () ))
                        ((string_append ((reg_name_forwards rd))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs1))
                                    ((string_append ((sep_forwards () ))
                                        ((string_append ((reg_name_forwards rs2)) ""))))))))))))))))))
   | AMO (op,aq,rl,rs2,rs1,width,rd) =>
      string_append ((amo_mnemonic_forwards op))
        ((string_append "."
            ((string_append ((size_mnemonic_forwards width))
                ((string_append ((maybe_aq_forwards aq))
                    ((string_append ((maybe_rl_forwards rl))
                        ((string_append ((spc_forwards () ))
                            ((string_append ((reg_name_forwards rd))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs1))
                                        ((string_append ((sep_forwards () ))
                                            ((string_append ((reg_name_forwards rs2)) ""))))))))))))))))))))
   | CSR (csr,rs1,rd,T,op) =>
      string_append ((csr_mnemonic_forwards op))
        ((string_append "i"
            ((string_append ((spc_forwards () ))
                ((string_append ((reg_name_forwards rd))
                    ((string_append ((sep_forwards () ))
                        ((string_append ((string_of_bits rs1))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((csr_name_map_forwards csr)) ""))))))))))))))
   | CSR (csr,rs1,rd,F,op) =>
      string_append ((csr_mnemonic_forwards op))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((csr_name_map_forwards csr)) ""))))))))))))
   | ILLEGAL (s) =>
      string_append "illegal"
        ((string_append ((spc_forwards () )) ((string_append ((string_of_bits s)) ""))))
   )))`;


(*val assembly_backwards : string -> ast*)

val _ = Define `
 ((assembly_backwards:string -> ast) arg_=
    (let stringappend_1076_0 = arg_ in
   if ((case ((utype_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1077_0,stringappend_1078_0) =>
        let stringappend_1079_0 = (string_drop stringappend_1076_0 stringappend_1078_0) in
        if ((case ((spc_matches_prefix stringappend_1079_0)) of
            SOME (stringappend_1080_0,stringappend_1081_0) =>
             let stringappend_1082_0 = (string_drop stringappend_1079_0 stringappend_1081_0) in
             if ((case ((reg_name_matches_prefix stringappend_1082_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1083_0,stringappend_1084_0) =>
                  let stringappend_1085_0 = (string_drop stringappend_1082_0 stringappend_1084_0) in
                  if ((case ((sep_matches_prefix stringappend_1085_0)) of
                      SOME (stringappend_1086_0,stringappend_1087_0) =>
                       let stringappend_1088_0 = (string_drop stringappend_1085_0 stringappend_1087_0) in
                       if ((case ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1088_0
                                    :  (( 20 words$word # ii))option)) of
                           SOME (stringappend_1089_0,stringappend_1090_0) =>
                            (case ((string_drop stringappend_1088_0 stringappend_1090_0)) of
                              "" => T
                            | _ => F
                            )
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1078_0) =
       ((case ((utype_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1077_0,stringappend_1078_0) =>
          (stringappend_1077_0, stringappend_1078_0)
       )) in
     let stringappend_1079_0 = (string_drop stringappend_1076_0 stringappend_1078_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1079_0)) of
        SOME (stringappend_1080_0,stringappend_1081_0) =>
  (stringappend_1080_0, stringappend_1081_0)
  ) of
      (() , stringappend_1081_0) =>
  let stringappend_1082_0 = (string_drop stringappend_1079_0
                               stringappend_1081_0) in
  let (rd, stringappend_1084_0) =
      ((case ((reg_name_matches_prefix stringappend_1082_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1083_0,stringappend_1084_0) =>
       (stringappend_1083_0, stringappend_1084_0)
       )) in
  let stringappend_1085_0 = (string_drop stringappend_1082_0
                               stringappend_1084_0) in
  (case
  (case ((sep_matches_prefix stringappend_1085_0)) of
        SOME (stringappend_1086_0,stringappend_1087_0) =>
  (stringappend_1086_0, stringappend_1087_0)
  ) of
      (() , stringappend_1087_0) =>
  let stringappend_1088_0 = (string_drop stringappend_1085_0
                               stringappend_1087_0) in
  let (imm, stringappend_1090_0) =
      ((case ((hex_bits_20_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1088_0 : (( 20 words$word # ii)) option)) of
             SOME (stringappend_1089_0,stringappend_1090_0) =>
       (stringappend_1089_0, stringappend_1090_0)
       )) in
  (case ((string_drop stringappend_1088_0 stringappend_1090_0)) of
        "" => UTYPE (imm,rd,op)
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "jal")) /\ (let stringappend_1092_0 = (string_drop stringappend_1076_0 ((string_length "jal"))) in
               if ((case ((spc_matches_prefix stringappend_1092_0)) of
                   SOME (stringappend_1093_0,stringappend_1094_0) =>
                    let stringappend_1095_0 = (string_drop stringappend_1092_0 stringappend_1094_0) in
                    if ((case ((reg_name_matches_prefix stringappend_1095_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_1096_0,stringappend_1097_0) =>
                         let stringappend_1098_0 =
                           (string_drop stringappend_1095_0 stringappend_1097_0) in
                         if ((case ((sep_matches_prefix stringappend_1098_0)) of
                             SOME (stringappend_1099_0,stringappend_1100_0) =>
                              let stringappend_1101_0 =
                                (string_drop stringappend_1098_0 stringappend_1100_0) in
                              if ((case ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1101_0
                                           :  (( 21 words$word # ii))option)) of
                                  SOME (stringappend_1102_0,stringappend_1103_0) =>
                                   (case ((string_drop stringappend_1101_0 stringappend_1103_0)) of
                                     "" => T
                                   | _ => F
                                   )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1092_0 = (string_drop stringappend_1076_0 ((string_length "jal"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1092_0)) of
        SOME (stringappend_1093_0,stringappend_1094_0) =>
  (stringappend_1093_0, stringappend_1094_0)
  ) of
      (() , stringappend_1094_0) =>
  let stringappend_1095_0 = (string_drop stringappend_1092_0
                               stringappend_1094_0) in
  let (rd, stringappend_1097_0) =
      ((case ((reg_name_matches_prefix stringappend_1095_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1096_0,stringappend_1097_0) =>
       (stringappend_1096_0, stringappend_1097_0)
       )) in
  let stringappend_1098_0 = (string_drop stringappend_1095_0
                               stringappend_1097_0) in
  (case
  (case ((sep_matches_prefix stringappend_1098_0)) of
        SOME (stringappend_1099_0,stringappend_1100_0) =>
  (stringappend_1099_0, stringappend_1100_0)
  ) of
      (() , stringappend_1100_0) =>
  let stringappend_1101_0 = (string_drop stringappend_1098_0
                               stringappend_1100_0) in
  let (imm, stringappend_1103_0) =
      ((case ((hex_bits_21_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1101_0 : (( 21 words$word # ii)) option)) of
             SOME (stringappend_1102_0,stringappend_1103_0) =>
       (stringappend_1102_0, stringappend_1103_0)
       )) in
  (case ((string_drop stringappend_1101_0 stringappend_1103_0)) of
        "" => RISCV_JAL (imm,rd)
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "jalr")) /\ (let stringappend_1105_0 = (string_drop stringappend_1076_0 ((string_length "jalr"))) in
               if ((case ((spc_matches_prefix stringappend_1105_0)) of
                   SOME (stringappend_1106_0,stringappend_1107_0) =>
                    let stringappend_1108_0 = (string_drop stringappend_1105_0 stringappend_1107_0) in
                    if ((case ((reg_name_matches_prefix stringappend_1108_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_1109_0,stringappend_1110_0) =>
                         let stringappend_1111_0 =
                           (string_drop stringappend_1108_0 stringappend_1110_0) in
                         if ((case ((sep_matches_prefix stringappend_1111_0)) of
                             SOME (stringappend_1112_0,stringappend_1113_0) =>
                              let stringappend_1114_0 =
                                (string_drop stringappend_1111_0 stringappend_1113_0) in
                              if ((case ((reg_name_matches_prefix stringappend_1114_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_1115_0,stringappend_1116_0) =>
                                   let stringappend_1117_0 =
                                     (string_drop stringappend_1114_0 stringappend_1116_0) in
                                   if ((case ((sep_matches_prefix stringappend_1117_0)) of
                                       SOME (stringappend_1118_0,stringappend_1119_0) =>
                                        let stringappend_1120_0 =
                                          (string_drop stringappend_1117_0 stringappend_1119_0) in
                                        if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1120_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_1121_0,stringappend_1122_0) =>
                                             (case ((string_drop stringappend_1120_0
                                                       stringappend_1122_0)) of
                                               "" => T
                                             | _ => F
                                             )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1105_0 = (string_drop stringappend_1076_0 ((string_length "jalr"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1105_0)) of
        SOME (stringappend_1106_0,stringappend_1107_0) =>
  (stringappend_1106_0, stringappend_1107_0)
  ) of
      (() , stringappend_1107_0) =>
  let stringappend_1108_0 = (string_drop stringappend_1105_0
                               stringappend_1107_0) in
  let (rd, stringappend_1110_0) =
      ((case ((reg_name_matches_prefix stringappend_1108_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1109_0,stringappend_1110_0) =>
       (stringappend_1109_0, stringappend_1110_0)
       )) in
  let stringappend_1111_0 = (string_drop stringappend_1108_0
                               stringappend_1110_0) in
  (case
  (case ((sep_matches_prefix stringappend_1111_0)) of
        SOME (stringappend_1112_0,stringappend_1113_0) =>
  (stringappend_1112_0, stringappend_1113_0)
  ) of
      (() , stringappend_1113_0) =>
  let stringappend_1114_0 = (string_drop stringappend_1111_0
                               stringappend_1113_0) in
  let (rs1, stringappend_1116_0) =
      ((case ((reg_name_matches_prefix stringappend_1114_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1115_0,stringappend_1116_0) =>
       (stringappend_1115_0, stringappend_1116_0)
       )) in
  let stringappend_1117_0 = (string_drop stringappend_1114_0
                               stringappend_1116_0) in
  (case
  (case ((sep_matches_prefix stringappend_1117_0)) of
        SOME (stringappend_1118_0,stringappend_1119_0) =>
  (stringappend_1118_0, stringappend_1119_0)
  ) of
      (() , stringappend_1119_0) =>
  let stringappend_1120_0 = (string_drop stringappend_1117_0
                               stringappend_1119_0) in
  let (imm, stringappend_1122_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1120_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1121_0,stringappend_1122_0) =>
       (stringappend_1121_0, stringappend_1122_0)
       )) in
  (case ((string_drop stringappend_1120_0 stringappend_1122_0)) of
        "" => RISCV_JALR (imm,rs1,rd)
  )
  )
  )
  )
   else if ((case ((btype_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1124_0,stringappend_1125_0) =>
        let stringappend_1126_0 = (string_drop stringappend_1076_0 stringappend_1125_0) in
        if ((case ((spc_matches_prefix stringappend_1126_0)) of
            SOME (stringappend_1127_0,stringappend_1128_0) =>
             let stringappend_1129_0 = (string_drop stringappend_1126_0 stringappend_1128_0) in
             if ((case ((reg_name_matches_prefix stringappend_1129_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1130_0,stringappend_1131_0) =>
                  let stringappend_1132_0 = (string_drop stringappend_1129_0 stringappend_1131_0) in
                  if ((case ((sep_matches_prefix stringappend_1132_0)) of
                      SOME (stringappend_1133_0,stringappend_1134_0) =>
                       let stringappend_1135_0 = (string_drop stringappend_1132_0 stringappend_1134_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1135_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1136_0,stringappend_1137_0) =>
                            let stringappend_1138_0 =
                              (string_drop stringappend_1135_0 stringappend_1137_0) in
                            if ((case ((sep_matches_prefix stringappend_1138_0)) of
                                SOME (stringappend_1139_0,stringappend_1140_0) =>
                                 let stringappend_1141_0 =
                                   (string_drop stringappend_1138_0 stringappend_1140_0) in
                                 if ((case ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1141_0
                                              :  (( 13 words$word # ii))option)) of
                                     SOME (stringappend_1142_0,stringappend_1143_0) =>
                                      (case ((string_drop stringappend_1141_0 stringappend_1143_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1125_0) =
       ((case ((btype_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1124_0,stringappend_1125_0) =>
          (stringappend_1124_0, stringappend_1125_0)
       )) in
     let stringappend_1126_0 = (string_drop stringappend_1076_0 stringappend_1125_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1126_0)) of
        SOME (stringappend_1127_0,stringappend_1128_0) =>
  (stringappend_1127_0, stringappend_1128_0)
  ) of
      (() , stringappend_1128_0) =>
  let stringappend_1129_0 = (string_drop stringappend_1126_0
                               stringappend_1128_0) in
  let (rs1, stringappend_1131_0) =
      ((case ((reg_name_matches_prefix stringappend_1129_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1130_0,stringappend_1131_0) =>
       (stringappend_1130_0, stringappend_1131_0)
       )) in
  let stringappend_1132_0 = (string_drop stringappend_1129_0
                               stringappend_1131_0) in
  (case
  (case ((sep_matches_prefix stringappend_1132_0)) of
        SOME (stringappend_1133_0,stringappend_1134_0) =>
  (stringappend_1133_0, stringappend_1134_0)
  ) of
      (() , stringappend_1134_0) =>
  let stringappend_1135_0 = (string_drop stringappend_1132_0
                               stringappend_1134_0) in
  let (rs2, stringappend_1137_0) =
      ((case ((reg_name_matches_prefix stringappend_1135_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1136_0,stringappend_1137_0) =>
       (stringappend_1136_0, stringappend_1137_0)
       )) in
  let stringappend_1138_0 = (string_drop stringappend_1135_0
                               stringappend_1137_0) in
  (case
  (case ((sep_matches_prefix stringappend_1138_0)) of
        SOME (stringappend_1139_0,stringappend_1140_0) =>
  (stringappend_1139_0, stringappend_1140_0)
  ) of
      (() , stringappend_1140_0) =>
  let stringappend_1141_0 = (string_drop stringappend_1138_0
                               stringappend_1140_0) in
  let (imm, stringappend_1143_0) =
      ((case ((hex_bits_13_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1141_0 : (( 13 words$word # ii)) option)) of
             SOME (stringappend_1142_0,stringappend_1143_0) =>
       (stringappend_1142_0, stringappend_1143_0)
       )) in
  (case ((string_drop stringappend_1141_0 stringappend_1143_0)) of
        "" => BTYPE (imm,rs2,rs1,op)
  )
  )
  )
  )
   else if ((case ((itype_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1145_0,stringappend_1146_0) =>
        let stringappend_1147_0 = (string_drop stringappend_1076_0 stringappend_1146_0) in
        if ((case ((spc_matches_prefix stringappend_1147_0)) of
            SOME (stringappend_1148_0,stringappend_1149_0) =>
             let stringappend_1150_0 = (string_drop stringappend_1147_0 stringappend_1149_0) in
             if ((case ((reg_name_matches_prefix stringappend_1150_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1151_0,stringappend_1152_0) =>
                  let stringappend_1153_0 = (string_drop stringappend_1150_0 stringappend_1152_0) in
                  if ((case ((sep_matches_prefix stringappend_1153_0)) of
                      SOME (stringappend_1154_0,stringappend_1155_0) =>
                       let stringappend_1156_0 = (string_drop stringappend_1153_0 stringappend_1155_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1156_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1157_0,stringappend_1158_0) =>
                            let stringappend_1159_0 =
                              (string_drop stringappend_1156_0 stringappend_1158_0) in
                            if ((case ((sep_matches_prefix stringappend_1159_0)) of
                                SOME (stringappend_1160_0,stringappend_1161_0) =>
                                 let stringappend_1162_0 =
                                   (string_drop stringappend_1159_0 stringappend_1161_0) in
                                 if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1162_0
                                              :  (( 12 words$word # ii))option)) of
                                     SOME (stringappend_1163_0,stringappend_1164_0) =>
                                      (case ((string_drop stringappend_1162_0 stringappend_1164_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1146_0) =
       ((case ((itype_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1145_0,stringappend_1146_0) =>
          (stringappend_1145_0, stringappend_1146_0)
       )) in
     let stringappend_1147_0 = (string_drop stringappend_1076_0 stringappend_1146_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1147_0)) of
        SOME (stringappend_1148_0,stringappend_1149_0) =>
  (stringappend_1148_0, stringappend_1149_0)
  ) of
      (() , stringappend_1149_0) =>
  let stringappend_1150_0 = (string_drop stringappend_1147_0
                               stringappend_1149_0) in
  let (rd, stringappend_1152_0) =
      ((case ((reg_name_matches_prefix stringappend_1150_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1151_0,stringappend_1152_0) =>
       (stringappend_1151_0, stringappend_1152_0)
       )) in
  let stringappend_1153_0 = (string_drop stringappend_1150_0
                               stringappend_1152_0) in
  (case
  (case ((sep_matches_prefix stringappend_1153_0)) of
        SOME (stringappend_1154_0,stringappend_1155_0) =>
  (stringappend_1154_0, stringappend_1155_0)
  ) of
      (() , stringappend_1155_0) =>
  let stringappend_1156_0 = (string_drop stringappend_1153_0
                               stringappend_1155_0) in
  let (rs1, stringappend_1158_0) =
      ((case ((reg_name_matches_prefix stringappend_1156_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1157_0,stringappend_1158_0) =>
       (stringappend_1157_0, stringappend_1158_0)
       )) in
  let stringappend_1159_0 = (string_drop stringappend_1156_0
                               stringappend_1158_0) in
  (case
  (case ((sep_matches_prefix stringappend_1159_0)) of
        SOME (stringappend_1160_0,stringappend_1161_0) =>
  (stringappend_1160_0, stringappend_1161_0)
  ) of
      (() , stringappend_1161_0) =>
  let stringappend_1162_0 = (string_drop stringappend_1159_0
                               stringappend_1161_0) in
  let (imm, stringappend_1164_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1162_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1163_0,stringappend_1164_0) =>
       (stringappend_1163_0, stringappend_1164_0)
       )) in
  (case ((string_drop stringappend_1162_0 stringappend_1164_0)) of
        "" => ITYPE (imm,rs1,rd,op)
  )
  )
  )
  )
   else if ((case ((shiftiop_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1166_0,stringappend_1167_0) =>
        let stringappend_1168_0 = (string_drop stringappend_1076_0 stringappend_1167_0) in
        if ((case ((spc_matches_prefix stringappend_1168_0)) of
            SOME (stringappend_1169_0,stringappend_1170_0) =>
             let stringappend_1171_0 = (string_drop stringappend_1168_0 stringappend_1170_0) in
             if ((case ((reg_name_matches_prefix stringappend_1171_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1172_0,stringappend_1173_0) =>
                  let stringappend_1174_0 = (string_drop stringappend_1171_0 stringappend_1173_0) in
                  if ((case ((sep_matches_prefix stringappend_1174_0)) of
                      SOME (stringappend_1175_0,stringappend_1176_0) =>
                       let stringappend_1177_0 = (string_drop stringappend_1174_0 stringappend_1176_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1177_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1178_0,stringappend_1179_0) =>
                            let stringappend_1180_0 =
                              (string_drop stringappend_1177_0 stringappend_1179_0) in
                            if ((case ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1180_0
                                         :  (( 6 words$word # ii))option)) of
                                SOME (stringappend_1181_0,stringappend_1182_0) =>
                                 (case ((string_drop stringappend_1180_0 stringappend_1182_0)) of
                                   "" => T
                                 | _ => F
                                 )
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1167_0) =
       ((case ((shiftiop_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1166_0,stringappend_1167_0) =>
          (stringappend_1166_0, stringappend_1167_0)
       )) in
     let stringappend_1168_0 = (string_drop stringappend_1076_0 stringappend_1167_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1168_0)) of
        SOME (stringappend_1169_0,stringappend_1170_0) =>
  (stringappend_1169_0, stringappend_1170_0)
  ) of
      (() , stringappend_1170_0) =>
  let stringappend_1171_0 = (string_drop stringappend_1168_0
                               stringappend_1170_0) in
  let (rd, stringappend_1173_0) =
      ((case ((reg_name_matches_prefix stringappend_1171_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1172_0,stringappend_1173_0) =>
       (stringappend_1172_0, stringappend_1173_0)
       )) in
  let stringappend_1174_0 = (string_drop stringappend_1171_0
                               stringappend_1173_0) in
  (case
  (case ((sep_matches_prefix stringappend_1174_0)) of
        SOME (stringappend_1175_0,stringappend_1176_0) =>
  (stringappend_1175_0, stringappend_1176_0)
  ) of
      (() , stringappend_1176_0) =>
  let stringappend_1177_0 = (string_drop stringappend_1174_0
                               stringappend_1176_0) in
  let (rs1, stringappend_1179_0) =
      ((case ((reg_name_matches_prefix stringappend_1177_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1178_0,stringappend_1179_0) =>
       (stringappend_1178_0, stringappend_1179_0)
       )) in
  let stringappend_1180_0 = (string_drop stringappend_1177_0
                               stringappend_1179_0) in
  let (shamt, stringappend_1182_0) =
      ((case ((hex_bits_6_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1180_0 : (( 6 words$word # ii)) option)) of
             SOME (stringappend_1181_0,stringappend_1182_0) =>
       (stringappend_1181_0, stringappend_1182_0)
       )) in
  (case ((string_drop stringappend_1180_0 stringappend_1182_0)) of
        "" => SHIFTIOP (shamt,rs1,rd,op)
  )
  )
  )
   else if ((case ((rtype_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1184_0,stringappend_1185_0) =>
        let stringappend_1186_0 = (string_drop stringappend_1076_0 stringappend_1185_0) in
        if ((case ((spc_matches_prefix stringappend_1186_0)) of
            SOME (stringappend_1187_0,stringappend_1188_0) =>
             let stringappend_1189_0 = (string_drop stringappend_1186_0 stringappend_1188_0) in
             if ((case ((reg_name_matches_prefix stringappend_1189_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1190_0,stringappend_1191_0) =>
                  let stringappend_1192_0 = (string_drop stringappend_1189_0 stringappend_1191_0) in
                  if ((case ((sep_matches_prefix stringappend_1192_0)) of
                      SOME (stringappend_1193_0,stringappend_1194_0) =>
                       let stringappend_1195_0 = (string_drop stringappend_1192_0 stringappend_1194_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1195_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1196_0,stringappend_1197_0) =>
                            let stringappend_1198_0 =
                              (string_drop stringappend_1195_0 stringappend_1197_0) in
                            if ((case ((sep_matches_prefix stringappend_1198_0)) of
                                SOME (stringappend_1199_0,stringappend_1200_0) =>
                                 let stringappend_1201_0 =
                                   (string_drop stringappend_1198_0 stringappend_1200_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_1201_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_1202_0,stringappend_1203_0) =>
                                      (case ((string_drop stringappend_1201_0 stringappend_1203_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1185_0) =
       ((case ((rtype_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1184_0,stringappend_1185_0) =>
          (stringappend_1184_0, stringappend_1185_0)
       )) in
     let stringappend_1186_0 = (string_drop stringappend_1076_0 stringappend_1185_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1186_0)) of
        SOME (stringappend_1187_0,stringappend_1188_0) =>
  (stringappend_1187_0, stringappend_1188_0)
  ) of
      (() , stringappend_1188_0) =>
  let stringappend_1189_0 = (string_drop stringappend_1186_0
                               stringappend_1188_0) in
  let (rd, stringappend_1191_0) =
      ((case ((reg_name_matches_prefix stringappend_1189_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1190_0,stringappend_1191_0) =>
       (stringappend_1190_0, stringappend_1191_0)
       )) in
  let stringappend_1192_0 = (string_drop stringappend_1189_0
                               stringappend_1191_0) in
  (case
  (case ((sep_matches_prefix stringappend_1192_0)) of
        SOME (stringappend_1193_0,stringappend_1194_0) =>
  (stringappend_1193_0, stringappend_1194_0)
  ) of
      (() , stringappend_1194_0) =>
  let stringappend_1195_0 = (string_drop stringappend_1192_0
                               stringappend_1194_0) in
  let (rs1, stringappend_1197_0) =
      ((case ((reg_name_matches_prefix stringappend_1195_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1196_0,stringappend_1197_0) =>
       (stringappend_1196_0, stringappend_1197_0)
       )) in
  let stringappend_1198_0 = (string_drop stringappend_1195_0
                               stringappend_1197_0) in
  (case
  (case ((sep_matches_prefix stringappend_1198_0)) of
        SOME (stringappend_1199_0,stringappend_1200_0) =>
  (stringappend_1199_0, stringappend_1200_0)
  ) of
      (() , stringappend_1200_0) =>
  let stringappend_1201_0 = (string_drop stringappend_1198_0
                               stringappend_1200_0) in
  let (rs2, stringappend_1203_0) =
      ((case ((reg_name_matches_prefix stringappend_1201_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1202_0,stringappend_1203_0) =>
       (stringappend_1202_0, stringappend_1203_0)
       )) in
  (case ((string_drop stringappend_1201_0 stringappend_1203_0)) of
        "" => RTYPE (rs2,rs1,rd,op)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "l")) /\ (let stringappend_1205_0 = (string_drop stringappend_1076_0 ((string_length "l"))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_1205_0)) of
                   SOME (stringappend_1206_0,stringappend_1207_0) =>
                    let stringappend_1208_0 = (string_drop stringappend_1205_0 stringappend_1207_0) in
                    if ((case ((maybe_u_matches_prefix stringappend_1208_0)) of
                        SOME (stringappend_1209_0,stringappend_1210_0) =>
                         let stringappend_1211_0 =
                           (string_drop stringappend_1208_0 stringappend_1210_0) in
                         if ((case ((maybe_aq_matches_prefix stringappend_1211_0)) of
                             SOME (stringappend_1212_0,stringappend_1213_0) =>
                              let stringappend_1214_0 =
                                (string_drop stringappend_1211_0 stringappend_1213_0) in
                              if ((case ((maybe_rl_matches_prefix stringappend_1214_0)) of
                                  SOME (stringappend_1215_0,stringappend_1216_0) =>
                                   let stringappend_1217_0 =
                                     (string_drop stringappend_1214_0 stringappend_1216_0) in
                                   if ((case ((spc_matches_prefix stringappend_1217_0)) of
                                       SOME (stringappend_1218_0,stringappend_1219_0) =>
                                        let stringappend_1220_0 =
                                          (string_drop stringappend_1217_0 stringappend_1219_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_1220_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_1221_0,stringappend_1222_0) =>
                                             let stringappend_1223_0 =
                                               (string_drop stringappend_1220_0 stringappend_1222_0) in
                                             if ((case ((sep_matches_prefix stringappend_1223_0)) of
                                                 SOME (stringappend_1224_0,stringappend_1225_0) =>
                                                  let stringappend_1226_0 =
                                                    (string_drop stringappend_1223_0
                                                      stringappend_1225_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_1226_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_1227_0,stringappend_1228_0) =>
                                                       let stringappend_1229_0 =
                                                         (string_drop stringappend_1226_0
                                                           stringappend_1228_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_1229_0)) of
                                                           SOME
                                                           (stringappend_1230_0,stringappend_1231_0) =>
                                                            let stringappend_1232_0 =
                                                              (string_drop stringappend_1229_0
                                                                stringappend_1231_0) in
                                                            if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                          stringappend_1232_0
                                                                         :  (( 12 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_1233_0,stringappend_1234_0) =>
                                                                 (case ((string_drop
                                                                           stringappend_1232_0
                                                                           stringappend_1234_0)) of
                                                                   "" => T
                                                                 | _ => F
                                                                 )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1205_0 = (string_drop stringappend_1076_0 ((string_length "l"))) in
     let (size1, stringappend_1207_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_1205_0)) of
         SOME (stringappend_1206_0,stringappend_1207_0) =>
          (stringappend_1206_0, stringappend_1207_0)
       )) in
     let stringappend_1208_0 = (string_drop stringappend_1205_0 stringappend_1207_0) in
     let (is_unsigned, stringappend_1210_0) =
       ((case ((maybe_u_matches_prefix stringappend_1208_0)) of
         SOME (stringappend_1209_0,stringappend_1210_0) =>
          (stringappend_1209_0, stringappend_1210_0)
       )) in
     let stringappend_1211_0 = (string_drop stringappend_1208_0 stringappend_1210_0) in
     let (aq, stringappend_1213_0) =
       ((case ((maybe_aq_matches_prefix stringappend_1211_0)) of
         SOME (stringappend_1212_0,stringappend_1213_0) =>
          (stringappend_1212_0, stringappend_1213_0)
       )) in
     let stringappend_1214_0 = (string_drop stringappend_1211_0 stringappend_1213_0) in
     let (rl, stringappend_1216_0) =
       ((case ((maybe_rl_matches_prefix stringappend_1214_0)) of
         SOME (stringappend_1215_0,stringappend_1216_0) =>
          (stringappend_1215_0, stringappend_1216_0)
       )) in
     let stringappend_1217_0 = (string_drop stringappend_1214_0 stringappend_1216_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1217_0)) of
        SOME (stringappend_1218_0,stringappend_1219_0) =>
  (stringappend_1218_0, stringappend_1219_0)
  ) of
      (() , stringappend_1219_0) =>
  let stringappend_1220_0 = (string_drop stringappend_1217_0
                               stringappend_1219_0) in
  let (rd, stringappend_1222_0) =
      ((case ((reg_name_matches_prefix stringappend_1220_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1221_0,stringappend_1222_0) =>
       (stringappend_1221_0, stringappend_1222_0)
       )) in
  let stringappend_1223_0 = (string_drop stringappend_1220_0
                               stringappend_1222_0) in
  (case
  (case ((sep_matches_prefix stringappend_1223_0)) of
        SOME (stringappend_1224_0,stringappend_1225_0) =>
  (stringappend_1224_0, stringappend_1225_0)
  ) of
      (() , stringappend_1225_0) =>
  let stringappend_1226_0 = (string_drop stringappend_1223_0
                               stringappend_1225_0) in
  let (rs1, stringappend_1228_0) =
      ((case ((reg_name_matches_prefix stringappend_1226_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1227_0,stringappend_1228_0) =>
       (stringappend_1227_0, stringappend_1228_0)
       )) in
  let stringappend_1229_0 = (string_drop stringappend_1226_0
                               stringappend_1228_0) in
  (case
  (case ((sep_matches_prefix stringappend_1229_0)) of
        SOME (stringappend_1230_0,stringappend_1231_0) =>
  (stringappend_1230_0, stringappend_1231_0)
  ) of
      (() , stringappend_1231_0) =>
  let stringappend_1232_0 = (string_drop stringappend_1229_0
                               stringappend_1231_0) in
  let (imm, stringappend_1234_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1232_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1233_0,stringappend_1234_0) =>
       (stringappend_1233_0, stringappend_1234_0)
       )) in
  (case ((string_drop stringappend_1232_0 stringappend_1234_0)) of
        "" => LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "s")) /\ (let stringappend_1236_0 = (string_drop stringappend_1076_0 ((string_length "s"))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_1236_0)) of
                   SOME (stringappend_1237_0,stringappend_1238_0) =>
                    let stringappend_1239_0 = (string_drop stringappend_1236_0 stringappend_1238_0) in
                    if ((case ((maybe_aq_matches_prefix stringappend_1239_0)) of
                        SOME (stringappend_1240_0,stringappend_1241_0) =>
                         let stringappend_1242_0 =
                           (string_drop stringappend_1239_0 stringappend_1241_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_1242_0)) of
                             SOME (stringappend_1243_0,stringappend_1244_0) =>
                              let stringappend_1245_0 =
                                (string_drop stringappend_1242_0 stringappend_1244_0) in
                              if ((case ((spc_matches_prefix stringappend_1245_0)) of
                                  SOME (stringappend_1246_0,stringappend_1247_0) =>
                                   let stringappend_1248_0 =
                                     (string_drop stringappend_1245_0 stringappend_1247_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_1248_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_1249_0,stringappend_1250_0) =>
                                        let stringappend_1251_0 =
                                          (string_drop stringappend_1248_0 stringappend_1250_0) in
                                        if ((case ((sep_matches_prefix stringappend_1251_0)) of
                                            SOME (stringappend_1252_0,stringappend_1253_0) =>
                                             let stringappend_1254_0 =
                                               (string_drop stringappend_1251_0 stringappend_1253_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_1254_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_1255_0,stringappend_1256_0) =>
                                                  let stringappend_1257_0 =
                                                    (string_drop stringappend_1254_0
                                                      stringappend_1256_0) in
                                                  if ((case ((sep_matches_prefix stringappend_1257_0)) of
                                                      SOME (stringappend_1258_0,stringappend_1259_0) =>
                                                       let stringappend_1260_0 =
                                                         (string_drop stringappend_1257_0
                                                           stringappend_1259_0) in
                                                       if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                     stringappend_1260_0
                                                                    :  (( 12 words$word # ii))option)) of
                                                           SOME
                                                           (stringappend_1261_0,stringappend_1262_0) =>
                                                            (case ((string_drop stringappend_1260_0
                                                                      stringappend_1262_0)) of
                                                              "" => T
                                                            | _ => F
                                                            )
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1236_0 = (string_drop stringappend_1076_0 ((string_length "s"))) in
     let (size1, stringappend_1238_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_1236_0)) of
         SOME (stringappend_1237_0,stringappend_1238_0) =>
          (stringappend_1237_0, stringappend_1238_0)
       )) in
     let stringappend_1239_0 = (string_drop stringappend_1236_0 stringappend_1238_0) in
     let (aq, stringappend_1241_0) =
       ((case ((maybe_aq_matches_prefix stringappend_1239_0)) of
         SOME (stringappend_1240_0,stringappend_1241_0) =>
          (stringappend_1240_0, stringappend_1241_0)
       )) in
     let stringappend_1242_0 = (string_drop stringappend_1239_0 stringappend_1241_0) in
     let (rl, stringappend_1244_0) =
       ((case ((maybe_rl_matches_prefix stringappend_1242_0)) of
         SOME (stringappend_1243_0,stringappend_1244_0) =>
          (stringappend_1243_0, stringappend_1244_0)
       )) in
     let stringappend_1245_0 = (string_drop stringappend_1242_0 stringappend_1244_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1245_0)) of
        SOME (stringappend_1246_0,stringappend_1247_0) =>
  (stringappend_1246_0, stringappend_1247_0)
  ) of
      (() , stringappend_1247_0) =>
  let stringappend_1248_0 = (string_drop stringappend_1245_0
                               stringappend_1247_0) in
  let (rd, stringappend_1250_0) =
      ((case ((reg_name_matches_prefix stringappend_1248_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1249_0,stringappend_1250_0) =>
       (stringappend_1249_0, stringappend_1250_0)
       )) in
  let stringappend_1251_0 = (string_drop stringappend_1248_0
                               stringappend_1250_0) in
  (case
  (case ((sep_matches_prefix stringappend_1251_0)) of
        SOME (stringappend_1252_0,stringappend_1253_0) =>
  (stringappend_1252_0, stringappend_1253_0)
  ) of
      (() , stringappend_1253_0) =>
  let stringappend_1254_0 = (string_drop stringappend_1251_0
                               stringappend_1253_0) in
  let (rs1, stringappend_1256_0) =
      ((case ((reg_name_matches_prefix stringappend_1254_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1255_0,stringappend_1256_0) =>
       (stringappend_1255_0, stringappend_1256_0)
       )) in
  let stringappend_1257_0 = (string_drop stringappend_1254_0
                               stringappend_1256_0) in
  (case
  (case ((sep_matches_prefix stringappend_1257_0)) of
        SOME (stringappend_1258_0,stringappend_1259_0) =>
  (stringappend_1258_0, stringappend_1259_0)
  ) of
      (() , stringappend_1259_0) =>
  let stringappend_1260_0 = (string_drop stringappend_1257_0
                               stringappend_1259_0) in
  let (imm, stringappend_1262_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1260_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1261_0,stringappend_1262_0) =>
       (stringappend_1261_0, stringappend_1262_0)
       )) in
  (case ((string_drop stringappend_1260_0 stringappend_1262_0)) of
        "" => STORE (imm,rs1,rd,size1,aq,rl)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "addiw")) /\ (let stringappend_1264_0 = (string_drop stringappend_1076_0 ((string_length "addiw"))) in
               if ((case ((spc_matches_prefix stringappend_1264_0)) of
                   SOME (stringappend_1265_0,stringappend_1266_0) =>
                    let stringappend_1267_0 = (string_drop stringappend_1264_0 stringappend_1266_0) in
                    if ((case ((reg_name_matches_prefix stringappend_1267_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_1268_0,stringappend_1269_0) =>
                         let stringappend_1270_0 =
                           (string_drop stringappend_1267_0 stringappend_1269_0) in
                         if ((case ((sep_matches_prefix stringappend_1270_0)) of
                             SOME (stringappend_1271_0,stringappend_1272_0) =>
                              let stringappend_1273_0 =
                                (string_drop stringappend_1270_0 stringappend_1272_0) in
                              if ((case ((reg_name_matches_prefix stringappend_1273_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_1274_0,stringappend_1275_0) =>
                                   let stringappend_1276_0 =
                                     (string_drop stringappend_1273_0 stringappend_1275_0) in
                                   if ((case ((sep_matches_prefix stringappend_1276_0)) of
                                       SOME (stringappend_1277_0,stringappend_1278_0) =>
                                        let stringappend_1279_0 =
                                          (string_drop stringappend_1276_0 stringappend_1278_0) in
                                        if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1279_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_1280_0,stringappend_1281_0) =>
                                             (case ((string_drop stringappend_1279_0
                                                       stringappend_1281_0)) of
                                               "" => T
                                             | _ => F
                                             )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1264_0 = (string_drop stringappend_1076_0 ((string_length "addiw"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1264_0)) of
        SOME (stringappend_1265_0,stringappend_1266_0) =>
  (stringappend_1265_0, stringappend_1266_0)
  ) of
      (() , stringappend_1266_0) =>
  let stringappend_1267_0 = (string_drop stringappend_1264_0
                               stringappend_1266_0) in
  let (rd, stringappend_1269_0) =
      ((case ((reg_name_matches_prefix stringappend_1267_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1268_0,stringappend_1269_0) =>
       (stringappend_1268_0, stringappend_1269_0)
       )) in
  let stringappend_1270_0 = (string_drop stringappend_1267_0
                               stringappend_1269_0) in
  (case
  (case ((sep_matches_prefix stringappend_1270_0)) of
        SOME (stringappend_1271_0,stringappend_1272_0) =>
  (stringappend_1271_0, stringappend_1272_0)
  ) of
      (() , stringappend_1272_0) =>
  let stringappend_1273_0 = (string_drop stringappend_1270_0
                               stringappend_1272_0) in
  let (rs1, stringappend_1275_0) =
      ((case ((reg_name_matches_prefix stringappend_1273_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1274_0,stringappend_1275_0) =>
       (stringappend_1274_0, stringappend_1275_0)
       )) in
  let stringappend_1276_0 = (string_drop stringappend_1273_0
                               stringappend_1275_0) in
  (case
  (case ((sep_matches_prefix stringappend_1276_0)) of
        SOME (stringappend_1277_0,stringappend_1278_0) =>
  (stringappend_1277_0, stringappend_1278_0)
  ) of
      (() , stringappend_1278_0) =>
  let stringappend_1279_0 = (string_drop stringappend_1276_0
                               stringappend_1278_0) in
  let (imm, stringappend_1281_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1279_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1280_0,stringappend_1281_0) =>
       (stringappend_1280_0, stringappend_1281_0)
       )) in
  (case ((string_drop stringappend_1279_0 stringappend_1281_0)) of
        "" => ADDIW (imm,rs1,rd)
  )
  )
  )
  )
   else if ((case ((shiftw_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1283_0,stringappend_1284_0) =>
        let stringappend_1285_0 = (string_drop stringappend_1076_0 stringappend_1284_0) in
        if ((case ((spc_matches_prefix stringappend_1285_0)) of
            SOME (stringappend_1286_0,stringappend_1287_0) =>
             let stringappend_1288_0 = (string_drop stringappend_1285_0 stringappend_1287_0) in
             if ((case ((reg_name_matches_prefix stringappend_1288_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1289_0,stringappend_1290_0) =>
                  let stringappend_1291_0 = (string_drop stringappend_1288_0 stringappend_1290_0) in
                  if ((case ((sep_matches_prefix stringappend_1291_0)) of
                      SOME (stringappend_1292_0,stringappend_1293_0) =>
                       let stringappend_1294_0 = (string_drop stringappend_1291_0 stringappend_1293_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1294_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1295_0,stringappend_1296_0) =>
                            let stringappend_1297_0 =
                              (string_drop stringappend_1294_0 stringappend_1296_0) in
                            if ((case ((sep_matches_prefix stringappend_1297_0)) of
                                SOME (stringappend_1298_0,stringappend_1299_0) =>
                                 let stringappend_1300_0 =
                                   (string_drop stringappend_1297_0 stringappend_1299_0) in
                                 if ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1300_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_1301_0,stringappend_1302_0) =>
                                      (case ((string_drop stringappend_1300_0 stringappend_1302_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1284_0) =
       ((case ((shiftw_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1283_0,stringappend_1284_0) =>
          (stringappend_1283_0, stringappend_1284_0)
       )) in
     let stringappend_1285_0 = (string_drop stringappend_1076_0 stringappend_1284_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1285_0)) of
        SOME (stringappend_1286_0,stringappend_1287_0) =>
  (stringappend_1286_0, stringappend_1287_0)
  ) of
      (() , stringappend_1287_0) =>
  let stringappend_1288_0 = (string_drop stringappend_1285_0
                               stringappend_1287_0) in
  let (rd, stringappend_1290_0) =
      ((case ((reg_name_matches_prefix stringappend_1288_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1289_0,stringappend_1290_0) =>
       (stringappend_1289_0, stringappend_1290_0)
       )) in
  let stringappend_1291_0 = (string_drop stringappend_1288_0
                               stringappend_1290_0) in
  (case
  (case ((sep_matches_prefix stringappend_1291_0)) of
        SOME (stringappend_1292_0,stringappend_1293_0) =>
  (stringappend_1292_0, stringappend_1293_0)
  ) of
      (() , stringappend_1293_0) =>
  let stringappend_1294_0 = (string_drop stringappend_1291_0
                               stringappend_1293_0) in
  let (rs1, stringappend_1296_0) =
      ((case ((reg_name_matches_prefix stringappend_1294_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1295_0,stringappend_1296_0) =>
       (stringappend_1295_0, stringappend_1296_0)
       )) in
  let stringappend_1297_0 = (string_drop stringappend_1294_0
                               stringappend_1296_0) in
  (case
  (case ((sep_matches_prefix stringappend_1297_0)) of
        SOME (stringappend_1298_0,stringappend_1299_0) =>
  (stringappend_1298_0, stringappend_1299_0)
  ) of
      (() , stringappend_1299_0) =>
  let stringappend_1300_0 = (string_drop stringappend_1297_0
                               stringappend_1299_0) in
  let (shamt, stringappend_1302_0) =
      ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1300_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1301_0,stringappend_1302_0) =>
       (stringappend_1301_0, stringappend_1302_0)
       )) in
  (case ((string_drop stringappend_1300_0 stringappend_1302_0)) of
        "" => SHIFTW (shamt,rs1,rd,op)
  )
  )
  )
  )
   else if ((case ((rtypew_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1304_0,stringappend_1305_0) =>
        let stringappend_1306_0 = (string_drop stringappend_1076_0 stringappend_1305_0) in
        if ((case ((spc_matches_prefix stringappend_1306_0)) of
            SOME (stringappend_1307_0,stringappend_1308_0) =>
             let stringappend_1309_0 = (string_drop stringappend_1306_0 stringappend_1308_0) in
             if ((case ((reg_name_matches_prefix stringappend_1309_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1310_0,stringappend_1311_0) =>
                  let stringappend_1312_0 = (string_drop stringappend_1309_0 stringappend_1311_0) in
                  if ((case ((sep_matches_prefix stringappend_1312_0)) of
                      SOME (stringappend_1313_0,stringappend_1314_0) =>
                       let stringappend_1315_0 = (string_drop stringappend_1312_0 stringappend_1314_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1315_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1316_0,stringappend_1317_0) =>
                            let stringappend_1318_0 =
                              (string_drop stringappend_1315_0 stringappend_1317_0) in
                            if ((case ((sep_matches_prefix stringappend_1318_0)) of
                                SOME (stringappend_1319_0,stringappend_1320_0) =>
                                 let stringappend_1321_0 =
                                   (string_drop stringappend_1318_0 stringappend_1320_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_1321_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_1322_0,stringappend_1323_0) =>
                                      (case ((string_drop stringappend_1321_0 stringappend_1323_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_1305_0) =
       ((case ((rtypew_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1304_0,stringappend_1305_0) =>
          (stringappend_1304_0, stringappend_1305_0)
       )) in
     let stringappend_1306_0 = (string_drop stringappend_1076_0 stringappend_1305_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1306_0)) of
        SOME (stringappend_1307_0,stringappend_1308_0) =>
  (stringappend_1307_0, stringappend_1308_0)
  ) of
      (() , stringappend_1308_0) =>
  let stringappend_1309_0 = (string_drop stringappend_1306_0
                               stringappend_1308_0) in
  let (rd, stringappend_1311_0) =
      ((case ((reg_name_matches_prefix stringappend_1309_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1310_0,stringappend_1311_0) =>
       (stringappend_1310_0, stringappend_1311_0)
       )) in
  let stringappend_1312_0 = (string_drop stringappend_1309_0
                               stringappend_1311_0) in
  (case
  (case ((sep_matches_prefix stringappend_1312_0)) of
        SOME (stringappend_1313_0,stringappend_1314_0) =>
  (stringappend_1313_0, stringappend_1314_0)
  ) of
      (() , stringappend_1314_0) =>
  let stringappend_1315_0 = (string_drop stringappend_1312_0
                               stringappend_1314_0) in
  let (rs1, stringappend_1317_0) =
      ((case ((reg_name_matches_prefix stringappend_1315_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1316_0,stringappend_1317_0) =>
       (stringappend_1316_0, stringappend_1317_0)
       )) in
  let stringappend_1318_0 = (string_drop stringappend_1315_0
                               stringappend_1317_0) in
  (case
  (case ((sep_matches_prefix stringappend_1318_0)) of
        SOME (stringappend_1319_0,stringappend_1320_0) =>
  (stringappend_1319_0, stringappend_1320_0)
  ) of
      (() , stringappend_1320_0) =>
  let stringappend_1321_0 = (string_drop stringappend_1318_0
                               stringappend_1320_0) in
  let (rs2, stringappend_1323_0) =
      ((case ((reg_name_matches_prefix stringappend_1321_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1322_0,stringappend_1323_0) =>
       (stringappend_1322_0, stringappend_1323_0)
       )) in
  (case ((string_drop stringappend_1321_0 stringappend_1323_0)) of
        "" => RTYPEW (rs2,rs1,rd,op)
  )
  )
  )
  )
   else if ((case ((mul_mnemonic_matches_prefix stringappend_1076_0)) of
       SOME (stringappend_1325_0,stringappend_1326_0) =>
        let stringappend_1327_0 = (string_drop stringappend_1076_0 stringappend_1326_0) in
        if ((case ((spc_matches_prefix stringappend_1327_0)) of
            SOME (stringappend_1328_0,stringappend_1329_0) =>
             let stringappend_1330_0 = (string_drop stringappend_1327_0 stringappend_1329_0) in
             if ((case ((reg_name_matches_prefix stringappend_1330_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_1331_0,stringappend_1332_0) =>
                  let stringappend_1333_0 = (string_drop stringappend_1330_0 stringappend_1332_0) in
                  if ((case ((sep_matches_prefix stringappend_1333_0)) of
                      SOME (stringappend_1334_0,stringappend_1335_0) =>
                       let stringappend_1336_0 = (string_drop stringappend_1333_0 stringappend_1335_0) in
                       if ((case ((reg_name_matches_prefix stringappend_1336_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_1337_0,stringappend_1338_0) =>
                            let stringappend_1339_0 =
                              (string_drop stringappend_1336_0 stringappend_1338_0) in
                            if ((case ((sep_matches_prefix stringappend_1339_0)) of
                                SOME (stringappend_1340_0,stringappend_1341_0) =>
                                 let stringappend_1342_0 =
                                   (string_drop stringappend_1339_0 stringappend_1341_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_1342_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_1343_0,stringappend_1344_0) =>
                                      (case ((string_drop stringappend_1342_0 stringappend_1344_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let ((high, signed1, signed2), stringappend_1326_0) =
       ((case ((mul_mnemonic_matches_prefix stringappend_1076_0)) of
         SOME (stringappend_1325_0,stringappend_1326_0) =>
          (stringappend_1325_0, stringappend_1326_0)
       )) in
     let stringappend_1327_0 = (string_drop stringappend_1076_0 stringappend_1326_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1327_0)) of
        SOME (stringappend_1328_0,stringappend_1329_0) =>
  (stringappend_1328_0, stringappend_1329_0)
  ) of
      (() , stringappend_1329_0) =>
  let stringappend_1330_0 = (string_drop stringappend_1327_0
                               stringappend_1329_0) in
  let (rd, stringappend_1332_0) =
      ((case ((reg_name_matches_prefix stringappend_1330_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1331_0,stringappend_1332_0) =>
       (stringappend_1331_0, stringappend_1332_0)
       )) in
  let stringappend_1333_0 = (string_drop stringappend_1330_0
                               stringappend_1332_0) in
  (case
  (case ((sep_matches_prefix stringappend_1333_0)) of
        SOME (stringappend_1334_0,stringappend_1335_0) =>
  (stringappend_1334_0, stringappend_1335_0)
  ) of
      (() , stringappend_1335_0) =>
  let stringappend_1336_0 = (string_drop stringappend_1333_0
                               stringappend_1335_0) in
  let (rs1, stringappend_1338_0) =
      ((case ((reg_name_matches_prefix stringappend_1336_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1337_0,stringappend_1338_0) =>
       (stringappend_1337_0, stringappend_1338_0)
       )) in
  let stringappend_1339_0 = (string_drop stringappend_1336_0
                               stringappend_1338_0) in
  (case
  (case ((sep_matches_prefix stringappend_1339_0)) of
        SOME (stringappend_1340_0,stringappend_1341_0) =>
  (stringappend_1340_0, stringappend_1341_0)
  ) of
      (() , stringappend_1341_0) =>
  let stringappend_1342_0 = (string_drop stringappend_1339_0
                               stringappend_1341_0) in
  let (rs2, stringappend_1344_0) =
      ((case ((reg_name_matches_prefix stringappend_1342_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1343_0,stringappend_1344_0) =>
       (stringappend_1343_0, stringappend_1344_0)
       )) in
  (case ((string_drop stringappend_1342_0 stringappend_1344_0)) of
        "" => MUL (rs2,rs1,rd,high,signed1,signed2)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "div")) /\ (let stringappend_1346_0 = (string_drop stringappend_1076_0 ((string_length "div"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_1346_0)) of
                   SOME (stringappend_1347_0,stringappend_1348_0) =>
                    let stringappend_1349_0 = (string_drop stringappend_1346_0 stringappend_1348_0) in
                    if ((case ((spc_matches_prefix stringappend_1349_0)) of
                        SOME (stringappend_1350_0,stringappend_1351_0) =>
                         let stringappend_1352_0 =
                           (string_drop stringappend_1349_0 stringappend_1351_0) in
                         if ((case ((reg_name_matches_prefix stringappend_1352_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_1353_0,stringappend_1354_0) =>
                              let stringappend_1355_0 =
                                (string_drop stringappend_1352_0 stringappend_1354_0) in
                              if ((case ((sep_matches_prefix stringappend_1355_0)) of
                                  SOME (stringappend_1356_0,stringappend_1357_0) =>
                                   let stringappend_1358_0 =
                                     (string_drop stringappend_1355_0 stringappend_1357_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_1358_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_1359_0,stringappend_1360_0) =>
                                        let stringappend_1361_0 =
                                          (string_drop stringappend_1358_0 stringappend_1360_0) in
                                        if ((case ((sep_matches_prefix stringappend_1361_0)) of
                                            SOME (stringappend_1362_0,stringappend_1363_0) =>
                                             let stringappend_1364_0 =
                                               (string_drop stringappend_1361_0 stringappend_1363_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_1364_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_1365_0,stringappend_1366_0) =>
                                                  (case ((string_drop stringappend_1364_0
                                                            stringappend_1366_0)) of
                                                    "" => T
                                                  | _ => F
                                                  )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1346_0 = (string_drop stringappend_1076_0 ((string_length "div"))) in
     let (s, stringappend_1348_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_1346_0)) of
         SOME (stringappend_1347_0,stringappend_1348_0) =>
          (stringappend_1347_0, stringappend_1348_0)
       )) in
     let stringappend_1349_0 = (string_drop stringappend_1346_0 stringappend_1348_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1349_0)) of
        SOME (stringappend_1350_0,stringappend_1351_0) =>
  (stringappend_1350_0, stringappend_1351_0)
  ) of
      (() , stringappend_1351_0) =>
  let stringappend_1352_0 = (string_drop stringappend_1349_0
                               stringappend_1351_0) in
  let (rd, stringappend_1354_0) =
      ((case ((reg_name_matches_prefix stringappend_1352_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1353_0,stringappend_1354_0) =>
       (stringappend_1353_0, stringappend_1354_0)
       )) in
  let stringappend_1355_0 = (string_drop stringappend_1352_0
                               stringappend_1354_0) in
  (case
  (case ((sep_matches_prefix stringappend_1355_0)) of
        SOME (stringappend_1356_0,stringappend_1357_0) =>
  (stringappend_1356_0, stringappend_1357_0)
  ) of
      (() , stringappend_1357_0) =>
  let stringappend_1358_0 = (string_drop stringappend_1355_0
                               stringappend_1357_0) in
  let (rs1, stringappend_1360_0) =
      ((case ((reg_name_matches_prefix stringappend_1358_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1359_0,stringappend_1360_0) =>
       (stringappend_1359_0, stringappend_1360_0)
       )) in
  let stringappend_1361_0 = (string_drop stringappend_1358_0
                               stringappend_1360_0) in
  (case
  (case ((sep_matches_prefix stringappend_1361_0)) of
        SOME (stringappend_1362_0,stringappend_1363_0) =>
  (stringappend_1362_0, stringappend_1363_0)
  ) of
      (() , stringappend_1363_0) =>
  let stringappend_1364_0 = (string_drop stringappend_1361_0
                               stringappend_1363_0) in
  let (rs2, stringappend_1366_0) =
      ((case ((reg_name_matches_prefix stringappend_1364_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1365_0,stringappend_1366_0) =>
       (stringappend_1365_0, stringappend_1366_0)
       )) in
  (case ((string_drop stringappend_1364_0 stringappend_1366_0)) of
        "" => DIV0 (rs2,rs1,rd,s)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "rem")) /\ (let stringappend_1368_0 = (string_drop stringappend_1076_0 ((string_length "rem"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_1368_0)) of
                   SOME (stringappend_1369_0,stringappend_1370_0) =>
                    let stringappend_1371_0 = (string_drop stringappend_1368_0 stringappend_1370_0) in
                    if ((case ((spc_matches_prefix stringappend_1371_0)) of
                        SOME (stringappend_1372_0,stringappend_1373_0) =>
                         let stringappend_1374_0 =
                           (string_drop stringappend_1371_0 stringappend_1373_0) in
                         if ((case ((reg_name_matches_prefix stringappend_1374_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_1375_0,stringappend_1376_0) =>
                              let stringappend_1377_0 =
                                (string_drop stringappend_1374_0 stringappend_1376_0) in
                              if ((case ((sep_matches_prefix stringappend_1377_0)) of
                                  SOME (stringappend_1378_0,stringappend_1379_0) =>
                                   let stringappend_1380_0 =
                                     (string_drop stringappend_1377_0 stringappend_1379_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_1380_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_1381_0,stringappend_1382_0) =>
                                        let stringappend_1383_0 =
                                          (string_drop stringappend_1380_0 stringappend_1382_0) in
                                        if ((case ((sep_matches_prefix stringappend_1383_0)) of
                                            SOME (stringappend_1384_0,stringappend_1385_0) =>
                                             let stringappend_1386_0 =
                                               (string_drop stringappend_1383_0 stringappend_1385_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_1386_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_1387_0,stringappend_1388_0) =>
                                                  (case ((string_drop stringappend_1386_0
                                                            stringappend_1388_0)) of
                                                    "" => T
                                                  | _ => F
                                                  )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1368_0 = (string_drop stringappend_1076_0 ((string_length "rem"))) in
     let (s, stringappend_1370_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_1368_0)) of
         SOME (stringappend_1369_0,stringappend_1370_0) =>
          (stringappend_1369_0, stringappend_1370_0)
       )) in
     let stringappend_1371_0 = (string_drop stringappend_1368_0 stringappend_1370_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1371_0)) of
        SOME (stringappend_1372_0,stringappend_1373_0) =>
  (stringappend_1372_0, stringappend_1373_0)
  ) of
      (() , stringappend_1373_0) =>
  let stringappend_1374_0 = (string_drop stringappend_1371_0
                               stringappend_1373_0) in
  let (rd, stringappend_1376_0) =
      ((case ((reg_name_matches_prefix stringappend_1374_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1375_0,stringappend_1376_0) =>
       (stringappend_1375_0, stringappend_1376_0)
       )) in
  let stringappend_1377_0 = (string_drop stringappend_1374_0
                               stringappend_1376_0) in
  (case
  (case ((sep_matches_prefix stringappend_1377_0)) of
        SOME (stringappend_1378_0,stringappend_1379_0) =>
  (stringappend_1378_0, stringappend_1379_0)
  ) of
      (() , stringappend_1379_0) =>
  let stringappend_1380_0 = (string_drop stringappend_1377_0
                               stringappend_1379_0) in
  let (rs1, stringappend_1382_0) =
      ((case ((reg_name_matches_prefix stringappend_1380_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1381_0,stringappend_1382_0) =>
       (stringappend_1381_0, stringappend_1382_0)
       )) in
  let stringappend_1383_0 = (string_drop stringappend_1380_0
                               stringappend_1382_0) in
  (case
  (case ((sep_matches_prefix stringappend_1383_0)) of
        SOME (stringappend_1384_0,stringappend_1385_0) =>
  (stringappend_1384_0, stringappend_1385_0)
  ) of
      (() , stringappend_1385_0) =>
  let stringappend_1386_0 = (string_drop stringappend_1383_0
                               stringappend_1385_0) in
  let (rs2, stringappend_1388_0) =
      ((case ((reg_name_matches_prefix stringappend_1386_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1387_0,stringappend_1388_0) =>
       (stringappend_1387_0, stringappend_1388_0)
       )) in
  (case ((string_drop stringappend_1386_0 stringappend_1388_0)) of
        "" => REM (rs2,rs1,rd,s)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "mulw")) /\ (let stringappend_1390_0 = (string_drop stringappend_1076_0 ((string_length "mulw"))) in
               if ((case ((spc_matches_prefix stringappend_1390_0)) of
                   SOME (stringappend_1391_0,stringappend_1392_0) =>
                    let stringappend_1393_0 = (string_drop stringappend_1390_0 stringappend_1392_0) in
                    if ((case ((reg_name_matches_prefix stringappend_1393_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_1394_0,stringappend_1395_0) =>
                         let stringappend_1396_0 =
                           (string_drop stringappend_1393_0 stringappend_1395_0) in
                         if ((case ((sep_matches_prefix stringappend_1396_0)) of
                             SOME (stringappend_1397_0,stringappend_1398_0) =>
                              let stringappend_1399_0 =
                                (string_drop stringappend_1396_0 stringappend_1398_0) in
                              if ((case ((reg_name_matches_prefix stringappend_1399_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_1400_0,stringappend_1401_0) =>
                                   let stringappend_1402_0 =
                                     (string_drop stringappend_1399_0 stringappend_1401_0) in
                                   if ((case ((sep_matches_prefix stringappend_1402_0)) of
                                       SOME (stringappend_1403_0,stringappend_1404_0) =>
                                        let stringappend_1405_0 =
                                          (string_drop stringappend_1402_0 stringappend_1404_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_1405_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_1406_0,stringappend_1407_0) =>
                                             (case ((string_drop stringappend_1405_0
                                                       stringappend_1407_0)) of
                                               "" => T
                                             | _ => F
                                             )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1390_0 = (string_drop stringappend_1076_0 ((string_length "mulw"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1390_0)) of
        SOME (stringappend_1391_0,stringappend_1392_0) =>
  (stringappend_1391_0, stringappend_1392_0)
  ) of
      (() , stringappend_1392_0) =>
  let stringappend_1393_0 = (string_drop stringappend_1390_0
                               stringappend_1392_0) in
  let (rd, stringappend_1395_0) =
      ((case ((reg_name_matches_prefix stringappend_1393_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1394_0,stringappend_1395_0) =>
       (stringappend_1394_0, stringappend_1395_0)
       )) in
  let stringappend_1396_0 = (string_drop stringappend_1393_0
                               stringappend_1395_0) in
  (case
  (case ((sep_matches_prefix stringappend_1396_0)) of
        SOME (stringappend_1397_0,stringappend_1398_0) =>
  (stringappend_1397_0, stringappend_1398_0)
  ) of
      (() , stringappend_1398_0) =>
  let stringappend_1399_0 = (string_drop stringappend_1396_0
                               stringappend_1398_0) in
  let (rs1, stringappend_1401_0) =
      ((case ((reg_name_matches_prefix stringappend_1399_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1400_0,stringappend_1401_0) =>
       (stringappend_1400_0, stringappend_1401_0)
       )) in
  let stringappend_1402_0 = (string_drop stringappend_1399_0
                               stringappend_1401_0) in
  (case
  (case ((sep_matches_prefix stringappend_1402_0)) of
        SOME (stringappend_1403_0,stringappend_1404_0) =>
  (stringappend_1403_0, stringappend_1404_0)
  ) of
      (() , stringappend_1404_0) =>
  let stringappend_1405_0 = (string_drop stringappend_1402_0
                               stringappend_1404_0) in
  let (rs2, stringappend_1407_0) =
      ((case ((reg_name_matches_prefix stringappend_1405_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1406_0,stringappend_1407_0) =>
       (stringappend_1406_0, stringappend_1407_0)
       )) in
  (case ((string_drop stringappend_1405_0 stringappend_1407_0)) of
        "" => MULW (rs2,rs1,rd)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "div")) /\ (let stringappend_1409_0 = (string_drop stringappend_1076_0 ((string_length "div"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_1409_0)) of
                   SOME (stringappend_1410_0,stringappend_1411_0) =>
                    let stringappend_1412_0 = (string_drop stringappend_1409_0 stringappend_1411_0) in
                    if (((((string_startswith stringappend_1412_0 "w")) /\ (let stringappend_1413_0 =
                             (string_drop stringappend_1412_0 ((string_length "w"))) in
                           if ((case ((spc_matches_prefix stringappend_1413_0)) of
                               SOME (stringappend_1414_0,stringappend_1415_0) =>
                                let stringappend_1416_0 =
                                  (string_drop stringappend_1413_0 stringappend_1415_0) in
                                if ((case ((reg_name_matches_prefix stringappend_1416_0
                                             :  (( 5 words$word # ii))option)) of
                                    SOME (stringappend_1417_0,stringappend_1418_0) =>
                                     let stringappend_1419_0 =
                                       (string_drop stringappend_1416_0 stringappend_1418_0) in
                                     if ((case ((sep_matches_prefix stringappend_1419_0)) of
                                         SOME (stringappend_1420_0,stringappend_1421_0) =>
                                          let stringappend_1422_0 =
                                            (string_drop stringappend_1419_0 stringappend_1421_0) in
                                          if ((case ((reg_name_matches_prefix stringappend_1422_0
                                                       :  (( 5 words$word # ii))option)) of
                                              SOME (stringappend_1423_0,stringappend_1424_0) =>
                                               let stringappend_1425_0 =
                                                 (string_drop stringappend_1422_0 stringappend_1424_0) in
                                               if ((case ((sep_matches_prefix stringappend_1425_0)) of
                                                   SOME (stringappend_1426_0,stringappend_1427_0) =>
                                                    let stringappend_1428_0 =
                                                      (string_drop stringappend_1425_0
                                                        stringappend_1427_0) in
                                                    if ((case ((reg_name_matches_prefix
                                                                  stringappend_1428_0
                                                                 :  (( 5 words$word # ii))option)) of
                                                        SOME
                                                        (stringappend_1429_0,stringappend_1430_0) =>
                                                         (case ((string_drop stringappend_1428_0
                                                                   stringappend_1430_0)) of
                                                           "" => T
                                                         | _ => F
                                                         )
                                                      | NONE => F
                                                      )) then
                                                      T
                                                    else F
                                                 | NONE => F
                                                 )) then
                                                 T
                                               else F
                                            | NONE => F
                                            )) then
                                            T
                                          else F
                                       | NONE => F
                                       )) then
                                       T
                                     else F
                                  | NONE => F
                                  )) then
                                  T
                                else F
                             | NONE => F
                             )) then
                             T
                           else F)))) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1409_0 = (string_drop stringappend_1076_0 ((string_length "div"))) in
     let (s, stringappend_1411_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_1409_0)) of
         SOME (stringappend_1410_0,stringappend_1411_0) =>
          (stringappend_1410_0, stringappend_1411_0)
       )) in
     let stringappend_1412_0 = (string_drop stringappend_1409_0 stringappend_1411_0) in
     let stringappend_1413_0 = (string_drop stringappend_1412_0 ((string_length "w"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1413_0)) of
        SOME (stringappend_1414_0,stringappend_1415_0) =>
  (stringappend_1414_0, stringappend_1415_0)
  ) of
      (() , stringappend_1415_0) =>
  let stringappend_1416_0 = (string_drop stringappend_1413_0
                               stringappend_1415_0) in
  let (rd, stringappend_1418_0) =
      ((case ((reg_name_matches_prefix stringappend_1416_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1417_0,stringappend_1418_0) =>
       (stringappend_1417_0, stringappend_1418_0)
       )) in
  let stringappend_1419_0 = (string_drop stringappend_1416_0
                               stringappend_1418_0) in
  (case
  (case ((sep_matches_prefix stringappend_1419_0)) of
        SOME (stringappend_1420_0,stringappend_1421_0) =>
  (stringappend_1420_0, stringappend_1421_0)
  ) of
      (() , stringappend_1421_0) =>
  let stringappend_1422_0 = (string_drop stringappend_1419_0
                               stringappend_1421_0) in
  let (rs1, stringappend_1424_0) =
      ((case ((reg_name_matches_prefix stringappend_1422_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1423_0,stringappend_1424_0) =>
       (stringappend_1423_0, stringappend_1424_0)
       )) in
  let stringappend_1425_0 = (string_drop stringappend_1422_0
                               stringappend_1424_0) in
  (case
  (case ((sep_matches_prefix stringappend_1425_0)) of
        SOME (stringappend_1426_0,stringappend_1427_0) =>
  (stringappend_1426_0, stringappend_1427_0)
  ) of
      (() , stringappend_1427_0) =>
  let stringappend_1428_0 = (string_drop stringappend_1425_0
                               stringappend_1427_0) in
  let (rs2, stringappend_1430_0) =
      ((case ((reg_name_matches_prefix stringappend_1428_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1429_0,stringappend_1430_0) =>
       (stringappend_1429_0, stringappend_1430_0)
       )) in
  (case ((string_drop stringappend_1428_0 stringappend_1430_0)) of
        "" => DIVW (rs2,rs1,rd,s)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "rem")) /\ (let stringappend_1432_0 = (string_drop stringappend_1076_0 ((string_length "rem"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_1432_0)) of
                   SOME (stringappend_1433_0,stringappend_1434_0) =>
                    let stringappend_1435_0 = (string_drop stringappend_1432_0 stringappend_1434_0) in
                    if (((((string_startswith stringappend_1435_0 "w")) /\ (let stringappend_1436_0 =
                             (string_drop stringappend_1435_0 ((string_length "w"))) in
                           if ((case ((spc_matches_prefix stringappend_1436_0)) of
                               SOME (stringappend_1437_0,stringappend_1438_0) =>
                                let stringappend_1439_0 =
                                  (string_drop stringappend_1436_0 stringappend_1438_0) in
                                if ((case ((reg_name_matches_prefix stringappend_1439_0
                                             :  (( 5 words$word # ii))option)) of
                                    SOME (stringappend_1440_0,stringappend_1441_0) =>
                                     let stringappend_1442_0 =
                                       (string_drop stringappend_1439_0 stringappend_1441_0) in
                                     if ((case ((sep_matches_prefix stringappend_1442_0)) of
                                         SOME (stringappend_1443_0,stringappend_1444_0) =>
                                          let stringappend_1445_0 =
                                            (string_drop stringappend_1442_0 stringappend_1444_0) in
                                          if ((case ((reg_name_matches_prefix stringappend_1445_0
                                                       :  (( 5 words$word # ii))option)) of
                                              SOME (stringappend_1446_0,stringappend_1447_0) =>
                                               let stringappend_1448_0 =
                                                 (string_drop stringappend_1445_0 stringappend_1447_0) in
                                               if ((case ((sep_matches_prefix stringappend_1448_0)) of
                                                   SOME (stringappend_1449_0,stringappend_1450_0) =>
                                                    let stringappend_1451_0 =
                                                      (string_drop stringappend_1448_0
                                                        stringappend_1450_0) in
                                                    if ((case ((reg_name_matches_prefix
                                                                  stringappend_1451_0
                                                                 :  (( 5 words$word # ii))option)) of
                                                        SOME
                                                        (stringappend_1452_0,stringappend_1453_0) =>
                                                         (case ((string_drop stringappend_1451_0
                                                                   stringappend_1453_0)) of
                                                           "" => T
                                                         | _ => F
                                                         )
                                                      | NONE => F
                                                      )) then
                                                      T
                                                    else F
                                                 | NONE => F
                                                 )) then
                                                 T
                                               else F
                                            | NONE => F
                                            )) then
                                            T
                                          else F
                                       | NONE => F
                                       )) then
                                       T
                                     else F
                                  | NONE => F
                                  )) then
                                  T
                                else F
                             | NONE => F
                             )) then
                             T
                           else F)))) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1432_0 = (string_drop stringappend_1076_0 ((string_length "rem"))) in
     let (s, stringappend_1434_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_1432_0)) of
         SOME (stringappend_1433_0,stringappend_1434_0) =>
          (stringappend_1433_0, stringappend_1434_0)
       )) in
     let stringappend_1435_0 = (string_drop stringappend_1432_0 stringappend_1434_0) in
     let stringappend_1436_0 = (string_drop stringappend_1435_0 ((string_length "w"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1436_0)) of
        SOME (stringappend_1437_0,stringappend_1438_0) =>
  (stringappend_1437_0, stringappend_1438_0)
  ) of
      (() , stringappend_1438_0) =>
  let stringappend_1439_0 = (string_drop stringappend_1436_0
                               stringappend_1438_0) in
  let (rd, stringappend_1441_0) =
      ((case ((reg_name_matches_prefix stringappend_1439_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1440_0,stringappend_1441_0) =>
       (stringappend_1440_0, stringappend_1441_0)
       )) in
  let stringappend_1442_0 = (string_drop stringappend_1439_0
                               stringappend_1441_0) in
  (case
  (case ((sep_matches_prefix stringappend_1442_0)) of
        SOME (stringappend_1443_0,stringappend_1444_0) =>
  (stringappend_1443_0, stringappend_1444_0)
  ) of
      (() , stringappend_1444_0) =>
  let stringappend_1445_0 = (string_drop stringappend_1442_0
                               stringappend_1444_0) in
  let (rs1, stringappend_1447_0) =
      ((case ((reg_name_matches_prefix stringappend_1445_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1446_0,stringappend_1447_0) =>
       (stringappend_1446_0, stringappend_1447_0)
       )) in
  let stringappend_1448_0 = (string_drop stringappend_1445_0
                               stringappend_1447_0) in
  (case
  (case ((sep_matches_prefix stringappend_1448_0)) of
        SOME (stringappend_1449_0,stringappend_1450_0) =>
  (stringappend_1449_0, stringappend_1450_0)
  ) of
      (() , stringappend_1450_0) =>
  let stringappend_1451_0 = (string_drop stringappend_1448_0
                               stringappend_1450_0) in
  let (rs2, stringappend_1453_0) =
      ((case ((reg_name_matches_prefix stringappend_1451_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1452_0,stringappend_1453_0) =>
       (stringappend_1452_0, stringappend_1453_0)
       )) in
  (case ((string_drop stringappend_1451_0 stringappend_1453_0)) of
        "" => REMW (rs2,rs1,rd,s)
  )
  )
  )
  )
   else if (((((string_startswith stringappend_1076_0 "fence")) /\ (let stringappend_1455_0 = (string_drop stringappend_1076_0 ((string_length "fence"))) in
               if ((case ((spc_matches_prefix stringappend_1455_0)) of
                   SOME (stringappend_1456_0,stringappend_1457_0) =>
                    let stringappend_1458_0 = (string_drop stringappend_1455_0 stringappend_1457_0) in
                    if ((case ((fence_bits_matches_prefix stringappend_1458_0
                                 :  (( 4 words$word # ii))option)) of
                        SOME (stringappend_1459_0,stringappend_1460_0) =>
                         let stringappend_1461_0 =
                           (string_drop stringappend_1458_0 stringappend_1460_0) in
                         if ((case ((sep_matches_prefix stringappend_1461_0)) of
                             SOME (stringappend_1462_0,stringappend_1463_0) =>
                              let stringappend_1464_0 =
                                (string_drop stringappend_1461_0 stringappend_1463_0) in
                              if ((case ((fence_bits_matches_prefix stringappend_1464_0
                                           :  (( 4 words$word # ii))option)) of
                                  SOME (stringappend_1465_0,stringappend_1466_0) =>
                                   (case ((string_drop stringappend_1464_0 stringappend_1466_0)) of
                                     "" => T
                                   | _ => F
                                   )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_1455_0 = (string_drop stringappend_1076_0 ((string_length "fence"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1455_0)) of
        SOME (stringappend_1456_0,stringappend_1457_0) =>
  (stringappend_1456_0, stringappend_1457_0)
  ) of
      (() , stringappend_1457_0) =>
  let stringappend_1458_0 = (string_drop stringappend_1455_0
                               stringappend_1457_0) in
  let (pred, stringappend_1460_0) =
      ((case ((fence_bits_matches_prefix stringappend_1458_0 : (( 4 words$word # ii)) option)) of
             SOME (stringappend_1459_0,stringappend_1460_0) =>
       (stringappend_1459_0, stringappend_1460_0)
       )) in
  let stringappend_1461_0 = (string_drop stringappend_1458_0
                               stringappend_1460_0) in
  (case
  (case ((sep_matches_prefix stringappend_1461_0)) of
        SOME (stringappend_1462_0,stringappend_1463_0) =>
  (stringappend_1462_0, stringappend_1463_0)
  ) of
      (() , stringappend_1463_0) =>
  let stringappend_1464_0 = (string_drop stringappend_1461_0
                               stringappend_1463_0) in
  let (succ, stringappend_1466_0) =
      ((case ((fence_bits_matches_prefix stringappend_1464_0 : (( 4 words$word # ii)) option)) of
             SOME (stringappend_1465_0,stringappend_1466_0) =>
       (stringappend_1465_0, stringappend_1466_0)
       )) in
  (case ((string_drop stringappend_1464_0 stringappend_1466_0)) of
        "" => FENCE (pred,succ)
  )
  )
  )
   else
     (case stringappend_1076_0 of
       "fence.i" => FENCEI () 
     | "ecall" => ECALL () 
     | "mret" => MRET () 
     | "sret" => SRET () 
     | "ebreak" => EBREAK () 
     | "wfi" => WFI () 
     | stringappend_1076_0 =>
        if (((((string_startswith stringappend_1076_0 "sfence.vma")) /\ (let stringappend_1468_0 =
                 (string_drop stringappend_1076_0 ((string_length "sfence.vma"))) in
               if ((case ((spc_matches_prefix stringappend_1468_0)) of
                   SOME (stringappend_1469_0,stringappend_1470_0) =>
                    let stringappend_1471_0 = (string_drop stringappend_1468_0 stringappend_1470_0) in
                    if ((case ((reg_name_matches_prefix stringappend_1471_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_1472_0,stringappend_1473_0) =>
                         let stringappend_1474_0 =
                           (string_drop stringappend_1471_0 stringappend_1473_0) in
                         if ((case ((sep_matches_prefix stringappend_1474_0)) of
                             SOME (stringappend_1475_0,stringappend_1476_0) =>
                              let stringappend_1477_0 =
                                (string_drop stringappend_1474_0 stringappend_1476_0) in
                              if ((case ((reg_name_matches_prefix stringappend_1477_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_1478_0,stringappend_1479_0) =>
                                   (case ((string_drop stringappend_1477_0 stringappend_1479_0)) of
                                     "" => T
                                   | _ => F
                                   )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
          let stringappend_1468_0 = (string_drop stringappend_1076_0 ((string_length "sfence.vma"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1468_0)) of
        SOME (stringappend_1469_0,stringappend_1470_0) =>
  (stringappend_1469_0, stringappend_1470_0)
  ) of
      (() , stringappend_1470_0) =>
  let stringappend_1471_0 = (string_drop stringappend_1468_0
                               stringappend_1470_0) in
  let (rs1, stringappend_1473_0) =
      ((case ((reg_name_matches_prefix stringappend_1471_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1472_0,stringappend_1473_0) =>
       (stringappend_1472_0, stringappend_1473_0)
       )) in
  let stringappend_1474_0 = (string_drop stringappend_1471_0
                               stringappend_1473_0) in
  (case
  (case ((sep_matches_prefix stringappend_1474_0)) of
        SOME (stringappend_1475_0,stringappend_1476_0) =>
  (stringappend_1475_0, stringappend_1476_0)
  ) of
      (() , stringappend_1476_0) =>
  let stringappend_1477_0 = (string_drop stringappend_1474_0
                               stringappend_1476_0) in
  let (rs2, stringappend_1479_0) =
      ((case ((reg_name_matches_prefix stringappend_1477_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1478_0,stringappend_1479_0) =>
       (stringappend_1478_0, stringappend_1479_0)
       )) in
  (case ((string_drop stringappend_1477_0 stringappend_1479_0)) of
        "" => SFENCE_VMA (rs1,rs2)
  )
  )
  )
        else if (((((string_startswith stringappend_1076_0 "lr.")) /\ (let stringappend_1481_0 =
                      (string_drop stringappend_1076_0 ((string_length "lr."))) in
                    if ((case ((maybe_aq_matches_prefix stringappend_1481_0)) of
                        SOME (stringappend_1482_0,stringappend_1483_0) =>
                         let stringappend_1484_0 =
                           (string_drop stringappend_1481_0 stringappend_1483_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_1484_0)) of
                             SOME (stringappend_1485_0,stringappend_1486_0) =>
                              let stringappend_1487_0 =
                                (string_drop stringappend_1484_0 stringappend_1486_0) in
                              if ((case ((size_mnemonic_matches_prefix stringappend_1487_0)) of
                                  SOME (stringappend_1488_0,stringappend_1489_0) =>
                                   let stringappend_1490_0 =
                                     (string_drop stringappend_1487_0 stringappend_1489_0) in
                                   if ((case ((spc_matches_prefix stringappend_1490_0)) of
                                       SOME (stringappend_1491_0,stringappend_1492_0) =>
                                        let stringappend_1493_0 =
                                          (string_drop stringappend_1490_0 stringappend_1492_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_1493_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_1494_0,stringappend_1495_0) =>
                                             let stringappend_1496_0 =
                                               (string_drop stringappend_1493_0 stringappend_1495_0) in
                                             if ((case ((sep_matches_prefix stringappend_1496_0)) of
                                                 SOME (stringappend_1497_0,stringappend_1498_0) =>
                                                  let stringappend_1499_0 =
                                                    (string_drop stringappend_1496_0
                                                      stringappend_1498_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_1499_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_1500_0,stringappend_1501_0) =>
                                                       (case ((string_drop stringappend_1499_0
                                                                 stringappend_1501_0)) of
                                                         "" => T
                                                       | _ => F
                                                       )
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
          let stringappend_1481_0 = (string_drop stringappend_1076_0 ((string_length "lr."))) in
          let (aq, stringappend_1483_0) =
            ((case ((maybe_aq_matches_prefix stringappend_1481_0)) of
              SOME (stringappend_1482_0,stringappend_1483_0) =>
               (stringappend_1482_0, stringappend_1483_0)
            )) in
          let stringappend_1484_0 = (string_drop stringappend_1481_0 stringappend_1483_0) in
          let (rl, stringappend_1486_0) =
            ((case ((maybe_rl_matches_prefix stringappend_1484_0)) of
              SOME (stringappend_1485_0,stringappend_1486_0) =>
               (stringappend_1485_0, stringappend_1486_0)
            )) in
          let stringappend_1487_0 = (string_drop stringappend_1484_0 stringappend_1486_0) in
          let (size1, stringappend_1489_0) =
            ((case ((size_mnemonic_matches_prefix stringappend_1487_0)) of
              SOME (stringappend_1488_0,stringappend_1489_0) =>
               (stringappend_1488_0, stringappend_1489_0)
            )) in
          let stringappend_1490_0 = (string_drop stringappend_1487_0 stringappend_1489_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1490_0)) of
        SOME (stringappend_1491_0,stringappend_1492_0) =>
  (stringappend_1491_0, stringappend_1492_0)
  ) of
      (() , stringappend_1492_0) =>
  let stringappend_1493_0 = (string_drop stringappend_1490_0
                               stringappend_1492_0) in
  let (rd, stringappend_1495_0) =
      ((case ((reg_name_matches_prefix stringappend_1493_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1494_0,stringappend_1495_0) =>
       (stringappend_1494_0, stringappend_1495_0)
       )) in
  let stringappend_1496_0 = (string_drop stringappend_1493_0
                               stringappend_1495_0) in
  (case
  (case ((sep_matches_prefix stringappend_1496_0)) of
        SOME (stringappend_1497_0,stringappend_1498_0) =>
  (stringappend_1497_0, stringappend_1498_0)
  ) of
      (() , stringappend_1498_0) =>
  let stringappend_1499_0 = (string_drop stringappend_1496_0
                               stringappend_1498_0) in
  let (rs1, stringappend_1501_0) =
      ((case ((reg_name_matches_prefix stringappend_1499_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1500_0,stringappend_1501_0) =>
       (stringappend_1500_0, stringappend_1501_0)
       )) in
  (case ((string_drop stringappend_1499_0 stringappend_1501_0)) of
        "" => LOADRES (aq,rl,rs1,size1,rd)
  )
  )
  )
        else if (((((string_startswith stringappend_1076_0 "sc.")) /\ (let stringappend_1503_0 =
                      (string_drop stringappend_1076_0 ((string_length "sc."))) in
                    if ((case ((maybe_aq_matches_prefix stringappend_1503_0)) of
                        SOME (stringappend_1504_0,stringappend_1505_0) =>
                         let stringappend_1506_0 =
                           (string_drop stringappend_1503_0 stringappend_1505_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_1506_0)) of
                             SOME (stringappend_1507_0,stringappend_1508_0) =>
                              let stringappend_1509_0 =
                                (string_drop stringappend_1506_0 stringappend_1508_0) in
                              if ((case ((size_mnemonic_matches_prefix stringappend_1509_0)) of
                                  SOME (stringappend_1510_0,stringappend_1511_0) =>
                                   let stringappend_1512_0 =
                                     (string_drop stringappend_1509_0 stringappend_1511_0) in
                                   if ((case ((spc_matches_prefix stringappend_1512_0)) of
                                       SOME (stringappend_1513_0,stringappend_1514_0) =>
                                        let stringappend_1515_0 =
                                          (string_drop stringappend_1512_0 stringappend_1514_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_1515_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_1516_0,stringappend_1517_0) =>
                                             let stringappend_1518_0 =
                                               (string_drop stringappend_1515_0 stringappend_1517_0) in
                                             if ((case ((sep_matches_prefix stringappend_1518_0)) of
                                                 SOME (stringappend_1519_0,stringappend_1520_0) =>
                                                  let stringappend_1521_0 =
                                                    (string_drop stringappend_1518_0
                                                      stringappend_1520_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_1521_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_1522_0,stringappend_1523_0) =>
                                                       let stringappend_1524_0 =
                                                         (string_drop stringappend_1521_0
                                                           stringappend_1523_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_1524_0)) of
                                                           SOME
                                                           (stringappend_1525_0,stringappend_1526_0) =>
                                                            let stringappend_1527_0 =
                                                              (string_drop stringappend_1524_0
                                                                stringappend_1526_0) in
                                                            if ((case ((reg_name_matches_prefix
                                                                          stringappend_1527_0
                                                                         :  (( 5 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_1528_0,stringappend_1529_0) =>
                                                                 (case ((string_drop
                                                                           stringappend_1527_0
                                                                           stringappend_1529_0)) of
                                                                   "" => T
                                                                 | _ => F
                                                                 )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
          let stringappend_1503_0 = (string_drop stringappend_1076_0 ((string_length "sc."))) in
          let (aq, stringappend_1505_0) =
            ((case ((maybe_aq_matches_prefix stringappend_1503_0)) of
              SOME (stringappend_1504_0,stringappend_1505_0) =>
               (stringappend_1504_0, stringappend_1505_0)
            )) in
          let stringappend_1506_0 = (string_drop stringappend_1503_0 stringappend_1505_0) in
          let (rl, stringappend_1508_0) =
            ((case ((maybe_rl_matches_prefix stringappend_1506_0)) of
              SOME (stringappend_1507_0,stringappend_1508_0) =>
               (stringappend_1507_0, stringappend_1508_0)
            )) in
          let stringappend_1509_0 = (string_drop stringappend_1506_0 stringappend_1508_0) in
          let (size1, stringappend_1511_0) =
            ((case ((size_mnemonic_matches_prefix stringappend_1509_0)) of
              SOME (stringappend_1510_0,stringappend_1511_0) =>
               (stringappend_1510_0, stringappend_1511_0)
            )) in
          let stringappend_1512_0 = (string_drop stringappend_1509_0 stringappend_1511_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1512_0)) of
        SOME (stringappend_1513_0,stringappend_1514_0) =>
  (stringappend_1513_0, stringappend_1514_0)
  ) of
      (() , stringappend_1514_0) =>
  let stringappend_1515_0 = (string_drop stringappend_1512_0
                               stringappend_1514_0) in
  let (rd, stringappend_1517_0) =
      ((case ((reg_name_matches_prefix stringappend_1515_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1516_0,stringappend_1517_0) =>
       (stringappend_1516_0, stringappend_1517_0)
       )) in
  let stringappend_1518_0 = (string_drop stringappend_1515_0
                               stringappend_1517_0) in
  (case
  (case ((sep_matches_prefix stringappend_1518_0)) of
        SOME (stringappend_1519_0,stringappend_1520_0) =>
  (stringappend_1519_0, stringappend_1520_0)
  ) of
      (() , stringappend_1520_0) =>
  let stringappend_1521_0 = (string_drop stringappend_1518_0
                               stringappend_1520_0) in
  let (rs1, stringappend_1523_0) =
      ((case ((reg_name_matches_prefix stringappend_1521_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1522_0,stringappend_1523_0) =>
       (stringappend_1522_0, stringappend_1523_0)
       )) in
  let stringappend_1524_0 = (string_drop stringappend_1521_0
                               stringappend_1523_0) in
  (case
  (case ((sep_matches_prefix stringappend_1524_0)) of
        SOME (stringappend_1525_0,stringappend_1526_0) =>
  (stringappend_1525_0, stringappend_1526_0)
  ) of
      (() , stringappend_1526_0) =>
  let stringappend_1527_0 = (string_drop stringappend_1524_0
                               stringappend_1526_0) in
  let (rs2, stringappend_1529_0) =
      ((case ((reg_name_matches_prefix stringappend_1527_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1528_0,stringappend_1529_0) =>
       (stringappend_1528_0, stringappend_1529_0)
       )) in
  (case ((string_drop stringappend_1527_0 stringappend_1529_0)) of
        "" => STORECON (aq,rl,rs2,rs1,size1,rd)
  )
  )
  )
  )
        else if ((case ((amo_mnemonic_matches_prefix stringappend_1076_0)) of
            SOME (stringappend_1531_0,stringappend_1532_0) =>
             let stringappend_1533_0 = (string_drop stringappend_1076_0 stringappend_1532_0) in
             if (((((string_startswith stringappend_1533_0 ".")) /\ (let stringappend_1534_0 = (string_drop stringappend_1533_0 ((string_length "."))) in
                    if ((case ((size_mnemonic_matches_prefix stringappend_1534_0)) of
                        SOME (stringappend_1535_0,stringappend_1536_0) =>
                         let stringappend_1537_0 =
                           (string_drop stringappend_1534_0 stringappend_1536_0) in
                         if ((case ((maybe_aq_matches_prefix stringappend_1537_0)) of
                             SOME (stringappend_1538_0,stringappend_1539_0) =>
                              let stringappend_1540_0 =
                                (string_drop stringappend_1537_0 stringappend_1539_0) in
                              if ((case ((maybe_rl_matches_prefix stringappend_1540_0)) of
                                  SOME (stringappend_1541_0,stringappend_1542_0) =>
                                   let stringappend_1543_0 =
                                     (string_drop stringappend_1540_0 stringappend_1542_0) in
                                   if ((case ((spc_matches_prefix stringappend_1543_0)) of
                                       SOME (stringappend_1544_0,stringappend_1545_0) =>
                                        let stringappend_1546_0 =
                                          (string_drop stringappend_1543_0 stringappend_1545_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_1546_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_1547_0,stringappend_1548_0) =>
                                             let stringappend_1549_0 =
                                               (string_drop stringappend_1546_0 stringappend_1548_0) in
                                             if ((case ((sep_matches_prefix stringappend_1549_0)) of
                                                 SOME (stringappend_1550_0,stringappend_1551_0) =>
                                                  let stringappend_1552_0 =
                                                    (string_drop stringappend_1549_0
                                                      stringappend_1551_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_1552_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_1553_0,stringappend_1554_0) =>
                                                       let stringappend_1555_0 =
                                                         (string_drop stringappend_1552_0
                                                           stringappend_1554_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_1555_0)) of
                                                           SOME
                                                           (stringappend_1556_0,stringappend_1557_0) =>
                                                            let stringappend_1558_0 =
                                                              (string_drop stringappend_1555_0
                                                                stringappend_1557_0) in
                                                            if ((case ((reg_name_matches_prefix
                                                                          stringappend_1558_0
                                                                         :  (( 5 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_1559_0,stringappend_1560_0) =>
                                                                 (case ((string_drop
                                                                           stringappend_1558_0
                                                                           stringappend_1560_0)) of
                                                                   "" => T
                                                                 | _ => F
                                                                 )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
               T
             else F
          | NONE => F
          )) then
          let (op, stringappend_1532_0) =
            ((case ((amo_mnemonic_matches_prefix stringappend_1076_0)) of
              SOME (stringappend_1531_0,stringappend_1532_0) =>
               (stringappend_1531_0, stringappend_1532_0)
            )) in
          let stringappend_1533_0 = (string_drop stringappend_1076_0 stringappend_1532_0) in
          let stringappend_1534_0 = (string_drop stringappend_1533_0 ((string_length "."))) in
          let (width, stringappend_1536_0) =
            ((case ((size_mnemonic_matches_prefix stringappend_1534_0)) of
              SOME (stringappend_1535_0,stringappend_1536_0) =>
               (stringappend_1535_0, stringappend_1536_0)
            )) in
          let stringappend_1537_0 = (string_drop stringappend_1534_0 stringappend_1536_0) in
          let (aq, stringappend_1539_0) =
            ((case ((maybe_aq_matches_prefix stringappend_1537_0)) of
              SOME (stringappend_1538_0,stringappend_1539_0) =>
               (stringappend_1538_0, stringappend_1539_0)
            )) in
          let stringappend_1540_0 = (string_drop stringappend_1537_0 stringappend_1539_0) in
          let (rl, stringappend_1542_0) =
            ((case ((maybe_rl_matches_prefix stringappend_1540_0)) of
              SOME (stringappend_1541_0,stringappend_1542_0) =>
               (stringappend_1541_0, stringappend_1542_0)
            )) in
          let stringappend_1543_0 = (string_drop stringappend_1540_0 stringappend_1542_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1543_0)) of
        SOME (stringappend_1544_0,stringappend_1545_0) =>
  (stringappend_1544_0, stringappend_1545_0)
  ) of
      (() , stringappend_1545_0) =>
  let stringappend_1546_0 = (string_drop stringappend_1543_0
                               stringappend_1545_0) in
  let (rd, stringappend_1548_0) =
      ((case ((reg_name_matches_prefix stringappend_1546_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1547_0,stringappend_1548_0) =>
       (stringappend_1547_0, stringappend_1548_0)
       )) in
  let stringappend_1549_0 = (string_drop stringappend_1546_0
                               stringappend_1548_0) in
  (case
  (case ((sep_matches_prefix stringappend_1549_0)) of
        SOME (stringappend_1550_0,stringappend_1551_0) =>
  (stringappend_1550_0, stringappend_1551_0)
  ) of
      (() , stringappend_1551_0) =>
  let stringappend_1552_0 = (string_drop stringappend_1549_0
                               stringappend_1551_0) in
  let (rs1, stringappend_1554_0) =
      ((case ((reg_name_matches_prefix stringappend_1552_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1553_0,stringappend_1554_0) =>
       (stringappend_1553_0, stringappend_1554_0)
       )) in
  let stringappend_1555_0 = (string_drop stringappend_1552_0
                               stringappend_1554_0) in
  (case
  (case ((sep_matches_prefix stringappend_1555_0)) of
        SOME (stringappend_1556_0,stringappend_1557_0) =>
  (stringappend_1556_0, stringappend_1557_0)
  ) of
      (() , stringappend_1557_0) =>
  let stringappend_1558_0 = (string_drop stringappend_1555_0
                               stringappend_1557_0) in
  let (rs2, stringappend_1560_0) =
      ((case ((reg_name_matches_prefix stringappend_1558_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1559_0,stringappend_1560_0) =>
       (stringappend_1559_0, stringappend_1560_0)
       )) in
  (case ((string_drop stringappend_1558_0 stringappend_1560_0)) of
        "" => AMO (op,aq,rl,rs2,rs1,width,rd)
  )
  )
  )
  )
        else if ((case ((csr_mnemonic_matches_prefix stringappend_1076_0)) of
            SOME (stringappend_1562_0,stringappend_1563_0) =>
             let stringappend_1564_0 = (string_drop stringappend_1076_0 stringappend_1563_0) in
             if (((((string_startswith stringappend_1564_0 "i")) /\ (let stringappend_1565_0 = (string_drop stringappend_1564_0 ((string_length "i"))) in
                    if ((case ((spc_matches_prefix stringappend_1565_0)) of
                        SOME (stringappend_1566_0,stringappend_1567_0) =>
                         let stringappend_1568_0 =
                           (string_drop stringappend_1565_0 stringappend_1567_0) in
                         if ((case ((reg_name_matches_prefix stringappend_1568_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_1569_0,stringappend_1570_0) =>
                              let stringappend_1571_0 =
                                (string_drop stringappend_1568_0 stringappend_1570_0) in
                              if ((case ((sep_matches_prefix stringappend_1571_0)) of
                                  SOME (stringappend_1572_0,stringappend_1573_0) =>
                                   let stringappend_1574_0 =
                                     (string_drop stringappend_1571_0 stringappend_1573_0) in
                                   if ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1574_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_1575_0,stringappend_1576_0) =>
                                        let stringappend_1577_0 =
                                          (string_drop stringappend_1574_0 stringappend_1576_0) in
                                        if ((case ((sep_matches_prefix stringappend_1577_0)) of
                                            SOME (stringappend_1578_0,stringappend_1579_0) =>
                                             let stringappend_1580_0 =
                                               (string_drop stringappend_1577_0 stringappend_1579_0) in
                                             if ((case ((csr_name_map_matches_prefix
                                                           stringappend_1580_0
                                                          :  (( 12 words$word # ii))option)) of
                                                 SOME (stringappend_1581_0,stringappend_1582_0) =>
                                                  (case ((string_drop stringappend_1580_0
                                                            stringappend_1582_0)) of
                                                    "" => T
                                                  | _ => F
                                                  )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
               T
             else F
          | NONE => F
          )) then
          let (op, stringappend_1563_0) =
            ((case ((csr_mnemonic_matches_prefix stringappend_1076_0)) of
              SOME (stringappend_1562_0,stringappend_1563_0) =>
               (stringappend_1562_0, stringappend_1563_0)
            )) in
          let stringappend_1564_0 = (string_drop stringappend_1076_0 stringappend_1563_0) in
          let stringappend_1565_0 = (string_drop stringappend_1564_0 ((string_length "i"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1565_0)) of
        SOME (stringappend_1566_0,stringappend_1567_0) =>
  (stringappend_1566_0, stringappend_1567_0)
  ) of
      (() , stringappend_1567_0) =>
  let stringappend_1568_0 = (string_drop stringappend_1565_0
                               stringappend_1567_0) in
  let (rd, stringappend_1570_0) =
      ((case ((reg_name_matches_prefix stringappend_1568_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1569_0,stringappend_1570_0) =>
       (stringappend_1569_0, stringappend_1570_0)
       )) in
  let stringappend_1571_0 = (string_drop stringappend_1568_0
                               stringappend_1570_0) in
  (case
  (case ((sep_matches_prefix stringappend_1571_0)) of
        SOME (stringappend_1572_0,stringappend_1573_0) =>
  (stringappend_1572_0, stringappend_1573_0)
  ) of
      (() , stringappend_1573_0) =>
  let stringappend_1574_0 = (string_drop stringappend_1571_0
                               stringappend_1573_0) in
  let (rs1, stringappend_1576_0) =
      ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1574_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1575_0,stringappend_1576_0) =>
       (stringappend_1575_0, stringappend_1576_0)
       )) in
  let stringappend_1577_0 = (string_drop stringappend_1574_0
                               stringappend_1576_0) in
  (case
  (case ((sep_matches_prefix stringappend_1577_0)) of
        SOME (stringappend_1578_0,stringappend_1579_0) =>
  (stringappend_1578_0, stringappend_1579_0)
  ) of
      (() , stringappend_1579_0) =>
  let stringappend_1580_0 = (string_drop stringappend_1577_0
                               stringappend_1579_0) in
  let (csr, stringappend_1582_0) =
      ((case ((csr_name_map_matches_prefix stringappend_1580_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1581_0,stringappend_1582_0) =>
       (stringappend_1581_0, stringappend_1582_0)
       )) in
  (case ((string_drop stringappend_1580_0 stringappend_1582_0)) of
        "" => CSR (csr,rs1,rd,T,op)
  )
  )
  )
  )
        else if ((case ((csr_mnemonic_matches_prefix stringappend_1076_0)) of
            SOME (stringappend_1584_0,stringappend_1585_0) =>
             let stringappend_1586_0 = (string_drop stringappend_1076_0 stringappend_1585_0) in
             if ((case ((spc_matches_prefix stringappend_1586_0)) of
                 SOME (stringappend_1587_0,stringappend_1588_0) =>
                  let stringappend_1589_0 = (string_drop stringappend_1586_0 stringappend_1588_0) in
                  if ((case ((reg_name_matches_prefix stringappend_1589_0
                               :  (( 5 words$word # ii))option)) of
                      SOME (stringappend_1590_0,stringappend_1591_0) =>
                       let stringappend_1592_0 = (string_drop stringappend_1589_0 stringappend_1591_0) in
                       if ((case ((sep_matches_prefix stringappend_1592_0)) of
                           SOME (stringappend_1593_0,stringappend_1594_0) =>
                            let stringappend_1595_0 =
                              (string_drop stringappend_1592_0 stringappend_1594_0) in
                            if ((case ((reg_name_matches_prefix stringappend_1595_0
                                         :  (( 5 words$word # ii))option)) of
                                SOME (stringappend_1596_0,stringappend_1597_0) =>
                                 let stringappend_1598_0 =
                                   (string_drop stringappend_1595_0 stringappend_1597_0) in
                                 if ((case ((sep_matches_prefix stringappend_1598_0)) of
                                     SOME (stringappend_1599_0,stringappend_1600_0) =>
                                      let stringappend_1601_0 =
                                        (string_drop stringappend_1598_0 stringappend_1600_0) in
                                      if ((case ((csr_name_map_matches_prefix stringappend_1601_0
                                                   :  (( 12 words$word # ii))option)) of
                                          SOME (stringappend_1602_0,stringappend_1603_0) =>
                                           (case ((string_drop stringappend_1601_0
                                                     stringappend_1603_0)) of
                                             "" => T
                                           | _ => F
                                           )
                                        | NONE => F
                                        )) then
                                        T
                                      else F
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          let (op, stringappend_1585_0) =
            ((case ((csr_mnemonic_matches_prefix stringappend_1076_0)) of
              SOME (stringappend_1584_0,stringappend_1585_0) =>
               (stringappend_1584_0, stringappend_1585_0)
            )) in
          let stringappend_1586_0 = (string_drop stringappend_1076_0 stringappend_1585_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1586_0)) of
        SOME (stringappend_1587_0,stringappend_1588_0) =>
  (stringappend_1587_0, stringappend_1588_0)
  ) of
      (() , stringappend_1588_0) =>
  let stringappend_1589_0 = (string_drop stringappend_1586_0
                               stringappend_1588_0) in
  let (rd, stringappend_1591_0) =
      ((case ((reg_name_matches_prefix stringappend_1589_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1590_0,stringappend_1591_0) =>
       (stringappend_1590_0, stringappend_1591_0)
       )) in
  let stringappend_1592_0 = (string_drop stringappend_1589_0
                               stringappend_1591_0) in
  (case
  (case ((sep_matches_prefix stringappend_1592_0)) of
        SOME (stringappend_1593_0,stringappend_1594_0) =>
  (stringappend_1593_0, stringappend_1594_0)
  ) of
      (() , stringappend_1594_0) =>
  let stringappend_1595_0 = (string_drop stringappend_1592_0
                               stringappend_1594_0) in
  let (rs1, stringappend_1597_0) =
      ((case ((reg_name_matches_prefix stringappend_1595_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1596_0,stringappend_1597_0) =>
       (stringappend_1596_0, stringappend_1597_0)
       )) in
  let stringappend_1598_0 = (string_drop stringappend_1595_0
                               stringappend_1597_0) in
  (case
  (case ((sep_matches_prefix stringappend_1598_0)) of
        SOME (stringappend_1599_0,stringappend_1600_0) =>
  (stringappend_1599_0, stringappend_1600_0)
  ) of
      (() , stringappend_1600_0) =>
  let stringappend_1601_0 = (string_drop stringappend_1598_0
                               stringappend_1600_0) in
  let (csr, stringappend_1603_0) =
      ((case ((csr_name_map_matches_prefix stringappend_1601_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1602_0,stringappend_1603_0) =>
       (stringappend_1602_0, stringappend_1603_0)
       )) in
  (case ((string_drop stringappend_1601_0 stringappend_1603_0)) of
        "" => CSR (csr,rs1,rd,F,op)
  )
  )
  )
  )
        else
          let stringappend_1605_0 = (string_drop stringappend_1076_0 ((string_length "illegal"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1605_0)) of
        SOME (stringappend_1606_0,stringappend_1607_0) =>
  (stringappend_1606_0, stringappend_1607_0)
  ) of
      (() , stringappend_1607_0) =>
  let stringappend_1608_0 = (string_drop stringappend_1605_0
                               stringappend_1607_0) in
  let (s, stringappend_1610_0) =
      ((case ((hex_bits_32_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1608_0 : (( 32 words$word # ii)) option)) of
             SOME (stringappend_1609_0,stringappend_1610_0) =>
       (stringappend_1609_0, stringappend_1610_0)
       )) in
  (case ((string_drop stringappend_1608_0 stringappend_1610_0)) of
        "" => ILLEGAL s
  )
  )
     )))`;


(*val assembly_forwards_matches : ast -> bool*)

val _ = Define `
 ((assembly_forwards_matches:ast -> bool) arg_=
    ((case arg_ of
     UTYPE (imm,rd,op) => T
   | RISCV_JAL (imm,rd) => T
   | RISCV_JALR (imm,rs1,rd) => T
   | BTYPE (imm,rs2,rs1,op) => T
   | ITYPE (imm,rs1,rd,op) => T
   | SHIFTIOP (shamt,rs1,rd,op) => T
   | RTYPE (rs2,rs1,rd,op) => T
   | LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl) => T
   | STORE (imm,rs1,rd,size1,aq,rl) => T
   | ADDIW (imm,rs1,rd) => T
   | SHIFTW (shamt,rs1,rd,op) => T
   | RTYPEW (rs2,rs1,rd,op) => T
   | MUL (rs2,rs1,rd,high,signed1,signed2) => T
   | DIV0 (rs2,rs1,rd,s) => T
   | REM (rs2,rs1,rd,s) => T
   | MULW (rs2,rs1,rd) => T
   | DIVW (rs2,rs1,rd,s) => T
   | REMW (rs2,rs1,rd,s) => T
   | FENCE (pred,succ) => T
   | FENCEI (() ) => T
   | ECALL (() ) => T
   | MRET (() ) => T
   | SRET (() ) => T
   | EBREAK (() ) => T
   | WFI (() ) => T
   | SFENCE_VMA (rs1,rs2) => T
   | LOADRES (aq,rl,rs1,size1,rd) => T
   | STORECON (aq,rl,rs2,rs1,size1,rd) => T
   | AMO (op,aq,rl,rs2,rs1,width,rd) => T
   | CSR (csr,rs1,rd,T,op) => T
   | CSR (csr,rs1,rd,F,op) => T
   | ILLEGAL (s) => T
   | _ => F
   )))`;


(*val assembly_backwards_matches : string -> bool*)

val _ = Define `
 ((assembly_backwards_matches:string -> bool) arg_=
    (let stringappend_541_0 = arg_ in
   if ((case ((utype_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_542_0,stringappend_543_0) =>
        let stringappend_544_0 = (string_drop stringappend_541_0 stringappend_543_0) in
        if ((case ((spc_matches_prefix stringappend_544_0)) of
            SOME (stringappend_545_0,stringappend_546_0) =>
             let stringappend_547_0 = (string_drop stringappend_544_0 stringappend_546_0) in
             if ((case ((reg_name_matches_prefix stringappend_547_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_548_0,stringappend_549_0) =>
                  let stringappend_550_0 = (string_drop stringappend_547_0 stringappend_549_0) in
                  if ((case ((sep_matches_prefix stringappend_550_0)) of
                      SOME (stringappend_551_0,stringappend_552_0) =>
                       let stringappend_553_0 = (string_drop stringappend_550_0 stringappend_552_0) in
                       if ((case ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_553_0
                                    :  (( 20 words$word # ii))option)) of
                           SOME (stringappend_554_0,stringappend_555_0) =>
                            (case ((string_drop stringappend_553_0 stringappend_555_0)) of
                              "" => T
                            | _ => F
                            )
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_543_0) =
       ((case ((utype_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_542_0,stringappend_543_0) => (stringappend_542_0, stringappend_543_0)
       )) in
     let stringappend_544_0 = (string_drop stringappend_541_0 stringappend_543_0) in  
  (case
  (case ((spc_matches_prefix stringappend_544_0)) of
        SOME (stringappend_545_0,stringappend_546_0) => (stringappend_545_0, stringappend_546_0)
  ) of
      (() , stringappend_546_0) =>
  let stringappend_547_0 = (string_drop stringappend_544_0 stringappend_546_0) in
  let (rd, stringappend_549_0) =
      ((case ((reg_name_matches_prefix stringappend_547_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_548_0,stringappend_549_0) => (stringappend_548_0, stringappend_549_0)
       )) in
  let stringappend_550_0 = (string_drop stringappend_547_0 stringappend_549_0) in
  (case
  (case ((sep_matches_prefix stringappend_550_0)) of
        SOME (stringappend_551_0,stringappend_552_0) => (stringappend_551_0, stringappend_552_0)
  ) of
      (() , stringappend_552_0) =>
  let stringappend_553_0 = (string_drop stringappend_550_0 stringappend_552_0) in
  let (imm, stringappend_555_0) =
      ((case ((hex_bits_20_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_553_0 : (( 20 words$word # ii)) option)) of
             SOME (stringappend_554_0,stringappend_555_0) => (stringappend_554_0, stringappend_555_0)
       )) in
  (case ((string_drop stringappend_553_0 stringappend_555_0)) of   "" => T )
  )
  )
   else if (((((string_startswith stringappend_541_0 "jal")) /\ (let stringappend_557_0 = (string_drop stringappend_541_0 ((string_length "jal"))) in
               if ((case ((spc_matches_prefix stringappend_557_0)) of
                   SOME (stringappend_558_0,stringappend_559_0) =>
                    let stringappend_560_0 = (string_drop stringappend_557_0 stringappend_559_0) in
                    if ((case ((reg_name_matches_prefix stringappend_560_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_561_0,stringappend_562_0) =>
                         let stringappend_563_0 = (string_drop stringappend_560_0 stringappend_562_0) in
                         if ((case ((sep_matches_prefix stringappend_563_0)) of
                             SOME (stringappend_564_0,stringappend_565_0) =>
                              let stringappend_566_0 =
                                (string_drop stringappend_563_0 stringappend_565_0) in
                              if ((case ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_566_0
                                           :  (( 21 words$word # ii))option)) of
                                  SOME (stringappend_567_0,stringappend_568_0) =>
                                   (case ((string_drop stringappend_566_0 stringappend_568_0)) of
                                     "" => T
                                   | _ => F
                                   )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_557_0 = (string_drop stringappend_541_0 ((string_length "jal"))) in  
  (case
  (case ((spc_matches_prefix stringappend_557_0)) of
        SOME (stringappend_558_0,stringappend_559_0) => (stringappend_558_0, stringappend_559_0)
  ) of
      (() , stringappend_559_0) =>
  let stringappend_560_0 = (string_drop stringappend_557_0 stringappend_559_0) in
  let (rd, stringappend_562_0) =
      ((case ((reg_name_matches_prefix stringappend_560_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_561_0,stringappend_562_0) => (stringappend_561_0, stringappend_562_0)
       )) in
  let stringappend_563_0 = (string_drop stringappend_560_0 stringappend_562_0) in
  (case
  (case ((sep_matches_prefix stringappend_563_0)) of
        SOME (stringappend_564_0,stringappend_565_0) => (stringappend_564_0, stringappend_565_0)
  ) of
      (() , stringappend_565_0) =>
  let stringappend_566_0 = (string_drop stringappend_563_0 stringappend_565_0) in
  let (imm, stringappend_568_0) =
      ((case ((hex_bits_21_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_566_0 : (( 21 words$word # ii)) option)) of
             SOME (stringappend_567_0,stringappend_568_0) => (stringappend_567_0, stringappend_568_0)
       )) in
  (case ((string_drop stringappend_566_0 stringappend_568_0)) of   "" => T )
  )
  )
   else if (((((string_startswith stringappend_541_0 "jalr")) /\ (let stringappend_570_0 = (string_drop stringappend_541_0 ((string_length "jalr"))) in
               if ((case ((spc_matches_prefix stringappend_570_0)) of
                   SOME (stringappend_571_0,stringappend_572_0) =>
                    let stringappend_573_0 = (string_drop stringappend_570_0 stringappend_572_0) in
                    if ((case ((reg_name_matches_prefix stringappend_573_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_574_0,stringappend_575_0) =>
                         let stringappend_576_0 = (string_drop stringappend_573_0 stringappend_575_0) in
                         if ((case ((sep_matches_prefix stringappend_576_0)) of
                             SOME (stringappend_577_0,stringappend_578_0) =>
                              let stringappend_579_0 =
                                (string_drop stringappend_576_0 stringappend_578_0) in
                              if ((case ((reg_name_matches_prefix stringappend_579_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_580_0,stringappend_581_0) =>
                                   let stringappend_582_0 =
                                     (string_drop stringappend_579_0 stringappend_581_0) in
                                   if ((case ((sep_matches_prefix stringappend_582_0)) of
                                       SOME (stringappend_583_0,stringappend_584_0) =>
                                        let stringappend_585_0 =
                                          (string_drop stringappend_582_0 stringappend_584_0) in
                                        if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_585_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_586_0,stringappend_587_0) =>
                                             (case ((string_drop stringappend_585_0
                                                       stringappend_587_0)) of
                                               "" => T
                                             | _ => F
                                             )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_570_0 = (string_drop stringappend_541_0 ((string_length "jalr"))) in  
  (case
  (case ((spc_matches_prefix stringappend_570_0)) of
        SOME (stringappend_571_0,stringappend_572_0) => (stringappend_571_0, stringappend_572_0)
  ) of
      (() , stringappend_572_0) =>
  let stringappend_573_0 = (string_drop stringappend_570_0 stringappend_572_0) in
  let (rd, stringappend_575_0) =
      ((case ((reg_name_matches_prefix stringappend_573_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_574_0,stringappend_575_0) => (stringappend_574_0, stringappend_575_0)
       )) in
  let stringappend_576_0 = (string_drop stringappend_573_0 stringappend_575_0) in
  (case
  (case ((sep_matches_prefix stringappend_576_0)) of
        SOME (stringappend_577_0,stringappend_578_0) => (stringappend_577_0, stringappend_578_0)
  ) of
      (() , stringappend_578_0) =>
  let stringappend_579_0 = (string_drop stringappend_576_0 stringappend_578_0) in
  let (rs1, stringappend_581_0) =
      ((case ((reg_name_matches_prefix stringappend_579_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_580_0,stringappend_581_0) => (stringappend_580_0, stringappend_581_0)
       )) in
  let stringappend_582_0 = (string_drop stringappend_579_0 stringappend_581_0) in
  (case
  (case ((sep_matches_prefix stringappend_582_0)) of
        SOME (stringappend_583_0,stringappend_584_0) => (stringappend_583_0, stringappend_584_0)
  ) of
      (() , stringappend_584_0) =>
  let stringappend_585_0 = (string_drop stringappend_582_0 stringappend_584_0) in
  let (imm, stringappend_587_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_585_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_586_0,stringappend_587_0) => (stringappend_586_0, stringappend_587_0)
       )) in
  (case ((string_drop stringappend_585_0 stringappend_587_0)) of   "" => T )
  )
  )
  )
   else if ((case ((btype_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_589_0,stringappend_590_0) =>
        let stringappend_591_0 = (string_drop stringappend_541_0 stringappend_590_0) in
        if ((case ((spc_matches_prefix stringappend_591_0)) of
            SOME (stringappend_592_0,stringappend_593_0) =>
             let stringappend_594_0 = (string_drop stringappend_591_0 stringappend_593_0) in
             if ((case ((reg_name_matches_prefix stringappend_594_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_595_0,stringappend_596_0) =>
                  let stringappend_597_0 = (string_drop stringappend_594_0 stringappend_596_0) in
                  if ((case ((sep_matches_prefix stringappend_597_0)) of
                      SOME (stringappend_598_0,stringappend_599_0) =>
                       let stringappend_600_0 = (string_drop stringappend_597_0 stringappend_599_0) in
                       if ((case ((reg_name_matches_prefix stringappend_600_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_601_0,stringappend_602_0) =>
                            let stringappend_603_0 =
                              (string_drop stringappend_600_0 stringappend_602_0) in
                            if ((case ((sep_matches_prefix stringappend_603_0)) of
                                SOME (stringappend_604_0,stringappend_605_0) =>
                                 let stringappend_606_0 =
                                   (string_drop stringappend_603_0 stringappend_605_0) in
                                 if ((case ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_606_0
                                              :  (( 13 words$word # ii))option)) of
                                     SOME (stringappend_607_0,stringappend_608_0) =>
                                      (case ((string_drop stringappend_606_0 stringappend_608_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_590_0) =
       ((case ((btype_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_589_0,stringappend_590_0) => (stringappend_589_0, stringappend_590_0)
       )) in
     let stringappend_591_0 = (string_drop stringappend_541_0 stringappend_590_0) in  
  (case
  (case ((spc_matches_prefix stringappend_591_0)) of
        SOME (stringappend_592_0,stringappend_593_0) => (stringappend_592_0, stringappend_593_0)
  ) of
      (() , stringappend_593_0) =>
  let stringappend_594_0 = (string_drop stringappend_591_0 stringappend_593_0) in
  let (rs1, stringappend_596_0) =
      ((case ((reg_name_matches_prefix stringappend_594_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_595_0,stringappend_596_0) => (stringappend_595_0, stringappend_596_0)
       )) in
  let stringappend_597_0 = (string_drop stringappend_594_0 stringappend_596_0) in
  (case
  (case ((sep_matches_prefix stringappend_597_0)) of
        SOME (stringappend_598_0,stringappend_599_0) => (stringappend_598_0, stringappend_599_0)
  ) of
      (() , stringappend_599_0) =>
  let stringappend_600_0 = (string_drop stringappend_597_0 stringappend_599_0) in
  let (rs2, stringappend_602_0) =
      ((case ((reg_name_matches_prefix stringappend_600_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_601_0,stringappend_602_0) => (stringappend_601_0, stringappend_602_0)
       )) in
  let stringappend_603_0 = (string_drop stringappend_600_0 stringappend_602_0) in
  (case
  (case ((sep_matches_prefix stringappend_603_0)) of
        SOME (stringappend_604_0,stringappend_605_0) => (stringappend_604_0, stringappend_605_0)
  ) of
      (() , stringappend_605_0) =>
  let stringappend_606_0 = (string_drop stringappend_603_0 stringappend_605_0) in
  let (imm, stringappend_608_0) =
      ((case ((hex_bits_13_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_606_0 : (( 13 words$word # ii)) option)) of
             SOME (stringappend_607_0,stringappend_608_0) => (stringappend_607_0, stringappend_608_0)
       )) in
  (case ((string_drop stringappend_606_0 stringappend_608_0)) of   "" => T )
  )
  )
  )
   else if ((case ((itype_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_610_0,stringappend_611_0) =>
        let stringappend_612_0 = (string_drop stringappend_541_0 stringappend_611_0) in
        if ((case ((spc_matches_prefix stringappend_612_0)) of
            SOME (stringappend_613_0,stringappend_614_0) =>
             let stringappend_615_0 = (string_drop stringappend_612_0 stringappend_614_0) in
             if ((case ((reg_name_matches_prefix stringappend_615_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_616_0,stringappend_617_0) =>
                  let stringappend_618_0 = (string_drop stringappend_615_0 stringappend_617_0) in
                  if ((case ((sep_matches_prefix stringappend_618_0)) of
                      SOME (stringappend_619_0,stringappend_620_0) =>
                       let stringappend_621_0 = (string_drop stringappend_618_0 stringappend_620_0) in
                       if ((case ((reg_name_matches_prefix stringappend_621_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_622_0,stringappend_623_0) =>
                            let stringappend_624_0 =
                              (string_drop stringappend_621_0 stringappend_623_0) in
                            if ((case ((sep_matches_prefix stringappend_624_0)) of
                                SOME (stringappend_625_0,stringappend_626_0) =>
                                 let stringappend_627_0 =
                                   (string_drop stringappend_624_0 stringappend_626_0) in
                                 if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_627_0
                                              :  (( 12 words$word # ii))option)) of
                                     SOME (stringappend_628_0,stringappend_629_0) =>
                                      (case ((string_drop stringappend_627_0 stringappend_629_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_611_0) =
       ((case ((itype_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_610_0,stringappend_611_0) => (stringappend_610_0, stringappend_611_0)
       )) in
     let stringappend_612_0 = (string_drop stringappend_541_0 stringappend_611_0) in  
  (case
  (case ((spc_matches_prefix stringappend_612_0)) of
        SOME (stringappend_613_0,stringappend_614_0) => (stringappend_613_0, stringappend_614_0)
  ) of
      (() , stringappend_614_0) =>
  let stringappend_615_0 = (string_drop stringappend_612_0 stringappend_614_0) in
  let (rd, stringappend_617_0) =
      ((case ((reg_name_matches_prefix stringappend_615_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_616_0,stringappend_617_0) => (stringappend_616_0, stringappend_617_0)
       )) in
  let stringappend_618_0 = (string_drop stringappend_615_0 stringappend_617_0) in
  (case
  (case ((sep_matches_prefix stringappend_618_0)) of
        SOME (stringappend_619_0,stringappend_620_0) => (stringappend_619_0, stringappend_620_0)
  ) of
      (() , stringappend_620_0) =>
  let stringappend_621_0 = (string_drop stringappend_618_0 stringappend_620_0) in
  let (rs1, stringappend_623_0) =
      ((case ((reg_name_matches_prefix stringappend_621_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_622_0,stringappend_623_0) => (stringappend_622_0, stringappend_623_0)
       )) in
  let stringappend_624_0 = (string_drop stringappend_621_0 stringappend_623_0) in
  (case
  (case ((sep_matches_prefix stringappend_624_0)) of
        SOME (stringappend_625_0,stringappend_626_0) => (stringappend_625_0, stringappend_626_0)
  ) of
      (() , stringappend_626_0) =>
  let stringappend_627_0 = (string_drop stringappend_624_0 stringappend_626_0) in
  let (imm, stringappend_629_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_627_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_628_0,stringappend_629_0) => (stringappend_628_0, stringappend_629_0)
       )) in
  (case ((string_drop stringappend_627_0 stringappend_629_0)) of   "" => T )
  )
  )
  )
   else if ((case ((shiftiop_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_631_0,stringappend_632_0) =>
        let stringappend_633_0 = (string_drop stringappend_541_0 stringappend_632_0) in
        if ((case ((spc_matches_prefix stringappend_633_0)) of
            SOME (stringappend_634_0,stringappend_635_0) =>
             let stringappend_636_0 = (string_drop stringappend_633_0 stringappend_635_0) in
             if ((case ((reg_name_matches_prefix stringappend_636_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_637_0,stringappend_638_0) =>
                  let stringappend_639_0 = (string_drop stringappend_636_0 stringappend_638_0) in
                  if ((case ((sep_matches_prefix stringappend_639_0)) of
                      SOME (stringappend_640_0,stringappend_641_0) =>
                       let stringappend_642_0 = (string_drop stringappend_639_0 stringappend_641_0) in
                       if ((case ((reg_name_matches_prefix stringappend_642_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_643_0,stringappend_644_0) =>
                            let stringappend_645_0 =
                              (string_drop stringappend_642_0 stringappend_644_0) in
                            if ((case ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_645_0
                                         :  (( 6 words$word # ii))option)) of
                                SOME (stringappend_646_0,stringappend_647_0) =>
                                 (case ((string_drop stringappend_645_0 stringappend_647_0)) of
                                   "" => T
                                 | _ => F
                                 )
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_632_0) =
       ((case ((shiftiop_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_631_0,stringappend_632_0) => (stringappend_631_0, stringappend_632_0)
       )) in
     let stringappend_633_0 = (string_drop stringappend_541_0 stringappend_632_0) in  
  (case
  (case ((spc_matches_prefix stringappend_633_0)) of
        SOME (stringappend_634_0,stringappend_635_0) => (stringappend_634_0, stringappend_635_0)
  ) of
      (() , stringappend_635_0) =>
  let stringappend_636_0 = (string_drop stringappend_633_0 stringappend_635_0) in
  let (rd, stringappend_638_0) =
      ((case ((reg_name_matches_prefix stringappend_636_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_637_0,stringappend_638_0) => (stringappend_637_0, stringappend_638_0)
       )) in
  let stringappend_639_0 = (string_drop stringappend_636_0 stringappend_638_0) in
  (case
  (case ((sep_matches_prefix stringappend_639_0)) of
        SOME (stringappend_640_0,stringappend_641_0) => (stringappend_640_0, stringappend_641_0)
  ) of
      (() , stringappend_641_0) =>
  let stringappend_642_0 = (string_drop stringappend_639_0 stringappend_641_0) in
  let (rs1, stringappend_644_0) =
      ((case ((reg_name_matches_prefix stringappend_642_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_643_0,stringappend_644_0) => (stringappend_643_0, stringappend_644_0)
       )) in
  let stringappend_645_0 = (string_drop stringappend_642_0 stringappend_644_0) in
  let (shamt, stringappend_647_0) =
      ((case ((hex_bits_6_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_645_0 : (( 6 words$word # ii)) option)) of
             SOME (stringappend_646_0,stringappend_647_0) => (stringappend_646_0, stringappend_647_0)
       )) in
  (case ((string_drop stringappend_645_0 stringappend_647_0)) of   "" => T )
  )
  )
   else if ((case ((rtype_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_649_0,stringappend_650_0) =>
        let stringappend_651_0 = (string_drop stringappend_541_0 stringappend_650_0) in
        if ((case ((spc_matches_prefix stringappend_651_0)) of
            SOME (stringappend_652_0,stringappend_653_0) =>
             let stringappend_654_0 = (string_drop stringappend_651_0 stringappend_653_0) in
             if ((case ((reg_name_matches_prefix stringappend_654_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_655_0,stringappend_656_0) =>
                  let stringappend_657_0 = (string_drop stringappend_654_0 stringappend_656_0) in
                  if ((case ((sep_matches_prefix stringappend_657_0)) of
                      SOME (stringappend_658_0,stringappend_659_0) =>
                       let stringappend_660_0 = (string_drop stringappend_657_0 stringappend_659_0) in
                       if ((case ((reg_name_matches_prefix stringappend_660_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_661_0,stringappend_662_0) =>
                            let stringappend_663_0 =
                              (string_drop stringappend_660_0 stringappend_662_0) in
                            if ((case ((sep_matches_prefix stringappend_663_0)) of
                                SOME (stringappend_664_0,stringappend_665_0) =>
                                 let stringappend_666_0 =
                                   (string_drop stringappend_663_0 stringappend_665_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_666_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_667_0,stringappend_668_0) =>
                                      (case ((string_drop stringappend_666_0 stringappend_668_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_650_0) =
       ((case ((rtype_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_649_0,stringappend_650_0) => (stringappend_649_0, stringappend_650_0)
       )) in
     let stringappend_651_0 = (string_drop stringappend_541_0 stringappend_650_0) in  
  (case
  (case ((spc_matches_prefix stringappend_651_0)) of
        SOME (stringappend_652_0,stringappend_653_0) => (stringappend_652_0, stringappend_653_0)
  ) of
      (() , stringappend_653_0) =>
  let stringappend_654_0 = (string_drop stringappend_651_0 stringappend_653_0) in
  let (rd, stringappend_656_0) =
      ((case ((reg_name_matches_prefix stringappend_654_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_655_0,stringappend_656_0) => (stringappend_655_0, stringappend_656_0)
       )) in
  let stringappend_657_0 = (string_drop stringappend_654_0 stringappend_656_0) in
  (case
  (case ((sep_matches_prefix stringappend_657_0)) of
        SOME (stringappend_658_0,stringappend_659_0) => (stringappend_658_0, stringappend_659_0)
  ) of
      (() , stringappend_659_0) =>
  let stringappend_660_0 = (string_drop stringappend_657_0 stringappend_659_0) in
  let (rs1, stringappend_662_0) =
      ((case ((reg_name_matches_prefix stringappend_660_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_661_0,stringappend_662_0) => (stringappend_661_0, stringappend_662_0)
       )) in
  let stringappend_663_0 = (string_drop stringappend_660_0 stringappend_662_0) in
  (case
  (case ((sep_matches_prefix stringappend_663_0)) of
        SOME (stringappend_664_0,stringappend_665_0) => (stringappend_664_0, stringappend_665_0)
  ) of
      (() , stringappend_665_0) =>
  let stringappend_666_0 = (string_drop stringappend_663_0 stringappend_665_0) in
  let (rs2, stringappend_668_0) =
      ((case ((reg_name_matches_prefix stringappend_666_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_667_0,stringappend_668_0) => (stringappend_667_0, stringappend_668_0)
       )) in
  (case ((string_drop stringappend_666_0 stringappend_668_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "l")) /\ (let stringappend_670_0 = (string_drop stringappend_541_0 ((string_length "l"))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_670_0)) of
                   SOME (stringappend_671_0,stringappend_672_0) =>
                    let stringappend_673_0 = (string_drop stringappend_670_0 stringappend_672_0) in
                    if ((case ((maybe_u_matches_prefix stringappend_673_0)) of
                        SOME (stringappend_674_0,stringappend_675_0) =>
                         let stringappend_676_0 = (string_drop stringappend_673_0 stringappend_675_0) in
                         if ((case ((maybe_aq_matches_prefix stringappend_676_0)) of
                             SOME (stringappend_677_0,stringappend_678_0) =>
                              let stringappend_679_0 =
                                (string_drop stringappend_676_0 stringappend_678_0) in
                              if ((case ((maybe_rl_matches_prefix stringappend_679_0)) of
                                  SOME (stringappend_680_0,stringappend_681_0) =>
                                   let stringappend_682_0 =
                                     (string_drop stringappend_679_0 stringappend_681_0) in
                                   if ((case ((spc_matches_prefix stringappend_682_0)) of
                                       SOME (stringappend_683_0,stringappend_684_0) =>
                                        let stringappend_685_0 =
                                          (string_drop stringappend_682_0 stringappend_684_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_685_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_686_0,stringappend_687_0) =>
                                             let stringappend_688_0 =
                                               (string_drop stringappend_685_0 stringappend_687_0) in
                                             if ((case ((sep_matches_prefix stringappend_688_0)) of
                                                 SOME (stringappend_689_0,stringappend_690_0) =>
                                                  let stringappend_691_0 =
                                                    (string_drop stringappend_688_0
                                                      stringappend_690_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_691_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_692_0,stringappend_693_0) =>
                                                       let stringappend_694_0 =
                                                         (string_drop stringappend_691_0
                                                           stringappend_693_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_694_0)) of
                                                           SOME
                                                           (stringappend_695_0,stringappend_696_0) =>
                                                            let stringappend_697_0 =
                                                              (string_drop stringappend_694_0
                                                                stringappend_696_0) in
                                                            if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                          stringappend_697_0
                                                                         :  (( 12 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_698_0,stringappend_699_0) =>
                                                                 (case ((string_drop
                                                                           stringappend_697_0
                                                                           stringappend_699_0)) of
                                                                   "" => T
                                                                 | _ => F
                                                                 )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_670_0 = (string_drop stringappend_541_0 ((string_length "l"))) in
     let (size1, stringappend_672_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_670_0)) of
         SOME (stringappend_671_0,stringappend_672_0) => (stringappend_671_0, stringappend_672_0)
       )) in
     let stringappend_673_0 = (string_drop stringappend_670_0 stringappend_672_0) in
     let (is_unsigned, stringappend_675_0) =
       ((case ((maybe_u_matches_prefix stringappend_673_0)) of
         SOME (stringappend_674_0,stringappend_675_0) => (stringappend_674_0, stringappend_675_0)
       )) in
     let stringappend_676_0 = (string_drop stringappend_673_0 stringappend_675_0) in
     let (aq, stringappend_678_0) =
       ((case ((maybe_aq_matches_prefix stringappend_676_0)) of
         SOME (stringappend_677_0,stringappend_678_0) => (stringappend_677_0, stringappend_678_0)
       )) in
     let stringappend_679_0 = (string_drop stringappend_676_0 stringappend_678_0) in
     let (rl, stringappend_681_0) =
       ((case ((maybe_rl_matches_prefix stringappend_679_0)) of
         SOME (stringappend_680_0,stringappend_681_0) => (stringappend_680_0, stringappend_681_0)
       )) in
     let stringappend_682_0 = (string_drop stringappend_679_0 stringappend_681_0) in  
  (case
  (case ((spc_matches_prefix stringappend_682_0)) of
        SOME (stringappend_683_0,stringappend_684_0) => (stringappend_683_0, stringappend_684_0)
  ) of
      (() , stringappend_684_0) =>
  let stringappend_685_0 = (string_drop stringappend_682_0 stringappend_684_0) in
  let (rd, stringappend_687_0) =
      ((case ((reg_name_matches_prefix stringappend_685_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_686_0,stringappend_687_0) => (stringappend_686_0, stringappend_687_0)
       )) in
  let stringappend_688_0 = (string_drop stringappend_685_0 stringappend_687_0) in
  (case
  (case ((sep_matches_prefix stringappend_688_0)) of
        SOME (stringappend_689_0,stringappend_690_0) => (stringappend_689_0, stringappend_690_0)
  ) of
      (() , stringappend_690_0) =>
  let stringappend_691_0 = (string_drop stringappend_688_0 stringappend_690_0) in
  let (rs1, stringappend_693_0) =
      ((case ((reg_name_matches_prefix stringappend_691_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_692_0,stringappend_693_0) => (stringappend_692_0, stringappend_693_0)
       )) in
  let stringappend_694_0 = (string_drop stringappend_691_0 stringappend_693_0) in
  (case
  (case ((sep_matches_prefix stringappend_694_0)) of
        SOME (stringappend_695_0,stringappend_696_0) => (stringappend_695_0, stringappend_696_0)
  ) of
      (() , stringappend_696_0) =>
  let stringappend_697_0 = (string_drop stringappend_694_0 stringappend_696_0) in
  let (imm, stringappend_699_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_697_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_698_0,stringappend_699_0) => (stringappend_698_0, stringappend_699_0)
       )) in
  (case ((string_drop stringappend_697_0 stringappend_699_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "s")) /\ (let stringappend_701_0 = (string_drop stringappend_541_0 ((string_length "s"))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_701_0)) of
                   SOME (stringappend_702_0,stringappend_703_0) =>
                    let stringappend_704_0 = (string_drop stringappend_701_0 stringappend_703_0) in
                    if ((case ((maybe_aq_matches_prefix stringappend_704_0)) of
                        SOME (stringappend_705_0,stringappend_706_0) =>
                         let stringappend_707_0 = (string_drop stringappend_704_0 stringappend_706_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_707_0)) of
                             SOME (stringappend_708_0,stringappend_709_0) =>
                              let stringappend_710_0 =
                                (string_drop stringappend_707_0 stringappend_709_0) in
                              if ((case ((spc_matches_prefix stringappend_710_0)) of
                                  SOME (stringappend_711_0,stringappend_712_0) =>
                                   let stringappend_713_0 =
                                     (string_drop stringappend_710_0 stringappend_712_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_713_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_714_0,stringappend_715_0) =>
                                        let stringappend_716_0 =
                                          (string_drop stringappend_713_0 stringappend_715_0) in
                                        if ((case ((sep_matches_prefix stringappend_716_0)) of
                                            SOME (stringappend_717_0,stringappend_718_0) =>
                                             let stringappend_719_0 =
                                               (string_drop stringappend_716_0 stringappend_718_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_719_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_720_0,stringappend_721_0) =>
                                                  let stringappend_722_0 =
                                                    (string_drop stringappend_719_0
                                                      stringappend_721_0) in
                                                  if ((case ((sep_matches_prefix stringappend_722_0)) of
                                                      SOME (stringappend_723_0,stringappend_724_0) =>
                                                       let stringappend_725_0 =
                                                         (string_drop stringappend_722_0
                                                           stringappend_724_0) in
                                                       if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                     stringappend_725_0
                                                                    :  (( 12 words$word # ii))option)) of
                                                           SOME
                                                           (stringappend_726_0,stringappend_727_0) =>
                                                            (case ((string_drop stringappend_725_0
                                                                      stringappend_727_0)) of
                                                              "" => T
                                                            | _ => F
                                                            )
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_701_0 = (string_drop stringappend_541_0 ((string_length "s"))) in
     let (size1, stringappend_703_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_701_0)) of
         SOME (stringappend_702_0,stringappend_703_0) => (stringappend_702_0, stringappend_703_0)
       )) in
     let stringappend_704_0 = (string_drop stringappend_701_0 stringappend_703_0) in
     let (aq, stringappend_706_0) =
       ((case ((maybe_aq_matches_prefix stringappend_704_0)) of
         SOME (stringappend_705_0,stringappend_706_0) => (stringappend_705_0, stringappend_706_0)
       )) in
     let stringappend_707_0 = (string_drop stringappend_704_0 stringappend_706_0) in
     let (rl, stringappend_709_0) =
       ((case ((maybe_rl_matches_prefix stringappend_707_0)) of
         SOME (stringappend_708_0,stringappend_709_0) => (stringappend_708_0, stringappend_709_0)
       )) in
     let stringappend_710_0 = (string_drop stringappend_707_0 stringappend_709_0) in  
  (case
  (case ((spc_matches_prefix stringappend_710_0)) of
        SOME (stringappend_711_0,stringappend_712_0) => (stringappend_711_0, stringappend_712_0)
  ) of
      (() , stringappend_712_0) =>
  let stringappend_713_0 = (string_drop stringappend_710_0 stringappend_712_0) in
  let (rd, stringappend_715_0) =
      ((case ((reg_name_matches_prefix stringappend_713_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_714_0,stringappend_715_0) => (stringappend_714_0, stringappend_715_0)
       )) in
  let stringappend_716_0 = (string_drop stringappend_713_0 stringappend_715_0) in
  (case
  (case ((sep_matches_prefix stringappend_716_0)) of
        SOME (stringappend_717_0,stringappend_718_0) => (stringappend_717_0, stringappend_718_0)
  ) of
      (() , stringappend_718_0) =>
  let stringappend_719_0 = (string_drop stringappend_716_0 stringappend_718_0) in
  let (rs1, stringappend_721_0) =
      ((case ((reg_name_matches_prefix stringappend_719_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_720_0,stringappend_721_0) => (stringappend_720_0, stringappend_721_0)
       )) in
  let stringappend_722_0 = (string_drop stringappend_719_0 stringappend_721_0) in
  (case
  (case ((sep_matches_prefix stringappend_722_0)) of
        SOME (stringappend_723_0,stringappend_724_0) => (stringappend_723_0, stringappend_724_0)
  ) of
      (() , stringappend_724_0) =>
  let stringappend_725_0 = (string_drop stringappend_722_0 stringappend_724_0) in
  let (imm, stringappend_727_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_725_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_726_0,stringappend_727_0) => (stringappend_726_0, stringappend_727_0)
       )) in
  (case ((string_drop stringappend_725_0 stringappend_727_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "addiw")) /\ (let stringappend_729_0 = (string_drop stringappend_541_0 ((string_length "addiw"))) in
               if ((case ((spc_matches_prefix stringappend_729_0)) of
                   SOME (stringappend_730_0,stringappend_731_0) =>
                    let stringappend_732_0 = (string_drop stringappend_729_0 stringappend_731_0) in
                    if ((case ((reg_name_matches_prefix stringappend_732_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_733_0,stringappend_734_0) =>
                         let stringappend_735_0 = (string_drop stringappend_732_0 stringappend_734_0) in
                         if ((case ((sep_matches_prefix stringappend_735_0)) of
                             SOME (stringappend_736_0,stringappend_737_0) =>
                              let stringappend_738_0 =
                                (string_drop stringappend_735_0 stringappend_737_0) in
                              if ((case ((reg_name_matches_prefix stringappend_738_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_739_0,stringappend_740_0) =>
                                   let stringappend_741_0 =
                                     (string_drop stringappend_738_0 stringappend_740_0) in
                                   if ((case ((sep_matches_prefix stringappend_741_0)) of
                                       SOME (stringappend_742_0,stringappend_743_0) =>
                                        let stringappend_744_0 =
                                          (string_drop stringappend_741_0 stringappend_743_0) in
                                        if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_744_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_745_0,stringappend_746_0) =>
                                             (case ((string_drop stringappend_744_0
                                                       stringappend_746_0)) of
                                               "" => T
                                             | _ => F
                                             )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_729_0 = (string_drop stringappend_541_0 ((string_length "addiw"))) in  
  (case
  (case ((spc_matches_prefix stringappend_729_0)) of
        SOME (stringappend_730_0,stringappend_731_0) => (stringappend_730_0, stringappend_731_0)
  ) of
      (() , stringappend_731_0) =>
  let stringappend_732_0 = (string_drop stringappend_729_0 stringappend_731_0) in
  let (rd, stringappend_734_0) =
      ((case ((reg_name_matches_prefix stringappend_732_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_733_0,stringappend_734_0) => (stringappend_733_0, stringappend_734_0)
       )) in
  let stringappend_735_0 = (string_drop stringappend_732_0 stringappend_734_0) in
  (case
  (case ((sep_matches_prefix stringappend_735_0)) of
        SOME (stringappend_736_0,stringappend_737_0) => (stringappend_736_0, stringappend_737_0)
  ) of
      (() , stringappend_737_0) =>
  let stringappend_738_0 = (string_drop stringappend_735_0 stringappend_737_0) in
  let (rs1, stringappend_740_0) =
      ((case ((reg_name_matches_prefix stringappend_738_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_739_0,stringappend_740_0) => (stringappend_739_0, stringappend_740_0)
       )) in
  let stringappend_741_0 = (string_drop stringappend_738_0 stringappend_740_0) in
  (case
  (case ((sep_matches_prefix stringappend_741_0)) of
        SOME (stringappend_742_0,stringappend_743_0) => (stringappend_742_0, stringappend_743_0)
  ) of
      (() , stringappend_743_0) =>
  let stringappend_744_0 = (string_drop stringappend_741_0 stringappend_743_0) in
  let (imm, stringappend_746_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_744_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_745_0,stringappend_746_0) => (stringappend_745_0, stringappend_746_0)
       )) in
  (case ((string_drop stringappend_744_0 stringappend_746_0)) of   "" => T )
  )
  )
  )
   else if ((case ((shiftw_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_748_0,stringappend_749_0) =>
        let stringappend_750_0 = (string_drop stringappend_541_0 stringappend_749_0) in
        if ((case ((spc_matches_prefix stringappend_750_0)) of
            SOME (stringappend_751_0,stringappend_752_0) =>
             let stringappend_753_0 = (string_drop stringappend_750_0 stringappend_752_0) in
             if ((case ((reg_name_matches_prefix stringappend_753_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_754_0,stringappend_755_0) =>
                  let stringappend_756_0 = (string_drop stringappend_753_0 stringappend_755_0) in
                  if ((case ((sep_matches_prefix stringappend_756_0)) of
                      SOME (stringappend_757_0,stringappend_758_0) =>
                       let stringappend_759_0 = (string_drop stringappend_756_0 stringappend_758_0) in
                       if ((case ((reg_name_matches_prefix stringappend_759_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_760_0,stringappend_761_0) =>
                            let stringappend_762_0 =
                              (string_drop stringappend_759_0 stringappend_761_0) in
                            if ((case ((sep_matches_prefix stringappend_762_0)) of
                                SOME (stringappend_763_0,stringappend_764_0) =>
                                 let stringappend_765_0 =
                                   (string_drop stringappend_762_0 stringappend_764_0) in
                                 if ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_765_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_766_0,stringappend_767_0) =>
                                      (case ((string_drop stringappend_765_0 stringappend_767_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_749_0) =
       ((case ((shiftw_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_748_0,stringappend_749_0) => (stringappend_748_0, stringappend_749_0)
       )) in
     let stringappend_750_0 = (string_drop stringappend_541_0 stringappend_749_0) in  
  (case
  (case ((spc_matches_prefix stringappend_750_0)) of
        SOME (stringappend_751_0,stringappend_752_0) => (stringappend_751_0, stringappend_752_0)
  ) of
      (() , stringappend_752_0) =>
  let stringappend_753_0 = (string_drop stringappend_750_0 stringappend_752_0) in
  let (rd, stringappend_755_0) =
      ((case ((reg_name_matches_prefix stringappend_753_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_754_0,stringappend_755_0) => (stringappend_754_0, stringappend_755_0)
       )) in
  let stringappend_756_0 = (string_drop stringappend_753_0 stringappend_755_0) in
  (case
  (case ((sep_matches_prefix stringappend_756_0)) of
        SOME (stringappend_757_0,stringappend_758_0) => (stringappend_757_0, stringappend_758_0)
  ) of
      (() , stringappend_758_0) =>
  let stringappend_759_0 = (string_drop stringappend_756_0 stringappend_758_0) in
  let (rs1, stringappend_761_0) =
      ((case ((reg_name_matches_prefix stringappend_759_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_760_0,stringappend_761_0) => (stringappend_760_0, stringappend_761_0)
       )) in
  let stringappend_762_0 = (string_drop stringappend_759_0 stringappend_761_0) in
  (case
  (case ((sep_matches_prefix stringappend_762_0)) of
        SOME (stringappend_763_0,stringappend_764_0) => (stringappend_763_0, stringappend_764_0)
  ) of
      (() , stringappend_764_0) =>
  let stringappend_765_0 = (string_drop stringappend_762_0 stringappend_764_0) in
  let (shamt, stringappend_767_0) =
      ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_765_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_766_0,stringappend_767_0) => (stringappend_766_0, stringappend_767_0)
       )) in
  (case ((string_drop stringappend_765_0 stringappend_767_0)) of   "" => T )
  )
  )
  )
   else if ((case ((rtypew_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_769_0,stringappend_770_0) =>
        let stringappend_771_0 = (string_drop stringappend_541_0 stringappend_770_0) in
        if ((case ((spc_matches_prefix stringappend_771_0)) of
            SOME (stringappend_772_0,stringappend_773_0) =>
             let stringappend_774_0 = (string_drop stringappend_771_0 stringappend_773_0) in
             if ((case ((reg_name_matches_prefix stringappend_774_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_775_0,stringappend_776_0) =>
                  let stringappend_777_0 = (string_drop stringappend_774_0 stringappend_776_0) in
                  if ((case ((sep_matches_prefix stringappend_777_0)) of
                      SOME (stringappend_778_0,stringappend_779_0) =>
                       let stringappend_780_0 = (string_drop stringappend_777_0 stringappend_779_0) in
                       if ((case ((reg_name_matches_prefix stringappend_780_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_781_0,stringappend_782_0) =>
                            let stringappend_783_0 =
                              (string_drop stringappend_780_0 stringappend_782_0) in
                            if ((case ((sep_matches_prefix stringappend_783_0)) of
                                SOME (stringappend_784_0,stringappend_785_0) =>
                                 let stringappend_786_0 =
                                   (string_drop stringappend_783_0 stringappend_785_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_786_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_787_0,stringappend_788_0) =>
                                      (case ((string_drop stringappend_786_0 stringappend_788_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_770_0) =
       ((case ((rtypew_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_769_0,stringappend_770_0) => (stringappend_769_0, stringappend_770_0)
       )) in
     let stringappend_771_0 = (string_drop stringappend_541_0 stringappend_770_0) in  
  (case
  (case ((spc_matches_prefix stringappend_771_0)) of
        SOME (stringappend_772_0,stringappend_773_0) => (stringappend_772_0, stringappend_773_0)
  ) of
      (() , stringappend_773_0) =>
  let stringappend_774_0 = (string_drop stringappend_771_0 stringappend_773_0) in
  let (rd, stringappend_776_0) =
      ((case ((reg_name_matches_prefix stringappend_774_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_775_0,stringappend_776_0) => (stringappend_775_0, stringappend_776_0)
       )) in
  let stringappend_777_0 = (string_drop stringappend_774_0 stringappend_776_0) in
  (case
  (case ((sep_matches_prefix stringappend_777_0)) of
        SOME (stringappend_778_0,stringappend_779_0) => (stringappend_778_0, stringappend_779_0)
  ) of
      (() , stringappend_779_0) =>
  let stringappend_780_0 = (string_drop stringappend_777_0 stringappend_779_0) in
  let (rs1, stringappend_782_0) =
      ((case ((reg_name_matches_prefix stringappend_780_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_781_0,stringappend_782_0) => (stringappend_781_0, stringappend_782_0)
       )) in
  let stringappend_783_0 = (string_drop stringappend_780_0 stringappend_782_0) in
  (case
  (case ((sep_matches_prefix stringappend_783_0)) of
        SOME (stringappend_784_0,stringappend_785_0) => (stringappend_784_0, stringappend_785_0)
  ) of
      (() , stringappend_785_0) =>
  let stringappend_786_0 = (string_drop stringappend_783_0 stringappend_785_0) in
  let (rs2, stringappend_788_0) =
      ((case ((reg_name_matches_prefix stringappend_786_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_787_0,stringappend_788_0) => (stringappend_787_0, stringappend_788_0)
       )) in
  (case ((string_drop stringappend_786_0 stringappend_788_0)) of   "" => T )
  )
  )
  )
   else if ((case ((mul_mnemonic_matches_prefix stringappend_541_0)) of
       SOME (stringappend_790_0,stringappend_791_0) =>
        let stringappend_792_0 = (string_drop stringappend_541_0 stringappend_791_0) in
        if ((case ((spc_matches_prefix stringappend_792_0)) of
            SOME (stringappend_793_0,stringappend_794_0) =>
             let stringappend_795_0 = (string_drop stringappend_792_0 stringappend_794_0) in
             if ((case ((reg_name_matches_prefix stringappend_795_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_796_0,stringappend_797_0) =>
                  let stringappend_798_0 = (string_drop stringappend_795_0 stringappend_797_0) in
                  if ((case ((sep_matches_prefix stringappend_798_0)) of
                      SOME (stringappend_799_0,stringappend_800_0) =>
                       let stringappend_801_0 = (string_drop stringappend_798_0 stringappend_800_0) in
                       if ((case ((reg_name_matches_prefix stringappend_801_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_802_0,stringappend_803_0) =>
                            let stringappend_804_0 =
                              (string_drop stringappend_801_0 stringappend_803_0) in
                            if ((case ((sep_matches_prefix stringappend_804_0)) of
                                SOME (stringappend_805_0,stringappend_806_0) =>
                                 let stringappend_807_0 =
                                   (string_drop stringappend_804_0 stringappend_806_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_807_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_808_0,stringappend_809_0) =>
                                      (case ((string_drop stringappend_807_0 stringappend_809_0)) of
                                        "" => T
                                      | _ => F
                                      )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let ((high, signed1, signed2), stringappend_791_0) =
       ((case ((mul_mnemonic_matches_prefix stringappend_541_0)) of
         SOME (stringappend_790_0,stringappend_791_0) => (stringappend_790_0, stringappend_791_0)
       )) in
     let stringappend_792_0 = (string_drop stringappend_541_0 stringappend_791_0) in  
  (case
  (case ((spc_matches_prefix stringappend_792_0)) of
        SOME (stringappend_793_0,stringappend_794_0) => (stringappend_793_0, stringappend_794_0)
  ) of
      (() , stringappend_794_0) =>
  let stringappend_795_0 = (string_drop stringappend_792_0 stringappend_794_0) in
  let (rd, stringappend_797_0) =
      ((case ((reg_name_matches_prefix stringappend_795_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_796_0,stringappend_797_0) => (stringappend_796_0, stringappend_797_0)
       )) in
  let stringappend_798_0 = (string_drop stringappend_795_0 stringappend_797_0) in
  (case
  (case ((sep_matches_prefix stringappend_798_0)) of
        SOME (stringappend_799_0,stringappend_800_0) => (stringappend_799_0, stringappend_800_0)
  ) of
      (() , stringappend_800_0) =>
  let stringappend_801_0 = (string_drop stringappend_798_0 stringappend_800_0) in
  let (rs1, stringappend_803_0) =
      ((case ((reg_name_matches_prefix stringappend_801_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_802_0,stringappend_803_0) => (stringappend_802_0, stringappend_803_0)
       )) in
  let stringappend_804_0 = (string_drop stringappend_801_0 stringappend_803_0) in
  (case
  (case ((sep_matches_prefix stringappend_804_0)) of
        SOME (stringappend_805_0,stringappend_806_0) => (stringappend_805_0, stringappend_806_0)
  ) of
      (() , stringappend_806_0) =>
  let stringappend_807_0 = (string_drop stringappend_804_0 stringappend_806_0) in
  let (rs2, stringappend_809_0) =
      ((case ((reg_name_matches_prefix stringappend_807_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_808_0,stringappend_809_0) => (stringappend_808_0, stringappend_809_0)
       )) in
  (case ((string_drop stringappend_807_0 stringappend_809_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "div")) /\ (let stringappend_811_0 = (string_drop stringappend_541_0 ((string_length "div"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_811_0)) of
                   SOME (stringappend_812_0,stringappend_813_0) =>
                    let stringappend_814_0 = (string_drop stringappend_811_0 stringappend_813_0) in
                    if ((case ((spc_matches_prefix stringappend_814_0)) of
                        SOME (stringappend_815_0,stringappend_816_0) =>
                         let stringappend_817_0 = (string_drop stringappend_814_0 stringappend_816_0) in
                         if ((case ((reg_name_matches_prefix stringappend_817_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_818_0,stringappend_819_0) =>
                              let stringappend_820_0 =
                                (string_drop stringappend_817_0 stringappend_819_0) in
                              if ((case ((sep_matches_prefix stringappend_820_0)) of
                                  SOME (stringappend_821_0,stringappend_822_0) =>
                                   let stringappend_823_0 =
                                     (string_drop stringappend_820_0 stringappend_822_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_823_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_824_0,stringappend_825_0) =>
                                        let stringappend_826_0 =
                                          (string_drop stringappend_823_0 stringappend_825_0) in
                                        if ((case ((sep_matches_prefix stringappend_826_0)) of
                                            SOME (stringappend_827_0,stringappend_828_0) =>
                                             let stringappend_829_0 =
                                               (string_drop stringappend_826_0 stringappend_828_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_829_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_830_0,stringappend_831_0) =>
                                                  (case ((string_drop stringappend_829_0
                                                            stringappend_831_0)) of
                                                    "" => T
                                                  | _ => F
                                                  )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_811_0 = (string_drop stringappend_541_0 ((string_length "div"))) in
     let (s, stringappend_813_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_811_0)) of
         SOME (stringappend_812_0,stringappend_813_0) => (stringappend_812_0, stringappend_813_0)
       )) in
     let stringappend_814_0 = (string_drop stringappend_811_0 stringappend_813_0) in  
  (case
  (case ((spc_matches_prefix stringappend_814_0)) of
        SOME (stringappend_815_0,stringappend_816_0) => (stringappend_815_0, stringappend_816_0)
  ) of
      (() , stringappend_816_0) =>
  let stringappend_817_0 = (string_drop stringappend_814_0 stringappend_816_0) in
  let (rd, stringappend_819_0) =
      ((case ((reg_name_matches_prefix stringappend_817_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_818_0,stringappend_819_0) => (stringappend_818_0, stringappend_819_0)
       )) in
  let stringappend_820_0 = (string_drop stringappend_817_0 stringappend_819_0) in
  (case
  (case ((sep_matches_prefix stringappend_820_0)) of
        SOME (stringappend_821_0,stringappend_822_0) => (stringappend_821_0, stringappend_822_0)
  ) of
      (() , stringappend_822_0) =>
  let stringappend_823_0 = (string_drop stringappend_820_0 stringappend_822_0) in
  let (rs1, stringappend_825_0) =
      ((case ((reg_name_matches_prefix stringappend_823_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_824_0,stringappend_825_0) => (stringappend_824_0, stringappend_825_0)
       )) in
  let stringappend_826_0 = (string_drop stringappend_823_0 stringappend_825_0) in
  (case
  (case ((sep_matches_prefix stringappend_826_0)) of
        SOME (stringappend_827_0,stringappend_828_0) => (stringappend_827_0, stringappend_828_0)
  ) of
      (() , stringappend_828_0) =>
  let stringappend_829_0 = (string_drop stringappend_826_0 stringappend_828_0) in
  let (rs2, stringappend_831_0) =
      ((case ((reg_name_matches_prefix stringappend_829_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_830_0,stringappend_831_0) => (stringappend_830_0, stringappend_831_0)
       )) in
  (case ((string_drop stringappend_829_0 stringappend_831_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "rem")) /\ (let stringappend_833_0 = (string_drop stringappend_541_0 ((string_length "rem"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_833_0)) of
                   SOME (stringappend_834_0,stringappend_835_0) =>
                    let stringappend_836_0 = (string_drop stringappend_833_0 stringappend_835_0) in
                    if ((case ((spc_matches_prefix stringappend_836_0)) of
                        SOME (stringappend_837_0,stringappend_838_0) =>
                         let stringappend_839_0 = (string_drop stringappend_836_0 stringappend_838_0) in
                         if ((case ((reg_name_matches_prefix stringappend_839_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_840_0,stringappend_841_0) =>
                              let stringappend_842_0 =
                                (string_drop stringappend_839_0 stringappend_841_0) in
                              if ((case ((sep_matches_prefix stringappend_842_0)) of
                                  SOME (stringappend_843_0,stringappend_844_0) =>
                                   let stringappend_845_0 =
                                     (string_drop stringappend_842_0 stringappend_844_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_845_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_846_0,stringappend_847_0) =>
                                        let stringappend_848_0 =
                                          (string_drop stringappend_845_0 stringappend_847_0) in
                                        if ((case ((sep_matches_prefix stringappend_848_0)) of
                                            SOME (stringappend_849_0,stringappend_850_0) =>
                                             let stringappend_851_0 =
                                               (string_drop stringappend_848_0 stringappend_850_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_851_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_852_0,stringappend_853_0) =>
                                                  (case ((string_drop stringappend_851_0
                                                            stringappend_853_0)) of
                                                    "" => T
                                                  | _ => F
                                                  )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_833_0 = (string_drop stringappend_541_0 ((string_length "rem"))) in
     let (s, stringappend_835_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_833_0)) of
         SOME (stringappend_834_0,stringappend_835_0) => (stringappend_834_0, stringappend_835_0)
       )) in
     let stringappend_836_0 = (string_drop stringappend_833_0 stringappend_835_0) in  
  (case
  (case ((spc_matches_prefix stringappend_836_0)) of
        SOME (stringappend_837_0,stringappend_838_0) => (stringappend_837_0, stringappend_838_0)
  ) of
      (() , stringappend_838_0) =>
  let stringappend_839_0 = (string_drop stringappend_836_0 stringappend_838_0) in
  let (rd, stringappend_841_0) =
      ((case ((reg_name_matches_prefix stringappend_839_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_840_0,stringappend_841_0) => (stringappend_840_0, stringappend_841_0)
       )) in
  let stringappend_842_0 = (string_drop stringappend_839_0 stringappend_841_0) in
  (case
  (case ((sep_matches_prefix stringappend_842_0)) of
        SOME (stringappend_843_0,stringappend_844_0) => (stringappend_843_0, stringappend_844_0)
  ) of
      (() , stringappend_844_0) =>
  let stringappend_845_0 = (string_drop stringappend_842_0 stringappend_844_0) in
  let (rs1, stringappend_847_0) =
      ((case ((reg_name_matches_prefix stringappend_845_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_846_0,stringappend_847_0) => (stringappend_846_0, stringappend_847_0)
       )) in
  let stringappend_848_0 = (string_drop stringappend_845_0 stringappend_847_0) in
  (case
  (case ((sep_matches_prefix stringappend_848_0)) of
        SOME (stringappend_849_0,stringappend_850_0) => (stringappend_849_0, stringappend_850_0)
  ) of
      (() , stringappend_850_0) =>
  let stringappend_851_0 = (string_drop stringappend_848_0 stringappend_850_0) in
  let (rs2, stringappend_853_0) =
      ((case ((reg_name_matches_prefix stringappend_851_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_852_0,stringappend_853_0) => (stringappend_852_0, stringappend_853_0)
       )) in
  (case ((string_drop stringappend_851_0 stringappend_853_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "mulw")) /\ (let stringappend_855_0 = (string_drop stringappend_541_0 ((string_length "mulw"))) in
               if ((case ((spc_matches_prefix stringappend_855_0)) of
                   SOME (stringappend_856_0,stringappend_857_0) =>
                    let stringappend_858_0 = (string_drop stringappend_855_0 stringappend_857_0) in
                    if ((case ((reg_name_matches_prefix stringappend_858_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_859_0,stringappend_860_0) =>
                         let stringappend_861_0 = (string_drop stringappend_858_0 stringappend_860_0) in
                         if ((case ((sep_matches_prefix stringappend_861_0)) of
                             SOME (stringappend_862_0,stringappend_863_0) =>
                              let stringappend_864_0 =
                                (string_drop stringappend_861_0 stringappend_863_0) in
                              if ((case ((reg_name_matches_prefix stringappend_864_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_865_0,stringappend_866_0) =>
                                   let stringappend_867_0 =
                                     (string_drop stringappend_864_0 stringappend_866_0) in
                                   if ((case ((sep_matches_prefix stringappend_867_0)) of
                                       SOME (stringappend_868_0,stringappend_869_0) =>
                                        let stringappend_870_0 =
                                          (string_drop stringappend_867_0 stringappend_869_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_870_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_871_0,stringappend_872_0) =>
                                             (case ((string_drop stringappend_870_0
                                                       stringappend_872_0)) of
                                               "" => T
                                             | _ => F
                                             )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_855_0 = (string_drop stringappend_541_0 ((string_length "mulw"))) in  
  (case
  (case ((spc_matches_prefix stringappend_855_0)) of
        SOME (stringappend_856_0,stringappend_857_0) => (stringappend_856_0, stringappend_857_0)
  ) of
      (() , stringappend_857_0) =>
  let stringappend_858_0 = (string_drop stringappend_855_0 stringappend_857_0) in
  let (rd, stringappend_860_0) =
      ((case ((reg_name_matches_prefix stringappend_858_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_859_0,stringappend_860_0) => (stringappend_859_0, stringappend_860_0)
       )) in
  let stringappend_861_0 = (string_drop stringappend_858_0 stringappend_860_0) in
  (case
  (case ((sep_matches_prefix stringappend_861_0)) of
        SOME (stringappend_862_0,stringappend_863_0) => (stringappend_862_0, stringappend_863_0)
  ) of
      (() , stringappend_863_0) =>
  let stringappend_864_0 = (string_drop stringappend_861_0 stringappend_863_0) in
  let (rs1, stringappend_866_0) =
      ((case ((reg_name_matches_prefix stringappend_864_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_865_0,stringappend_866_0) => (stringappend_865_0, stringappend_866_0)
       )) in
  let stringappend_867_0 = (string_drop stringappend_864_0 stringappend_866_0) in
  (case
  (case ((sep_matches_prefix stringappend_867_0)) of
        SOME (stringappend_868_0,stringappend_869_0) => (stringappend_868_0, stringappend_869_0)
  ) of
      (() , stringappend_869_0) =>
  let stringappend_870_0 = (string_drop stringappend_867_0 stringappend_869_0) in
  let (rs2, stringappend_872_0) =
      ((case ((reg_name_matches_prefix stringappend_870_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_871_0,stringappend_872_0) => (stringappend_871_0, stringappend_872_0)
       )) in
  (case ((string_drop stringappend_870_0 stringappend_872_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "div")) /\ (let stringappend_874_0 = (string_drop stringappend_541_0 ((string_length "div"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_874_0)) of
                   SOME (stringappend_875_0,stringappend_876_0) =>
                    let stringappend_877_0 = (string_drop stringappend_874_0 stringappend_876_0) in
                    if (((((string_startswith stringappend_877_0 "w")) /\ (let stringappend_878_0 =
                             (string_drop stringappend_877_0 ((string_length "w"))) in
                           if ((case ((spc_matches_prefix stringappend_878_0)) of
                               SOME (stringappend_879_0,stringappend_880_0) =>
                                let stringappend_881_0 =
                                  (string_drop stringappend_878_0 stringappend_880_0) in
                                if ((case ((reg_name_matches_prefix stringappend_881_0
                                             :  (( 5 words$word # ii))option)) of
                                    SOME (stringappend_882_0,stringappend_883_0) =>
                                     let stringappend_884_0 =
                                       (string_drop stringappend_881_0 stringappend_883_0) in
                                     if ((case ((sep_matches_prefix stringappend_884_0)) of
                                         SOME (stringappend_885_0,stringappend_886_0) =>
                                          let stringappend_887_0 =
                                            (string_drop stringappend_884_0 stringappend_886_0) in
                                          if ((case ((reg_name_matches_prefix stringappend_887_0
                                                       :  (( 5 words$word # ii))option)) of
                                              SOME (stringappend_888_0,stringappend_889_0) =>
                                               let stringappend_890_0 =
                                                 (string_drop stringappend_887_0 stringappend_889_0) in
                                               if ((case ((sep_matches_prefix stringappend_890_0)) of
                                                   SOME (stringappend_891_0,stringappend_892_0) =>
                                                    let stringappend_893_0 =
                                                      (string_drop stringappend_890_0
                                                        stringappend_892_0) in
                                                    if ((case ((reg_name_matches_prefix
                                                                  stringappend_893_0
                                                                 :  (( 5 words$word # ii))option)) of
                                                        SOME (stringappend_894_0,stringappend_895_0) =>
                                                         (case ((string_drop stringappend_893_0
                                                                   stringappend_895_0)) of
                                                           "" => T
                                                         | _ => F
                                                         )
                                                      | NONE => F
                                                      )) then
                                                      T
                                                    else F
                                                 | NONE => F
                                                 )) then
                                                 T
                                               else F
                                            | NONE => F
                                            )) then
                                            T
                                          else F
                                       | NONE => F
                                       )) then
                                       T
                                     else F
                                  | NONE => F
                                  )) then
                                  T
                                else F
                             | NONE => F
                             )) then
                             T
                           else F)))) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_874_0 = (string_drop stringappend_541_0 ((string_length "div"))) in
     let (s, stringappend_876_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_874_0)) of
         SOME (stringappend_875_0,stringappend_876_0) => (stringappend_875_0, stringappend_876_0)
       )) in
     let stringappend_877_0 = (string_drop stringappend_874_0 stringappend_876_0) in
     let stringappend_878_0 = (string_drop stringappend_877_0 ((string_length "w"))) in  
  (case
  (case ((spc_matches_prefix stringappend_878_0)) of
        SOME (stringappend_879_0,stringappend_880_0) => (stringappend_879_0, stringappend_880_0)
  ) of
      (() , stringappend_880_0) =>
  let stringappend_881_0 = (string_drop stringappend_878_0 stringappend_880_0) in
  let (rd, stringappend_883_0) =
      ((case ((reg_name_matches_prefix stringappend_881_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_882_0,stringappend_883_0) => (stringappend_882_0, stringappend_883_0)
       )) in
  let stringappend_884_0 = (string_drop stringappend_881_0 stringappend_883_0) in
  (case
  (case ((sep_matches_prefix stringappend_884_0)) of
        SOME (stringappend_885_0,stringappend_886_0) => (stringappend_885_0, stringappend_886_0)
  ) of
      (() , stringappend_886_0) =>
  let stringappend_887_0 = (string_drop stringappend_884_0 stringappend_886_0) in
  let (rs1, stringappend_889_0) =
      ((case ((reg_name_matches_prefix stringappend_887_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_888_0,stringappend_889_0) => (stringappend_888_0, stringappend_889_0)
       )) in
  let stringappend_890_0 = (string_drop stringappend_887_0 stringappend_889_0) in
  (case
  (case ((sep_matches_prefix stringappend_890_0)) of
        SOME (stringappend_891_0,stringappend_892_0) => (stringappend_891_0, stringappend_892_0)
  ) of
      (() , stringappend_892_0) =>
  let stringappend_893_0 = (string_drop stringappend_890_0 stringappend_892_0) in
  let (rs2, stringappend_895_0) =
      ((case ((reg_name_matches_prefix stringappend_893_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_894_0,stringappend_895_0) => (stringappend_894_0, stringappend_895_0)
       )) in
  (case ((string_drop stringappend_893_0 stringappend_895_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "rem")) /\ (let stringappend_897_0 = (string_drop stringappend_541_0 ((string_length "rem"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_897_0)) of
                   SOME (stringappend_898_0,stringappend_899_0) =>
                    let stringappend_900_0 = (string_drop stringappend_897_0 stringappend_899_0) in
                    if (((((string_startswith stringappend_900_0 "w")) /\ (let stringappend_901_0 =
                             (string_drop stringappend_900_0 ((string_length "w"))) in
                           if ((case ((spc_matches_prefix stringappend_901_0)) of
                               SOME (stringappend_902_0,stringappend_903_0) =>
                                let stringappend_904_0 =
                                  (string_drop stringappend_901_0 stringappend_903_0) in
                                if ((case ((reg_name_matches_prefix stringappend_904_0
                                             :  (( 5 words$word # ii))option)) of
                                    SOME (stringappend_905_0,stringappend_906_0) =>
                                     let stringappend_907_0 =
                                       (string_drop stringappend_904_0 stringappend_906_0) in
                                     if ((case ((sep_matches_prefix stringappend_907_0)) of
                                         SOME (stringappend_908_0,stringappend_909_0) =>
                                          let stringappend_910_0 =
                                            (string_drop stringappend_907_0 stringappend_909_0) in
                                          if ((case ((reg_name_matches_prefix stringappend_910_0
                                                       :  (( 5 words$word # ii))option)) of
                                              SOME (stringappend_911_0,stringappend_912_0) =>
                                               let stringappend_913_0 =
                                                 (string_drop stringappend_910_0 stringappend_912_0) in
                                               if ((case ((sep_matches_prefix stringappend_913_0)) of
                                                   SOME (stringappend_914_0,stringappend_915_0) =>
                                                    let stringappend_916_0 =
                                                      (string_drop stringappend_913_0
                                                        stringappend_915_0) in
                                                    if ((case ((reg_name_matches_prefix
                                                                  stringappend_916_0
                                                                 :  (( 5 words$word # ii))option)) of
                                                        SOME (stringappend_917_0,stringappend_918_0) =>
                                                         (case ((string_drop stringappend_916_0
                                                                   stringappend_918_0)) of
                                                           "" => T
                                                         | _ => F
                                                         )
                                                      | NONE => F
                                                      )) then
                                                      T
                                                    else F
                                                 | NONE => F
                                                 )) then
                                                 T
                                               else F
                                            | NONE => F
                                            )) then
                                            T
                                          else F
                                       | NONE => F
                                       )) then
                                       T
                                     else F
                                  | NONE => F
                                  )) then
                                  T
                                else F
                             | NONE => F
                             )) then
                             T
                           else F)))) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_897_0 = (string_drop stringappend_541_0 ((string_length "rem"))) in
     let (s, stringappend_899_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_897_0)) of
         SOME (stringappend_898_0,stringappend_899_0) => (stringappend_898_0, stringappend_899_0)
       )) in
     let stringappend_900_0 = (string_drop stringappend_897_0 stringappend_899_0) in
     let stringappend_901_0 = (string_drop stringappend_900_0 ((string_length "w"))) in  
  (case
  (case ((spc_matches_prefix stringappend_901_0)) of
        SOME (stringappend_902_0,stringappend_903_0) => (stringappend_902_0, stringappend_903_0)
  ) of
      (() , stringappend_903_0) =>
  let stringappend_904_0 = (string_drop stringappend_901_0 stringappend_903_0) in
  let (rd, stringappend_906_0) =
      ((case ((reg_name_matches_prefix stringappend_904_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_905_0,stringappend_906_0) => (stringappend_905_0, stringappend_906_0)
       )) in
  let stringappend_907_0 = (string_drop stringappend_904_0 stringappend_906_0) in
  (case
  (case ((sep_matches_prefix stringappend_907_0)) of
        SOME (stringappend_908_0,stringappend_909_0) => (stringappend_908_0, stringappend_909_0)
  ) of
      (() , stringappend_909_0) =>
  let stringappend_910_0 = (string_drop stringappend_907_0 stringappend_909_0) in
  let (rs1, stringappend_912_0) =
      ((case ((reg_name_matches_prefix stringappend_910_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_911_0,stringappend_912_0) => (stringappend_911_0, stringappend_912_0)
       )) in
  let stringappend_913_0 = (string_drop stringappend_910_0 stringappend_912_0) in
  (case
  (case ((sep_matches_prefix stringappend_913_0)) of
        SOME (stringappend_914_0,stringappend_915_0) => (stringappend_914_0, stringappend_915_0)
  ) of
      (() , stringappend_915_0) =>
  let stringappend_916_0 = (string_drop stringappend_913_0 stringappend_915_0) in
  let (rs2, stringappend_918_0) =
      ((case ((reg_name_matches_prefix stringappend_916_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_917_0,stringappend_918_0) => (stringappend_917_0, stringappend_918_0)
       )) in
  (case ((string_drop stringappend_916_0 stringappend_918_0)) of   "" => T )
  )
  )
  )
   else if (((((string_startswith stringappend_541_0 "fence")) /\ (let stringappend_920_0 = (string_drop stringappend_541_0 ((string_length "fence"))) in
               if ((case ((spc_matches_prefix stringappend_920_0)) of
                   SOME (stringappend_921_0,stringappend_922_0) =>
                    let stringappend_923_0 = (string_drop stringappend_920_0 stringappend_922_0) in
                    if ((case ((fence_bits_matches_prefix stringappend_923_0
                                 :  (( 4 words$word # ii))option)) of
                        SOME (stringappend_924_0,stringappend_925_0) =>
                         let stringappend_926_0 = (string_drop stringappend_923_0 stringappend_925_0) in
                         if ((case ((sep_matches_prefix stringappend_926_0)) of
                             SOME (stringappend_927_0,stringappend_928_0) =>
                              let stringappend_929_0 =
                                (string_drop stringappend_926_0 stringappend_928_0) in
                              if ((case ((fence_bits_matches_prefix stringappend_929_0
                                           :  (( 4 words$word # ii))option)) of
                                  SOME (stringappend_930_0,stringappend_931_0) =>
                                   (case ((string_drop stringappend_929_0 stringappend_931_0)) of
                                     "" => T
                                   | _ => F
                                   )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_920_0 = (string_drop stringappend_541_0 ((string_length "fence"))) in  
  (case
  (case ((spc_matches_prefix stringappend_920_0)) of
        SOME (stringappend_921_0,stringappend_922_0) => (stringappend_921_0, stringappend_922_0)
  ) of
      (() , stringappend_922_0) =>
  let stringappend_923_0 = (string_drop stringappend_920_0 stringappend_922_0) in
  let (pred, stringappend_925_0) =
      ((case ((fence_bits_matches_prefix stringappend_923_0 : (( 4 words$word # ii)) option)) of
             SOME (stringappend_924_0,stringappend_925_0) => (stringappend_924_0, stringappend_925_0)
       )) in
  let stringappend_926_0 = (string_drop stringappend_923_0 stringappend_925_0) in
  (case
  (case ((sep_matches_prefix stringappend_926_0)) of
        SOME (stringappend_927_0,stringappend_928_0) => (stringappend_927_0, stringappend_928_0)
  ) of
      (() , stringappend_928_0) =>
  let stringappend_929_0 = (string_drop stringappend_926_0 stringappend_928_0) in
  let (succ, stringappend_931_0) =
      ((case ((fence_bits_matches_prefix stringappend_929_0 : (( 4 words$word # ii)) option)) of
             SOME (stringappend_930_0,stringappend_931_0) => (stringappend_930_0, stringappend_931_0)
       )) in
  (case ((string_drop stringappend_929_0 stringappend_931_0)) of   "" => T )
  )
  )
   else
     (case stringappend_541_0 of
       "fence.i" => T
     | "ecall" => T
     | "mret" => T
     | "sret" => T
     | "ebreak" => T
     | "wfi" => T
     | stringappend_541_0 =>
        if (((((string_startswith stringappend_541_0 "sfence.vma")) /\ (let stringappend_933_0 =
                 (string_drop stringappend_541_0 ((string_length "sfence.vma"))) in
               if ((case ((spc_matches_prefix stringappend_933_0)) of
                   SOME (stringappend_934_0,stringappend_935_0) =>
                    let stringappend_936_0 = (string_drop stringappend_933_0 stringappend_935_0) in
                    if ((case ((reg_name_matches_prefix stringappend_936_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_937_0,stringappend_938_0) =>
                         let stringappend_939_0 = (string_drop stringappend_936_0 stringappend_938_0) in
                         if ((case ((sep_matches_prefix stringappend_939_0)) of
                             SOME (stringappend_940_0,stringappend_941_0) =>
                              let stringappend_942_0 =
                                (string_drop stringappend_939_0 stringappend_941_0) in
                              if ((case ((reg_name_matches_prefix stringappend_942_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_943_0,stringappend_944_0) =>
                                   (case ((string_drop stringappend_942_0 stringappend_944_0)) of
                                     "" => T
                                   | _ => F
                                   )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
          let stringappend_933_0 = (string_drop stringappend_541_0 ((string_length "sfence.vma"))) in  
  (case
  (case ((spc_matches_prefix stringappend_933_0)) of
        SOME (stringappend_934_0,stringappend_935_0) =>
  (stringappend_934_0, stringappend_935_0)
  ) of
      (() , stringappend_935_0) =>
  let stringappend_936_0 = (string_drop stringappend_933_0 stringappend_935_0) in
  let (rs1, stringappend_938_0) =
      ((case ((reg_name_matches_prefix stringappend_936_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_937_0,stringappend_938_0) =>
       (stringappend_937_0, stringappend_938_0)
       )) in
  let stringappend_939_0 = (string_drop stringappend_936_0 stringappend_938_0) in
  (case
  (case ((sep_matches_prefix stringappend_939_0)) of
        SOME (stringappend_940_0,stringappend_941_0) =>
  (stringappend_940_0, stringappend_941_0)
  ) of
      (() , stringappend_941_0) =>
  let stringappend_942_0 = (string_drop stringappend_939_0 stringappend_941_0) in
  let (rs2, stringappend_944_0) =
      ((case ((reg_name_matches_prefix stringappend_942_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_943_0,stringappend_944_0) =>
       (stringappend_943_0, stringappend_944_0)
       )) in
  (case ((string_drop stringappend_942_0 stringappend_944_0)) of   "" => T )
  )
  )
        else if (((((string_startswith stringappend_541_0 "lr.")) /\ (let stringappend_946_0 = (string_drop stringappend_541_0 ((string_length "lr."))) in
                    if ((case ((maybe_aq_matches_prefix stringappend_946_0)) of
                        SOME (stringappend_947_0,stringappend_948_0) =>
                         let stringappend_949_0 = (string_drop stringappend_946_0 stringappend_948_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_949_0)) of
                             SOME (stringappend_950_0,stringappend_951_0) =>
                              let stringappend_952_0 =
                                (string_drop stringappend_949_0 stringappend_951_0) in
                              if ((case ((size_mnemonic_matches_prefix stringappend_952_0)) of
                                  SOME (stringappend_953_0,stringappend_954_0) =>
                                   let stringappend_955_0 =
                                     (string_drop stringappend_952_0 stringappend_954_0) in
                                   if ((case ((spc_matches_prefix stringappend_955_0)) of
                                       SOME (stringappend_956_0,stringappend_957_0) =>
                                        let stringappend_958_0 =
                                          (string_drop stringappend_955_0 stringappend_957_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_958_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_959_0,stringappend_960_0) =>
                                             let stringappend_961_0 =
                                               (string_drop stringappend_958_0 stringappend_960_0) in
                                             if ((case ((sep_matches_prefix stringappend_961_0)) of
                                                 SOME (stringappend_962_0,stringappend_963_0) =>
                                                  let stringappend_964_0 =
                                                    (string_drop stringappend_961_0
                                                      stringappend_963_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_964_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_965_0,stringappend_966_0) =>
                                                       (case ((string_drop stringappend_964_0
                                                                 stringappend_966_0)) of
                                                         "" => T
                                                       | _ => F
                                                       )
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
          let stringappend_946_0 = (string_drop stringappend_541_0 ((string_length "lr."))) in
          let (aq, stringappend_948_0) =
            ((case ((maybe_aq_matches_prefix stringappend_946_0)) of
              SOME (stringappend_947_0,stringappend_948_0) =>
               (stringappend_947_0, stringappend_948_0)
            )) in
          let stringappend_949_0 = (string_drop stringappend_946_0 stringappend_948_0) in
          let (rl, stringappend_951_0) =
            ((case ((maybe_rl_matches_prefix stringappend_949_0)) of
              SOME (stringappend_950_0,stringappend_951_0) =>
               (stringappend_950_0, stringappend_951_0)
            )) in
          let stringappend_952_0 = (string_drop stringappend_949_0 stringappend_951_0) in
          let (size1, stringappend_954_0) =
            ((case ((size_mnemonic_matches_prefix stringappend_952_0)) of
              SOME (stringappend_953_0,stringappend_954_0) =>
               (stringappend_953_0, stringappend_954_0)
            )) in
          let stringappend_955_0 = (string_drop stringappend_952_0 stringappend_954_0) in  
  (case
  (case ((spc_matches_prefix stringappend_955_0)) of
        SOME (stringappend_956_0,stringappend_957_0) =>
  (stringappend_956_0, stringappend_957_0)
  ) of
      (() , stringappend_957_0) =>
  let stringappend_958_0 = (string_drop stringappend_955_0 stringappend_957_0) in
  let (rd, stringappend_960_0) =
      ((case ((reg_name_matches_prefix stringappend_958_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_959_0,stringappend_960_0) =>
       (stringappend_959_0, stringappend_960_0)
       )) in
  let stringappend_961_0 = (string_drop stringappend_958_0 stringappend_960_0) in
  (case
  (case ((sep_matches_prefix stringappend_961_0)) of
        SOME (stringappend_962_0,stringappend_963_0) =>
  (stringappend_962_0, stringappend_963_0)
  ) of
      (() , stringappend_963_0) =>
  let stringappend_964_0 = (string_drop stringappend_961_0 stringappend_963_0) in
  let (rs1, stringappend_966_0) =
      ((case ((reg_name_matches_prefix stringappend_964_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_965_0,stringappend_966_0) =>
       (stringappend_965_0, stringappend_966_0)
       )) in
  (case ((string_drop stringappend_964_0 stringappend_966_0)) of   "" => T )
  )
  )
        else if (((((string_startswith stringappend_541_0 "sc.")) /\ (let stringappend_968_0 = (string_drop stringappend_541_0 ((string_length "sc."))) in
                    if ((case ((maybe_aq_matches_prefix stringappend_968_0)) of
                        SOME (stringappend_969_0,stringappend_970_0) =>
                         let stringappend_971_0 = (string_drop stringappend_968_0 stringappend_970_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_971_0)) of
                             SOME (stringappend_972_0,stringappend_973_0) =>
                              let stringappend_974_0 =
                                (string_drop stringappend_971_0 stringappend_973_0) in
                              if ((case ((size_mnemonic_matches_prefix stringappend_974_0)) of
                                  SOME (stringappend_975_0,stringappend_976_0) =>
                                   let stringappend_977_0 =
                                     (string_drop stringappend_974_0 stringappend_976_0) in
                                   if ((case ((spc_matches_prefix stringappend_977_0)) of
                                       SOME (stringappend_978_0,stringappend_979_0) =>
                                        let stringappend_980_0 =
                                          (string_drop stringappend_977_0 stringappend_979_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_980_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_981_0,stringappend_982_0) =>
                                             let stringappend_983_0 =
                                               (string_drop stringappend_980_0 stringappend_982_0) in
                                             if ((case ((sep_matches_prefix stringappend_983_0)) of
                                                 SOME (stringappend_984_0,stringappend_985_0) =>
                                                  let stringappend_986_0 =
                                                    (string_drop stringappend_983_0
                                                      stringappend_985_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_986_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_987_0,stringappend_988_0) =>
                                                       let stringappend_989_0 =
                                                         (string_drop stringappend_986_0
                                                           stringappend_988_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_989_0)) of
                                                           SOME
                                                           (stringappend_990_0,stringappend_991_0) =>
                                                            let stringappend_992_0 =
                                                              (string_drop stringappend_989_0
                                                                stringappend_991_0) in
                                                            if ((case ((reg_name_matches_prefix
                                                                          stringappend_992_0
                                                                         :  (( 5 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_993_0,stringappend_994_0) =>
                                                                 (case ((string_drop
                                                                           stringappend_992_0
                                                                           stringappend_994_0)) of
                                                                   "" => T
                                                                 | _ => F
                                                                 )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
          let stringappend_968_0 = (string_drop stringappend_541_0 ((string_length "sc."))) in
          let (aq, stringappend_970_0) =
            ((case ((maybe_aq_matches_prefix stringappend_968_0)) of
              SOME (stringappend_969_0,stringappend_970_0) =>
               (stringappend_969_0, stringappend_970_0)
            )) in
          let stringappend_971_0 = (string_drop stringappend_968_0 stringappend_970_0) in
          let (rl, stringappend_973_0) =
            ((case ((maybe_rl_matches_prefix stringappend_971_0)) of
              SOME (stringappend_972_0,stringappend_973_0) =>
               (stringappend_972_0, stringappend_973_0)
            )) in
          let stringappend_974_0 = (string_drop stringappend_971_0 stringappend_973_0) in
          let (size1, stringappend_976_0) =
            ((case ((size_mnemonic_matches_prefix stringappend_974_0)) of
              SOME (stringappend_975_0,stringappend_976_0) =>
               (stringappend_975_0, stringappend_976_0)
            )) in
          let stringappend_977_0 = (string_drop stringappend_974_0 stringappend_976_0) in  
  (case
  (case ((spc_matches_prefix stringappend_977_0)) of
        SOME (stringappend_978_0,stringappend_979_0) =>
  (stringappend_978_0, stringappend_979_0)
  ) of
      (() , stringappend_979_0) =>
  let stringappend_980_0 = (string_drop stringappend_977_0 stringappend_979_0) in
  let (rd, stringappend_982_0) =
      ((case ((reg_name_matches_prefix stringappend_980_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_981_0,stringappend_982_0) =>
       (stringappend_981_0, stringappend_982_0)
       )) in
  let stringappend_983_0 = (string_drop stringappend_980_0 stringappend_982_0) in
  (case
  (case ((sep_matches_prefix stringappend_983_0)) of
        SOME (stringappend_984_0,stringappend_985_0) =>
  (stringappend_984_0, stringappend_985_0)
  ) of
      (() , stringappend_985_0) =>
  let stringappend_986_0 = (string_drop stringappend_983_0 stringappend_985_0) in
  let (rs1, stringappend_988_0) =
      ((case ((reg_name_matches_prefix stringappend_986_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_987_0,stringappend_988_0) =>
       (stringappend_987_0, stringappend_988_0)
       )) in
  let stringappend_989_0 = (string_drop stringappend_986_0 stringappend_988_0) in
  (case
  (case ((sep_matches_prefix stringappend_989_0)) of
        SOME (stringappend_990_0,stringappend_991_0) =>
  (stringappend_990_0, stringappend_991_0)
  ) of
      (() , stringappend_991_0) =>
  let stringappend_992_0 = (string_drop stringappend_989_0 stringappend_991_0) in
  let (rs2, stringappend_994_0) =
      ((case ((reg_name_matches_prefix stringappend_992_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_993_0,stringappend_994_0) =>
       (stringappend_993_0, stringappend_994_0)
       )) in
  (case ((string_drop stringappend_992_0 stringappend_994_0)) of   "" => T )
  )
  )
  )
        else if ((case ((amo_mnemonic_matches_prefix stringappend_541_0)) of
            SOME (stringappend_996_0,stringappend_997_0) =>
             let stringappend_998_0 = (string_drop stringappend_541_0 stringappend_997_0) in
             if (((((string_startswith stringappend_998_0 ".")) /\ (let stringappend_999_0 = (string_drop stringappend_998_0 ((string_length "."))) in
                    if ((case ((size_mnemonic_matches_prefix stringappend_999_0)) of
                        SOME (stringappend_1000_0,stringappend_1001_0) =>
                         let stringappend_1002_0 =
                           (string_drop stringappend_999_0 stringappend_1001_0) in
                         if ((case ((maybe_aq_matches_prefix stringappend_1002_0)) of
                             SOME (stringappend_1003_0,stringappend_1004_0) =>
                              let stringappend_1005_0 =
                                (string_drop stringappend_1002_0 stringappend_1004_0) in
                              if ((case ((maybe_rl_matches_prefix stringappend_1005_0)) of
                                  SOME (stringappend_1006_0,stringappend_1007_0) =>
                                   let stringappend_1008_0 =
                                     (string_drop stringappend_1005_0 stringappend_1007_0) in
                                   if ((case ((spc_matches_prefix stringappend_1008_0)) of
                                       SOME (stringappend_1009_0,stringappend_1010_0) =>
                                        let stringappend_1011_0 =
                                          (string_drop stringappend_1008_0 stringappend_1010_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_1011_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_1012_0,stringappend_1013_0) =>
                                             let stringappend_1014_0 =
                                               (string_drop stringappend_1011_0 stringappend_1013_0) in
                                             if ((case ((sep_matches_prefix stringappend_1014_0)) of
                                                 SOME (stringappend_1015_0,stringappend_1016_0) =>
                                                  let stringappend_1017_0 =
                                                    (string_drop stringappend_1014_0
                                                      stringappend_1016_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_1017_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_1018_0,stringappend_1019_0) =>
                                                       let stringappend_1020_0 =
                                                         (string_drop stringappend_1017_0
                                                           stringappend_1019_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_1020_0)) of
                                                           SOME
                                                           (stringappend_1021_0,stringappend_1022_0) =>
                                                            let stringappend_1023_0 =
                                                              (string_drop stringappend_1020_0
                                                                stringappend_1022_0) in
                                                            if ((case ((reg_name_matches_prefix
                                                                          stringappend_1023_0
                                                                         :  (( 5 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_1024_0,stringappend_1025_0) =>
                                                                 (case ((string_drop
                                                                           stringappend_1023_0
                                                                           stringappend_1025_0)) of
                                                                   "" => T
                                                                 | _ => F
                                                                 )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
               T
             else F
          | NONE => F
          )) then
          let (op, stringappend_997_0) =
            ((case ((amo_mnemonic_matches_prefix stringappend_541_0)) of
              SOME (stringappend_996_0,stringappend_997_0) =>
               (stringappend_996_0, stringappend_997_0)
            )) in
          let stringappend_998_0 = (string_drop stringappend_541_0 stringappend_997_0) in
          let stringappend_999_0 = (string_drop stringappend_998_0 ((string_length "."))) in
          let (width, stringappend_1001_0) =
            ((case ((size_mnemonic_matches_prefix stringappend_999_0)) of
              SOME (stringappend_1000_0,stringappend_1001_0) =>
               (stringappend_1000_0, stringappend_1001_0)
            )) in
          let stringappend_1002_0 = (string_drop stringappend_999_0 stringappend_1001_0) in
          let (aq, stringappend_1004_0) =
            ((case ((maybe_aq_matches_prefix stringappend_1002_0)) of
              SOME (stringappend_1003_0,stringappend_1004_0) =>
               (stringappend_1003_0, stringappend_1004_0)
            )) in
          let stringappend_1005_0 = (string_drop stringappend_1002_0 stringappend_1004_0) in
          let (rl, stringappend_1007_0) =
            ((case ((maybe_rl_matches_prefix stringappend_1005_0)) of
              SOME (stringappend_1006_0,stringappend_1007_0) =>
               (stringappend_1006_0, stringappend_1007_0)
            )) in
          let stringappend_1008_0 = (string_drop stringappend_1005_0 stringappend_1007_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1008_0)) of
        SOME (stringappend_1009_0,stringappend_1010_0) =>
  (stringappend_1009_0, stringappend_1010_0)
  ) of
      (() , stringappend_1010_0) =>
  let stringappend_1011_0 = (string_drop stringappend_1008_0
                               stringappend_1010_0) in
  let (rd, stringappend_1013_0) =
      ((case ((reg_name_matches_prefix stringappend_1011_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1012_0,stringappend_1013_0) =>
       (stringappend_1012_0, stringappend_1013_0)
       )) in
  let stringappend_1014_0 = (string_drop stringappend_1011_0
                               stringappend_1013_0) in
  (case
  (case ((sep_matches_prefix stringappend_1014_0)) of
        SOME (stringappend_1015_0,stringappend_1016_0) =>
  (stringappend_1015_0, stringappend_1016_0)
  ) of
      (() , stringappend_1016_0) =>
  let stringappend_1017_0 = (string_drop stringappend_1014_0
                               stringappend_1016_0) in
  let (rs1, stringappend_1019_0) =
      ((case ((reg_name_matches_prefix stringappend_1017_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1018_0,stringappend_1019_0) =>
       (stringappend_1018_0, stringappend_1019_0)
       )) in
  let stringappend_1020_0 = (string_drop stringappend_1017_0
                               stringappend_1019_0) in
  (case
  (case ((sep_matches_prefix stringappend_1020_0)) of
        SOME (stringappend_1021_0,stringappend_1022_0) =>
  (stringappend_1021_0, stringappend_1022_0)
  ) of
      (() , stringappend_1022_0) =>
  let stringappend_1023_0 = (string_drop stringappend_1020_0
                               stringappend_1022_0) in
  let (rs2, stringappend_1025_0) =
      ((case ((reg_name_matches_prefix stringappend_1023_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1024_0,stringappend_1025_0) =>
       (stringappend_1024_0, stringappend_1025_0)
       )) in
  (case ((string_drop stringappend_1023_0 stringappend_1025_0)) of
        "" => T
  )
  )
  )
  )
        else if ((case ((csr_mnemonic_matches_prefix stringappend_541_0)) of
            SOME (stringappend_1027_0,stringappend_1028_0) =>
             let stringappend_1029_0 = (string_drop stringappend_541_0 stringappend_1028_0) in
             if (((((string_startswith stringappend_1029_0 "i")) /\ (let stringappend_1030_0 = (string_drop stringappend_1029_0 ((string_length "i"))) in
                    if ((case ((spc_matches_prefix stringappend_1030_0)) of
                        SOME (stringappend_1031_0,stringappend_1032_0) =>
                         let stringappend_1033_0 =
                           (string_drop stringappend_1030_0 stringappend_1032_0) in
                         if ((case ((reg_name_matches_prefix stringappend_1033_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_1034_0,stringappend_1035_0) =>
                              let stringappend_1036_0 =
                                (string_drop stringappend_1033_0 stringappend_1035_0) in
                              if ((case ((sep_matches_prefix stringappend_1036_0)) of
                                  SOME (stringappend_1037_0,stringappend_1038_0) =>
                                   let stringappend_1039_0 =
                                     (string_drop stringappend_1036_0 stringappend_1038_0) in
                                   if ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1039_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_1040_0,stringappend_1041_0) =>
                                        let stringappend_1042_0 =
                                          (string_drop stringappend_1039_0 stringappend_1041_0) in
                                        if ((case ((sep_matches_prefix stringappend_1042_0)) of
                                            SOME (stringappend_1043_0,stringappend_1044_0) =>
                                             let stringappend_1045_0 =
                                               (string_drop stringappend_1042_0 stringappend_1044_0) in
                                             if ((case ((csr_name_map_matches_prefix
                                                           stringappend_1045_0
                                                          :  (( 12 words$word # ii))option)) of
                                                 SOME (stringappend_1046_0,stringappend_1047_0) =>
                                                  (case ((string_drop stringappend_1045_0
                                                            stringappend_1047_0)) of
                                                    "" => T
                                                  | _ => F
                                                  )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
               T
             else F
          | NONE => F
          )) then
          let (op, stringappend_1028_0) =
            ((case ((csr_mnemonic_matches_prefix stringappend_541_0)) of
              SOME (stringappend_1027_0,stringappend_1028_0) =>
               (stringappend_1027_0, stringappend_1028_0)
            )) in
          let stringappend_1029_0 = (string_drop stringappend_541_0 stringappend_1028_0) in
          let stringappend_1030_0 = (string_drop stringappend_1029_0 ((string_length "i"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1030_0)) of
        SOME (stringappend_1031_0,stringappend_1032_0) =>
  (stringappend_1031_0, stringappend_1032_0)
  ) of
      (() , stringappend_1032_0) =>
  let stringappend_1033_0 = (string_drop stringappend_1030_0
                               stringappend_1032_0) in
  let (rd, stringappend_1035_0) =
      ((case ((reg_name_matches_prefix stringappend_1033_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1034_0,stringappend_1035_0) =>
       (stringappend_1034_0, stringappend_1035_0)
       )) in
  let stringappend_1036_0 = (string_drop stringappend_1033_0
                               stringappend_1035_0) in
  (case
  (case ((sep_matches_prefix stringappend_1036_0)) of
        SOME (stringappend_1037_0,stringappend_1038_0) =>
  (stringappend_1037_0, stringappend_1038_0)
  ) of
      (() , stringappend_1038_0) =>
  let stringappend_1039_0 = (string_drop stringappend_1036_0
                               stringappend_1038_0) in
  let (rs1, stringappend_1041_0) =
      ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1039_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1040_0,stringappend_1041_0) =>
       (stringappend_1040_0, stringappend_1041_0)
       )) in
  let stringappend_1042_0 = (string_drop stringappend_1039_0
                               stringappend_1041_0) in
  (case
  (case ((sep_matches_prefix stringappend_1042_0)) of
        SOME (stringappend_1043_0,stringappend_1044_0) =>
  (stringappend_1043_0, stringappend_1044_0)
  ) of
      (() , stringappend_1044_0) =>
  let stringappend_1045_0 = (string_drop stringappend_1042_0
                               stringappend_1044_0) in
  let (csr, stringappend_1047_0) =
      ((case ((csr_name_map_matches_prefix stringappend_1045_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1046_0,stringappend_1047_0) =>
       (stringappend_1046_0, stringappend_1047_0)
       )) in
  (case ((string_drop stringappend_1045_0 stringappend_1047_0)) of
        "" => T
  )
  )
  )
  )
        else if ((case ((csr_mnemonic_matches_prefix stringappend_541_0)) of
            SOME (stringappend_1049_0,stringappend_1050_0) =>
             let stringappend_1051_0 = (string_drop stringappend_541_0 stringappend_1050_0) in
             if ((case ((spc_matches_prefix stringappend_1051_0)) of
                 SOME (stringappend_1052_0,stringappend_1053_0) =>
                  let stringappend_1054_0 = (string_drop stringappend_1051_0 stringappend_1053_0) in
                  if ((case ((reg_name_matches_prefix stringappend_1054_0
                               :  (( 5 words$word # ii))option)) of
                      SOME (stringappend_1055_0,stringappend_1056_0) =>
                       let stringappend_1057_0 = (string_drop stringappend_1054_0 stringappend_1056_0) in
                       if ((case ((sep_matches_prefix stringappend_1057_0)) of
                           SOME (stringappend_1058_0,stringappend_1059_0) =>
                            let stringappend_1060_0 =
                              (string_drop stringappend_1057_0 stringappend_1059_0) in
                            if ((case ((reg_name_matches_prefix stringappend_1060_0
                                         :  (( 5 words$word # ii))option)) of
                                SOME (stringappend_1061_0,stringappend_1062_0) =>
                                 let stringappend_1063_0 =
                                   (string_drop stringappend_1060_0 stringappend_1062_0) in
                                 if ((case ((sep_matches_prefix stringappend_1063_0)) of
                                     SOME (stringappend_1064_0,stringappend_1065_0) =>
                                      let stringappend_1066_0 =
                                        (string_drop stringappend_1063_0 stringappend_1065_0) in
                                      if ((case ((csr_name_map_matches_prefix stringappend_1066_0
                                                   :  (( 12 words$word # ii))option)) of
                                          SOME (stringappend_1067_0,stringappend_1068_0) =>
                                           (case ((string_drop stringappend_1066_0
                                                     stringappend_1068_0)) of
                                             "" => T
                                           | _ => F
                                           )
                                        | NONE => F
                                        )) then
                                        T
                                      else F
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          let (op, stringappend_1050_0) =
            ((case ((csr_mnemonic_matches_prefix stringappend_541_0)) of
              SOME (stringappend_1049_0,stringappend_1050_0) =>
               (stringappend_1049_0, stringappend_1050_0)
            )) in
          let stringappend_1051_0 = (string_drop stringappend_541_0 stringappend_1050_0) in  
  (case
  (case ((spc_matches_prefix stringappend_1051_0)) of
        SOME (stringappend_1052_0,stringappend_1053_0) =>
  (stringappend_1052_0, stringappend_1053_0)
  ) of
      (() , stringappend_1053_0) =>
  let stringappend_1054_0 = (string_drop stringappend_1051_0
                               stringappend_1053_0) in
  let (rd, stringappend_1056_0) =
      ((case ((reg_name_matches_prefix stringappend_1054_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1055_0,stringappend_1056_0) =>
       (stringappend_1055_0, stringappend_1056_0)
       )) in
  let stringappend_1057_0 = (string_drop stringappend_1054_0
                               stringappend_1056_0) in
  (case
  (case ((sep_matches_prefix stringappend_1057_0)) of
        SOME (stringappend_1058_0,stringappend_1059_0) =>
  (stringappend_1058_0, stringappend_1059_0)
  ) of
      (() , stringappend_1059_0) =>
  let stringappend_1060_0 = (string_drop stringappend_1057_0
                               stringappend_1059_0) in
  let (rs1, stringappend_1062_0) =
      ((case ((reg_name_matches_prefix stringappend_1060_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_1061_0,stringappend_1062_0) =>
       (stringappend_1061_0, stringappend_1062_0)
       )) in
  let stringappend_1063_0 = (string_drop stringappend_1060_0
                               stringappend_1062_0) in
  (case
  (case ((sep_matches_prefix stringappend_1063_0)) of
        SOME (stringappend_1064_0,stringappend_1065_0) =>
  (stringappend_1064_0, stringappend_1065_0)
  ) of
      (() , stringappend_1065_0) =>
  let stringappend_1066_0 = (string_drop stringappend_1063_0
                               stringappend_1065_0) in
  let (csr, stringappend_1068_0) =
      ((case ((csr_name_map_matches_prefix stringappend_1066_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_1067_0,stringappend_1068_0) =>
       (stringappend_1067_0, stringappend_1068_0)
       )) in
  (case ((string_drop stringappend_1066_0 stringappend_1068_0)) of
        "" => T
  )
  )
  )
  )
        else if (((((string_startswith stringappend_541_0 "illegal")) /\ (let stringappend_1070_0 =
                      (string_drop stringappend_541_0 ((string_length "illegal"))) in
                    if ((case ((spc_matches_prefix stringappend_1070_0)) of
                        SOME (stringappend_1071_0,stringappend_1072_0) =>
                         let stringappend_1073_0 =
                           (string_drop stringappend_1070_0 stringappend_1072_0) in
                         if ((case ((hex_bits_32_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1073_0
                                      :  (( 32 words$word # ii))option)) of
                             SOME (stringappend_1074_0,stringappend_1075_0) =>
                              (case ((string_drop stringappend_1073_0 stringappend_1075_0)) of
                                "" => T
                              | _ => F
                              )
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F)))) then
          let stringappend_1070_0 = (string_drop stringappend_541_0 ((string_length "illegal"))) in  
  (case
  (case ((spc_matches_prefix stringappend_1070_0)) of
        SOME (stringappend_1071_0,stringappend_1072_0) =>
  (stringappend_1071_0, stringappend_1072_0)
  ) of
      (() , stringappend_1072_0) =>
  let stringappend_1073_0 = (string_drop stringappend_1070_0
                               stringappend_1072_0) in
  let (s, stringappend_1075_0) =
      ((case ((hex_bits_32_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_1073_0 : (( 32 words$word # ii)) option)) of
             SOME (stringappend_1074_0,stringappend_1075_0) =>
       (stringappend_1074_0, stringappend_1075_0)
       )) in
  (case ((string_drop stringappend_1073_0 stringappend_1075_0)) of
        "" => T
  )
  )
        else F
     )))`;


(*val assembly_matches_prefix : string -> maybe ((ast * ii))*)

val _ = Define `
 ((assembly_matches_prefix:string ->(ast#int)option) arg_=
    (let stringappend_0_0 = arg_ in
   if ((case ((utype_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_1_0,stringappend_2_0) =>
        let stringappend_3_0 = (string_drop stringappend_0_0 stringappend_2_0) in
        if ((case ((spc_matches_prefix stringappend_3_0)) of
            SOME (stringappend_4_0,stringappend_5_0) =>
             let stringappend_6_0 = (string_drop stringappend_3_0 stringappend_5_0) in
             if ((case ((reg_name_matches_prefix stringappend_6_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_7_0,stringappend_8_0) =>
                  let stringappend_9_0 = (string_drop stringappend_6_0 stringappend_8_0) in
                  if ((case ((sep_matches_prefix stringappend_9_0)) of
                      SOME (stringappend_10_0,stringappend_11_0) =>
                       let stringappend_12_0 = (string_drop stringappend_9_0 stringappend_11_0) in
                       if ((case ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_12_0
                                    :  (( 20 words$word # ii))option)) of
                           SOME (stringappend_13_0,stringappend_14_0) => 
  (case ((string_drop stringappend_12_0 stringappend_14_0)) of   s_ => T )
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_2_0) =
       ((case ((utype_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_1_0,stringappend_2_0) => (stringappend_1_0, stringappend_2_0)
       )) in
     let stringappend_3_0 = (string_drop stringappend_0_0 stringappend_2_0) in  
  (case
  (case ((spc_matches_prefix stringappend_3_0)) of
        SOME (stringappend_4_0,stringappend_5_0) => (stringappend_4_0, stringappend_5_0)
  ) of
      (() , stringappend_5_0) =>
  let stringappend_6_0 = (string_drop stringappend_3_0 stringappend_5_0) in
  let (rd, stringappend_8_0) =
      ((case ((reg_name_matches_prefix stringappend_6_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_7_0,stringappend_8_0) => (stringappend_7_0, stringappend_8_0)
       )) in
  let stringappend_9_0 = (string_drop stringappend_6_0 stringappend_8_0) in
  (case
  (case ((sep_matches_prefix stringappend_9_0)) of
        SOME (stringappend_10_0,stringappend_11_0) => (stringappend_10_0, stringappend_11_0)
  ) of
      (() , stringappend_11_0) =>
  let stringappend_12_0 = (string_drop stringappend_9_0 stringappend_11_0) in
  let (imm, stringappend_14_0) =
      ((case ((hex_bits_20_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_12_0 : (( 20 words$word # ii)) option)) of
             SOME (stringappend_13_0,stringappend_14_0) => (stringappend_13_0, stringappend_14_0)
       )) in
  (case ((string_drop stringappend_12_0 stringappend_14_0)) of
        s_ => SOME
                (UTYPE (imm,rd,op), ((string_length arg_)) -
                                      ((string_length s_)))
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "jal")) /\ (let stringappend_16_0 = (string_drop stringappend_0_0 ((string_length "jal"))) in
               if ((case ((spc_matches_prefix stringappend_16_0)) of
                   SOME (stringappend_17_0,stringappend_18_0) =>
                    let stringappend_19_0 = (string_drop stringappend_16_0 stringappend_18_0) in
                    if ((case ((reg_name_matches_prefix stringappend_19_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_20_0,stringappend_21_0) =>
                         let stringappend_22_0 = (string_drop stringappend_19_0 stringappend_21_0) in
                         if ((case ((sep_matches_prefix stringappend_22_0)) of
                             SOME (stringappend_23_0,stringappend_24_0) =>
                              let stringappend_25_0 =
                                (string_drop stringappend_22_0 stringappend_24_0) in
                              if ((case ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_25_0
                                           :  (( 21 words$word # ii))option)) of
                                  SOME (stringappend_26_0,stringappend_27_0) => 
  (case ((string_drop stringappend_25_0 stringappend_27_0)) of   s_ => T )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_16_0 = (string_drop stringappend_0_0 ((string_length "jal"))) in  
  (case
  (case ((spc_matches_prefix stringappend_16_0)) of
        SOME (stringappend_17_0,stringappend_18_0) => (stringappend_17_0, stringappend_18_0)
  ) of
      (() , stringappend_18_0) =>
  let stringappend_19_0 = (string_drop stringappend_16_0 stringappend_18_0) in
  let (rd, stringappend_21_0) =
      ((case ((reg_name_matches_prefix stringappend_19_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_20_0,stringappend_21_0) => (stringappend_20_0, stringappend_21_0)
       )) in
  let stringappend_22_0 = (string_drop stringappend_19_0 stringappend_21_0) in
  (case
  (case ((sep_matches_prefix stringappend_22_0)) of
        SOME (stringappend_23_0,stringappend_24_0) => (stringappend_23_0, stringappend_24_0)
  ) of
      (() , stringappend_24_0) =>
  let stringappend_25_0 = (string_drop stringappend_22_0 stringappend_24_0) in
  let (imm, stringappend_27_0) =
      ((case ((hex_bits_21_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_25_0 : (( 21 words$word # ii)) option)) of
             SOME (stringappend_26_0,stringappend_27_0) => (stringappend_26_0, stringappend_27_0)
       )) in
  (case ((string_drop stringappend_25_0 stringappend_27_0)) of
        s_ => SOME
                (RISCV_JAL (imm,rd), ((string_length arg_)) -
                                       ((string_length s_)))
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "jalr")) /\ (let stringappend_29_0 = (string_drop stringappend_0_0 ((string_length "jalr"))) in
               if ((case ((spc_matches_prefix stringappend_29_0)) of
                   SOME (stringappend_30_0,stringappend_31_0) =>
                    let stringappend_32_0 = (string_drop stringappend_29_0 stringappend_31_0) in
                    if ((case ((reg_name_matches_prefix stringappend_32_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_33_0,stringappend_34_0) =>
                         let stringappend_35_0 = (string_drop stringappend_32_0 stringappend_34_0) in
                         if ((case ((sep_matches_prefix stringappend_35_0)) of
                             SOME (stringappend_36_0,stringappend_37_0) =>
                              let stringappend_38_0 =
                                (string_drop stringappend_35_0 stringappend_37_0) in
                              if ((case ((reg_name_matches_prefix stringappend_38_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_39_0,stringappend_40_0) =>
                                   let stringappend_41_0 =
                                     (string_drop stringappend_38_0 stringappend_40_0) in
                                   if ((case ((sep_matches_prefix stringappend_41_0)) of
                                       SOME (stringappend_42_0,stringappend_43_0) =>
                                        let stringappend_44_0 =
                                          (string_drop stringappend_41_0 stringappend_43_0) in
                                        if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_44_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_45_0,stringappend_46_0) => 
  (case ((string_drop stringappend_44_0 stringappend_46_0)) of   s_ => T )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_29_0 = (string_drop stringappend_0_0 ((string_length "jalr"))) in  
  (case
  (case ((spc_matches_prefix stringappend_29_0)) of
        SOME (stringappend_30_0,stringappend_31_0) => (stringappend_30_0, stringappend_31_0)
  ) of
      (() , stringappend_31_0) =>
  let stringappend_32_0 = (string_drop stringappend_29_0 stringappend_31_0) in
  let (rd, stringappend_34_0) =
      ((case ((reg_name_matches_prefix stringappend_32_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_33_0,stringappend_34_0) => (stringappend_33_0, stringappend_34_0)
       )) in
  let stringappend_35_0 = (string_drop stringappend_32_0 stringappend_34_0) in
  (case
  (case ((sep_matches_prefix stringappend_35_0)) of
        SOME (stringappend_36_0,stringappend_37_0) => (stringappend_36_0, stringappend_37_0)
  ) of
      (() , stringappend_37_0) =>
  let stringappend_38_0 = (string_drop stringappend_35_0 stringappend_37_0) in
  let (rs1, stringappend_40_0) =
      ((case ((reg_name_matches_prefix stringappend_38_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_39_0,stringappend_40_0) => (stringappend_39_0, stringappend_40_0)
       )) in
  let stringappend_41_0 = (string_drop stringappend_38_0 stringappend_40_0) in
  (case
  (case ((sep_matches_prefix stringappend_41_0)) of
        SOME (stringappend_42_0,stringappend_43_0) => (stringappend_42_0, stringappend_43_0)
  ) of
      (() , stringappend_43_0) =>
  let stringappend_44_0 = (string_drop stringappend_41_0 stringappend_43_0) in
  let (imm, stringappend_46_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_44_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_45_0,stringappend_46_0) => (stringappend_45_0, stringappend_46_0)
       )) in
  (case ((string_drop stringappend_44_0 stringappend_46_0)) of
        s_ =>
  SOME
    (RISCV_JALR (imm,rs1,rd), ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((btype_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_48_0,stringappend_49_0) =>
        let stringappend_50_0 = (string_drop stringappend_0_0 stringappend_49_0) in
        if ((case ((spc_matches_prefix stringappend_50_0)) of
            SOME (stringappend_51_0,stringappend_52_0) =>
             let stringappend_53_0 = (string_drop stringappend_50_0 stringappend_52_0) in
             if ((case ((reg_name_matches_prefix stringappend_53_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_54_0,stringappend_55_0) =>
                  let stringappend_56_0 = (string_drop stringappend_53_0 stringappend_55_0) in
                  if ((case ((sep_matches_prefix stringappend_56_0)) of
                      SOME (stringappend_57_0,stringappend_58_0) =>
                       let stringappend_59_0 = (string_drop stringappend_56_0 stringappend_58_0) in
                       if ((case ((reg_name_matches_prefix stringappend_59_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_60_0,stringappend_61_0) =>
                            let stringappend_62_0 = (string_drop stringappend_59_0 stringappend_61_0) in
                            if ((case ((sep_matches_prefix stringappend_62_0)) of
                                SOME (stringappend_63_0,stringappend_64_0) =>
                                 let stringappend_65_0 =
                                   (string_drop stringappend_62_0 stringappend_64_0) in
                                 if ((case ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_65_0
                                              :  (( 13 words$word # ii))option)) of
                                     SOME (stringappend_66_0,stringappend_67_0) => 
  (case ((string_drop stringappend_65_0 stringappend_67_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_49_0) =
       ((case ((btype_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_48_0,stringappend_49_0) => (stringappend_48_0, stringappend_49_0)
       )) in
     let stringappend_50_0 = (string_drop stringappend_0_0 stringappend_49_0) in  
  (case
  (case ((spc_matches_prefix stringappend_50_0)) of
        SOME (stringappend_51_0,stringappend_52_0) => (stringappend_51_0, stringappend_52_0)
  ) of
      (() , stringappend_52_0) =>
  let stringappend_53_0 = (string_drop stringappend_50_0 stringappend_52_0) in
  let (rs1, stringappend_55_0) =
      ((case ((reg_name_matches_prefix stringappend_53_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_54_0,stringappend_55_0) => (stringappend_54_0, stringappend_55_0)
       )) in
  let stringappend_56_0 = (string_drop stringappend_53_0 stringappend_55_0) in
  (case
  (case ((sep_matches_prefix stringappend_56_0)) of
        SOME (stringappend_57_0,stringappend_58_0) => (stringappend_57_0, stringappend_58_0)
  ) of
      (() , stringappend_58_0) =>
  let stringappend_59_0 = (string_drop stringappend_56_0 stringappend_58_0) in
  let (rs2, stringappend_61_0) =
      ((case ((reg_name_matches_prefix stringappend_59_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_60_0,stringappend_61_0) => (stringappend_60_0, stringappend_61_0)
       )) in
  let stringappend_62_0 = (string_drop stringappend_59_0 stringappend_61_0) in
  (case
  (case ((sep_matches_prefix stringappend_62_0)) of
        SOME (stringappend_63_0,stringappend_64_0) => (stringappend_63_0, stringappend_64_0)
  ) of
      (() , stringappend_64_0) =>
  let stringappend_65_0 = (string_drop stringappend_62_0 stringappend_64_0) in
  let (imm, stringappend_67_0) =
      ((case ((hex_bits_13_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_65_0 : (( 13 words$word # ii)) option)) of
             SOME (stringappend_66_0,stringappend_67_0) => (stringappend_66_0, stringappend_67_0)
       )) in
  (case ((string_drop stringappend_65_0 stringappend_67_0)) of
        s_ => SOME
                (BTYPE (imm,rs2,rs1,op), ((string_length arg_)) -
                                           ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((itype_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_69_0,stringappend_70_0) =>
        let stringappend_71_0 = (string_drop stringappend_0_0 stringappend_70_0) in
        if ((case ((spc_matches_prefix stringappend_71_0)) of
            SOME (stringappend_72_0,stringappend_73_0) =>
             let stringappend_74_0 = (string_drop stringappend_71_0 stringappend_73_0) in
             if ((case ((reg_name_matches_prefix stringappend_74_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_75_0,stringappend_76_0) =>
                  let stringappend_77_0 = (string_drop stringappend_74_0 stringappend_76_0) in
                  if ((case ((sep_matches_prefix stringappend_77_0)) of
                      SOME (stringappend_78_0,stringappend_79_0) =>
                       let stringappend_80_0 = (string_drop stringappend_77_0 stringappend_79_0) in
                       if ((case ((reg_name_matches_prefix stringappend_80_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_81_0,stringappend_82_0) =>
                            let stringappend_83_0 = (string_drop stringappend_80_0 stringappend_82_0) in
                            if ((case ((sep_matches_prefix stringappend_83_0)) of
                                SOME (stringappend_84_0,stringappend_85_0) =>
                                 let stringappend_86_0 =
                                   (string_drop stringappend_83_0 stringappend_85_0) in
                                 if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_86_0
                                              :  (( 12 words$word # ii))option)) of
                                     SOME (stringappend_87_0,stringappend_88_0) => 
  (case ((string_drop stringappend_86_0 stringappend_88_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_70_0) =
       ((case ((itype_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_69_0,stringappend_70_0) => (stringappend_69_0, stringappend_70_0)
       )) in
     let stringappend_71_0 = (string_drop stringappend_0_0 stringappend_70_0) in  
  (case
  (case ((spc_matches_prefix stringappend_71_0)) of
        SOME (stringappend_72_0,stringappend_73_0) => (stringappend_72_0, stringappend_73_0)
  ) of
      (() , stringappend_73_0) =>
  let stringappend_74_0 = (string_drop stringappend_71_0 stringappend_73_0) in
  let (rd, stringappend_76_0) =
      ((case ((reg_name_matches_prefix stringappend_74_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_75_0,stringappend_76_0) => (stringappend_75_0, stringappend_76_0)
       )) in
  let stringappend_77_0 = (string_drop stringappend_74_0 stringappend_76_0) in
  (case
  (case ((sep_matches_prefix stringappend_77_0)) of
        SOME (stringappend_78_0,stringappend_79_0) => (stringappend_78_0, stringappend_79_0)
  ) of
      (() , stringappend_79_0) =>
  let stringappend_80_0 = (string_drop stringappend_77_0 stringappend_79_0) in
  let (rs1, stringappend_82_0) =
      ((case ((reg_name_matches_prefix stringappend_80_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_81_0,stringappend_82_0) => (stringappend_81_0, stringappend_82_0)
       )) in
  let stringappend_83_0 = (string_drop stringappend_80_0 stringappend_82_0) in
  (case
  (case ((sep_matches_prefix stringappend_83_0)) of
        SOME (stringappend_84_0,stringappend_85_0) => (stringappend_84_0, stringappend_85_0)
  ) of
      (() , stringappend_85_0) =>
  let stringappend_86_0 = (string_drop stringappend_83_0 stringappend_85_0) in
  let (imm, stringappend_88_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_86_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_87_0,stringappend_88_0) => (stringappend_87_0, stringappend_88_0)
       )) in
  (case ((string_drop stringappend_86_0 stringappend_88_0)) of
        s_ => SOME
                (ITYPE (imm,rs1,rd,op), ((string_length arg_)) -
                                          ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((shiftiop_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_90_0,stringappend_91_0) =>
        let stringappend_92_0 = (string_drop stringappend_0_0 stringappend_91_0) in
        if ((case ((spc_matches_prefix stringappend_92_0)) of
            SOME (stringappend_93_0,stringappend_94_0) =>
             let stringappend_95_0 = (string_drop stringappend_92_0 stringappend_94_0) in
             if ((case ((reg_name_matches_prefix stringappend_95_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_96_0,stringappend_97_0) =>
                  let stringappend_98_0 = (string_drop stringappend_95_0 stringappend_97_0) in
                  if ((case ((sep_matches_prefix stringappend_98_0)) of
                      SOME (stringappend_99_0,stringappend_100_0) =>
                       let stringappend_101_0 = (string_drop stringappend_98_0 stringappend_100_0) in
                       if ((case ((reg_name_matches_prefix stringappend_101_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_102_0,stringappend_103_0) =>
                            let stringappend_104_0 =
                              (string_drop stringappend_101_0 stringappend_103_0) in
                            if ((case ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_104_0
                                         :  (( 6 words$word # ii))option)) of
                                SOME (stringappend_105_0,stringappend_106_0) => 
  (case ((string_drop stringappend_104_0 stringappend_106_0)) of   s_ => T )
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_91_0) =
       ((case ((shiftiop_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_90_0,stringappend_91_0) => (stringappend_90_0, stringappend_91_0)
       )) in
     let stringappend_92_0 = (string_drop stringappend_0_0 stringappend_91_0) in  
  (case
  (case ((spc_matches_prefix stringappend_92_0)) of
        SOME (stringappend_93_0,stringappend_94_0) => (stringappend_93_0, stringappend_94_0)
  ) of
      (() , stringappend_94_0) =>
  let stringappend_95_0 = (string_drop stringappend_92_0 stringappend_94_0) in
  let (rd, stringappend_97_0) =
      ((case ((reg_name_matches_prefix stringappend_95_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_96_0,stringappend_97_0) => (stringappend_96_0, stringappend_97_0)
       )) in
  let stringappend_98_0 = (string_drop stringappend_95_0 stringappend_97_0) in
  (case
  (case ((sep_matches_prefix stringappend_98_0)) of
        SOME (stringappend_99_0,stringappend_100_0) => (stringappend_99_0, stringappend_100_0)
  ) of
      (() , stringappend_100_0) =>
  let stringappend_101_0 = (string_drop stringappend_98_0 stringappend_100_0) in
  let (rs1, stringappend_103_0) =
      ((case ((reg_name_matches_prefix stringappend_101_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_102_0,stringappend_103_0) => (stringappend_102_0, stringappend_103_0)
       )) in
  let stringappend_104_0 = (string_drop stringappend_101_0 stringappend_103_0) in
  let (shamt, stringappend_106_0) =
      ((case ((hex_bits_6_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_104_0 : (( 6 words$word # ii)) option)) of
             SOME (stringappend_105_0,stringappend_106_0) => (stringappend_105_0, stringappend_106_0)
       )) in
  (case ((string_drop stringappend_104_0 stringappend_106_0)) of
        s_ =>
  SOME
    (SHIFTIOP (shamt,rs1,rd,op), ((string_length arg_)) -
                                   ((string_length s_)))
  )
  )
  )
   else if ((case ((rtype_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_108_0,stringappend_109_0) =>
        let stringappend_110_0 = (string_drop stringappend_0_0 stringappend_109_0) in
        if ((case ((spc_matches_prefix stringappend_110_0)) of
            SOME (stringappend_111_0,stringappend_112_0) =>
             let stringappend_113_0 = (string_drop stringappend_110_0 stringappend_112_0) in
             if ((case ((reg_name_matches_prefix stringappend_113_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_114_0,stringappend_115_0) =>
                  let stringappend_116_0 = (string_drop stringappend_113_0 stringappend_115_0) in
                  if ((case ((sep_matches_prefix stringappend_116_0)) of
                      SOME (stringappend_117_0,stringappend_118_0) =>
                       let stringappend_119_0 = (string_drop stringappend_116_0 stringappend_118_0) in
                       if ((case ((reg_name_matches_prefix stringappend_119_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_120_0,stringappend_121_0) =>
                            let stringappend_122_0 =
                              (string_drop stringappend_119_0 stringappend_121_0) in
                            if ((case ((sep_matches_prefix stringappend_122_0)) of
                                SOME (stringappend_123_0,stringappend_124_0) =>
                                 let stringappend_125_0 =
                                   (string_drop stringappend_122_0 stringappend_124_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_125_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_126_0,stringappend_127_0) => 
  (case ((string_drop stringappend_125_0 stringappend_127_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_109_0) =
       ((case ((rtype_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_108_0,stringappend_109_0) => (stringappend_108_0, stringappend_109_0)
       )) in
     let stringappend_110_0 = (string_drop stringappend_0_0 stringappend_109_0) in  
  (case
  (case ((spc_matches_prefix stringappend_110_0)) of
        SOME (stringappend_111_0,stringappend_112_0) => (stringappend_111_0, stringappend_112_0)
  ) of
      (() , stringappend_112_0) =>
  let stringappend_113_0 = (string_drop stringappend_110_0 stringappend_112_0) in
  let (rd, stringappend_115_0) =
      ((case ((reg_name_matches_prefix stringappend_113_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_114_0,stringappend_115_0) => (stringappend_114_0, stringappend_115_0)
       )) in
  let stringappend_116_0 = (string_drop stringappend_113_0 stringappend_115_0) in
  (case
  (case ((sep_matches_prefix stringappend_116_0)) of
        SOME (stringappend_117_0,stringappend_118_0) => (stringappend_117_0, stringappend_118_0)
  ) of
      (() , stringappend_118_0) =>
  let stringappend_119_0 = (string_drop stringappend_116_0 stringappend_118_0) in
  let (rs1, stringappend_121_0) =
      ((case ((reg_name_matches_prefix stringappend_119_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_120_0,stringappend_121_0) => (stringappend_120_0, stringappend_121_0)
       )) in
  let stringappend_122_0 = (string_drop stringappend_119_0 stringappend_121_0) in
  (case
  (case ((sep_matches_prefix stringappend_122_0)) of
        SOME (stringappend_123_0,stringappend_124_0) => (stringappend_123_0, stringappend_124_0)
  ) of
      (() , stringappend_124_0) =>
  let stringappend_125_0 = (string_drop stringappend_122_0 stringappend_124_0) in
  let (rs2, stringappend_127_0) =
      ((case ((reg_name_matches_prefix stringappend_125_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_126_0,stringappend_127_0) => (stringappend_126_0, stringappend_127_0)
       )) in
  (case ((string_drop stringappend_125_0 stringappend_127_0)) of
        s_ => SOME
                (RTYPE (rs2,rs1,rd,op), ((string_length arg_)) -
                                          ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "l")) /\ (let stringappend_129_0 = (string_drop stringappend_0_0 ((string_length "l"))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_129_0)) of
                   SOME (stringappend_130_0,stringappend_131_0) =>
                    let stringappend_132_0 = (string_drop stringappend_129_0 stringappend_131_0) in
                    if ((case ((maybe_u_matches_prefix stringappend_132_0)) of
                        SOME (stringappend_133_0,stringappend_134_0) =>
                         let stringappend_135_0 = (string_drop stringappend_132_0 stringappend_134_0) in
                         if ((case ((maybe_aq_matches_prefix stringappend_135_0)) of
                             SOME (stringappend_136_0,stringappend_137_0) =>
                              let stringappend_138_0 =
                                (string_drop stringappend_135_0 stringappend_137_0) in
                              if ((case ((maybe_rl_matches_prefix stringappend_138_0)) of
                                  SOME (stringappend_139_0,stringappend_140_0) =>
                                   let stringappend_141_0 =
                                     (string_drop stringappend_138_0 stringappend_140_0) in
                                   if ((case ((spc_matches_prefix stringappend_141_0)) of
                                       SOME (stringappend_142_0,stringappend_143_0) =>
                                        let stringappend_144_0 =
                                          (string_drop stringappend_141_0 stringappend_143_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_144_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_145_0,stringappend_146_0) =>
                                             let stringappend_147_0 =
                                               (string_drop stringappend_144_0 stringappend_146_0) in
                                             if ((case ((sep_matches_prefix stringappend_147_0)) of
                                                 SOME (stringappend_148_0,stringappend_149_0) =>
                                                  let stringappend_150_0 =
                                                    (string_drop stringappend_147_0
                                                      stringappend_149_0) in
                                                  if ((case ((reg_name_matches_prefix
                                                                stringappend_150_0
                                                               :  (( 5 words$word # ii))option)) of
                                                      SOME (stringappend_151_0,stringappend_152_0) =>
                                                       let stringappend_153_0 =
                                                         (string_drop stringappend_150_0
                                                           stringappend_152_0) in
                                                       if ((case ((sep_matches_prefix
                                                                     stringappend_153_0)) of
                                                           SOME
                                                           (stringappend_154_0,stringappend_155_0) =>
                                                            let stringappend_156_0 =
                                                              (string_drop stringappend_153_0
                                                                stringappend_155_0) in
                                                            if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                          stringappend_156_0
                                                                         :  (( 12 words$word # ii))option)) of
                                                                SOME
                                                                (stringappend_157_0,stringappend_158_0) => 
  (case ((string_drop stringappend_156_0 stringappend_158_0)) of   s_ => T )
                                                              | NONE => F
                                                              )) then
                                                              T
                                                            else F
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_129_0 = (string_drop stringappend_0_0 ((string_length "l"))) in
     let (size1, stringappend_131_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_129_0)) of
         SOME (stringappend_130_0,stringappend_131_0) => (stringappend_130_0, stringappend_131_0)
       )) in
     let stringappend_132_0 = (string_drop stringappend_129_0 stringappend_131_0) in
     let (is_unsigned, stringappend_134_0) =
       ((case ((maybe_u_matches_prefix stringappend_132_0)) of
         SOME (stringappend_133_0,stringappend_134_0) => (stringappend_133_0, stringappend_134_0)
       )) in
     let stringappend_135_0 = (string_drop stringappend_132_0 stringappend_134_0) in
     let (aq, stringappend_137_0) =
       ((case ((maybe_aq_matches_prefix stringappend_135_0)) of
         SOME (stringappend_136_0,stringappend_137_0) => (stringappend_136_0, stringappend_137_0)
       )) in
     let stringappend_138_0 = (string_drop stringappend_135_0 stringappend_137_0) in
     let (rl, stringappend_140_0) =
       ((case ((maybe_rl_matches_prefix stringappend_138_0)) of
         SOME (stringappend_139_0,stringappend_140_0) => (stringappend_139_0, stringappend_140_0)
       )) in
     let stringappend_141_0 = (string_drop stringappend_138_0 stringappend_140_0) in  
  (case
  (case ((spc_matches_prefix stringappend_141_0)) of
        SOME (stringappend_142_0,stringappend_143_0) => (stringappend_142_0, stringappend_143_0)
  ) of
      (() , stringappend_143_0) =>
  let stringappend_144_0 = (string_drop stringappend_141_0 stringappend_143_0) in
  let (rd, stringappend_146_0) =
      ((case ((reg_name_matches_prefix stringappend_144_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_145_0,stringappend_146_0) => (stringappend_145_0, stringappend_146_0)
       )) in
  let stringappend_147_0 = (string_drop stringappend_144_0 stringappend_146_0) in
  (case
  (case ((sep_matches_prefix stringappend_147_0)) of
        SOME (stringappend_148_0,stringappend_149_0) => (stringappend_148_0, stringappend_149_0)
  ) of
      (() , stringappend_149_0) =>
  let stringappend_150_0 = (string_drop stringappend_147_0 stringappend_149_0) in
  let (rs1, stringappend_152_0) =
      ((case ((reg_name_matches_prefix stringappend_150_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_151_0,stringappend_152_0) => (stringappend_151_0, stringappend_152_0)
       )) in
  let stringappend_153_0 = (string_drop stringappend_150_0 stringappend_152_0) in
  (case
  (case ((sep_matches_prefix stringappend_153_0)) of
        SOME (stringappend_154_0,stringappend_155_0) => (stringappend_154_0, stringappend_155_0)
  ) of
      (() , stringappend_155_0) =>
  let stringappend_156_0 = (string_drop stringappend_153_0 stringappend_155_0) in
  let (imm, stringappend_158_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_156_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_157_0,stringappend_158_0) => (stringappend_157_0, stringappend_158_0)
       )) in
  (case ((string_drop stringappend_156_0 stringappend_158_0)) of
        s_ =>
  SOME
    (LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl),
    ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "s")) /\ (let stringappend_160_0 = (string_drop stringappend_0_0 ((string_length "s"))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_160_0)) of
                   SOME (stringappend_161_0,stringappend_162_0) =>
                    let stringappend_163_0 = (string_drop stringappend_160_0 stringappend_162_0) in
                    if ((case ((maybe_aq_matches_prefix stringappend_163_0)) of
                        SOME (stringappend_164_0,stringappend_165_0) =>
                         let stringappend_166_0 = (string_drop stringappend_163_0 stringappend_165_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_166_0)) of
                             SOME (stringappend_167_0,stringappend_168_0) =>
                              let stringappend_169_0 =
                                (string_drop stringappend_166_0 stringappend_168_0) in
                              if ((case ((spc_matches_prefix stringappend_169_0)) of
                                  SOME (stringappend_170_0,stringappend_171_0) =>
                                   let stringappend_172_0 =
                                     (string_drop stringappend_169_0 stringappend_171_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_172_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_173_0,stringappend_174_0) =>
                                        let stringappend_175_0 =
                                          (string_drop stringappend_172_0 stringappend_174_0) in
                                        if ((case ((sep_matches_prefix stringappend_175_0)) of
                                            SOME (stringappend_176_0,stringappend_177_0) =>
                                             let stringappend_178_0 =
                                               (string_drop stringappend_175_0 stringappend_177_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_178_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_179_0,stringappend_180_0) =>
                                                  let stringappend_181_0 =
                                                    (string_drop stringappend_178_0
                                                      stringappend_180_0) in
                                                  if ((case ((sep_matches_prefix stringappend_181_0)) of
                                                      SOME (stringappend_182_0,stringappend_183_0) =>
                                                       let stringappend_184_0 =
                                                         (string_drop stringappend_181_0
                                                           stringappend_183_0) in
                                                       if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                     stringappend_184_0
                                                                    :  (( 12 words$word # ii))option)) of
                                                           SOME
                                                           (stringappend_185_0,stringappend_186_0) => 
  (case ((string_drop stringappend_184_0 stringappend_186_0)) of   s_ => T )
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_160_0 = (string_drop stringappend_0_0 ((string_length "s"))) in
     let (size1, stringappend_162_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_160_0)) of
         SOME (stringappend_161_0,stringappend_162_0) => (stringappend_161_0, stringappend_162_0)
       )) in
     let stringappend_163_0 = (string_drop stringappend_160_0 stringappend_162_0) in
     let (aq, stringappend_165_0) =
       ((case ((maybe_aq_matches_prefix stringappend_163_0)) of
         SOME (stringappend_164_0,stringappend_165_0) => (stringappend_164_0, stringappend_165_0)
       )) in
     let stringappend_166_0 = (string_drop stringappend_163_0 stringappend_165_0) in
     let (rl, stringappend_168_0) =
       ((case ((maybe_rl_matches_prefix stringappend_166_0)) of
         SOME (stringappend_167_0,stringappend_168_0) => (stringappend_167_0, stringappend_168_0)
       )) in
     let stringappend_169_0 = (string_drop stringappend_166_0 stringappend_168_0) in  
  (case
  (case ((spc_matches_prefix stringappend_169_0)) of
        SOME (stringappend_170_0,stringappend_171_0) => (stringappend_170_0, stringappend_171_0)
  ) of
      (() , stringappend_171_0) =>
  let stringappend_172_0 = (string_drop stringappend_169_0 stringappend_171_0) in
  let (rd, stringappend_174_0) =
      ((case ((reg_name_matches_prefix stringappend_172_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_173_0,stringappend_174_0) => (stringappend_173_0, stringappend_174_0)
       )) in
  let stringappend_175_0 = (string_drop stringappend_172_0 stringappend_174_0) in
  (case
  (case ((sep_matches_prefix stringappend_175_0)) of
        SOME (stringappend_176_0,stringappend_177_0) => (stringappend_176_0, stringappend_177_0)
  ) of
      (() , stringappend_177_0) =>
  let stringappend_178_0 = (string_drop stringappend_175_0 stringappend_177_0) in
  let (rs1, stringappend_180_0) =
      ((case ((reg_name_matches_prefix stringappend_178_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_179_0,stringappend_180_0) => (stringappend_179_0, stringappend_180_0)
       )) in
  let stringappend_181_0 = (string_drop stringappend_178_0 stringappend_180_0) in
  (case
  (case ((sep_matches_prefix stringappend_181_0)) of
        SOME (stringappend_182_0,stringappend_183_0) => (stringappend_182_0, stringappend_183_0)
  ) of
      (() , stringappend_183_0) =>
  let stringappend_184_0 = (string_drop stringappend_181_0 stringappend_183_0) in
  let (imm, stringappend_186_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_184_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_185_0,stringappend_186_0) => (stringappend_185_0, stringappend_186_0)
       )) in
  (case ((string_drop stringappend_184_0 stringappend_186_0)) of
        s_ =>
  SOME
    (STORE (imm,rs1,rd,size1,aq,rl),
    ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "addiw")) /\ (let stringappend_188_0 = (string_drop stringappend_0_0 ((string_length "addiw"))) in
               if ((case ((spc_matches_prefix stringappend_188_0)) of
                   SOME (stringappend_189_0,stringappend_190_0) =>
                    let stringappend_191_0 = (string_drop stringappend_188_0 stringappend_190_0) in
                    if ((case ((reg_name_matches_prefix stringappend_191_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_192_0,stringappend_193_0) =>
                         let stringappend_194_0 = (string_drop stringappend_191_0 stringappend_193_0) in
                         if ((case ((sep_matches_prefix stringappend_194_0)) of
                             SOME (stringappend_195_0,stringappend_196_0) =>
                              let stringappend_197_0 =
                                (string_drop stringappend_194_0 stringappend_196_0) in
                              if ((case ((reg_name_matches_prefix stringappend_197_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_198_0,stringappend_199_0) =>
                                   let stringappend_200_0 =
                                     (string_drop stringappend_197_0 stringappend_199_0) in
                                   if ((case ((sep_matches_prefix stringappend_200_0)) of
                                       SOME (stringappend_201_0,stringappend_202_0) =>
                                        let stringappend_203_0 =
                                          (string_drop stringappend_200_0 stringappend_202_0) in
                                        if ((case ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_203_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_204_0,stringappend_205_0) => 
  (case ((string_drop stringappend_203_0 stringappend_205_0)) of   s_ => T )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_188_0 = (string_drop stringappend_0_0 ((string_length "addiw"))) in  
  (case
  (case ((spc_matches_prefix stringappend_188_0)) of
        SOME (stringappend_189_0,stringappend_190_0) => (stringappend_189_0, stringappend_190_0)
  ) of
      (() , stringappend_190_0) =>
  let stringappend_191_0 = (string_drop stringappend_188_0 stringappend_190_0) in
  let (rd, stringappend_193_0) =
      ((case ((reg_name_matches_prefix stringappend_191_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_192_0,stringappend_193_0) => (stringappend_192_0, stringappend_193_0)
       )) in
  let stringappend_194_0 = (string_drop stringappend_191_0 stringappend_193_0) in
  (case
  (case ((sep_matches_prefix stringappend_194_0)) of
        SOME (stringappend_195_0,stringappend_196_0) => (stringappend_195_0, stringappend_196_0)
  ) of
      (() , stringappend_196_0) =>
  let stringappend_197_0 = (string_drop stringappend_194_0 stringappend_196_0) in
  let (rs1, stringappend_199_0) =
      ((case ((reg_name_matches_prefix stringappend_197_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_198_0,stringappend_199_0) => (stringappend_198_0, stringappend_199_0)
       )) in
  let stringappend_200_0 = (string_drop stringappend_197_0 stringappend_199_0) in
  (case
  (case ((sep_matches_prefix stringappend_200_0)) of
        SOME (stringappend_201_0,stringappend_202_0) => (stringappend_201_0, stringappend_202_0)
  ) of
      (() , stringappend_202_0) =>
  let stringappend_203_0 = (string_drop stringappend_200_0 stringappend_202_0) in
  let (imm, stringappend_205_0) =
      ((case ((hex_bits_12_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_203_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_204_0,stringappend_205_0) => (stringappend_204_0, stringappend_205_0)
       )) in
  (case ((string_drop stringappend_203_0 stringappend_205_0)) of
        s_ => SOME
                (ADDIW (imm,rs1,rd), ((string_length arg_)) -
                                       ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((shiftw_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_207_0,stringappend_208_0) =>
        let stringappend_209_0 = (string_drop stringappend_0_0 stringappend_208_0) in
        if ((case ((spc_matches_prefix stringappend_209_0)) of
            SOME (stringappend_210_0,stringappend_211_0) =>
             let stringappend_212_0 = (string_drop stringappend_209_0 stringappend_211_0) in
             if ((case ((reg_name_matches_prefix stringappend_212_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_213_0,stringappend_214_0) =>
                  let stringappend_215_0 = (string_drop stringappend_212_0 stringappend_214_0) in
                  if ((case ((sep_matches_prefix stringappend_215_0)) of
                      SOME (stringappend_216_0,stringappend_217_0) =>
                       let stringappend_218_0 = (string_drop stringappend_215_0 stringappend_217_0) in
                       if ((case ((reg_name_matches_prefix stringappend_218_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_219_0,stringappend_220_0) =>
                            let stringappend_221_0 =
                              (string_drop stringappend_218_0 stringappend_220_0) in
                            if ((case ((sep_matches_prefix stringappend_221_0)) of
                                SOME (stringappend_222_0,stringappend_223_0) =>
                                 let stringappend_224_0 =
                                   (string_drop stringappend_221_0 stringappend_223_0) in
                                 if ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_224_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_225_0,stringappend_226_0) => 
  (case ((string_drop stringappend_224_0 stringappend_226_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_208_0) =
       ((case ((shiftw_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_207_0,stringappend_208_0) => (stringappend_207_0, stringappend_208_0)
       )) in
     let stringappend_209_0 = (string_drop stringappend_0_0 stringappend_208_0) in  
  (case
  (case ((spc_matches_prefix stringappend_209_0)) of
        SOME (stringappend_210_0,stringappend_211_0) => (stringappend_210_0, stringappend_211_0)
  ) of
      (() , stringappend_211_0) =>
  let stringappend_212_0 = (string_drop stringappend_209_0 stringappend_211_0) in
  let (rd, stringappend_214_0) =
      ((case ((reg_name_matches_prefix stringappend_212_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_213_0,stringappend_214_0) => (stringappend_213_0, stringappend_214_0)
       )) in
  let stringappend_215_0 = (string_drop stringappend_212_0 stringappend_214_0) in
  (case
  (case ((sep_matches_prefix stringappend_215_0)) of
        SOME (stringappend_216_0,stringappend_217_0) => (stringappend_216_0, stringappend_217_0)
  ) of
      (() , stringappend_217_0) =>
  let stringappend_218_0 = (string_drop stringappend_215_0 stringappend_217_0) in
  let (rs1, stringappend_220_0) =
      ((case ((reg_name_matches_prefix stringappend_218_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_219_0,stringappend_220_0) => (stringappend_219_0, stringappend_220_0)
       )) in
  let stringappend_221_0 = (string_drop stringappend_218_0 stringappend_220_0) in
  (case
  (case ((sep_matches_prefix stringappend_221_0)) of
        SOME (stringappend_222_0,stringappend_223_0) => (stringappend_222_0, stringappend_223_0)
  ) of
      (() , stringappend_223_0) =>
  let stringappend_224_0 = (string_drop stringappend_221_0 stringappend_223_0) in
  let (shamt, stringappend_226_0) =
      ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_224_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_225_0,stringappend_226_0) => (stringappend_225_0, stringappend_226_0)
       )) in
  (case ((string_drop stringappend_224_0 stringappend_226_0)) of
        s_ =>
  SOME
    (SHIFTW (shamt,rs1,rd,op), ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((rtypew_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_228_0,stringappend_229_0) =>
        let stringappend_230_0 = (string_drop stringappend_0_0 stringappend_229_0) in
        if ((case ((spc_matches_prefix stringappend_230_0)) of
            SOME (stringappend_231_0,stringappend_232_0) =>
             let stringappend_233_0 = (string_drop stringappend_230_0 stringappend_232_0) in
             if ((case ((reg_name_matches_prefix stringappend_233_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_234_0,stringappend_235_0) =>
                  let stringappend_236_0 = (string_drop stringappend_233_0 stringappend_235_0) in
                  if ((case ((sep_matches_prefix stringappend_236_0)) of
                      SOME (stringappend_237_0,stringappend_238_0) =>
                       let stringappend_239_0 = (string_drop stringappend_236_0 stringappend_238_0) in
                       if ((case ((reg_name_matches_prefix stringappend_239_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_240_0,stringappend_241_0) =>
                            let stringappend_242_0 =
                              (string_drop stringappend_239_0 stringappend_241_0) in
                            if ((case ((sep_matches_prefix stringappend_242_0)) of
                                SOME (stringappend_243_0,stringappend_244_0) =>
                                 let stringappend_245_0 =
                                   (string_drop stringappend_242_0 stringappend_244_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_245_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_246_0,stringappend_247_0) => 
  (case ((string_drop stringappend_245_0 stringappend_247_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_229_0) =
       ((case ((rtypew_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_228_0,stringappend_229_0) => (stringappend_228_0, stringappend_229_0)
       )) in
     let stringappend_230_0 = (string_drop stringappend_0_0 stringappend_229_0) in  
  (case
  (case ((spc_matches_prefix stringappend_230_0)) of
        SOME (stringappend_231_0,stringappend_232_0) => (stringappend_231_0, stringappend_232_0)
  ) of
      (() , stringappend_232_0) =>
  let stringappend_233_0 = (string_drop stringappend_230_0 stringappend_232_0) in
  let (rd, stringappend_235_0) =
      ((case ((reg_name_matches_prefix stringappend_233_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_234_0,stringappend_235_0) => (stringappend_234_0, stringappend_235_0)
       )) in
  let stringappend_236_0 = (string_drop stringappend_233_0 stringappend_235_0) in
  (case
  (case ((sep_matches_prefix stringappend_236_0)) of
        SOME (stringappend_237_0,stringappend_238_0) => (stringappend_237_0, stringappend_238_0)
  ) of
      (() , stringappend_238_0) =>
  let stringappend_239_0 = (string_drop stringappend_236_0 stringappend_238_0) in
  let (rs1, stringappend_241_0) =
      ((case ((reg_name_matches_prefix stringappend_239_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_240_0,stringappend_241_0) => (stringappend_240_0, stringappend_241_0)
       )) in
  let stringappend_242_0 = (string_drop stringappend_239_0 stringappend_241_0) in
  (case
  (case ((sep_matches_prefix stringappend_242_0)) of
        SOME (stringappend_243_0,stringappend_244_0) => (stringappend_243_0, stringappend_244_0)
  ) of
      (() , stringappend_244_0) =>
  let stringappend_245_0 = (string_drop stringappend_242_0 stringappend_244_0) in
  let (rs2, stringappend_247_0) =
      ((case ((reg_name_matches_prefix stringappend_245_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_246_0,stringappend_247_0) => (stringappend_246_0, stringappend_247_0)
       )) in
  (case ((string_drop stringappend_245_0 stringappend_247_0)) of
        s_ => SOME
                (RTYPEW (rs2,rs1,rd,op), ((string_length arg_)) -
                                           ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((mul_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_249_0,stringappend_250_0) =>
        let stringappend_251_0 = (string_drop stringappend_0_0 stringappend_250_0) in
        if ((case ((spc_matches_prefix stringappend_251_0)) of
            SOME (stringappend_252_0,stringappend_253_0) =>
             let stringappend_254_0 = (string_drop stringappend_251_0 stringappend_253_0) in
             if ((case ((reg_name_matches_prefix stringappend_254_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_255_0,stringappend_256_0) =>
                  let stringappend_257_0 = (string_drop stringappend_254_0 stringappend_256_0) in
                  if ((case ((sep_matches_prefix stringappend_257_0)) of
                      SOME (stringappend_258_0,stringappend_259_0) =>
                       let stringappend_260_0 = (string_drop stringappend_257_0 stringappend_259_0) in
                       if ((case ((reg_name_matches_prefix stringappend_260_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_261_0,stringappend_262_0) =>
                            let stringappend_263_0 =
                              (string_drop stringappend_260_0 stringappend_262_0) in
                            if ((case ((sep_matches_prefix stringappend_263_0)) of
                                SOME (stringappend_264_0,stringappend_265_0) =>
                                 let stringappend_266_0 =
                                   (string_drop stringappend_263_0 stringappend_265_0) in
                                 if ((case ((reg_name_matches_prefix stringappend_266_0
                                              :  (( 5 words$word # ii))option)) of
                                     SOME (stringappend_267_0,stringappend_268_0) => 
  (case ((string_drop stringappend_266_0 stringappend_268_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let ((high, signed1, signed2), stringappend_250_0) =
       ((case ((mul_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_249_0,stringappend_250_0) => (stringappend_249_0, stringappend_250_0)
       )) in
     let stringappend_251_0 = (string_drop stringappend_0_0 stringappend_250_0) in  
  (case
  (case ((spc_matches_prefix stringappend_251_0)) of
        SOME (stringappend_252_0,stringappend_253_0) => (stringappend_252_0, stringappend_253_0)
  ) of
      (() , stringappend_253_0) =>
  let stringappend_254_0 = (string_drop stringappend_251_0 stringappend_253_0) in
  let (rd, stringappend_256_0) =
      ((case ((reg_name_matches_prefix stringappend_254_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_255_0,stringappend_256_0) => (stringappend_255_0, stringappend_256_0)
       )) in
  let stringappend_257_0 = (string_drop stringappend_254_0 stringappend_256_0) in
  (case
  (case ((sep_matches_prefix stringappend_257_0)) of
        SOME (stringappend_258_0,stringappend_259_0) => (stringappend_258_0, stringappend_259_0)
  ) of
      (() , stringappend_259_0) =>
  let stringappend_260_0 = (string_drop stringappend_257_0 stringappend_259_0) in
  let (rs1, stringappend_262_0) =
      ((case ((reg_name_matches_prefix stringappend_260_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_261_0,stringappend_262_0) => (stringappend_261_0, stringappend_262_0)
       )) in
  let stringappend_263_0 = (string_drop stringappend_260_0 stringappend_262_0) in
  (case
  (case ((sep_matches_prefix stringappend_263_0)) of
        SOME (stringappend_264_0,stringappend_265_0) => (stringappend_264_0, stringappend_265_0)
  ) of
      (() , stringappend_265_0) =>
  let stringappend_266_0 = (string_drop stringappend_263_0 stringappend_265_0) in
  let (rs2, stringappend_268_0) =
      ((case ((reg_name_matches_prefix stringappend_266_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_267_0,stringappend_268_0) => (stringappend_267_0, stringappend_268_0)
       )) in
  (case ((string_drop stringappend_266_0 stringappend_268_0)) of
        s_ =>
  SOME
    (MUL (rs2,rs1,rd,high,signed1,signed2),
    ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "div")) /\ (let stringappend_270_0 = (string_drop stringappend_0_0 ((string_length "div"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_270_0)) of
                   SOME (stringappend_271_0,stringappend_272_0) =>
                    let stringappend_273_0 = (string_drop stringappend_270_0 stringappend_272_0) in
                    if ((case ((spc_matches_prefix stringappend_273_0)) of
                        SOME (stringappend_274_0,stringappend_275_0) =>
                         let stringappend_276_0 = (string_drop stringappend_273_0 stringappend_275_0) in
                         if ((case ((reg_name_matches_prefix stringappend_276_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_277_0,stringappend_278_0) =>
                              let stringappend_279_0 =
                                (string_drop stringappend_276_0 stringappend_278_0) in
                              if ((case ((sep_matches_prefix stringappend_279_0)) of
                                  SOME (stringappend_280_0,stringappend_281_0) =>
                                   let stringappend_282_0 =
                                     (string_drop stringappend_279_0 stringappend_281_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_282_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_283_0,stringappend_284_0) =>
                                        let stringappend_285_0 =
                                          (string_drop stringappend_282_0 stringappend_284_0) in
                                        if ((case ((sep_matches_prefix stringappend_285_0)) of
                                            SOME (stringappend_286_0,stringappend_287_0) =>
                                             let stringappend_288_0 =
                                               (string_drop stringappend_285_0 stringappend_287_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_288_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_289_0,stringappend_290_0) => 
  (case ((string_drop stringappend_288_0 stringappend_290_0)) of   s_ => T )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_270_0 = (string_drop stringappend_0_0 ((string_length "div"))) in
     let (s, stringappend_272_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_270_0)) of
         SOME (stringappend_271_0,stringappend_272_0) => (stringappend_271_0, stringappend_272_0)
       )) in
     let stringappend_273_0 = (string_drop stringappend_270_0 stringappend_272_0) in  
  (case
  (case ((spc_matches_prefix stringappend_273_0)) of
        SOME (stringappend_274_0,stringappend_275_0) => (stringappend_274_0, stringappend_275_0)
  ) of
      (() , stringappend_275_0) =>
  let stringappend_276_0 = (string_drop stringappend_273_0 stringappend_275_0) in
  let (rd, stringappend_278_0) =
      ((case ((reg_name_matches_prefix stringappend_276_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_277_0,stringappend_278_0) => (stringappend_277_0, stringappend_278_0)
       )) in
  let stringappend_279_0 = (string_drop stringappend_276_0 stringappend_278_0) in
  (case
  (case ((sep_matches_prefix stringappend_279_0)) of
        SOME (stringappend_280_0,stringappend_281_0) => (stringappend_280_0, stringappend_281_0)
  ) of
      (() , stringappend_281_0) =>
  let stringappend_282_0 = (string_drop stringappend_279_0 stringappend_281_0) in
  let (rs1, stringappend_284_0) =
      ((case ((reg_name_matches_prefix stringappend_282_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_283_0,stringappend_284_0) => (stringappend_283_0, stringappend_284_0)
       )) in
  let stringappend_285_0 = (string_drop stringappend_282_0 stringappend_284_0) in
  (case
  (case ((sep_matches_prefix stringappend_285_0)) of
        SOME (stringappend_286_0,stringappend_287_0) => (stringappend_286_0, stringappend_287_0)
  ) of
      (() , stringappend_287_0) =>
  let stringappend_288_0 = (string_drop stringappend_285_0 stringappend_287_0) in
  let (rs2, stringappend_290_0) =
      ((case ((reg_name_matches_prefix stringappend_288_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_289_0,stringappend_290_0) => (stringappend_289_0, stringappend_290_0)
       )) in
  (case ((string_drop stringappend_288_0 stringappend_290_0)) of
        s_ => SOME
                (DIV0 (rs2,rs1,rd,s), ((string_length arg_)) -
                                        ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "rem")) /\ (let stringappend_292_0 = (string_drop stringappend_0_0 ((string_length "rem"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_292_0)) of
                   SOME (stringappend_293_0,stringappend_294_0) =>
                    let stringappend_295_0 = (string_drop stringappend_292_0 stringappend_294_0) in
                    if ((case ((spc_matches_prefix stringappend_295_0)) of
                        SOME (stringappend_296_0,stringappend_297_0) =>
                         let stringappend_298_0 = (string_drop stringappend_295_0 stringappend_297_0) in
                         if ((case ((reg_name_matches_prefix stringappend_298_0
                                      :  (( 5 words$word # ii))option)) of
                             SOME (stringappend_299_0,stringappend_300_0) =>
                              let stringappend_301_0 =
                                (string_drop stringappend_298_0 stringappend_300_0) in
                              if ((case ((sep_matches_prefix stringappend_301_0)) of
                                  SOME (stringappend_302_0,stringappend_303_0) =>
                                   let stringappend_304_0 =
                                     (string_drop stringappend_301_0 stringappend_303_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_304_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_305_0,stringappend_306_0) =>
                                        let stringappend_307_0 =
                                          (string_drop stringappend_304_0 stringappend_306_0) in
                                        if ((case ((sep_matches_prefix stringappend_307_0)) of
                                            SOME (stringappend_308_0,stringappend_309_0) =>
                                             let stringappend_310_0 =
                                               (string_drop stringappend_307_0 stringappend_309_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_310_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_311_0,stringappend_312_0) => 
  (case ((string_drop stringappend_310_0 stringappend_312_0)) of   s_ => T )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_292_0 = (string_drop stringappend_0_0 ((string_length "rem"))) in
     let (s, stringappend_294_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_292_0)) of
         SOME (stringappend_293_0,stringappend_294_0) => (stringappend_293_0, stringappend_294_0)
       )) in
     let stringappend_295_0 = (string_drop stringappend_292_0 stringappend_294_0) in  
  (case
  (case ((spc_matches_prefix stringappend_295_0)) of
        SOME (stringappend_296_0,stringappend_297_0) => (stringappend_296_0, stringappend_297_0)
  ) of
      (() , stringappend_297_0) =>
  let stringappend_298_0 = (string_drop stringappend_295_0 stringappend_297_0) in
  let (rd, stringappend_300_0) =
      ((case ((reg_name_matches_prefix stringappend_298_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_299_0,stringappend_300_0) => (stringappend_299_0, stringappend_300_0)
       )) in
  let stringappend_301_0 = (string_drop stringappend_298_0 stringappend_300_0) in
  (case
  (case ((sep_matches_prefix stringappend_301_0)) of
        SOME (stringappend_302_0,stringappend_303_0) => (stringappend_302_0, stringappend_303_0)
  ) of
      (() , stringappend_303_0) =>
  let stringappend_304_0 = (string_drop stringappend_301_0 stringappend_303_0) in
  let (rs1, stringappend_306_0) =
      ((case ((reg_name_matches_prefix stringappend_304_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_305_0,stringappend_306_0) => (stringappend_305_0, stringappend_306_0)
       )) in
  let stringappend_307_0 = (string_drop stringappend_304_0 stringappend_306_0) in
  (case
  (case ((sep_matches_prefix stringappend_307_0)) of
        SOME (stringappend_308_0,stringappend_309_0) => (stringappend_308_0, stringappend_309_0)
  ) of
      (() , stringappend_309_0) =>
  let stringappend_310_0 = (string_drop stringappend_307_0 stringappend_309_0) in
  let (rs2, stringappend_312_0) =
      ((case ((reg_name_matches_prefix stringappend_310_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_311_0,stringappend_312_0) => (stringappend_311_0, stringappend_312_0)
       )) in
  (case ((string_drop stringappend_310_0 stringappend_312_0)) of
        s_ => SOME
                (REM (rs2,rs1,rd,s), ((string_length arg_)) -
                                       ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "mulw")) /\ (let stringappend_314_0 = (string_drop stringappend_0_0 ((string_length "mulw"))) in
               if ((case ((spc_matches_prefix stringappend_314_0)) of
                   SOME (stringappend_315_0,stringappend_316_0) =>
                    let stringappend_317_0 = (string_drop stringappend_314_0 stringappend_316_0) in
                    if ((case ((reg_name_matches_prefix stringappend_317_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_318_0,stringappend_319_0) =>
                         let stringappend_320_0 = (string_drop stringappend_317_0 stringappend_319_0) in
                         if ((case ((sep_matches_prefix stringappend_320_0)) of
                             SOME (stringappend_321_0,stringappend_322_0) =>
                              let stringappend_323_0 =
                                (string_drop stringappend_320_0 stringappend_322_0) in
                              if ((case ((reg_name_matches_prefix stringappend_323_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_324_0,stringappend_325_0) =>
                                   let stringappend_326_0 =
                                     (string_drop stringappend_323_0 stringappend_325_0) in
                                   if ((case ((sep_matches_prefix stringappend_326_0)) of
                                       SOME (stringappend_327_0,stringappend_328_0) =>
                                        let stringappend_329_0 =
                                          (string_drop stringappend_326_0 stringappend_328_0) in
                                        if ((case ((reg_name_matches_prefix stringappend_329_0
                                                     :  (( 5 words$word # ii))option)) of
                                            SOME (stringappend_330_0,stringappend_331_0) => 
  (case ((string_drop stringappend_329_0 stringappend_331_0)) of   s_ => T )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_314_0 = (string_drop stringappend_0_0 ((string_length "mulw"))) in  
  (case
  (case ((spc_matches_prefix stringappend_314_0)) of
        SOME (stringappend_315_0,stringappend_316_0) => (stringappend_315_0, stringappend_316_0)
  ) of
      (() , stringappend_316_0) =>
  let stringappend_317_0 = (string_drop stringappend_314_0 stringappend_316_0) in
  let (rd, stringappend_319_0) =
      ((case ((reg_name_matches_prefix stringappend_317_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_318_0,stringappend_319_0) => (stringappend_318_0, stringappend_319_0)
       )) in
  let stringappend_320_0 = (string_drop stringappend_317_0 stringappend_319_0) in
  (case
  (case ((sep_matches_prefix stringappend_320_0)) of
        SOME (stringappend_321_0,stringappend_322_0) => (stringappend_321_0, stringappend_322_0)
  ) of
      (() , stringappend_322_0) =>
  let stringappend_323_0 = (string_drop stringappend_320_0 stringappend_322_0) in
  let (rs1, stringappend_325_0) =
      ((case ((reg_name_matches_prefix stringappend_323_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_324_0,stringappend_325_0) => (stringappend_324_0, stringappend_325_0)
       )) in
  let stringappend_326_0 = (string_drop stringappend_323_0 stringappend_325_0) in
  (case
  (case ((sep_matches_prefix stringappend_326_0)) of
        SOME (stringappend_327_0,stringappend_328_0) => (stringappend_327_0, stringappend_328_0)
  ) of
      (() , stringappend_328_0) =>
  let stringappend_329_0 = (string_drop stringappend_326_0 stringappend_328_0) in
  let (rs2, stringappend_331_0) =
      ((case ((reg_name_matches_prefix stringappend_329_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_330_0,stringappend_331_0) => (stringappend_330_0, stringappend_331_0)
       )) in
  (case ((string_drop stringappend_329_0 stringappend_331_0)) of
        s_ => SOME
                (MULW (rs2,rs1,rd), ((string_length arg_)) -
                                      ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "div")) /\ (let stringappend_333_0 = (string_drop stringappend_0_0 ((string_length "div"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_333_0)) of
                   SOME (stringappend_334_0,stringappend_335_0) =>
                    let stringappend_336_0 = (string_drop stringappend_333_0 stringappend_335_0) in
                    if (((((string_startswith stringappend_336_0 "w")) /\ (let stringappend_337_0 =
                             (string_drop stringappend_336_0 ((string_length "w"))) in
                           if ((case ((spc_matches_prefix stringappend_337_0)) of
                               SOME (stringappend_338_0,stringappend_339_0) =>
                                let stringappend_340_0 =
                                  (string_drop stringappend_337_0 stringappend_339_0) in
                                if ((case ((reg_name_matches_prefix stringappend_340_0
                                             :  (( 5 words$word # ii))option)) of
                                    SOME (stringappend_341_0,stringappend_342_0) =>
                                     let stringappend_343_0 =
                                       (string_drop stringappend_340_0 stringappend_342_0) in
                                     if ((case ((sep_matches_prefix stringappend_343_0)) of
                                         SOME (stringappend_344_0,stringappend_345_0) =>
                                          let stringappend_346_0 =
                                            (string_drop stringappend_343_0 stringappend_345_0) in
                                          if ((case ((reg_name_matches_prefix stringappend_346_0
                                                       :  (( 5 words$word # ii))option)) of
                                              SOME (stringappend_347_0,stringappend_348_0) =>
                                               let stringappend_349_0 =
                                                 (string_drop stringappend_346_0 stringappend_348_0) in
                                               if ((case ((sep_matches_prefix stringappend_349_0)) of
                                                   SOME (stringappend_350_0,stringappend_351_0) =>
                                                    let stringappend_352_0 =
                                                      (string_drop stringappend_349_0
                                                        stringappend_351_0) in
                                                    if ((case ((reg_name_matches_prefix
                                                                  stringappend_352_0
                                                                 :  (( 5 words$word # ii))option)) of
                                                        SOME (stringappend_353_0,stringappend_354_0) => 
  (case ((string_drop stringappend_352_0 stringappend_354_0)) of   s_ => T )
                                                      | NONE => F
                                                      )) then
                                                      T
                                                    else F
                                                 | NONE => F
                                                 )) then
                                                 T
                                               else F
                                            | NONE => F
                                            )) then
                                            T
                                          else F
                                       | NONE => F
                                       )) then
                                       T
                                     else F
                                  | NONE => F
                                  )) then
                                  T
                                else F
                             | NONE => F
                             )) then
                             T
                           else F)))) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_333_0 = (string_drop stringappend_0_0 ((string_length "div"))) in
     let (s, stringappend_335_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_333_0)) of
         SOME (stringappend_334_0,stringappend_335_0) => (stringappend_334_0, stringappend_335_0)
       )) in
     let stringappend_336_0 = (string_drop stringappend_333_0 stringappend_335_0) in
     let stringappend_337_0 = (string_drop stringappend_336_0 ((string_length "w"))) in  
  (case
  (case ((spc_matches_prefix stringappend_337_0)) of
        SOME (stringappend_338_0,stringappend_339_0) => (stringappend_338_0, stringappend_339_0)
  ) of
      (() , stringappend_339_0) =>
  let stringappend_340_0 = (string_drop stringappend_337_0 stringappend_339_0) in
  let (rd, stringappend_342_0) =
      ((case ((reg_name_matches_prefix stringappend_340_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_341_0,stringappend_342_0) => (stringappend_341_0, stringappend_342_0)
       )) in
  let stringappend_343_0 = (string_drop stringappend_340_0 stringappend_342_0) in
  (case
  (case ((sep_matches_prefix stringappend_343_0)) of
        SOME (stringappend_344_0,stringappend_345_0) => (stringappend_344_0, stringappend_345_0)
  ) of
      (() , stringappend_345_0) =>
  let stringappend_346_0 = (string_drop stringappend_343_0 stringappend_345_0) in
  let (rs1, stringappend_348_0) =
      ((case ((reg_name_matches_prefix stringappend_346_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_347_0,stringappend_348_0) => (stringappend_347_0, stringappend_348_0)
       )) in
  let stringappend_349_0 = (string_drop stringappend_346_0 stringappend_348_0) in
  (case
  (case ((sep_matches_prefix stringappend_349_0)) of
        SOME (stringappend_350_0,stringappend_351_0) => (stringappend_350_0, stringappend_351_0)
  ) of
      (() , stringappend_351_0) =>
  let stringappend_352_0 = (string_drop stringappend_349_0 stringappend_351_0) in
  let (rs2, stringappend_354_0) =
      ((case ((reg_name_matches_prefix stringappend_352_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_353_0,stringappend_354_0) => (stringappend_353_0, stringappend_354_0)
       )) in
  (case ((string_drop stringappend_352_0 stringappend_354_0)) of
        s_ => SOME
                (DIVW (rs2,rs1,rd,s), ((string_length arg_)) -
                                        ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "rem")) /\ (let stringappend_356_0 = (string_drop stringappend_0_0 ((string_length "rem"))) in
               if ((case ((maybe_not_u_matches_prefix stringappend_356_0)) of
                   SOME (stringappend_357_0,stringappend_358_0) =>
                    let stringappend_359_0 = (string_drop stringappend_356_0 stringappend_358_0) in
                    if (((((string_startswith stringappend_359_0 "w")) /\ (let stringappend_360_0 =
                             (string_drop stringappend_359_0 ((string_length "w"))) in
                           if ((case ((spc_matches_prefix stringappend_360_0)) of
                               SOME (stringappend_361_0,stringappend_362_0) =>
                                let stringappend_363_0 =
                                  (string_drop stringappend_360_0 stringappend_362_0) in
                                if ((case ((reg_name_matches_prefix stringappend_363_0
                                             :  (( 5 words$word # ii))option)) of
                                    SOME (stringappend_364_0,stringappend_365_0) =>
                                     let stringappend_366_0 =
                                       (string_drop stringappend_363_0 stringappend_365_0) in
                                     if ((case ((sep_matches_prefix stringappend_366_0)) of
                                         SOME (stringappend_367_0,stringappend_368_0) =>
                                          let stringappend_369_0 =
                                            (string_drop stringappend_366_0 stringappend_368_0) in
                                          if ((case ((reg_name_matches_prefix stringappend_369_0
                                                       :  (( 5 words$word # ii))option)) of
                                              SOME (stringappend_370_0,stringappend_371_0) =>
                                               let stringappend_372_0 =
                                                 (string_drop stringappend_369_0 stringappend_371_0) in
                                               if ((case ((sep_matches_prefix stringappend_372_0)) of
                                                   SOME (stringappend_373_0,stringappend_374_0) =>
                                                    let stringappend_375_0 =
                                                      (string_drop stringappend_372_0
                                                        stringappend_374_0) in
                                                    if ((case ((reg_name_matches_prefix
                                                                  stringappend_375_0
                                                                 :  (( 5 words$word # ii))option)) of
                                                        SOME (stringappend_376_0,stringappend_377_0) => 
  (case ((string_drop stringappend_375_0 stringappend_377_0)) of   s_ => T )
                                                      | NONE => F
                                                      )) then
                                                      T
                                                    else F
                                                 | NONE => F
                                                 )) then
                                                 T
                                               else F
                                            | NONE => F
                                            )) then
                                            T
                                          else F
                                       | NONE => F
                                       )) then
                                       T
                                     else F
                                  | NONE => F
                                  )) then
                                  T
                                else F
                             | NONE => F
                             )) then
                             T
                           else F)))) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_356_0 = (string_drop stringappend_0_0 ((string_length "rem"))) in
     let (s, stringappend_358_0) =
       ((case ((maybe_not_u_matches_prefix stringappend_356_0)) of
         SOME (stringappend_357_0,stringappend_358_0) => (stringappend_357_0, stringappend_358_0)
       )) in
     let stringappend_359_0 = (string_drop stringappend_356_0 stringappend_358_0) in
     let stringappend_360_0 = (string_drop stringappend_359_0 ((string_length "w"))) in  
  (case
  (case ((spc_matches_prefix stringappend_360_0)) of
        SOME (stringappend_361_0,stringappend_362_0) => (stringappend_361_0, stringappend_362_0)
  ) of
      (() , stringappend_362_0) =>
  let stringappend_363_0 = (string_drop stringappend_360_0 stringappend_362_0) in
  let (rd, stringappend_365_0) =
      ((case ((reg_name_matches_prefix stringappend_363_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_364_0,stringappend_365_0) => (stringappend_364_0, stringappend_365_0)
       )) in
  let stringappend_366_0 = (string_drop stringappend_363_0 stringappend_365_0) in
  (case
  (case ((sep_matches_prefix stringappend_366_0)) of
        SOME (stringappend_367_0,stringappend_368_0) => (stringappend_367_0, stringappend_368_0)
  ) of
      (() , stringappend_368_0) =>
  let stringappend_369_0 = (string_drop stringappend_366_0 stringappend_368_0) in
  let (rs1, stringappend_371_0) =
      ((case ((reg_name_matches_prefix stringappend_369_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_370_0,stringappend_371_0) => (stringappend_370_0, stringappend_371_0)
       )) in
  let stringappend_372_0 = (string_drop stringappend_369_0 stringappend_371_0) in
  (case
  (case ((sep_matches_prefix stringappend_372_0)) of
        SOME (stringappend_373_0,stringappend_374_0) => (stringappend_373_0, stringappend_374_0)
  ) of
      (() , stringappend_374_0) =>
  let stringappend_375_0 = (string_drop stringappend_372_0 stringappend_374_0) in
  let (rs2, stringappend_377_0) =
      ((case ((reg_name_matches_prefix stringappend_375_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_376_0,stringappend_377_0) => (stringappend_376_0, stringappend_377_0)
       )) in
  (case ((string_drop stringappend_375_0 stringappend_377_0)) of
        s_ => SOME
                (REMW (rs2,rs1,rd,s), ((string_length arg_)) -
                                        ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "fence")) /\ (let stringappend_379_0 = (string_drop stringappend_0_0 ((string_length "fence"))) in
               if ((case ((spc_matches_prefix stringappend_379_0)) of
                   SOME (stringappend_380_0,stringappend_381_0) =>
                    let stringappend_382_0 = (string_drop stringappend_379_0 stringappend_381_0) in
                    if ((case ((fence_bits_matches_prefix stringappend_382_0
                                 :  (( 4 words$word # ii))option)) of
                        SOME (stringappend_383_0,stringappend_384_0) =>
                         let stringappend_385_0 = (string_drop stringappend_382_0 stringappend_384_0) in
                         if ((case ((sep_matches_prefix stringappend_385_0)) of
                             SOME (stringappend_386_0,stringappend_387_0) =>
                              let stringappend_388_0 =
                                (string_drop stringappend_385_0 stringappend_387_0) in
                              if ((case ((fence_bits_matches_prefix stringappend_388_0
                                           :  (( 4 words$word # ii))option)) of
                                  SOME (stringappend_389_0,stringappend_390_0) => 
  (case ((string_drop stringappend_388_0 stringappend_390_0)) of   s_ => T )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_379_0 = (string_drop stringappend_0_0 ((string_length "fence"))) in  
  (case
  (case ((spc_matches_prefix stringappend_379_0)) of
        SOME (stringappend_380_0,stringappend_381_0) => (stringappend_380_0, stringappend_381_0)
  ) of
      (() , stringappend_381_0) =>
  let stringappend_382_0 = (string_drop stringappend_379_0 stringappend_381_0) in
  let (pred, stringappend_384_0) =
      ((case ((fence_bits_matches_prefix stringappend_382_0 : (( 4 words$word # ii)) option)) of
             SOME (stringappend_383_0,stringappend_384_0) => (stringappend_383_0, stringappend_384_0)
       )) in
  let stringappend_385_0 = (string_drop stringappend_382_0 stringappend_384_0) in
  (case
  (case ((sep_matches_prefix stringappend_385_0)) of
        SOME (stringappend_386_0,stringappend_387_0) => (stringappend_386_0, stringappend_387_0)
  ) of
      (() , stringappend_387_0) =>
  let stringappend_388_0 = (string_drop stringappend_385_0 stringappend_387_0) in
  let (succ, stringappend_390_0) =
      ((case ((fence_bits_matches_prefix stringappend_388_0 : (( 4 words$word # ii)) option)) of
             SOME (stringappend_389_0,stringappend_390_0) => (stringappend_389_0, stringappend_390_0)
       )) in
  (case ((string_drop stringappend_388_0 stringappend_390_0)) of
        s_ => SOME
                (FENCE (pred,succ), ((string_length arg_)) -
                                      ((string_length s_)))
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "fence.i")) /\ (
  (case ((string_drop stringappend_0_0 ((string_length "fence.i")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_0_0 ((string_length "fence.i")))) of
       s_ => SOME (FENCEI () , ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_0_0 "ecall")) /\ (
  (case ((string_drop stringappend_0_0 ((string_length "ecall")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_0_0 ((string_length "ecall")))) of
       s_ => SOME (ECALL () , ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_0_0 "mret")) /\ (
  (case ((string_drop stringappend_0_0 ((string_length "mret")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_0_0 ((string_length "mret")))) of
       s_ => SOME (MRET () , ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_0_0 "sret")) /\ (
  (case ((string_drop stringappend_0_0 ((string_length "sret")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_0_0 ((string_length "sret")))) of
       s_ => SOME (SRET () , ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_0_0 "ebreak")) /\ (
  (case ((string_drop stringappend_0_0 ((string_length "ebreak")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_0_0 ((string_length "ebreak")))) of
       s_ => SOME (EBREAK () , ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_0_0 "wfi")) /\ (
  (case ((string_drop stringappend_0_0 ((string_length "wfi")))) of
        s_ => T
  ))))) then
     (case ((string_drop stringappend_0_0 ((string_length "wfi")))) of
       s_ => SOME (WFI () , ((string_length arg_)) - ((string_length s_)))
     )
   else if (((((string_startswith stringappend_0_0 "sfence.vma")) /\ (let stringappend_398_0 = (string_drop stringappend_0_0 ((string_length "sfence.vma"))) in
               if ((case ((spc_matches_prefix stringappend_398_0)) of
                   SOME (stringappend_399_0,stringappend_400_0) =>
                    let stringappend_401_0 = (string_drop stringappend_398_0 stringappend_400_0) in
                    if ((case ((reg_name_matches_prefix stringappend_401_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_402_0,stringappend_403_0) =>
                         let stringappend_404_0 = (string_drop stringappend_401_0 stringappend_403_0) in
                         if ((case ((sep_matches_prefix stringappend_404_0)) of
                             SOME (stringappend_405_0,stringappend_406_0) =>
                              let stringappend_407_0 =
                                (string_drop stringappend_404_0 stringappend_406_0) in
                              if ((case ((reg_name_matches_prefix stringappend_407_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_408_0,stringappend_409_0) => 
  (case ((string_drop stringappend_407_0 stringappend_409_0)) of   s_ => T )
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_398_0 = (string_drop stringappend_0_0 ((string_length "sfence.vma"))) in  
  (case
  (case ((spc_matches_prefix stringappend_398_0)) of
        SOME (stringappend_399_0,stringappend_400_0) => (stringappend_399_0, stringappend_400_0)
  ) of
      (() , stringappend_400_0) =>
  let stringappend_401_0 = (string_drop stringappend_398_0 stringappend_400_0) in
  let (rs1, stringappend_403_0) =
      ((case ((reg_name_matches_prefix stringappend_401_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_402_0,stringappend_403_0) => (stringappend_402_0, stringappend_403_0)
       )) in
  let stringappend_404_0 = (string_drop stringappend_401_0 stringappend_403_0) in
  (case
  (case ((sep_matches_prefix stringappend_404_0)) of
        SOME (stringappend_405_0,stringappend_406_0) => (stringappend_405_0, stringappend_406_0)
  ) of
      (() , stringappend_406_0) =>
  let stringappend_407_0 = (string_drop stringappend_404_0 stringappend_406_0) in
  let (rs2, stringappend_409_0) =
      ((case ((reg_name_matches_prefix stringappend_407_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_408_0,stringappend_409_0) => (stringappend_408_0, stringappend_409_0)
       )) in
  (case ((string_drop stringappend_407_0 stringappend_409_0)) of
        s_ => SOME
                (SFENCE_VMA (rs1,rs2), ((string_length arg_)) -
                                         ((string_length s_)))
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "lr.")) /\ (let stringappend_411_0 = (string_drop stringappend_0_0 ((string_length "lr."))) in
               if ((case ((maybe_aq_matches_prefix stringappend_411_0)) of
                   SOME (stringappend_412_0,stringappend_413_0) =>
                    let stringappend_414_0 = (string_drop stringappend_411_0 stringappend_413_0) in
                    if ((case ((maybe_rl_matches_prefix stringappend_414_0)) of
                        SOME (stringappend_415_0,stringappend_416_0) =>
                         let stringappend_417_0 = (string_drop stringappend_414_0 stringappend_416_0) in
                         if ((case ((size_mnemonic_matches_prefix stringappend_417_0)) of
                             SOME (stringappend_418_0,stringappend_419_0) =>
                              let stringappend_420_0 =
                                (string_drop stringappend_417_0 stringappend_419_0) in
                              if ((case ((spc_matches_prefix stringappend_420_0)) of
                                  SOME (stringappend_421_0,stringappend_422_0) =>
                                   let stringappend_423_0 =
                                     (string_drop stringappend_420_0 stringappend_422_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_423_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_424_0,stringappend_425_0) =>
                                        let stringappend_426_0 =
                                          (string_drop stringappend_423_0 stringappend_425_0) in
                                        if ((case ((sep_matches_prefix stringappend_426_0)) of
                                            SOME (stringappend_427_0,stringappend_428_0) =>
                                             let stringappend_429_0 =
                                               (string_drop stringappend_426_0 stringappend_428_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_429_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_430_0,stringappend_431_0) => 
  (case ((string_drop stringappend_429_0 stringappend_431_0)) of   s_ => T )
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_411_0 = (string_drop stringappend_0_0 ((string_length "lr."))) in
     let (aq, stringappend_413_0) =
       ((case ((maybe_aq_matches_prefix stringappend_411_0)) of
         SOME (stringappend_412_0,stringappend_413_0) => (stringappend_412_0, stringappend_413_0)
       )) in
     let stringappend_414_0 = (string_drop stringappend_411_0 stringappend_413_0) in
     let (rl, stringappend_416_0) =
       ((case ((maybe_rl_matches_prefix stringappend_414_0)) of
         SOME (stringappend_415_0,stringappend_416_0) => (stringappend_415_0, stringappend_416_0)
       )) in
     let stringappend_417_0 = (string_drop stringappend_414_0 stringappend_416_0) in
     let (size1, stringappend_419_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_417_0)) of
         SOME (stringappend_418_0,stringappend_419_0) => (stringappend_418_0, stringappend_419_0)
       )) in
     let stringappend_420_0 = (string_drop stringappend_417_0 stringappend_419_0) in  
  (case
  (case ((spc_matches_prefix stringappend_420_0)) of
        SOME (stringappend_421_0,stringappend_422_0) => (stringappend_421_0, stringappend_422_0)
  ) of
      (() , stringappend_422_0) =>
  let stringappend_423_0 = (string_drop stringappend_420_0 stringappend_422_0) in
  let (rd, stringappend_425_0) =
      ((case ((reg_name_matches_prefix stringappend_423_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_424_0,stringappend_425_0) => (stringappend_424_0, stringappend_425_0)
       )) in
  let stringappend_426_0 = (string_drop stringappend_423_0 stringappend_425_0) in
  (case
  (case ((sep_matches_prefix stringappend_426_0)) of
        SOME (stringappend_427_0,stringappend_428_0) => (stringappend_427_0, stringappend_428_0)
  ) of
      (() , stringappend_428_0) =>
  let stringappend_429_0 = (string_drop stringappend_426_0 stringappend_428_0) in
  let (rs1, stringappend_431_0) =
      ((case ((reg_name_matches_prefix stringappend_429_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_430_0,stringappend_431_0) => (stringappend_430_0, stringappend_431_0)
       )) in
  (case ((string_drop stringappend_429_0 stringappend_431_0)) of
        s_ =>
  SOME
    (LOADRES (aq,rl,rs1,size1,rd), ((string_length arg_)) -
                                     ((string_length s_)))
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "sc.")) /\ (let stringappend_433_0 = (string_drop stringappend_0_0 ((string_length "sc."))) in
               if ((case ((maybe_aq_matches_prefix stringappend_433_0)) of
                   SOME (stringappend_434_0,stringappend_435_0) =>
                    let stringappend_436_0 = (string_drop stringappend_433_0 stringappend_435_0) in
                    if ((case ((maybe_rl_matches_prefix stringappend_436_0)) of
                        SOME (stringappend_437_0,stringappend_438_0) =>
                         let stringappend_439_0 = (string_drop stringappend_436_0 stringappend_438_0) in
                         if ((case ((size_mnemonic_matches_prefix stringappend_439_0)) of
                             SOME (stringappend_440_0,stringappend_441_0) =>
                              let stringappend_442_0 =
                                (string_drop stringappend_439_0 stringappend_441_0) in
                              if ((case ((spc_matches_prefix stringappend_442_0)) of
                                  SOME (stringappend_443_0,stringappend_444_0) =>
                                   let stringappend_445_0 =
                                     (string_drop stringappend_442_0 stringappend_444_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_445_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_446_0,stringappend_447_0) =>
                                        let stringappend_448_0 =
                                          (string_drop stringappend_445_0 stringappend_447_0) in
                                        if ((case ((sep_matches_prefix stringappend_448_0)) of
                                            SOME (stringappend_449_0,stringappend_450_0) =>
                                             let stringappend_451_0 =
                                               (string_drop stringappend_448_0 stringappend_450_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_451_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_452_0,stringappend_453_0) =>
                                                  let stringappend_454_0 =
                                                    (string_drop stringappend_451_0
                                                      stringappend_453_0) in
                                                  if ((case ((sep_matches_prefix stringappend_454_0)) of
                                                      SOME (stringappend_455_0,stringappend_456_0) =>
                                                       let stringappend_457_0 =
                                                         (string_drop stringappend_454_0
                                                           stringappend_456_0) in
                                                       if ((case ((reg_name_matches_prefix
                                                                     stringappend_457_0
                                                                    :  (( 5 words$word # ii))option)) of
                                                           SOME
                                                           (stringappend_458_0,stringappend_459_0) => 
  (case ((string_drop stringappend_457_0 stringappend_459_0)) of   s_ => T )
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_433_0 = (string_drop stringappend_0_0 ((string_length "sc."))) in
     let (aq, stringappend_435_0) =
       ((case ((maybe_aq_matches_prefix stringappend_433_0)) of
         SOME (stringappend_434_0,stringappend_435_0) => (stringappend_434_0, stringappend_435_0)
       )) in
     let stringappend_436_0 = (string_drop stringappend_433_0 stringappend_435_0) in
     let (rl, stringappend_438_0) =
       ((case ((maybe_rl_matches_prefix stringappend_436_0)) of
         SOME (stringappend_437_0,stringappend_438_0) => (stringappend_437_0, stringappend_438_0)
       )) in
     let stringappend_439_0 = (string_drop stringappend_436_0 stringappend_438_0) in
     let (size1, stringappend_441_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_439_0)) of
         SOME (stringappend_440_0,stringappend_441_0) => (stringappend_440_0, stringappend_441_0)
       )) in
     let stringappend_442_0 = (string_drop stringappend_439_0 stringappend_441_0) in  
  (case
  (case ((spc_matches_prefix stringappend_442_0)) of
        SOME (stringappend_443_0,stringappend_444_0) => (stringappend_443_0, stringappend_444_0)
  ) of
      (() , stringappend_444_0) =>
  let stringappend_445_0 = (string_drop stringappend_442_0 stringappend_444_0) in
  let (rd, stringappend_447_0) =
      ((case ((reg_name_matches_prefix stringappend_445_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_446_0,stringappend_447_0) => (stringappend_446_0, stringappend_447_0)
       )) in
  let stringappend_448_0 = (string_drop stringappend_445_0 stringappend_447_0) in
  (case
  (case ((sep_matches_prefix stringappend_448_0)) of
        SOME (stringappend_449_0,stringappend_450_0) => (stringappend_449_0, stringappend_450_0)
  ) of
      (() , stringappend_450_0) =>
  let stringappend_451_0 = (string_drop stringappend_448_0 stringappend_450_0) in
  let (rs1, stringappend_453_0) =
      ((case ((reg_name_matches_prefix stringappend_451_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_452_0,stringappend_453_0) => (stringappend_452_0, stringappend_453_0)
       )) in
  let stringappend_454_0 = (string_drop stringappend_451_0 stringappend_453_0) in
  (case
  (case ((sep_matches_prefix stringappend_454_0)) of
        SOME (stringappend_455_0,stringappend_456_0) => (stringappend_455_0, stringappend_456_0)
  ) of
      (() , stringappend_456_0) =>
  let stringappend_457_0 = (string_drop stringappend_454_0 stringappend_456_0) in
  let (rs2, stringappend_459_0) =
      ((case ((reg_name_matches_prefix stringappend_457_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_458_0,stringappend_459_0) => (stringappend_458_0, stringappend_459_0)
       )) in
  (case ((string_drop stringappend_457_0 stringappend_459_0)) of
        s_ =>
  SOME
    (STORECON (aq,rl,rs2,rs1,size1,rd),
    ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((amo_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_461_0,stringappend_462_0) =>
        let stringappend_463_0 = (string_drop stringappend_0_0 stringappend_462_0) in
        if (((((string_startswith stringappend_463_0 ".")) /\ (let stringappend_464_0 = (string_drop stringappend_463_0 ((string_length "."))) in
               if ((case ((size_mnemonic_matches_prefix stringappend_464_0)) of
                   SOME (stringappend_465_0,stringappend_466_0) =>
                    let stringappend_467_0 = (string_drop stringappend_464_0 stringappend_466_0) in
                    if ((case ((maybe_aq_matches_prefix stringappend_467_0)) of
                        SOME (stringappend_468_0,stringappend_469_0) =>
                         let stringappend_470_0 = (string_drop stringappend_467_0 stringappend_469_0) in
                         if ((case ((maybe_rl_matches_prefix stringappend_470_0)) of
                             SOME (stringappend_471_0,stringappend_472_0) =>
                              let stringappend_473_0 =
                                (string_drop stringappend_470_0 stringappend_472_0) in
                              if ((case ((spc_matches_prefix stringappend_473_0)) of
                                  SOME (stringappend_474_0,stringappend_475_0) =>
                                   let stringappend_476_0 =
                                     (string_drop stringappend_473_0 stringappend_475_0) in
                                   if ((case ((reg_name_matches_prefix stringappend_476_0
                                                :  (( 5 words$word # ii))option)) of
                                       SOME (stringappend_477_0,stringappend_478_0) =>
                                        let stringappend_479_0 =
                                          (string_drop stringappend_476_0 stringappend_478_0) in
                                        if ((case ((sep_matches_prefix stringappend_479_0)) of
                                            SOME (stringappend_480_0,stringappend_481_0) =>
                                             let stringappend_482_0 =
                                               (string_drop stringappend_479_0 stringappend_481_0) in
                                             if ((case ((reg_name_matches_prefix stringappend_482_0
                                                          :  (( 5 words$word # ii))option)) of
                                                 SOME (stringappend_483_0,stringappend_484_0) =>
                                                  let stringappend_485_0 =
                                                    (string_drop stringappend_482_0
                                                      stringappend_484_0) in
                                                  if ((case ((sep_matches_prefix stringappend_485_0)) of
                                                      SOME (stringappend_486_0,stringappend_487_0) =>
                                                       let stringappend_488_0 =
                                                         (string_drop stringappend_485_0
                                                           stringappend_487_0) in
                                                       if ((case ((reg_name_matches_prefix
                                                                     stringappend_488_0
                                                                    :  (( 5 words$word # ii))option)) of
                                                           SOME
                                                           (stringappend_489_0,stringappend_490_0) => 
  (case ((string_drop stringappend_488_0 stringappend_490_0)) of   s_ => T )
                                                         | NONE => F
                                                         )) then
                                                         T
                                                       else F
                                                    | NONE => F
                                                    )) then
                                                    T
                                                  else F
                                               | NONE => F
                                               )) then
                                               T
                                             else F
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_462_0) =
       ((case ((amo_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_461_0,stringappend_462_0) => (stringappend_461_0, stringappend_462_0)
       )) in
     let stringappend_463_0 = (string_drop stringappend_0_0 stringappend_462_0) in
     let stringappend_464_0 = (string_drop stringappend_463_0 ((string_length "."))) in
     let (width, stringappend_466_0) =
       ((case ((size_mnemonic_matches_prefix stringappend_464_0)) of
         SOME (stringappend_465_0,stringappend_466_0) => (stringappend_465_0, stringappend_466_0)
       )) in
     let stringappend_467_0 = (string_drop stringappend_464_0 stringappend_466_0) in
     let (aq, stringappend_469_0) =
       ((case ((maybe_aq_matches_prefix stringappend_467_0)) of
         SOME (stringappend_468_0,stringappend_469_0) => (stringappend_468_0, stringappend_469_0)
       )) in
     let stringappend_470_0 = (string_drop stringappend_467_0 stringappend_469_0) in
     let (rl, stringappend_472_0) =
       ((case ((maybe_rl_matches_prefix stringappend_470_0)) of
         SOME (stringappend_471_0,stringappend_472_0) => (stringappend_471_0, stringappend_472_0)
       )) in
     let stringappend_473_0 = (string_drop stringappend_470_0 stringappend_472_0) in  
  (case
  (case ((spc_matches_prefix stringappend_473_0)) of
        SOME (stringappend_474_0,stringappend_475_0) => (stringappend_474_0, stringappend_475_0)
  ) of
      (() , stringappend_475_0) =>
  let stringappend_476_0 = (string_drop stringappend_473_0 stringappend_475_0) in
  let (rd, stringappend_478_0) =
      ((case ((reg_name_matches_prefix stringappend_476_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_477_0,stringappend_478_0) => (stringappend_477_0, stringappend_478_0)
       )) in
  let stringappend_479_0 = (string_drop stringappend_476_0 stringappend_478_0) in
  (case
  (case ((sep_matches_prefix stringappend_479_0)) of
        SOME (stringappend_480_0,stringappend_481_0) => (stringappend_480_0, stringappend_481_0)
  ) of
      (() , stringappend_481_0) =>
  let stringappend_482_0 = (string_drop stringappend_479_0 stringappend_481_0) in
  let (rs1, stringappend_484_0) =
      ((case ((reg_name_matches_prefix stringappend_482_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_483_0,stringappend_484_0) => (stringappend_483_0, stringappend_484_0)
       )) in
  let stringappend_485_0 = (string_drop stringappend_482_0 stringappend_484_0) in
  (case
  (case ((sep_matches_prefix stringappend_485_0)) of
        SOME (stringappend_486_0,stringappend_487_0) => (stringappend_486_0, stringappend_487_0)
  ) of
      (() , stringappend_487_0) =>
  let stringappend_488_0 = (string_drop stringappend_485_0 stringappend_487_0) in
  let (rs2, stringappend_490_0) =
      ((case ((reg_name_matches_prefix stringappend_488_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_489_0,stringappend_490_0) => (stringappend_489_0, stringappend_490_0)
       )) in
  (case ((string_drop stringappend_488_0 stringappend_490_0)) of
        s_ =>
  SOME
    (AMO (op,aq,rl,rs2,rs1,width,rd),
    ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((csr_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_492_0,stringappend_493_0) =>
        let stringappend_494_0 = (string_drop stringappend_0_0 stringappend_493_0) in
        if (((((string_startswith stringappend_494_0 "i")) /\ (let stringappend_495_0 = (string_drop stringappend_494_0 ((string_length "i"))) in
               if ((case ((spc_matches_prefix stringappend_495_0)) of
                   SOME (stringappend_496_0,stringappend_497_0) =>
                    let stringappend_498_0 = (string_drop stringappend_495_0 stringappend_497_0) in
                    if ((case ((reg_name_matches_prefix stringappend_498_0
                                 :  (( 5 words$word # ii))option)) of
                        SOME (stringappend_499_0,stringappend_500_0) =>
                         let stringappend_501_0 = (string_drop stringappend_498_0 stringappend_500_0) in
                         if ((case ((sep_matches_prefix stringappend_501_0)) of
                             SOME (stringappend_502_0,stringappend_503_0) =>
                              let stringappend_504_0 =
                                (string_drop stringappend_501_0 stringappend_503_0) in
                              if ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_504_0
                                           :  (( 5 words$word # ii))option)) of
                                  SOME (stringappend_505_0,stringappend_506_0) =>
                                   let stringappend_507_0 =
                                     (string_drop stringappend_504_0 stringappend_506_0) in
                                   if ((case ((sep_matches_prefix stringappend_507_0)) of
                                       SOME (stringappend_508_0,stringappend_509_0) =>
                                        let stringappend_510_0 =
                                          (string_drop stringappend_507_0 stringappend_509_0) in
                                        if ((case ((csr_name_map_matches_prefix stringappend_510_0
                                                     :  (( 12 words$word # ii))option)) of
                                            SOME (stringappend_511_0,stringappend_512_0) => 
  (case ((string_drop stringappend_510_0 stringappend_512_0)) of   s_ => T )
                                          | NONE => F
                                          )) then
                                          T
                                        else F
                                     | NONE => F
                                     )) then
                                     T
                                   else F
                                | NONE => F
                                )) then
                                T
                              else F
                           | NONE => F
                           )) then
                           T
                         else F
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_493_0) =
       ((case ((csr_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_492_0,stringappend_493_0) => (stringappend_492_0, stringappend_493_0)
       )) in
     let stringappend_494_0 = (string_drop stringappend_0_0 stringappend_493_0) in
     let stringappend_495_0 = (string_drop stringappend_494_0 ((string_length "i"))) in  
  (case
  (case ((spc_matches_prefix stringappend_495_0)) of
        SOME (stringappend_496_0,stringappend_497_0) => (stringappend_496_0, stringappend_497_0)
  ) of
      (() , stringappend_497_0) =>
  let stringappend_498_0 = (string_drop stringappend_495_0 stringappend_497_0) in
  let (rd, stringappend_500_0) =
      ((case ((reg_name_matches_prefix stringappend_498_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_499_0,stringappend_500_0) => (stringappend_499_0, stringappend_500_0)
       )) in
  let stringappend_501_0 = (string_drop stringappend_498_0 stringappend_500_0) in
  (case
  (case ((sep_matches_prefix stringappend_501_0)) of
        SOME (stringappend_502_0,stringappend_503_0) => (stringappend_502_0, stringappend_503_0)
  ) of
      (() , stringappend_503_0) =>
  let stringappend_504_0 = (string_drop stringappend_501_0 stringappend_503_0) in
  let (rs1, stringappend_506_0) =
      ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_504_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_505_0,stringappend_506_0) => (stringappend_505_0, stringappend_506_0)
       )) in
  let stringappend_507_0 = (string_drop stringappend_504_0 stringappend_506_0) in
  (case
  (case ((sep_matches_prefix stringappend_507_0)) of
        SOME (stringappend_508_0,stringappend_509_0) => (stringappend_508_0, stringappend_509_0)
  ) of
      (() , stringappend_509_0) =>
  let stringappend_510_0 = (string_drop stringappend_507_0 stringappend_509_0) in
  let (csr, stringappend_512_0) =
      ((case ((csr_name_map_matches_prefix stringappend_510_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_511_0,stringappend_512_0) => (stringappend_511_0, stringappend_512_0)
       )) in
  (case ((string_drop stringappend_510_0 stringappend_512_0)) of
        s_ =>
  SOME (CSR (csr,rs1,rd,T,op), ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if ((case ((csr_mnemonic_matches_prefix stringappend_0_0)) of
       SOME (stringappend_514_0,stringappend_515_0) =>
        let stringappend_516_0 = (string_drop stringappend_0_0 stringappend_515_0) in
        if ((case ((spc_matches_prefix stringappend_516_0)) of
            SOME (stringappend_517_0,stringappend_518_0) =>
             let stringappend_519_0 = (string_drop stringappend_516_0 stringappend_518_0) in
             if ((case ((reg_name_matches_prefix stringappend_519_0  :  (( 5 words$word # ii))option)) of
                 SOME (stringappend_520_0,stringappend_521_0) =>
                  let stringappend_522_0 = (string_drop stringappend_519_0 stringappend_521_0) in
                  if ((case ((sep_matches_prefix stringappend_522_0)) of
                      SOME (stringappend_523_0,stringappend_524_0) =>
                       let stringappend_525_0 = (string_drop stringappend_522_0 stringappend_524_0) in
                       if ((case ((reg_name_matches_prefix stringappend_525_0
                                    :  (( 5 words$word # ii))option)) of
                           SOME (stringappend_526_0,stringappend_527_0) =>
                            let stringappend_528_0 =
                              (string_drop stringappend_525_0 stringappend_527_0) in
                            if ((case ((sep_matches_prefix stringappend_528_0)) of
                                SOME (stringappend_529_0,stringappend_530_0) =>
                                 let stringappend_531_0 =
                                   (string_drop stringappend_528_0 stringappend_530_0) in
                                 if ((case ((csr_name_map_matches_prefix stringappend_531_0
                                              :  (( 12 words$word # ii))option)) of
                                     SOME (stringappend_532_0,stringappend_533_0) => 
  (case ((string_drop stringappend_531_0 stringappend_533_0)) of   s_ => T )
                                   | NONE => F
                                   )) then
                                   T
                                 else F
                              | NONE => F
                              )) then
                              T
                            else F
                         | NONE => F
                         )) then
                         T
                       else F
                    | NONE => F
                    )) then
                    T
                  else F
               | NONE => F
               )) then
               T
             else F
          | NONE => F
          )) then
          T
        else F
     | NONE => F
     )) then
     let (op, stringappend_515_0) =
       ((case ((csr_mnemonic_matches_prefix stringappend_0_0)) of
         SOME (stringappend_514_0,stringappend_515_0) => (stringappend_514_0, stringappend_515_0)
       )) in
     let stringappend_516_0 = (string_drop stringappend_0_0 stringappend_515_0) in  
  (case
  (case ((spc_matches_prefix stringappend_516_0)) of
        SOME (stringappend_517_0,stringappend_518_0) => (stringappend_517_0, stringappend_518_0)
  ) of
      (() , stringappend_518_0) =>
  let stringappend_519_0 = (string_drop stringappend_516_0 stringappend_518_0) in
  let (rd, stringappend_521_0) =
      ((case ((reg_name_matches_prefix stringappend_519_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_520_0,stringappend_521_0) => (stringappend_520_0, stringappend_521_0)
       )) in
  let stringappend_522_0 = (string_drop stringappend_519_0 stringappend_521_0) in
  (case
  (case ((sep_matches_prefix stringappend_522_0)) of
        SOME (stringappend_523_0,stringappend_524_0) => (stringappend_523_0, stringappend_524_0)
  ) of
      (() , stringappend_524_0) =>
  let stringappend_525_0 = (string_drop stringappend_522_0 stringappend_524_0) in
  let (rs1, stringappend_527_0) =
      ((case ((reg_name_matches_prefix stringappend_525_0 : (( 5 words$word # ii)) option)) of
             SOME (stringappend_526_0,stringappend_527_0) => (stringappend_526_0, stringappend_527_0)
       )) in
  let stringappend_528_0 = (string_drop stringappend_525_0 stringappend_527_0) in
  (case
  (case ((sep_matches_prefix stringappend_528_0)) of
        SOME (stringappend_529_0,stringappend_530_0) => (stringappend_529_0, stringappend_530_0)
  ) of
      (() , stringappend_530_0) =>
  let stringappend_531_0 = (string_drop stringappend_528_0 stringappend_530_0) in
  let (csr, stringappend_533_0) =
      ((case ((csr_name_map_matches_prefix stringappend_531_0 : (( 12 words$word # ii)) option)) of
             SOME (stringappend_532_0,stringappend_533_0) => (stringappend_532_0, stringappend_533_0)
       )) in
  (case ((string_drop stringappend_531_0 stringappend_533_0)) of
        s_ =>
  SOME (CSR (csr,rs1,rd,F,op), ((string_length arg_)) - ((string_length s_)))
  )
  )
  )
  )
   else if (((((string_startswith stringappend_0_0 "illegal")) /\ (let stringappend_535_0 = (string_drop stringappend_0_0 ((string_length "illegal"))) in
               if ((case ((spc_matches_prefix stringappend_535_0)) of
                   SOME (stringappend_536_0,stringappend_537_0) =>
                    let stringappend_538_0 = (string_drop stringappend_535_0 stringappend_537_0) in
                    if ((case ((hex_bits_32_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_538_0
                                 :  (( 32 words$word # ii))option)) of
                        SOME (stringappend_539_0,stringappend_540_0) => 
  (case ((string_drop stringappend_538_0 stringappend_540_0)) of   s_ => T )
                      | NONE => F
                      )) then
                      T
                    else F
                 | NONE => F
                 )) then
                 T
               else F)))) then
     let stringappend_535_0 = (string_drop stringappend_0_0 ((string_length "illegal"))) in  
  (case
  (case ((spc_matches_prefix stringappend_535_0)) of
        SOME (stringappend_536_0,stringappend_537_0) => (stringappend_536_0, stringappend_537_0)
  ) of
      (() , stringappend_537_0) =>
  let stringappend_538_0 = (string_drop stringappend_535_0 stringappend_537_0) in
  let (s, stringappend_540_0) =
      ((case ((hex_bits_32_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict
                 stringappend_538_0 : (( 32 words$word # ii)) option)) of
             SOME (stringappend_539_0,stringappend_540_0) => (stringappend_539_0, stringappend_540_0)
       )) in
  (case ((string_drop stringappend_538_0 stringappend_540_0)) of
        s_ => SOME (ILLEGAL s, ((string_length arg_)) - ((string_length s_)))
  )
  )
   else NONE))`;


(*val encdec_forwards : ast -> mword ty32*)

val _ = Define `
 ((encdec_forwards:ast ->(32)words$word) arg_=
    ((case arg_ of
     UTYPE (imm,rd,op) =>
      (concat_vec imm ((concat_vec rd ((encdec_uop_forwards op  :  7 words$word))  :  12 words$word))
        :  32 words$word)
   | RISCV_JAL (v__172,rd) =>
      let (imm_19 : 1 bits) = ((subrange_vec_dec v__172 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)) in
      let (imm_7_0 : 8 bits) = ((subrange_vec_dec v__172 (( 19 : int):ii) (( 12 : int):ii)  :  8 words$word)) in
      let (imm_8 : 1 bits) = ((subrange_vec_dec v__172 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
      let (imm_18_13 : 6 bits) = ((subrange_vec_dec v__172 (( 10 : int):ii) (( 5 : int):ii)  :  6 words$word)) in
      let (imm_12_9 : 4 bits) = ((subrange_vec_dec v__172 (( 4 : int):ii) (( 1 : int):ii)  :  4 words$word)) in
      (concat_vec imm_19
         ((concat_vec imm_18_13
             ((concat_vec imm_12_9
                 ((concat_vec imm_8
                     ((concat_vec imm_7_0
                         ((concat_vec rd (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  20 words$word))
                    :  21 words$word))
                :  25 words$word))
            :  31 words$word))
        :  32 words$word)
   | RISCV_JALR (imm,rs1,rd) =>
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                 ((concat_vec rd (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  :  7 words$word)  :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | BTYPE (v__173,rs2,rs1,op) =>
      let (imm7_6 : 1 bits) = ((subrange_vec_dec v__173 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
      let (imm5_0 : 1 bits) = ((subrange_vec_dec v__173 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
      let (imm7_5_0 : 6 bits) = ((subrange_vec_dec v__173 (( 10 : int):ii) (( 5 : int):ii)  :  6 words$word)) in
      let (imm5_4_1 : 4 bits) = ((subrange_vec_dec v__173 (( 4 : int):ii) (( 1 : int):ii)  :  4 words$word)) in
      (concat_vec imm7_6
         ((concat_vec imm7_5_0
             ((concat_vec rs2
                 ((concat_vec rs1
                     ((concat_vec ((encdec_bop_forwards op  :  3 words$word))
                         ((concat_vec imm5_4_1
                             ((concat_vec imm5_0 (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  :  7 words$word)
                                :  8 words$word))
                            :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  25 words$word))
            :  31 words$word))
        :  32 words$word)
   | ITYPE (imm,rs1,rd,op) =>
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec ((encdec_iop_forwards op  :  3 words$word))
                 ((concat_vec rd (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | SHIFTIOP (shamt,rs1,rd,RISCV_SLLI) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  26 words$word))
        :  32 words$word)
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRLI) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  26 words$word))
        :  32 words$word)
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRAI) =>
      (concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0]  :  6 words$word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  26 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_ADD) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_SUB) =>
      (concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_SLL) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_SLT) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B1;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_SLTU) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B1;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_XOR) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_SRL) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_SRA) =>
      (concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_OR) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B1;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPE (rs2,rs1,rd,RISCV_AND) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B1;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | LOAD (imm,rs1,rd,is_unsigned,size1,F,F) =>
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec ((bool_bits_forwards is_unsigned  :  1 words$word))
                 ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                     ((concat_vec rd (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  14 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | STORE (v__174,rs2,rs1,size1,F,F) =>
      let (imm7 : 7 bits) = ((subrange_vec_dec v__174 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
      let (imm5 : 5 bits) = ((subrange_vec_dec v__174 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
      (concat_vec imm7
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                     ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                         ((concat_vec imm5 (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  14 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | ADDIW (imm,rs1,rd) =>
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                 ((concat_vec rd (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | SHIFTW (shamt,rs1,rd,RISCV_SLLI) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | SHIFTW (shamt,rs1,rd,RISCV_SRLI) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | SHIFTW (shamt,rs1,rd,RISCV_SRAI) =>
      (concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPEW (rs2,rs1,rd,RISCV_ADDW) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPEW (rs2,rs1,rd,RISCV_SUBW) =>
      (concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPEW (rs2,rs1,rd,RISCV_SLLW) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPEW (rs2,rs1,rd,RISCV_SRLW) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | RTYPEW (rs2,rs1,rd,RISCV_SRAW) =>
      (concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0;B1]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | MUL (rs2,rs1,rd,high,signed1,signed2) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec ((encdec_mul_op_forwards high signed1 signed2  :  3 words$word))
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | DIV0 (rs2,rs1,rd,s) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0]  :  2 words$word)
                     ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                         ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  13 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | REM (rs2,rs1,rd,s) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B1]  :  2 words$word)
                     ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                         ((concat_vec rd (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  13 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | MULW (rs2,rs1,rd) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | DIVW (rs2,rs1,rd,s) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B0]  :  2 words$word)
                     ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                         ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  13 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | REMW (rs2,rs1,rd,s) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1;B1]  :  2 words$word)
                     ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                         ((concat_vec rd (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  13 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | FENCE (pred,succ) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)
         ((concat_vec pred
             ((concat_vec succ
                 ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                     ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                             (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  :  7 words$word)
                            :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  24 words$word))
            :  28 words$word))
        :  32 words$word)
   | FENCEI (() ) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
             ((concat_vec (vec_of_bits [B0;B0;B1]  :  3 words$word)
                 ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                     (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  :  7 words$word)
                    :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | ECALL (() ) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
             ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                 ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                     (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                    :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | MRET (() ) =>
      (concat_vec (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  :  7 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)
             ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                         (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                        :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | SRET (() ) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  :  7 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)
             ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                         (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                        :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | EBREAK (() ) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
             ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                 ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                     (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                    :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | WFI (() ) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
             ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                 ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                     (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                    :  12 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | SFENCE_VMA (rs1,rs2) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  :  7 words$word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                     ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                         (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)
                        :  12 words$word))
                    :  15 words$word))
                :  20 words$word))
            :  25 words$word))
        :  32 words$word)
   | LOADRES (aq,rl,rs1,size1,rd) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)
         ((concat_vec ((bool_bits_forwards aq  :  1 words$word))
             ((concat_vec ((bool_bits_forwards rl  :  1 words$word))
                 ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                     ((concat_vec rs1
                         ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                             ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                 ((concat_vec rd (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word)
                                    :  12 words$word))
                                :  14 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  26 words$word))
            :  27 words$word))
        :  32 words$word)
   | STORECON (aq,rl,rs2,rs1,size1,rd) =>
      (concat_vec (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)
         ((concat_vec ((bool_bits_forwards aq  :  1 words$word))
             ((concat_vec ((bool_bits_forwards rl  :  1 words$word))
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                             ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                 ((concat_vec rd (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word)
                                    :  12 words$word))
                                :  14 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  26 words$word))
            :  27 words$word))
        :  32 words$word)
   | AMO (op,aq,rl,rs2,rs1,size1,rd) =>
      (concat_vec ((encdec_amoop_forwards op  :  5 words$word))
         ((concat_vec ((bool_bits_forwards aq  :  1 words$word))
             ((concat_vec ((bool_bits_forwards rl  :  1 words$word))
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                             ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                 ((concat_vec rd (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word)
                                    :  12 words$word))
                                :  14 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  26 words$word))
            :  27 words$word))
        :  32 words$word)
   | CSR (csr,rs1,rd,is_imm,op) =>
      (concat_vec csr
         ((concat_vec rs1
             ((concat_vec ((bool_bits_forwards is_imm  :  1 words$word))
                 ((concat_vec ((encdec_csrop_forwards op  :  2 words$word))
                     ((concat_vec rd (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)  :  12 words$word))
                    :  14 words$word))
                :  15 words$word))
            :  20 words$word))
        :  32 words$word)
   | STOP_FETCHING (() ) =>
      (concat_vec (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  :  16 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
             ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                 ((concat_vec (vec_of_bits [B0;B0]  :  2 words$word)
                     ((concat_vec (vec_of_bits [B0;B1;B0]  :  3 words$word)
                         (vec_of_bits [B1;B1]  :  2 words$word)
                        :  5 words$word))
                    :  7 words$word))
                :  8 words$word))
            :  16 words$word))
        :  32 words$word)
   | THREAD_START (() ) =>
      (concat_vec (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  :  16 words$word)
         ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
             ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                 ((concat_vec (vec_of_bits [B0;B0]  :  2 words$word)
                     ((concat_vec (vec_of_bits [B0;B1;B0]  :  3 words$word)
                         (vec_of_bits [B1;B1]  :  2 words$word)
                        :  5 words$word))
                    :  7 words$word))
                :  8 words$word))
            :  16 words$word))
        :  32 words$word)
   | ILLEGAL (s) => s
   )))`;


(*val encdec_backwards : mword ty32 -> ast*)

val _ = Define `
 ((encdec_backwards:(32)words$word -> ast) arg_=
    (let v__175 = arg_ in
   if (let mappingpatterns_23_0 = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     encdec_uop_backwards_matches mappingpatterns_23_0) then
     let (imm :  20 words$word) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 12 : int):ii)  :  20 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let mappingpatterns_23_0 = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     let op = (encdec_uop_backwards mappingpatterns_23_0) in
     UTYPE (imm,rd,op)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (p0_ = (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  :  7 words$word))) then
     let (imm_19 : 1 bits) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)) in
     let (imm_18_13 : 6 bits) = ((subrange_vec_dec v__175 (( 30 : int):ii) (( 25 : int):ii)  :  6 words$word)) in
     let (imm_12_9 : 4 bits) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 21 : int):ii)  :  4 words$word)) in
     let (imm_8 : 1 bits) = ((subrange_vec_dec v__175 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)) in
     let (imm_7_0 : 8 bits) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 12 : int):ii)  :  8 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RISCV_JAL ((concat_vec imm_19
                   ((concat_vec imm_7_0
                       ((concat_vec imm_8
                           ((concat_vec imm_18_13
                               ((concat_vec imm_12_9 (vec_of_bits [B0]  :  1 words$word)  :  5 words$word))
                              :  11 words$word))
                          :  12 words$word))
                      :  20 words$word))
                  :  21 words$word),rd)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((p1_ = (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  :  7 words$word)))) /\ (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))))) then
     let (imm :  12 words$word) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RISCV_JALR (imm,rs1,rd)
   else if (let mappingpatterns_24_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p0_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((encdec_bop_backwards_matches mappingpatterns_24_0)) /\ (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  :  7 words$word)))))) then
     let (imm7_6 : 1 bits) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)) in
     let (imm7_5_0 : 6 bits) = ((subrange_vec_dec v__175 (( 30 : int):ii) (( 25 : int):ii)  :  6 words$word)) in
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_24_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let (imm5_4_1 : 4 bits) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 8 : int):ii)  :  4 words$word)) in
     let (imm5_0 : 1 bits) = ((subrange_vec_dec v__175 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let op = (encdec_bop_backwards mappingpatterns_24_0) in
     BTYPE ((concat_vec imm7_6
               ((concat_vec imm5_0
                   ((concat_vec imm7_5_0
                       ((concat_vec imm5_4_1 (vec_of_bits [B0]  :  1 words$word)  :  5 words$word))
                      :  11 words$word))
                  :  12 words$word))
              :  13 words$word),rs2,rs1,op)
   else if (let mappingpatterns_25_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p0_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((encdec_iop_backwards_matches mappingpatterns_25_0)) /\ (((p0_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))))) then
     let (imm :  12 words$word) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_25_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let op = (encdec_iop_backwards mappingpatterns_25_0) in
     ITYPE (imm,rs1,rd,op)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))))) then
     let (shamt :  6 words$word) = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     SHIFTIOP (shamt,rs1,rd,RISCV_SLLI)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))))) then
     let (shamt :  6 words$word) = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     SHIFTIOP (shamt,rs1,rd,RISCV_SRLI)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0]  :  6 words$word)))))) then
     let (shamt :  6 words$word) = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     SHIFTIOP (shamt,rs1,rd,RISCV_SRAI)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_ADD)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_SUB)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_SLL)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_SLT)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_SLTU)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_XOR)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_SRL)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_SRA)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B1;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_OR)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B1;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPE (rs2,rs1,rd,RISCV_AND)
   else if (let mappingpatterns_26_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_27_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p0_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((size_bits_backwards_matches mappingpatterns_27_0)) /\ ((bool_bits_backwards_matches mappingpatterns_26_0))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  :  7 words$word)))))) then
     let (imm :  12 words$word) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_26_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_27_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_27_0) in
     let is_unsigned = (bool_bits_backwards mappingpatterns_26_0) in
     LOAD (imm,rs1,rd,is_unsigned,size1,F,F)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_28_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((size_bits_backwards_matches mappingpatterns_28_0)) /\ (((p1_ = (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p0_ = (vec_of_bits [B0]  :  1 words$word)))))) then
     let (imm7 : 7 bits) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_28_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let (imm5 : 5 bits) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_28_0) in
     STORE ((concat_vec imm7 imm5  :  12 words$word),rs2,rs1,size1,F,F)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((p1_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))))) then
     let (imm :  12 words$word) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     ADDIW (imm,rs1,rd)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (shamt :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     SHIFTW (shamt,rs1,rd,RISCV_SLLI)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (shamt :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     SHIFTW (shamt,rs1,rd,RISCV_SRLI)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (shamt :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     SHIFTW (shamt,rs1,rd,RISCV_SRAI)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPEW (rs2,rs1,rd,RISCV_ADDW)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SUBW)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SLLW)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SRLW)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SRAW)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let (mappingpatterns_29_0 : 3 bits) = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((encdec_mul_op_backwards_matches mappingpatterns_29_0)) /\ (((p1_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (mappingpatterns_29_0 : 3 bits) = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (high, signed1, signed2) = (encdec_mul_op_backwards mappingpatterns_29_0) in
     MUL (rs2,rs1,rd,high,signed1,signed2)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_30_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_30_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B0]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_30_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_30_0) in
     DIV0 (rs2,rs1,rd,s)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_31_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_31_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B1]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_31_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_31_0) in
     REM (rs2,rs1,rd,s)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     MULW (rs2,rs1,rd)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_32_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_32_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B0]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_32_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_32_0) in
     DIVW (rs2,rs1,rd,s)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_33_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_33_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B1]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_33_0 = ((subrange_vec_dec v__175 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_33_0) in
     REMW (rs2,rs1,rd,s)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)))))) then
     let (pred :  4 words$word) = ((subrange_vec_dec v__175 (( 27 : int):ii) (( 24 : int):ii)  :  4 words$word)) in
     let (succ :  4 words$word) = ((subrange_vec_dec v__175 (( 23 : int):ii) (( 20 : int):ii)  :  4 words$word)) in
     FENCE (pred,succ)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))))) then
     FENCEI () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))))) then
     ECALL () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p5_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p4_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p3_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p2_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  :  7 words$word)))))) then
     MRET () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p5_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p4_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p3_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p2_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  :  7 words$word)))))) then
     SRET () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))))) then
     EBREAK () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))))) then
     WFI () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((p3_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p2_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  :  7 words$word)))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     SFENCE_VMA (rs1,rs2)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_34_0 = ((subrange_vec_dec v__175 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_35_0 = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_36_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((((((((((size_bits_backwards_matches mappingpatterns_36_0)) /\ ((bool_bits_backwards_matches mappingpatterns_35_0))))) /\ ((bool_bits_backwards_matches mappingpatterns_34_0))))) /\ (((p3_ = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word))))))) /\ (((p2_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))))))) then
     let mappingpatterns_34_0 = ((subrange_vec_dec v__175 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_35_0 = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_36_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_36_0) in
     let rl = (bool_bits_backwards mappingpatterns_35_0) in
     let aq = (bool_bits_backwards mappingpatterns_34_0) in
     LOADRES (aq,rl,rs1,size1,rd)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_37_0 = ((subrange_vec_dec v__175 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_38_0 = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_39_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_39_0)) /\ ((bool_bits_backwards_matches mappingpatterns_38_0))))) /\ ((bool_bits_backwards_matches mappingpatterns_37_0))))) /\ (((p2_ = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))))))) then
     let mappingpatterns_37_0 = ((subrange_vec_dec v__175 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_38_0 = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_39_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_39_0) in
     let rl = (bool_bits_backwards mappingpatterns_38_0) in
     let aq = (bool_bits_backwards mappingpatterns_37_0) in
     STORECON (aq,rl,rs2,rs1,size1,rd)
   else if (let mappingpatterns_40_0 = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_41_0 = ((subrange_vec_dec v__175 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_42_0 = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let p0_ = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_43_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_43_0)) /\ ((bool_bits_backwards_matches mappingpatterns_42_0))))) /\ ((bool_bits_backwards_matches mappingpatterns_41_0))))) /\ ((encdec_amoop_backwards_matches mappingpatterns_40_0))))) /\ (((p1_ = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word))))))) /\ (((p0_ = (vec_of_bits [B0]  :  1 words$word)))))) then
     let mappingpatterns_40_0 = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_41_0 = ((subrange_vec_dec v__175 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_42_0 = ((subrange_vec_dec v__175 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__175 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_43_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_43_0) in
     let rl = (bool_bits_backwards mappingpatterns_42_0) in
     let aq = (bool_bits_backwards mappingpatterns_41_0) in
     let op = (encdec_amoop_backwards mappingpatterns_40_0) in
     AMO (op,aq,rl,rs2,rs1,size1,rd)
   else if (let mappingpatterns_44_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_45_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p0_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((encdec_csrop_backwards_matches mappingpatterns_45_0)) /\ ((bool_bits_backwards_matches mappingpatterns_44_0))))) /\ (((p0_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))))) then
     let (csr :  12 words$word) = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__175 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let mappingpatterns_44_0 = ((subrange_vec_dec v__175 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_45_0 = ((subrange_vec_dec v__175 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__175 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let op = (encdec_csrop_backwards mappingpatterns_45_0) in
     let is_imm = (bool_bits_backwards mappingpatterns_44_0) in
     CSR (csr,rs1,rd,is_imm,op)
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let p5_ = ((subrange_vec_dec v__175 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((p4_ = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) /\ (((p3_ = (vec_of_bits [B0;B0]  :  2 words$word))))))) /\ (((p2_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((p1_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) /\ (((p0_ = (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  :  16 words$word))))))
   then
     STOP_FETCHING () 
   else if (let p0_ = ((subrange_vec_dec v__175 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) in
     let p1_ = ((subrange_vec_dec v__175 (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)) in
     let p2_ = ((subrange_vec_dec v__175 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let p3_ = ((subrange_vec_dec v__175 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let p4_ = ((subrange_vec_dec v__175 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let p5_ = ((subrange_vec_dec v__175 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((p4_ = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) /\ (((p3_ = (vec_of_bits [B0;B0]  :  2 words$word))))))) /\ (((p2_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((p1_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) /\ (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  :  16 words$word))))))
   then
     THREAD_START () 
   else ILLEGAL v__175))`;


(*val encdec_forwards_matches : ast -> bool*)

val _ = Define `
 ((encdec_forwards_matches:ast -> bool) arg_=
    ((case arg_ of
     UTYPE (imm,rd,op) => T
   | RISCV_JAL (v__224,rd) =>
      if (let p0_ = ((subrange_vec_dec v__224 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        (p0_ = (vec_of_bits [B0]  :  1 words$word))) then
        T
      else
        let g__17 = (RISCV_JAL (v__224,rd)) in
        F
   | RISCV_JALR (imm,rs1,rd) => T
   | BTYPE (v__225,rs2,rs1,op) =>
      if (let p0_ = ((subrange_vec_dec v__225 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        (p0_ = (vec_of_bits [B0]  :  1 words$word))) then
        T
      else
        let g__17 = (BTYPE (v__225,rs2,rs1,op)) in
        F
   | ITYPE (imm,rs1,rd,op) => T
   | SHIFTIOP (shamt,rs1,rd,RISCV_SLLI) => T
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRLI) => T
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRAI) => T
   | RTYPE (rs2,rs1,rd,RISCV_ADD) => T
   | RTYPE (rs2,rs1,rd,RISCV_SUB) => T
   | RTYPE (rs2,rs1,rd,RISCV_SLL) => T
   | RTYPE (rs2,rs1,rd,RISCV_SLT) => T
   | RTYPE (rs2,rs1,rd,RISCV_SLTU) => T
   | RTYPE (rs2,rs1,rd,RISCV_XOR) => T
   | RTYPE (rs2,rs1,rd,RISCV_SRL) => T
   | RTYPE (rs2,rs1,rd,RISCV_SRA) => T
   | RTYPE (rs2,rs1,rd,RISCV_OR) => T
   | RTYPE (rs2,rs1,rd,RISCV_AND) => T
   | LOAD (imm,rs1,rd,is_unsigned,size1,F,F) => T
   | STORE (v__226,rs2,rs1,size1,F,F) => T
   | ADDIW (imm,rs1,rd) => T
   | SHIFTW (shamt,rs1,rd,RISCV_SLLI) => T
   | SHIFTW (shamt,rs1,rd,RISCV_SRLI) => T
   | SHIFTW (shamt,rs1,rd,RISCV_SRAI) => T
   | RTYPEW (rs2,rs1,rd,RISCV_ADDW) => T
   | RTYPEW (rs2,rs1,rd,RISCV_SUBW) => T
   | RTYPEW (rs2,rs1,rd,RISCV_SLLW) => T
   | RTYPEW (rs2,rs1,rd,RISCV_SRLW) => T
   | RTYPEW (rs2,rs1,rd,RISCV_SRAW) => T
   | MUL (rs2,rs1,rd,high,signed1,signed2) => T
   | DIV0 (rs2,rs1,rd,s) => T
   | REM (rs2,rs1,rd,s) => T
   | MULW (rs2,rs1,rd) => T
   | DIVW (rs2,rs1,rd,s) => T
   | REMW (rs2,rs1,rd,s) => T
   | FENCE (pred,succ) => T
   | FENCEI (() ) => T
   | ECALL (() ) => T
   | MRET (() ) => T
   | SRET (() ) => T
   | EBREAK (() ) => T
   | WFI (() ) => T
   | SFENCE_VMA (rs1,rs2) => T
   | LOADRES (aq,rl,rs1,size1,rd) => T
   | STORECON (aq,rl,rs2,rs1,size1,rd) => T
   | AMO (op,aq,rl,rs2,rs1,size1,rd) => T
   | CSR (csr,rs1,rd,is_imm,op) => T
   | STOP_FETCHING (() ) => T
   | THREAD_START (() ) => T
   | ILLEGAL (s) => T
   | g__17 => F
   )))`;


(*val encdec_backwards_matches : mword ty32 -> bool*)

val _ = Define `
 ((encdec_backwards_matches:(32)words$word -> bool) arg_=
    (let v__227 = arg_ in
   if (let mappingpatterns_0_0 = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     encdec_uop_backwards_matches mappingpatterns_0_0) then
     let mappingpatterns_0_0 = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     let op = (encdec_uop_backwards mappingpatterns_0_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (p0_ = (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  :  7 words$word))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((p1_ = (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  :  7 words$word)))) /\ (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))))) then
     T
   else if (let mappingpatterns_1_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p0_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((encdec_bop_backwards_matches mappingpatterns_1_0)) /\ (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  :  7 words$word)))))) then
     let mappingpatterns_1_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let op = (encdec_bop_backwards mappingpatterns_1_0) in
     T
   else if (let mappingpatterns_2_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p0_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((encdec_iop_backwards_matches mappingpatterns_2_0)) /\ (((p0_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))))) then
     let mappingpatterns_2_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let op = (encdec_iop_backwards mappingpatterns_2_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0]  :  6 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B1;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B1;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let mappingpatterns_3_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_4_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p0_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((size_bits_backwards_matches mappingpatterns_4_0)) /\ ((bool_bits_backwards_matches mappingpatterns_3_0))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  :  7 words$word)))))) then
     let mappingpatterns_3_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_4_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_4_0) in
     let is_unsigned = (bool_bits_backwards mappingpatterns_3_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_5_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((size_bits_backwards_matches mappingpatterns_5_0)) /\ (((p1_ = (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p0_ = (vec_of_bits [B0]  :  1 words$word)))))) then
     let mappingpatterns_5_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_5_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((p1_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p0_ = (vec_of_bits [B0;B0;B0]  :  3 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let (mappingpatterns_6_0 : 3 bits) = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((encdec_mul_op_backwards_matches mappingpatterns_6_0)) /\ (((p1_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let (mappingpatterns_6_0 : 3 bits) = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let (high, signed1, signed2) = (encdec_mul_op_backwards mappingpatterns_6_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_7_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_7_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B0]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let mappingpatterns_7_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_7_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_8_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_8_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B1]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let mappingpatterns_8_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_8_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word)))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_9_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_9_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B0]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let mappingpatterns_9_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_9_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) in
     let mappingpatterns_10_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_10_0)) /\ (((p2_ = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B1;B1]  :  2 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  :  7 words$word)))))) then
     let mappingpatterns_10_0 = ((subrange_vec_dec v__227 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let s = (bool_not_bits_backwards mappingpatterns_10_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0]  :  4 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p5_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p4_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p3_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p2_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p5_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p4_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p3_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p2_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  12 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((p4_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p3_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p2_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  :  12 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((p3_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))) /\ (((((regbits_to_regno p2_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((p1_ = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) /\ (((p0_ = (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  :  7 words$word)))))) then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_11_0 = ((subrange_vec_dec v__227 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_12_0 = ((subrange_vec_dec v__227 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_13_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((((((((((((((size_bits_backwards_matches mappingpatterns_13_0)) /\ ((bool_bits_backwards_matches mappingpatterns_12_0))))) /\ ((bool_bits_backwards_matches mappingpatterns_11_0))))) /\ (((p3_ = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word))))))) /\ (((p2_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((((regbits_to_regno p1_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))))) /\ (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))))))) then
     let mappingpatterns_11_0 = ((subrange_vec_dec v__227 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_12_0 = ((subrange_vec_dec v__227 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let mappingpatterns_13_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_13_0) in
     let rl = (bool_bits_backwards mappingpatterns_12_0) in
     let aq = (bool_bits_backwards mappingpatterns_11_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_14_0 = ((subrange_vec_dec v__227 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_15_0 = ((subrange_vec_dec v__227 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_16_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_16_0)) /\ ((bool_bits_backwards_matches mappingpatterns_15_0))))) /\ ((bool_bits_backwards_matches mappingpatterns_14_0))))) /\ (((p2_ = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word))))))) /\ (((p1_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((((regbits_to_regno p0_)) = ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))))))) then
     let mappingpatterns_14_0 = ((subrange_vec_dec v__227 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_15_0 = ((subrange_vec_dec v__227 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let mappingpatterns_16_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_16_0) in
     let rl = (bool_bits_backwards mappingpatterns_15_0) in
     let aq = (bool_bits_backwards mappingpatterns_14_0) in
     T
   else if (let mappingpatterns_17_0 = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_18_0 = ((subrange_vec_dec v__227 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_19_0 = ((subrange_vec_dec v__227 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let p0_ = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_20_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_20_0)) /\ ((bool_bits_backwards_matches mappingpatterns_19_0))))) /\ ((bool_bits_backwards_matches mappingpatterns_18_0))))) /\ ((encdec_amoop_backwards_matches mappingpatterns_17_0))))) /\ (((p1_ = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  :  7 words$word))))))) /\ (((p0_ = (vec_of_bits [B0]  :  1 words$word)))))) then
     let mappingpatterns_17_0 = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
     let mappingpatterns_18_0 = ((subrange_vec_dec v__227 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
     let mappingpatterns_19_0 = ((subrange_vec_dec v__227 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
     let mappingpatterns_20_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let size1 = (size_bits_backwards mappingpatterns_20_0) in
     let rl = (bool_bits_backwards mappingpatterns_19_0) in
     let aq = (bool_bits_backwards mappingpatterns_18_0) in
     let op = (encdec_amoop_backwards mappingpatterns_17_0) in
     T
   else if (let mappingpatterns_21_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_22_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let p0_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     ((((((encdec_csrop_backwards_matches mappingpatterns_22_0)) /\ ((bool_bits_backwards_matches mappingpatterns_21_0))))) /\ (((p0_ = (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  :  7 words$word)))))) then
     let mappingpatterns_21_0 = ((subrange_vec_dec v__227 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
     let mappingpatterns_22_0 = ((subrange_vec_dec v__227 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
     let op = (encdec_csrop_backwards mappingpatterns_22_0) in
     let is_imm = (bool_bits_backwards mappingpatterns_21_0) in
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let p5_ = ((subrange_vec_dec v__227 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((p4_ = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) /\ (((p3_ = (vec_of_bits [B0;B0]  :  2 words$word))))))) /\ (((p2_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((p1_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) /\ (((p0_ = (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  :  16 words$word))))))
   then
     T
   else if (let p0_ = ((subrange_vec_dec v__227 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) in
     let p1_ = ((subrange_vec_dec v__227 (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)) in
     let p2_ = ((subrange_vec_dec v__227 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let p3_ = ((subrange_vec_dec v__227 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let p4_ = ((subrange_vec_dec v__227 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let p5_ = ((subrange_vec_dec v__227 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
     ((((((((((((((((p5_ = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((p4_ = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) /\ (((p3_ = (vec_of_bits [B0;B0]  :  2 words$word))))))) /\ (((p2_ = (vec_of_bits [B0]  :  1 words$word))))))) /\ (((p1_ = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) /\ (((p0_ = (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  :  16 words$word))))))
   then
     T
   else T))`;


val _ = Define `
 ((print_insn:ast -> string) merge_var=
    ((case merge_var of
     NOP (g__13) => "nop"
   | C_ADDI4SPN (rdc,nzimm) =>
      STRCAT "c.addi4spn "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rdc  :  5 words$word))))
            ((STRCAT ", " ((string_of_bits nzimm))))))
   | C_LW (uimm,rsc,rdc) =>
      STRCAT "c.lw   "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rdc  :  5 words$word))))
            ((STRCAT ", "
                ((STRCAT ((reg_name_abi ((creg2reg_bits rsc  :  5 words$word))))
                    ((STRCAT ", " ((string_of_bits uimm))))))))))
   | C_LD (uimm,rsc,rdc) =>
      STRCAT "c.ld   "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rdc  :  5 words$word))))
            ((STRCAT ", "
                ((STRCAT ((reg_name_abi ((creg2reg_bits rsc  :  5 words$word))))
                    ((STRCAT ", " ((string_of_bits uimm))))))))))
   | C_SW (uimm,rsc1,rsc2) =>
      STRCAT "c.sw   "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsc1  :  5 words$word))))
            ((STRCAT ", "
                ((STRCAT ((reg_name_abi ((creg2reg_bits rsc2  :  5 words$word))))
                    ((STRCAT ", " ((string_of_bits uimm))))))))))
   | C_SD (uimm,rsc1,rsc2) =>
      STRCAT "c.sd   "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsc1  :  5 words$word))))
            ((STRCAT ", "
                ((STRCAT ((reg_name_abi ((creg2reg_bits rsc2  :  5 words$word))))
                    ((STRCAT ", " ((string_of_bits uimm))))))))))
   | C_ADDI (nzi,rsd) =>
      STRCAT "c.addi   "
        ((STRCAT ((reg_name_abi rsd)) ((STRCAT ", " ((string_of_bits nzi))))))
   | C_JAL (imm) => STRCAT "c.jal   " ((string_of_bits imm))
   | C_ADDIW (imm,rsd) =>
      STRCAT "c.addiw "
        ((STRCAT ((reg_name_abi rsd)) ((STRCAT ", " ((string_of_bits imm))))))
   | C_LI (imm,rd) =>
      STRCAT "c.li  "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((string_of_bits imm))))))
   | C_ADDI16SP (imm) => STRCAT "c.addi16sp  " ((string_of_bits imm))
   | C_LUI (imm,rd) =>
      STRCAT "c.lui  "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((string_of_bits imm))))))
   | C_SRLI (shamt,rsd) =>
      STRCAT "c.srli  "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((string_of_bits shamt))))))
   | C_SRAI (shamt,rsd) =>
      STRCAT "c.srai  "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((string_of_bits shamt))))))
   | C_ANDI (imm,rsd) =>
      STRCAT "c.andi  "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((string_of_bits imm))))))
   | C_SUB (rsd,rs2) =>
      STRCAT "c.sub  "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((reg_name_abi ((creg2reg_bits rs2  :  5 words$word))))))))
   | C_XOR (rsd,rs2) =>
      STRCAT "c.xor  "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((reg_name_abi ((creg2reg_bits rs2  :  5 words$word))))))))
   | C_OR (rsd,rs2) =>
      STRCAT "c.or   "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((reg_name_abi ((creg2reg_bits rs2  :  5 words$word))))))))
   | C_AND (rsd,rs2) =>
      STRCAT "c.and  "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((reg_name_abi ((creg2reg_bits rs2  :  5 words$word))))))))
   | C_SUBW (rsd,rs2) =>
      STRCAT "c.subw "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((reg_name_abi ((creg2reg_bits rs2  :  5 words$word))))))))
   | C_ADDW (rsd,rs2) =>
      STRCAT "c.addw "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rsd  :  5 words$word))))
            ((STRCAT ", " ((reg_name_abi ((creg2reg_bits rs2  :  5 words$word))))))))
   | C_J (imm) => STRCAT "c.j    " ((string_of_bits imm))
   | C_BEQZ (imm,rs) =>
      STRCAT "c.beqz "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rs  :  5 words$word))))
            ((STRCAT ", " ((string_of_bits imm))))))
   | C_BNEZ (imm,rs) =>
      STRCAT "c.bnez "
        ((STRCAT ((reg_name_abi ((creg2reg_bits rs  :  5 words$word))))
            ((STRCAT ", " ((string_of_bits imm))))))
   | C_SLLI (shamt,rsd) =>
      STRCAT "c.slli "
        ((STRCAT ((reg_name_abi rsd)) ((STRCAT ", " ((string_of_bits shamt))))))
   | C_LWSP (uimm,rd) =>
      STRCAT "c.lwsp "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((string_of_bits uimm))))))
   | C_LDSP (uimm,rd) =>
      STRCAT "c.ldsp "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((string_of_bits uimm))))))
   | C_SWSP (uimm,rd) =>
      STRCAT "c.swsp "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((string_of_bits uimm))))))
   | C_SDSP (uimm,rd) =>
      STRCAT "c.sdsp "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((string_of_bits uimm))))))
   | C_JR (rs1) => STRCAT "c.jr  " ((reg_name_abi rs1))
   | C_JALR (rs1) => STRCAT "c.jalr  " ((reg_name_abi rs1))
   | C_MV (rd,rs2) =>
      STRCAT "c.mv  "
        ((STRCAT ((reg_name_abi rd)) ((STRCAT ", " ((reg_name_abi rs2))))))
   | C_ADD (rsd,rs2) =>
      STRCAT "c.add  "
        ((STRCAT ((reg_name_abi rsd)) ((STRCAT ", " ((reg_name_abi rs2))))))
   | STOP_FETCHING (g__14) => "stop_fetching"
   | THREAD_START (g__15) => "thread_start"
   | ILLEGAL (s) => STRCAT "illegal " ((string_of_bits s))
   | C_ILLEGAL (g__16) => "c.illegal"
   | insn => assembly_forwards insn
   )))`;


val _ = Define `
 ((decode:(32)words$word ->(ast)option) bv=  (SOME ((encdec_backwards bv))))`;


(*val isRVC : mword ty16 -> bool*)

val _ = Define `
 ((isRVC:(16)words$word -> bool) h=
    (~ (((((subrange_vec_dec h (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))`;


(*val fetch : unit -> M FetchResult*)

val _ = Define `
 ((fetch:unit ->(regstate)sail2_state_monad$sequential_state ->(((FetchResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state$or_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : xlenbits) . 
      sail2_state_monad$returnS (((((cast_unit_vec0 ((access_vec_dec w__0 (( 0 : int):ii)))  :  1 words$word)) <> (vec_of_bits [B0]  :  1 words$word))))))
     (sail2_state$and_boolS
        ( sail2_state_monad$bindS(sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 : xlenbits) . 
         sail2_state_monad$returnS (((((cast_unit_vec0 ((access_vec_dec w__1 (( 1 : int):ii)))  :  1 words$word)) <> (vec_of_bits [B0]  :  1 words$word))))))
        ( sail2_state_monad$bindS(haveRVC () ) (\ (w__2 : bool) .  sail2_state_monad$returnS ((~ w__2)))))) (\ (w__4 : bool) . 
   if w__4 then sail2_state_monad$bindS
     (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__5 :  64 words$word) . 
     sail2_state_monad$returnS (F_Error (E_Fetch_Addr_Align,w__5)))
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__6 :  64 words$word) .  sail2_state_monad$bindS
     (translateAddr w__6 Execute Instruction) (\ (w__7 : TR_Result) . 
     (case w__7 of
       TR_Failure (e) => sail2_state_monad$bindS
        (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__8 :  64 words$word) .  sail2_state_monad$returnS (F_Error (e,w__8)))
     | TR_Address (ppclo) => sail2_state_monad$bindS
        (checked_mem_read Instruction ppclo (( 2 : int):ii)  : ( ( 16 words$word)MemoryOpResult) M) (\ (w__9 : ( 16 words$word)
          MemoryOpResult) . 
        (case w__9 of
          MemException (e) => sail2_state_monad$bindS
           (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__10 :  64 words$word) . 
           sail2_state_monad$returnS (F_Error (E_Fetch_Access_Fault,w__10)))
        | MemValue (ilo) =>
           if ((isRVC ilo)) then sail2_state_monad$returnS (F_RVC ilo)
           else sail2_state_monad$bindS
             (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__11 :  64 words$word) . 
             let (PChi : xlenbits) = ((add_vec_int w__11 (( 2 : int):ii)  :  64 words$word)) in sail2_state_monad$bindS
             (translateAddr PChi Execute Instruction) (\ (w__12 : TR_Result) . 
             (case w__12 of
               TR_Failure (e) => sail2_state_monad$returnS (F_Error (e,PChi))
             | TR_Address (ppchi) => sail2_state_monad$bindS
                (checked_mem_read Instruction ppchi (( 2 : int):ii)  : ( ( 16 words$word)MemoryOpResult) M) (\ (w__13 : ( 16 words$word)
                  MemoryOpResult) . 
                sail2_state_monad$returnS ((case w__13 of
                  MemException (e) => F_Error (E_Fetch_Access_Fault,PChi)
                | MemValue (ihi) => F_Base ((concat_vec ihi ilo  :  32 words$word))
                )))
             )))
        ))
     ))))))`;


(*val step : ii -> M (bool * bool)*)

val _ = Define `
 ((step:int ->(regstate)sail2_state_monad$sequential_state ->(((bool#bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) step_no=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mip_ref) (\ (w__1 : Minterrupts) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mie_ref) (\ (w__2 : Minterrupts) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mideleg_ref) (\ (w__3 : Minterrupts) .  sail2_state_monad$bindS
   (curInterrupt w__0 w__1 w__2 w__3) (\ (w__4 :  ((InterruptType # Privilege))option) . 
   (case w__4 of
     SOME (intr,priv) =>
      let (_ : unit) = (print_bits "Handling interrupt: " ((interruptType_to_bits intr  :  4 words$word))) in sail2_state_monad$seqS
      (handle_interrupt intr priv) (sail2_state_monad$returnS (F, F))
   | NONE => sail2_state_monad$bindS
      (fetch () ) (\ (w__5 : FetchResult) . 
      (case w__5 of
        F_Error (e,addr) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS (F, F))
      | F_RVC (h) =>
         (case ((decodeCompressed h)) of
           NONE => sail2_state_monad$bindS
            (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__6 : Privilege) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__7 : xlenbits) . 
            let (_ : unit) =
              (print_endline
                ((STRCAT "["
                    ((STRCAT ((stringFromInteger step_no))
                        ((STRCAT "] ["
                            ((STRCAT ((privLevel_to_str w__6))
                                ((STRCAT "]: "
                                    ((STRCAT ((string_of_bits w__7))
                                        ((STRCAT " ("
                                            ((STRCAT ((string_of_bits h)) ") <no-decode>"))))))))))))))))) in sail2_state_monad$seqS
            (handle_decode_exception ((EXTZ (( 64 : int):ii) h  :  64 words$word))) (sail2_state_monad$returnS (F, T))))
         | SOME (ast) => sail2_state_monad$bindS
            (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__8 : Privilege) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__9 : xlenbits) . 
            let (_ : unit) =
              (print_endline
                ((STRCAT "["
                    ((STRCAT ((stringFromInteger step_no))
                        ((STRCAT "] ["
                            ((STRCAT ((privLevel_to_str w__8))
                                ((STRCAT "]: "
                                    ((STRCAT ((string_of_bits w__9))
                                        ((STRCAT " ("
                                            ((STRCAT ((string_of_bits h))
                                                ((STRCAT ") " ((print_insn ast))))))))))))))))))))) in sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__10 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
            (sail2_state_monad$write_regS nextPC_ref ((add_vec_int w__10 (( 2 : int):ii)  :  64 words$word)))
            (execute ast)) (\ (w__11 : bool) .  sail2_state_monad$returnS (w__11, T)))))
         )
      | F_Base (w) =>
         (case ((decode w)) of
           NONE => sail2_state_monad$bindS
            (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__13 : Privilege) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__14 : xlenbits) . 
            let (_ : unit) =
              (print_endline
                ((STRCAT "["
                    ((STRCAT ((stringFromInteger step_no))
                        ((STRCAT "] ["
                            ((STRCAT ((privLevel_to_str w__13))
                                ((STRCAT "]: "
                                    ((STRCAT ((string_of_bits w__14))
                                        ((STRCAT " ("
                                            ((STRCAT ((string_of_bits w)) ") <no-decode>"))))))))))))))))) in sail2_state_monad$seqS
            (handle_decode_exception ((EXTZ (( 64 : int):ii) w  :  64 words$word))) (sail2_state_monad$returnS (F, T))))
         | SOME (ast) => sail2_state_monad$bindS
            (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__15 : Privilege) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__16 : xlenbits) . 
            let (_ : unit) =
              (print_endline
                ((STRCAT "["
                    ((STRCAT ((stringFromInteger step_no))
                        ((STRCAT "] ["
                            ((STRCAT ((privLevel_to_str w__15))
                                ((STRCAT "]: "
                                    ((STRCAT ((string_of_bits w__16))
                                        ((STRCAT " ("
                                            ((STRCAT ((string_of_bits w))
                                                ((STRCAT ") " ((print_insn ast))))))))))))))))))))) in sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__17 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
            (sail2_state_monad$write_regS nextPC_ref ((add_vec_int w__17 (( 4 : int):ii)  :  64 words$word)))
            (execute ast)) (\ (w__18 : bool) .  sail2_state_monad$returnS (w__18, T)))))
         )
      ))
   ))))))))`;


(*val loop : unit -> M unit*)

val _ = Define `
 ((loop:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (let insns_per_tick = (plat_insns_per_tick () ) in
   let (i : ii) = ((( 0 : int):ii)) in
   let (step_no : ii) = ((( 0 : int):ii)) in sail2_state_monad$bindS
   (sail2_state$whileS (i, step_no)
     (\ varstup .  let (i, step_no) = varstup in sail2_state_monad$bindS
       (sail2_state_monad$read_regS htif_done_ref) (\ (w__0 : bool) .  sail2_state_monad$returnS ((~ w__0))))
     (\ varstup .  let (i, step_no) = varstup in sail2_state_monad$bindS (sail2_state_monad$seqS
       (sail2_state_monad$write_regS minstret_written_ref F)
       (step step_no)) (\ varstup .  let (retired, stepped) = varstup in sail2_state_monad$bindS
       (sail2_state_monad$read_regS nextPC_ref  : ( 64 words$word) M) (\ (w__1 : xlenbits) .  sail2_state_monad$seqS (sail2_state_monad$seqS
       (sail2_state_monad$write_regS PC_ref w__1)
       (if retired then retire_instruction () 
        else sail2_state_monad$returnS () ))
       (let (step_no : ii) = (if stepped then ((ex_int step_no)) + (( 1 : int):ii) else step_no) in sail2_state_monad$bindS
       (sail2_state_monad$read_regS htif_done_ref) (\ (w__2 : bool) .  sail2_state_monad$bindS
       (if w__2 then sail2_state_monad$bindS
          (sail2_state_monad$read_regS htif_exit_code_ref  : ( 64 words$word) M) (\ (w__3 : xlenbits) . 
          let exit_val = (lem$w2ui w__3) in
          sail2_state_monad$returnS (let _ =
            (if (((exit_val = (( 0 : int):ii)))) then print_endline "SUCCESS"
            else print_int "FAILURE: " exit_val) in
          i))
        else
          let i = (((ex_int i)) + (( 1 : int):ii)) in
          if (((((ex_int i)) = insns_per_tick))) then sail2_state_monad$seqS (sail2_state_monad$seqS
            (tick_clock () ) (tick_platform () )) (sail2_state_monad$returnS (( 0 : int):ii))
          else sail2_state_monad$returnS i) (\ (i : ii) . 
       sail2_state_monad$returnS (i, step_no)))))))) (\ varstup .  let ((i : ii), (step_no : ii)) = varstup in
   sail2_state_monad$returnS () )))`;


(*val read_kind_of_num : integer -> read_kind*)

val _ = Define `
 ((read_kind_of_num:int -> read_kind) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Read_plain
   else if (((p0_ = (( 1 : int):ii)))) then Read_reserve
   else if (((p0_ = (( 2 : int):ii)))) then Read_acquire
   else if (((p0_ = (( 3 : int):ii)))) then Read_exclusive
   else if (((p0_ = (( 4 : int):ii)))) then Read_exclusive_acquire
   else if (((p0_ = (( 5 : int):ii)))) then Read_stream
   else if (((p0_ = (( 6 : int):ii)))) then Read_RISCV_acquire
   else if (((p0_ = (( 7 : int):ii)))) then Read_RISCV_strong_acquire
   else if (((p0_ = (( 8 : int):ii)))) then Read_RISCV_reserved
   else if (((p0_ = (( 9 : int):ii)))) then Read_RISCV_reserved_acquire
   else if (((p0_ = (( 10 : int):ii)))) then Read_RISCV_reserved_strong_acquire
   else Read_X86_locked))`;


(*val num_of_read_kind : read_kind -> integer*)

val _ = Define `
 ((num_of_read_kind:read_kind -> int) arg_=
    ((case arg_ of
     Read_plain => (( 0 : int):ii)
   | Read_reserve => (( 1 : int):ii)
   | Read_acquire => (( 2 : int):ii)
   | Read_exclusive => (( 3 : int):ii)
   | Read_exclusive_acquire => (( 4 : int):ii)
   | Read_stream => (( 5 : int):ii)
   | Read_RISCV_acquire => (( 6 : int):ii)
   | Read_RISCV_strong_acquire => (( 7 : int):ii)
   | Read_RISCV_reserved => (( 8 : int):ii)
   | Read_RISCV_reserved_acquire => (( 9 : int):ii)
   | Read_RISCV_reserved_strong_acquire => (( 10 : int):ii)
   | Read_X86_locked => (( 11 : int):ii)
   )))`;


(*val write_kind_of_num : integer -> write_kind*)

val _ = Define `
 ((write_kind_of_num:int -> write_kind) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Write_plain
   else if (((p0_ = (( 1 : int):ii)))) then Write_conditional
   else if (((p0_ = (( 2 : int):ii)))) then Write_release
   else if (((p0_ = (( 3 : int):ii)))) then Write_exclusive
   else if (((p0_ = (( 4 : int):ii)))) then Write_exclusive_release
   else if (((p0_ = (( 5 : int):ii)))) then Write_RISCV_release
   else if (((p0_ = (( 6 : int):ii)))) then Write_RISCV_strong_release
   else if (((p0_ = (( 7 : int):ii)))) then Write_RISCV_conditional
   else if (((p0_ = (( 8 : int):ii)))) then Write_RISCV_conditional_release
   else if (((p0_ = (( 9 : int):ii)))) then Write_RISCV_conditional_strong_release
   else Write_X86_locked))`;


(*val num_of_write_kind : write_kind -> integer*)

val _ = Define `
 ((num_of_write_kind:write_kind -> int) arg_=
    ((case arg_ of
     Write_plain => (( 0 : int):ii)
   | Write_conditional => (( 1 : int):ii)
   | Write_release => (( 2 : int):ii)
   | Write_exclusive => (( 3 : int):ii)
   | Write_exclusive_release => (( 4 : int):ii)
   | Write_RISCV_release => (( 5 : int):ii)
   | Write_RISCV_strong_release => (( 6 : int):ii)
   | Write_RISCV_conditional => (( 7 : int):ii)
   | Write_RISCV_conditional_release => (( 8 : int):ii)
   | Write_RISCV_conditional_strong_release => (( 9 : int):ii)
   | Write_X86_locked => (( 10 : int):ii)
   )))`;


(*val barrier_kind_of_num : integer -> barrier_kind*)

val _ = Define `
 ((barrier_kind_of_num:int -> barrier_kind) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Barrier_Sync
   else if (((p0_ = (( 1 : int):ii)))) then Barrier_LwSync
   else if (((p0_ = (( 2 : int):ii)))) then Barrier_Eieio
   else if (((p0_ = (( 3 : int):ii)))) then Barrier_Isync
   else if (((p0_ = (( 4 : int):ii)))) then Barrier_DMB
   else if (((p0_ = (( 5 : int):ii)))) then Barrier_DMB_ST
   else if (((p0_ = (( 6 : int):ii)))) then Barrier_DMB_LD
   else if (((p0_ = (( 7 : int):ii)))) then Barrier_DSB
   else if (((p0_ = (( 8 : int):ii)))) then Barrier_DSB_ST
   else if (((p0_ = (( 9 : int):ii)))) then Barrier_DSB_LD
   else if (((p0_ = (( 10 : int):ii)))) then Barrier_ISB
   else if (((p0_ = (( 11 : int):ii)))) then Barrier_MIPS_SYNC
   else if (((p0_ = (( 12 : int):ii)))) then Barrier_RISCV_rw_rw
   else if (((p0_ = (( 13 : int):ii)))) then Barrier_RISCV_r_rw
   else if (((p0_ = (( 14 : int):ii)))) then Barrier_RISCV_r_r
   else if (((p0_ = (( 15 : int):ii)))) then Barrier_RISCV_rw_w
   else if (((p0_ = (( 16 : int):ii)))) then Barrier_RISCV_w_w
   else if (((p0_ = (( 17 : int):ii)))) then Barrier_RISCV_w_rw
   else if (((p0_ = (( 18 : int):ii)))) then Barrier_RISCV_rw_r
   else if (((p0_ = (( 19 : int):ii)))) then Barrier_RISCV_r_w
   else if (((p0_ = (( 20 : int):ii)))) then Barrier_RISCV_w_r
   else if (((p0_ = (( 21 : int):ii)))) then Barrier_RISCV_i
   else Barrier_x86_MFENCE))`;


(*val num_of_barrier_kind : barrier_kind -> integer*)

val _ = Define `
 ((num_of_barrier_kind:barrier_kind -> int) arg_=
    ((case arg_ of
     Barrier_Sync => (( 0 : int):ii)
   | Barrier_LwSync => (( 1 : int):ii)
   | Barrier_Eieio => (( 2 : int):ii)
   | Barrier_Isync => (( 3 : int):ii)
   | Barrier_DMB => (( 4 : int):ii)
   | Barrier_DMB_ST => (( 5 : int):ii)
   | Barrier_DMB_LD => (( 6 : int):ii)
   | Barrier_DSB => (( 7 : int):ii)
   | Barrier_DSB_ST => (( 8 : int):ii)
   | Barrier_DSB_LD => (( 9 : int):ii)
   | Barrier_ISB => (( 10 : int):ii)
   | Barrier_MIPS_SYNC => (( 11 : int):ii)
   | Barrier_RISCV_rw_rw => (( 12 : int):ii)
   | Barrier_RISCV_r_rw => (( 13 : int):ii)
   | Barrier_RISCV_r_r => (( 14 : int):ii)
   | Barrier_RISCV_rw_w => (( 15 : int):ii)
   | Barrier_RISCV_w_w => (( 16 : int):ii)
   | Barrier_RISCV_w_rw => (( 17 : int):ii)
   | Barrier_RISCV_rw_r => (( 18 : int):ii)
   | Barrier_RISCV_r_w => (( 19 : int):ii)
   | Barrier_RISCV_w_r => (( 20 : int):ii)
   | Barrier_RISCV_i => (( 21 : int):ii)
   | Barrier_x86_MFENCE => (( 22 : int):ii)
   )))`;


(*val trans_kind_of_num : integer -> trans_kind*)

val _ = Define `
 ((trans_kind_of_num:int -> trans_kind) arg_=
    (let p0_ = arg_ in
   if (((p0_ = (( 0 : int):ii)))) then Transaction_start
   else if (((p0_ = (( 1 : int):ii)))) then Transaction_commit
   else Transaction_abort))`;


(*val num_of_trans_kind : trans_kind -> integer*)

val _ = Define `
 ((num_of_trans_kind:trans_kind -> int) arg_=
    ((case arg_ of
     Transaction_start => (( 0 : int):ii)
   | Transaction_commit => (( 1 : int):ii)
   | Transaction_abort => (( 2 : int):ii)
   )))`;


val _ = Define `
((GPRstr:(string)list)=
   (["x31";"x30";"x29";"x28";"x27";"x26";"x25";"x24";"x23";"x22";"x21";"x20";"x19";"x18";"x17";"x16";
   "x15";"x14";"x13";"x12";"x21";"x10";"x9";"x8";"x7";"x6";"x5";"x4";"x3";"x2";"x1";"x0"]))`;


val _ = Define `
 ((CIA_fp:regfp)=  (RFull "CIA"))`;


val _ = Define `
 ((NIA_fp:regfp)=  (RFull "NIA"))`;


(*val initial_analysis : ast -> M (list regfp * list regfp * list regfp * list niafp * diafp * instruction_kind)*)

val _ = Define `
 ((initial_analysis:ast ->(regstate)sail2_state_monad$sequential_state ->((((regfp)list#(regfp)list#(regfp)list#(niafp)list#diafp#instruction_kind),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) instr=
    (let iR = ([]) in
   let oR = ([]) in
   let aR = ([]) in
   let ik = (IK_simple () ) in
   let Nias = ([NIAFP_successor () ]) in
   let Dia = (DIAFP_none () ) in sail2_state_monad$bindS
   (case instr of
     EBREAK (_) => sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | UTYPE (imm,rd,op) =>
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | RISCV_JAL (imm,rd) =>
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      let (offset : 64 bits) = ((EXTS (( 64 : int):ii) imm  :  64 words$word)) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
      let (Nias : niafps) = ([NIAFP_concrete_address ((add_vec w__0 offset  :  64 words$word))]) in
      let (ik : instruction_kind) = (IK_branch () ) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | RISCV_JALR (imm,rs,rd) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      let (offset : 64 bits) = ((EXTS (( 64 : int):ii) imm  :  64 words$word)) in
      let (Nias : niafps) = ([NIAFP_indirect_address () ]) in
      let (ik : instruction_kind) = (IK_branch () ) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | BTYPE (imm,rs2,rs1,op) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) :: iR) in
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let ik = (IK_branch () ) in
      let (offset : 64 bits) = ((EXTS (( 64 : int):ii) imm  :  64 words$word)) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
      let (Nias : niafps) =
        ([NIAFP_concrete_address ((add_vec w__1 offset  :  64 words$word));NIAFP_successor () ]) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | ITYPE (imm,rs,rd,op) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | SHIFTIOP (imm,rs,rd,op) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | RTYPE (rs2,rs1,rd,op) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) :: iR) in
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | CSR (csr,rs1,rd,is_imm,op) =>
      let (isWrite : bool) =
        ((case op of
          CSRRW => T
        | _ => if is_imm then (((lem$w2ui rs1)) <> (( 0 : int):ii)) else (((lem$w2ui rs1)) <> (( 0 : int):ii))
        )) in
      let (iR : regfps) = ((RFull ((csr_name csr))) :: iR) in
      let (iR : regfps) =
        (if ((~ is_imm)) then (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR
        else iR) in
      let (oR : regfps) = (if isWrite then (RFull ((csr_name csr))) :: oR else oR) in
      let (oR : regfps) = ((RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | LOAD (imm,rs,rd,unsign,width,aq,rl) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      let aR = iR in sail2_state_monad$bindS
      (case (aq, rl) of
        (F, F) => sail2_state_monad$returnS (IK_mem_read Read_plain)
      | (T, F) => sail2_state_monad$returnS (IK_mem_read Read_RISCV_acquire)
      | (T, T) => sail2_state_monad$returnS (IK_mem_read Read_RISCV_strong_acquire)
      | _ => internal_error "LOAD type not implemented in initial_analysis"
      ) (\ (w__3 : instruction_kind) . 
      let (ik : instruction_kind) = w__3 in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | STORE (imm,rs2,rs1,width,aq,rl) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) :: iR) in
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let (aR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then aR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: aR) in sail2_state_monad$bindS
      (case (aq, rl) of
        (F, F) => sail2_state_monad$returnS (IK_mem_write Write_plain)
      | (F, T) => sail2_state_monad$returnS (IK_mem_write Write_RISCV_release)
      | (T, T) => sail2_state_monad$returnS (IK_mem_write Write_RISCV_strong_release)
      | _ => internal_error "STORE type not implemented in initial_analysis"
      ) (\ (w__5 : instruction_kind) . 
      let (ik : instruction_kind) = w__5 in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | ADDIW (imm,rs,rd) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | SHIFTW (imm,rs,rd,op) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | RTYPEW (rs2,rs1,rd,op) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) :: iR) in
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | FENCE (pred,succ) => sail2_state_monad$bindS
      (case (pred, succ) of
        (v__276, v__277) =>
         if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_rw_rw)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_r_rw)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_r_r)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_rw_w)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_w_w)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_w_rw)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_rw_r)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_r_w)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B1]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B1;B0]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_barrier Barrier_RISCV_w_r)
         else if ((((((((subrange_vec_dec v__276 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word)))) /\ (((((subrange_vec_dec v__277 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (vec_of_bits [B0;B0]  :  2 words$word))))))) then
           sail2_state_monad$returnS (IK_simple () )
         else internal_error "barrier type not implemented in initial_analysis"
      ) (\ (w__17 : instruction_kind) . 
      let (ik : instruction_kind) = w__17 in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | FENCEI (_) =>
      let (ik : instruction_kind) = (IK_barrier Barrier_RISCV_i) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | LOADRES (aq,rl,rs1,width,rd) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      let aR = iR in sail2_state_monad$bindS
      (case (aq, rl) of
        (F, F) => sail2_state_monad$returnS (IK_mem_read Read_RISCV_reserved)
      | (T, F) => sail2_state_monad$returnS (IK_mem_read Read_RISCV_reserved_acquire)
      | (T, T) => sail2_state_monad$returnS (IK_mem_read Read_RISCV_reserved_strong_acquire)
      | (F, T) => internal_error "LOADRES type not implemented in initial_analysis"
      ) (\ (w__19 : instruction_kind) . 
      let (ik : instruction_kind) = w__19 in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | STORECON (aq,rl,rs2,rs1,width,rd) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) :: iR) in
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let (aR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then aR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: aR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in sail2_state_monad$bindS
      (case (aq, rl) of
        (F, F) => sail2_state_monad$returnS (IK_mem_write Write_RISCV_conditional)
      | (F, T) => sail2_state_monad$returnS (IK_mem_write Write_RISCV_conditional_release)
      | (T, T) => sail2_state_monad$returnS (IK_mem_write Write_RISCV_conditional_strong_release)
      | (T, F) => internal_error "STORECON type not implemented in initial_analysis"
      ) (\ (w__21 : instruction_kind) . 
      let (ik : instruction_kind) = w__21 in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR))
   | AMO (op,aq,rl,rs2,rs1,width,rd) =>
      let (iR : regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) :: iR) in
      let (iR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: iR) in
      let (aR : regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 : int):ii)))) then aR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) :: aR) in
      let (oR : regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 : int):ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) :: oR) in
      let (ik : instruction_kind) =
        ((case (aq, rl) of
          (F, F) => IK_mem_rmw (Read_RISCV_reserved,Write_RISCV_conditional)
        | (F, T) => IK_mem_rmw (Read_RISCV_reserved,Write_RISCV_conditional_release)
        | (T, F) => IK_mem_rmw (Read_RISCV_reserved_acquire,Write_RISCV_conditional)
        | (T, T) => IK_mem_rmw (Read_RISCV_reserved_acquire,Write_RISCV_conditional_release)
        )) in
      sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   | _ => sail2_state_monad$returnS (Nias, aR, iR, ik, oR)
   ) (\ varstup .  let ((Nias : niafps), (aR : regfps), (iR : regfps), (ik : instruction_kind), (oR :
     regfps)) = varstup in
   sail2_state_monad$returnS (iR, oR, aR, Nias, Dia, ik))))`;


val _ = Define `
((initial_regstate:regstate)=
   (<| tlb39 := NONE; 
     htif_exit_code :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     htif_done := F; 
     htif_tohost :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mtimecmp :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     tselect :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     stval :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     scause :=
       (<| Mcause_Mcause_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     sepc :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     sscratch :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     stvec :=
       (<| Mtvec_Mtvec_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     satp :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     sideleg :=
       (<| Sinterrupts_Sinterrupts_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     sedeleg :=
       (<| Sedeleg_Sedeleg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     pmpcfg0 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     pmpaddr0 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mhartid :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     marchid :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mimpid :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mvendorid :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     minstret_written := F; 
     minstret :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mtime :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mcycle :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     scounteren :=
       (<| Counteren_Counteren_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0]
               :  32 words$word)) |>); 
     mcounteren :=
       (<| Counteren_Counteren_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0]
               :  32 words$word)) |>); 
     mscratch :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mtval :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mepc :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     mcause :=
       (<| Mcause_Mcause_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     mtvec :=
       (<| Mtvec_Mtvec_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     medeleg :=
       (<| Medeleg_Medeleg_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     mideleg :=
       (<| Minterrupts_Minterrupts_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     mie :=
       (<| Minterrupts_Minterrupts_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     mip :=
       (<| Minterrupts_Minterrupts_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     mstatus :=
       (<| Mstatus_Mstatus_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     misa :=
       (<| Misa_Misa_chunk_0 :=
             ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
               :  64 words$word)) |>); 
     cur_inst :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     cur_privilege := User; 
     x31 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x30 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x29 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x28 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x27 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x26 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x25 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x24 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x23 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x22 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x21 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x20 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x19 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x18 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x17 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x16 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x15 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x14 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x13 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x12 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x11 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x10 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x9 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x8 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x7 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x6 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x5 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x4 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x3 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x2 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     x1 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     Xs :=
       ([(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word)]); 
     nextPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     PC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)) |>))`;



val _ = export_theory()

