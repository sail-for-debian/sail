chapter \<open>Generated by Lem from \<open>aarch64_types.lem\<close>.\<close>

theory "Aarch64_types" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_prompt_monad"
  "Sail.Sail2_prompt"
  "Sail.Sail2_string"

begin 

(*Generated by Sail from aarch64.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
type_synonym 'n bits =" ( 'n::len)Word.word "

datatype exception  =
    Error_Undefined " (unit)"
  | Error_See " (string)"
  | Error_Implementation_Defined " (string)"
  | Error_ReservedEncoding " (unit)"
  | Error_ExceptionTaken " (unit)"



datatype boolean = FALSE | TRUE



datatype signal = LOW | HIGH



datatype RetCode =
  RC_OK
  | RC_UNDEFINED
  | RC_UNPREDICTABLE
  | RC_SEE
  | RC_IMPLEMENTATION_DEFINED
  | RC_SUBARCHITECTURE_DEFINED
  | RC_EXCEPTION_TAKEN
  | RC_ASSERT_FAILED
  | RC_UNMATCHED_CASE



type_synonym CPACRType  =" 32 bits "

type_synonym CNTKCTLType  =" 32 bits "

type_synonym ESRType  =" 32 bits "

type_synonym FPCRType  =" 32 bits "

type_synonym MAIRType  =" 64 bits "

type_synonym SCRType  =" 32 bits "

type_synonym SCTLRType  =" 32 bits "

datatype FPConvOp =
  FPConvOp_CVT_FtoI
  | FPConvOp_CVT_ItoF
  | FPConvOp_MOV_FtoI
  | FPConvOp_MOV_ItoF
  | FPConvOp_CVT_FtoI_JS



datatype Exception =
  Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_PACTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_ERetTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_FIQ



datatype ArchVersion = ARMv8p0 | ARMv8p1 | ARMv8p2 | ARMv8p3



datatype Unpredictable =
  Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_OORTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_ZEROPMSEVFR
  | Unpredictable_NOOPTYPES
  | Unpredictable_ZEROMINLATENCY
  | Unpredictable_CLEARERRITEZERO
  | Unpredictable_TBD



datatype Constraint =
  Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK



datatype InstrSet = InstrSet_A64 | InstrSet_A32 | InstrSet_T32



record ProcState  =
  
 ProcState_N ::" 1 bits " 

     ProcState_Z ::" 1 bits " 

     ProcState_C ::" 1 bits " 

     ProcState_V ::" 1 bits " 

     ProcState_D ::" 1 bits " 

     ProcState_A ::" 1 bits " 

     ProcState_I ::" 1 bits " 

     ProcState_F ::" 1 bits " 

     ProcState_PAN ::" 1 bits " 

     ProcState_UAO ::" 1 bits " 

     ProcState_SS ::" 1 bits " 

     ProcState_IL ::" 1 bits " 

     ProcState_EL ::" 2 bits " 

     ProcState_nRW ::" 1 bits " 

     ProcState_SP ::" 1 bits " 

     ProcState_Q ::" 1 bits " 

     ProcState_GE ::" 4 bits " 

     ProcState_IT ::" 8 bits " 

     ProcState_J ::" 1 bits " 

     ProcState_T ::" 1 bits " 

     ProcState_E ::" 1 bits " 

     ProcState_M ::" 5 bits "  



datatype BranchType =
  BranchType_CALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_JMP
  | BranchType_EXCEPTION
  | BranchType_UNKNOWN



record ExceptionRecord  =
  
 ExceptionRecord_typ ::" Exception " 

     ExceptionRecord_syndrome ::" 25 bits " 

     ExceptionRecord_vaddress ::" 64 bits " 

     ExceptionRecord_ipavalid ::" bool " 

     ExceptionRecord_ipaddress ::" 52 bits "  



datatype Fault =
  Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint



datatype AccType =
  AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_DC
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT



record FaultRecord  =
  
 FaultRecord_typ ::" Fault " 

     FaultRecord_acctype ::" AccType " 

     FaultRecord_ipaddress ::" 52 bits " 

     FaultRecord_s2fs1walk ::" bool " 

     FaultRecord_write ::" bool " 

     FaultRecord_level ::" ii " 

     FaultRecord_extflag ::" 1 bits " 

     FaultRecord_secondstage ::" bool " 

     FaultRecord_domain ::" 4 bits " 

     FaultRecord_errortype ::" 2 bits " 

     FaultRecord_debugmoe ::" 4 bits "  



datatype MBReqDomain =
  MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem



datatype MBReqTypes = MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All



datatype MemType = MemType_Normal | MemType_Device



datatype DeviceType = DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE



record MemAttrHints  =
  
 MemAttrHints_attrs ::" 2 bits " 
 MemAttrHints_hints ::" 2 bits " 
 MemAttrHints_transient ::" bool "  



record MemoryAttributes  =
  
 MemoryAttributes_typ ::" MemType " 

     MemoryAttributes_device ::" DeviceType " 

     MemoryAttributes_inner ::" MemAttrHints " 

     MemoryAttributes_outer ::" MemAttrHints " 

     MemoryAttributes_shareable ::" bool " 

     MemoryAttributes_outershareable ::" bool "  



record FullAddress  = 
 FullAddress_physicaladdress ::" 52 bits " 
 FullAddress_NS ::" 1 bits "  



record AddressDescriptor  =
  
 AddressDescriptor_fault ::" FaultRecord " 

     AddressDescriptor_memattrs ::" MemoryAttributes " 

     AddressDescriptor_paddress ::" FullAddress " 

     AddressDescriptor_vaddress ::" 64 bits "  



record DescriptorUpdate  =
  
 DescriptorUpdate_AF ::" bool " 

     DescriptorUpdate_AP ::" bool " 

     DescriptorUpdate_descaddr ::" AddressDescriptor "  



datatype MemAtomicOp =
  MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP



datatype FPType = FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN



datatype FPExc =
  FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm



datatype FPRounding =
  FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD



datatype SysRegAccess =
  SysRegAccess_OK
  | SysRegAccess_UNDEFINED
  | SysRegAccess_TrapToEL1
  | SysRegAccess_TrapToEL2
  | SysRegAccess_TrapToEL3



datatype SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX



datatype ShiftType = ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR



datatype PrefetchHint = Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC



datatype InterruptID =
  InterruptID_PMUIRQ
  | InterruptID_COMMIRQ
  | InterruptID_CTIIRQ
  | InterruptID_COMMRX
  | InterruptID_COMMTX



datatype CrossTriggerOut =
  CrossTriggerOut_DebugRequest
  | CrossTriggerOut_RestartRequest
  | CrossTriggerOut_IRQ
  | CrossTriggerOut_RSVD3
  | CrossTriggerOut_TraceExtIn0
  | CrossTriggerOut_TraceExtIn1
  | CrossTriggerOut_TraceExtIn2
  | CrossTriggerOut_TraceExtIn3



datatype CrossTriggerIn =
  CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3



datatype MemBarrierOp = MemBarrierOp_DSB | MemBarrierOp_DMB | MemBarrierOp_ISB



record AccessDescriptor  =
  
 AccessDescriptor_acctype ::" AccType " 

     AccessDescriptor_page_table_walk ::" bool " 

     AccessDescriptor_secondstage ::" bool " 

     AccessDescriptor_s2fs1walk ::" bool " 

     AccessDescriptor_level ::" ii "  



record Permissions  =
  
 Permissions_ap ::" 3 bits " 

     Permissions_xn ::" 1 bits " 

     Permissions_xxn ::" 1 bits " 

     Permissions_pxn ::" 1 bits "  



record TLBRecord  =
  
 TLBRecord_perms ::" Permissions " 

     TLBRecord_nG ::" 1 bits " 

     TLBRecord_domain ::" 4 bits " 

     TLBRecord_contiguous ::" bool " 

     TLBRecord_level ::" ii " 

     TLBRecord_blocksize ::" ii " 

     TLBRecord_descupdate ::" DescriptorUpdate " 

     TLBRecord_CnP ::" 1 bits " 

     TLBRecord_addrdesc ::" AddressDescriptor "  



datatype ImmediateOp = ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC



datatype MoveWideOp = MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K



datatype SystemAccessType = SystemAccessType_RT | SystemAccessType_RRT | SystemAccessType_DT



datatype VBitOp = VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR



datatype TimeStamp = TimeStamp_None | TimeStamp_Virtual | TimeStamp_Physical



datatype PrivilegeLevel = PL3 | PL2 | PL1 | PL0



record AArch32_SErrorSyndrome  =
  
 AArch32_SErrorSyndrome_AET ::" 2 bits " 
 AArch32_SErrorSyndrome_ExT ::" 1 bits "  



datatype SystemOp = Sys_AT | Sys_DC | Sys_IC | Sys_TLBI | Sys_SYS



record PCSample  =
  
 PCSample_valid_name ::" bool " 

     PCSample_pc ::" 64 bits " 

     PCSample_el ::" 2 bits " 

     PCSample_rw ::" 1 bits " 

     PCSample_ns ::" 1 bits " 

     PCSample_contextidr ::" 32 bits " 

     PCSample_contextidr_el2 ::" 32 bits " 

     PCSample_vmid ::" 16 bits "  



datatype ReduceOp =
  ReduceOp_FMINNUM | ReduceOp_FMAXNUM | ReduceOp_FMIN | ReduceOp_FMAX | ReduceOp_FADD | ReduceOp_ADD



datatype LogicalOp = LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR



datatype ExtendType =
  ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX



datatype SystemHintOp =
  SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB



datatype MemOp = MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH



datatype OpType = OpType_Load | OpType_Store | OpType_LoadAtomic | OpType_Branch | OpType_Other



datatype FPUnaryOp = FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT



datatype CompareOp = CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT



datatype PSTATEField =
  PSTATEField_DAIFSet | PSTATEField_DAIFClr | PSTATEField_PAN | PSTATEField_UAO | PSTATEField_SP



datatype FPMaxMinOp = FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM



datatype CountOp = CountOp_CLZ | CountOp_CLS | CountOp_CNT



datatype VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL



datatype VBitOps = VBitOps_VBIF | VBitOps_VBIT | VBitOps_VBSL



datatype VCGEtype = VCGEtype_signed | VCGEtype_unsigned | VCGEtype_fp



datatype VCGTtype = VCGTtype_signed | VCGTtype_unsigned | VCGTtype_fp



datatype InstrEnc = A64 | A32 | T16 | T32





datatype register_value  =
    Regval_vector " ((ii * bool * register_value list))"
  | Regval_list " ( register_value list)"
  | Regval_option " ( register_value option)"
  | Regval_ProcState " (ProcState)"
  | Regval___InstrEnc " (InstrEnc)"
  | Regval_bool " (bool)"
  | Regval_signal " (signal)"
  | Regval_vector_128_dec_bit " ( 128 Word.word)"
  | Regval_vector_1_dec_bit " ( 1 Word.word)"
  | Regval_vector_32_dec_bit " ( 32 Word.word)"
  | Regval_vector_4_dec_bit " ( 4 Word.word)"
  | Regval_vector_52_dec_bit " ( 52 Word.word)"
  | Regval_vector_64_dec_bit " ( 64 Word.word)"



record regstate  =
  
 APDAKeyHi_EL1 ::"  64 Word.word " 

     APDAKeyLo_EL1 ::"  64 Word.word " 

     APDBKeyHi_EL1 ::"  64 Word.word " 

     APDBKeyLo_EL1 ::"  64 Word.word " 

     APGAKeyHi_EL1 ::"  64 Word.word " 

     APGAKeyLo_EL1 ::"  64 Word.word " 

     APIAKeyHi_EL1 ::"  64 Word.word " 

     APIAKeyLo_EL1 ::"  64 Word.word " 

     APIBKeyHi_EL1 ::"  64 Word.word " 

     APIBKeyLo_EL1 ::"  64 Word.word " 

     CONTEXTIDR_EL1 ::"  32 Word.word " 

     CONTEXTIDR_EL2 ::"  32 Word.word " 

     CPACR_EL1 ::"  32 Word.word " 

     CPTR_EL2 ::"  32 Word.word " 

     CPTR_EL3 ::"  32 Word.word " 

     DBGBCR_EL1 ::" ( 32 Word.word) list " 

     DBGBVR_EL1 ::" ( 64 Word.word) list " 

     DBGEN ::" signal " 

     DBGOSDLR ::"  32 Word.word " 

     DBGOSLSR ::"  32 Word.word " 

     DBGPRCR ::"  32 Word.word " 

     DBGPRCR_EL1 ::"  32 Word.word " 

     DBGWCR_EL1 ::" ( 32 Word.word) list " 

     DBGWVR_EL1 ::" ( 64 Word.word) list " 

     DLR ::"  32 Word.word " 

     DLR_EL0 ::"  64 Word.word " 

     DSPSR ::"  32 Word.word " 

     DSPSR_EL0 ::"  32 Word.word " 

     EDSCR ::"  32 Word.word " 

     ELR_EL1 ::"  64 Word.word " 

     ELR_EL2 ::"  64 Word.word " 

     ELR_EL3 ::"  64 Word.word " 

     ELR_hyp ::"  32 Word.word " 

     ESR_EL1 ::"  32 Word.word " 

     ESR_EL2 ::"  32 Word.word " 

     ESR_EL3 ::"  32 Word.word " 

     EventRegister ::"  1 Word.word " 

     FAR_EL1 ::"  64 Word.word " 

     FAR_EL2 ::"  64 Word.word " 

     FAR_EL3 ::"  64 Word.word " 

     FPCR ::"  32 Word.word " 

     FPEXC ::"  32 Word.word " 

     FPSCR ::"  32 Word.word " 

     FPSR ::"  32 Word.word " 

     HCR ::"  32 Word.word " 

     HCR2 ::"  32 Word.word " 

     HCR_EL2 ::"  64 Word.word " 

     HDCR ::"  32 Word.word " 

     HDFAR ::"  32 Word.word " 

     HIFAR ::"  32 Word.word " 

     HPFAR ::"  32 Word.word " 

     HPFAR_EL2 ::"  64 Word.word " 

     HSCTLR ::"  32 Word.word " 

     HSR ::"  32 Word.word " 

     HVBAR ::"  32 Word.word " 

     ID_AA64DFR0_EL1 ::"  64 Word.word " 

     LR_mon ::"  32 Word.word " 

     MAIR_EL1 ::"  64 Word.word " 

     MAIR_EL2 ::"  64 Word.word " 

     MAIR_EL3 ::"  64 Word.word " 

     MDCR_EL2 ::"  32 Word.word " 

     MDCR_EL3 ::"  32 Word.word " 

     MDSCR_EL1 ::"  32 Word.word " 

     OSDLR_EL1 ::"  32 Word.word " 

     OSLSR_EL1 ::"  32 Word.word " 

     PSTATE ::" ProcState " 

     RC ::" ( 64 Word.word) list " 

     RVBAR_EL1 ::"  64 Word.word " 

     RVBAR_EL2 ::"  64 Word.word " 

     RVBAR_EL3 ::"  64 Word.word " 

     SCR ::"  32 Word.word " 

     SCR_EL3 ::"  32 Word.word " 

     SCTLR ::"  32 Word.word " 

     SCTLR_EL1 ::"  32 Word.word " 

     SCTLR_EL2 ::"  32 Word.word " 

     SCTLR_EL3 ::"  32 Word.word " 

     SDCR ::"  32 Word.word " 

     SDER ::"  32 Word.word " 

     SPIDEN ::" signal " 

     SPSR_EL1 ::"  32 Word.word " 

     SPSR_EL2 ::"  32 Word.word " 

     SPSR_EL3 ::"  32 Word.word " 

     SPSR_abt ::"  32 Word.word " 

     SPSR_fiq ::"  32 Word.word " 

     SPSR_hyp ::"  32 Word.word " 

     SPSR_irq ::"  32 Word.word " 

     SPSR_mon ::"  32 Word.word " 

     SPSR_svc ::"  32 Word.word " 

     SPSR_und ::"  32 Word.word " 

     SP_EL0 ::"  64 Word.word " 

     SP_EL1 ::"  64 Word.word " 

     SP_EL2 ::"  64 Word.word " 

     SP_EL3 ::"  64 Word.word " 

     SP_mon ::"  32 Word.word " 

     TCR_EL1 ::"  64 Word.word " 

     TCR_EL2 ::"  64 Word.word " 

     TCR_EL3 ::"  32 Word.word " 

     TTBCR ::"  32 Word.word " 

     TTBR0_EL1 ::"  64 Word.word " 

     TTBR0_EL2 ::"  64 Word.word " 

     TTBR0_EL3 ::"  64 Word.word " 

     TTBR1_EL1 ::"  64 Word.word " 

     TTBR1_EL2 ::"  64 Word.word " 

     VBAR ::"  32 Word.word " 

     VBAR_EL1 ::"  64 Word.word " 

     VBAR_EL2 ::"  64 Word.word " 

     VBAR_EL3 ::"  64 Word.word " 

     VDFSR ::"  32 Word.word " 

     VSESR_EL2 ::"  32 Word.word " 

     VTCR_EL2 ::"  32 Word.word " 

     VTTBR_EL2 ::"  64 Word.word " 

     PC ::"  64 Word.word " 

     R ::" ( 64 Word.word) list " 

     V ::" ( 128 Word.word) list " 

     BranchTaken ::" bool " 

     ExclusiveLocal ::" bool " 

     Memory ::"  52 Word.word " 

     PendingInterrupt ::" bool " 

     PendingPhysicalSError ::" bool " 

     Sleeping ::" bool " 

     ThisInstr ::"  32 Word.word " 

     ThisInstrEnc ::" InstrEnc " 

     currentCond ::"  4 Word.word " 

     unconditional ::" bool "  





(*val ProcState_of_regval : register_value -> maybe ProcState*)

fun ProcState_of_regval  :: " register_value \<Rightarrow>(ProcState)option "  where 
     " ProcState_of_regval (Regval_ProcState (v)) = ( Some v )"
|" ProcState_of_regval g__281 = ( None )"


(*val regval_of_ProcState : ProcState -> register_value*)

definition regval_of_ProcState  :: " ProcState \<Rightarrow> register_value "  where 
     " regval_of_ProcState v = ( Regval_ProcState v )"


(*val __InstrEnc_of_regval : register_value -> maybe __InstrEnc*)

fun InstrEnc_of_regval  :: " register_value \<Rightarrow>(InstrEnc)option "  where 
     " InstrEnc_of_regval (Regval___InstrEnc (v)) = ( Some v )"
|" InstrEnc_of_regval g__280 = ( None )"


(*val regval_of___InstrEnc : __InstrEnc -> register_value*)

definition regval_of___InstrEnc  :: " InstrEnc \<Rightarrow> register_value "  where 
     " regval_of___InstrEnc v = ( Regval___InstrEnc v )"


(*val bool_of_regval : register_value -> maybe bool*)

fun bool_of_regval  :: " register_value \<Rightarrow>(bool)option "  where 
     " bool_of_regval (Regval_bool (v)) = ( Some v )"
|" bool_of_regval g__279 = ( None )"


(*val regval_of_bool : bool -> register_value*)

definition regval_of_bool  :: " bool \<Rightarrow> register_value "  where 
     " regval_of_bool v = ( Regval_bool v )"


(*val signal_of_regval : register_value -> maybe signal*)

fun signal_of_regval  :: " register_value \<Rightarrow>(signal)option "  where 
     " signal_of_regval (Regval_signal (v)) = ( Some v )"
|" signal_of_regval g__278 = ( None )"


(*val regval_of_signal : signal -> register_value*)

definition regval_of_signal  :: " signal \<Rightarrow> register_value "  where 
     " regval_of_signal v = ( Regval_signal v )"


(*val vector_128_dec_bit_of_regval : register_value -> maybe (mword ty128)*)

fun vector_128_dec_bit_of_regval  :: " register_value \<Rightarrow>((128)Word.word)option "  where 
     " vector_128_dec_bit_of_regval (Regval_vector_128_dec_bit (v)) = ( Some v )"
|" vector_128_dec_bit_of_regval g__277 = ( None )"


(*val regval_of_vector_128_dec_bit : mword ty128 -> register_value*)

definition regval_of_vector_128_dec_bit  :: "(128)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_128_dec_bit v = ( Regval_vector_128_dec_bit v )"


(*val vector_1_dec_bit_of_regval : register_value -> maybe (mword ty1)*)

fun vector_1_dec_bit_of_regval  :: " register_value \<Rightarrow>((1)Word.word)option "  where 
     " vector_1_dec_bit_of_regval (Regval_vector_1_dec_bit (v)) = ( Some v )"
|" vector_1_dec_bit_of_regval g__276 = ( None )"


(*val regval_of_vector_1_dec_bit : mword ty1 -> register_value*)

definition regval_of_vector_1_dec_bit  :: "(1)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_1_dec_bit v = ( Regval_vector_1_dec_bit v )"


(*val vector_32_dec_bit_of_regval : register_value -> maybe (mword ty32)*)

fun vector_32_dec_bit_of_regval  :: " register_value \<Rightarrow>((32)Word.word)option "  where 
     " vector_32_dec_bit_of_regval (Regval_vector_32_dec_bit (v)) = ( Some v )"
|" vector_32_dec_bit_of_regval g__275 = ( None )"


(*val regval_of_vector_32_dec_bit : mword ty32 -> register_value*)

definition regval_of_vector_32_dec_bit  :: "(32)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_32_dec_bit v = ( Regval_vector_32_dec_bit v )"


(*val vector_4_dec_bit_of_regval : register_value -> maybe (mword ty4)*)

fun vector_4_dec_bit_of_regval  :: " register_value \<Rightarrow>((4)Word.word)option "  where 
     " vector_4_dec_bit_of_regval (Regval_vector_4_dec_bit (v)) = ( Some v )"
|" vector_4_dec_bit_of_regval g__274 = ( None )"


(*val regval_of_vector_4_dec_bit : mword ty4 -> register_value*)

definition regval_of_vector_4_dec_bit  :: "(4)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_4_dec_bit v = ( Regval_vector_4_dec_bit v )"


(*val vector_52_dec_bit_of_regval : register_value -> maybe (mword ty52)*)

fun vector_52_dec_bit_of_regval  :: " register_value \<Rightarrow>((52)Word.word)option "  where 
     " vector_52_dec_bit_of_regval (Regval_vector_52_dec_bit (v)) = ( Some v )"
|" vector_52_dec_bit_of_regval g__273 = ( None )"


(*val regval_of_vector_52_dec_bit : mword ty52 -> register_value*)

definition regval_of_vector_52_dec_bit  :: "(52)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_52_dec_bit v = ( Regval_vector_52_dec_bit v )"


(*val vector_64_dec_bit_of_regval : register_value -> maybe (mword ty64)*)

fun vector_64_dec_bit_of_regval  :: " register_value \<Rightarrow>((64)Word.word)option "  where 
     " vector_64_dec_bit_of_regval (Regval_vector_64_dec_bit (v)) = ( Some v )"
|" vector_64_dec_bit_of_regval g__272 = ( None )"


(*val regval_of_vector_64_dec_bit : mword ty64 -> register_value*)

definition regval_of_vector_64_dec_bit  :: "(64)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_64_dec_bit v = ( Regval_vector_64_dec_bit v )"




(*val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
definition vector_of_regval  :: "(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option "  where 
     " vector_of_regval of_regval1 = ( \<lambda>x .  
  (case  x of
        Regval_vector (_, _, v) => just_list (List.map of_regval1 v)
    | _ => None
  ) )"


(*val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value*)
definition regval_of_vector  :: "('a \<Rightarrow> register_value)\<Rightarrow> int \<Rightarrow> bool \<Rightarrow> 'a list \<Rightarrow> register_value "  where 
     " regval_of_vector regval_of1 size1 is_inc xs = ( Regval_vector (size1, is_inc, List.map regval_of1 xs))"


(*val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
definition list_of_regval  :: "(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option "  where 
     " list_of_regval of_regval1 = ( \<lambda>x .  
  (case  x of
        Regval_list v => just_list (List.map of_regval1 v)
    | _ => None
  ) )"


(*val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value*)
definition regval_of_list  :: "('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value "  where 
     " regval_of_list regval_of1 xs = ( Regval_list (List.map regval_of1 xs))"


(*val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)*)
definition option_of_regval  :: "(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a option)option "  where 
     " option_of_regval of_regval1 = ( \<lambda>x .  
  (case  x of
        Regval_option v => Some (Option.bind v of_regval1)
    | _ => None
  ) )"


(*val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value*)
definition regval_of_option  :: "('a \<Rightarrow> register_value)\<Rightarrow> 'a option \<Rightarrow> register_value "  where 
     " regval_of_option regval_of1 v = ( Regval_option (map_option regval_of1 v))"



definition APDAKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDAKeyHi_EL1_ref = ( (|
  name = (''APDAKeyHi_EL1''),
  read_from = (\<lambda> s . (APDAKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDAKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDAKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDAKeyLo_EL1_ref = ( (|
  name = (''APDAKeyLo_EL1''),
  read_from = (\<lambda> s . (APDAKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDAKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDBKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDBKeyHi_EL1_ref = ( (|
  name = (''APDBKeyHi_EL1''),
  read_from = (\<lambda> s . (APDBKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDBKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDBKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDBKeyLo_EL1_ref = ( (|
  name = (''APDBKeyLo_EL1''),
  read_from = (\<lambda> s . (APDBKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDBKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APGAKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APGAKeyHi_EL1_ref = ( (|
  name = (''APGAKeyHi_EL1''),
  read_from = (\<lambda> s . (APGAKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APGAKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APGAKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APGAKeyLo_EL1_ref = ( (|
  name = (''APGAKeyLo_EL1''),
  read_from = (\<lambda> s . (APGAKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APGAKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIAKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIAKeyHi_EL1_ref = ( (|
  name = (''APIAKeyHi_EL1''),
  read_from = (\<lambda> s . (APIAKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIAKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIAKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIAKeyLo_EL1_ref = ( (|
  name = (''APIAKeyLo_EL1''),
  read_from = (\<lambda> s . (APIAKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIAKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIBKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIBKeyHi_EL1_ref = ( (|
  name = (''APIBKeyHi_EL1''),
  read_from = (\<lambda> s . (APIBKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIBKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIBKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIBKeyLo_EL1_ref = ( (|
  name = (''APIBKeyLo_EL1''),
  read_from = (\<lambda> s . (APIBKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIBKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CONTEXTIDR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CONTEXTIDR_EL1_ref = ( (|
  name = (''CONTEXTIDR_EL1''),
  read_from = (\<lambda> s . (CONTEXTIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CONTEXTIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CONTEXTIDR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CONTEXTIDR_EL2_ref = ( (|
  name = (''CONTEXTIDR_EL2''),
  read_from = (\<lambda> s . (CONTEXTIDR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CONTEXTIDR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CPACR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CPACR_EL1_ref = ( (|
  name = (''CPACR_EL1''),
  read_from = (\<lambda> s . (CPACR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CPACR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CPTR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CPTR_EL2_ref = ( (|
  name = (''CPTR_EL2''),
  read_from = (\<lambda> s . (CPTR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CPTR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CPTR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CPTR_EL3_ref = ( (|
  name = (''CPTR_EL3''),
  read_from = (\<lambda> s . (CPTR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| CPTR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGBCR_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGBCR_EL1_ref = ( (|
  name = (''DBGBCR_EL1''),
  read_from = (\<lambda> s . (DBGBCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 16 :: int)) False v) |) )"


definition DBGBVR_EL1_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " DBGBVR_EL1_ref = ( (|
  name = (''DBGBVR_EL1''),
  read_from = (\<lambda> s . (DBGBVR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBVR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 16 :: int)) False v) |) )"


definition DBGEN_ref  :: "((regstate),(register_value),(signal))register_ref "  where 
     " DBGEN_ref = ( (|
  name = (''DBGEN''),
  read_from = (\<lambda> s . (DBGEN   s)),
  write_to = (\<lambda> v s .  (( s (| DBGEN := v |)))),
  of_regval = (\<lambda> v .  signal_of_regval v),
  regval_of = (\<lambda> v .  regval_of_signal v) |) )"


definition DBGOSDLR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGOSDLR_ref = ( (|
  name = (''DBGOSDLR''),
  read_from = (\<lambda> s . (DBGOSDLR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGOSDLR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGOSLSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGOSLSR_ref = ( (|
  name = (''DBGOSLSR''),
  read_from = (\<lambda> s . (DBGOSLSR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGOSLSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGPRCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGPRCR_ref = ( (|
  name = (''DBGPRCR''),
  read_from = (\<lambda> s . (DBGPRCR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGPRCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGPRCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGPRCR_EL1_ref = ( (|
  name = (''DBGPRCR_EL1''),
  read_from = (\<lambda> s . (DBGPRCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGPRCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGWCR_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGWCR_EL1_ref = ( (|
  name = (''DBGWCR_EL1''),
  read_from = (\<lambda> s . (DBGWCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 16 :: int)) False v) |) )"


definition DBGWVR_EL1_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " DBGWVR_EL1_ref = ( (|
  name = (''DBGWVR_EL1''),
  read_from = (\<lambda> s . (DBGWVR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWVR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 16 :: int)) False v) |) )"


definition DLR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DLR_ref = ( (|
  name = (''DLR''),
  read_from = (\<lambda> s . (DLR   s)),
  write_to = (\<lambda> v s .  (( s (| DLR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DLR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " DLR_EL0_ref = ( (|
  name = (''DLR_EL0''),
  read_from = (\<lambda> s . (DLR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DLR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition DSPSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DSPSR_ref = ( (|
  name = (''DSPSR''),
  read_from = (\<lambda> s . (DSPSR   s)),
  write_to = (\<lambda> v s .  (( s (| DSPSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DSPSR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DSPSR_EL0_ref = ( (|
  name = (''DSPSR_EL0''),
  read_from = (\<lambda> s . (DSPSR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DSPSR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDSCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDSCR_ref = ( (|
  name = (''EDSCR''),
  read_from = (\<lambda> s . (EDSCR   s)),
  write_to = (\<lambda> v s .  (( s (| EDSCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ELR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL1_ref = ( (|
  name = (''ELR_EL1''),
  read_from = (\<lambda> s . (ELR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ELR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL2_ref = ( (|
  name = (''ELR_EL2''),
  read_from = (\<lambda> s . (ELR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ELR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL3_ref = ( (|
  name = (''ELR_EL3''),
  read_from = (\<lambda> s . (ELR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ELR_hyp_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ELR_hyp_ref = ( (|
  name = (''ELR_hyp''),
  read_from = (\<lambda> s . (ELR_hyp   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_hyp := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ESR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL1_ref = ( (|
  name = (''ESR_EL1''),
  read_from = (\<lambda> s . (ESR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ESR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL2_ref = ( (|
  name = (''ESR_EL2''),
  read_from = (\<lambda> s . (ESR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ESR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL3_ref = ( (|
  name = (''ESR_EL3''),
  read_from = (\<lambda> s . (ESR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EventRegister_ref  :: "((regstate),(register_value),((1)Word.word))register_ref "  where 
     " EventRegister_ref = ( (|
  name = (''EventRegister''),
  read_from = (\<lambda> s . (EventRegister   s)),
  write_to = (\<lambda> v s .  (( s (| EventRegister := v |)))),
  of_regval = (\<lambda> v .  vector_1_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_1_dec_bit v) |) )"


definition FAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL1_ref = ( (|
  name = (''FAR_EL1''),
  read_from = (\<lambda> s . (FAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition FAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL2_ref = ( (|
  name = (''FAR_EL2''),
  read_from = (\<lambda> s . (FAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition FAR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL3_ref = ( (|
  name = (''FAR_EL3''),
  read_from = (\<lambda> s . (FAR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition FPCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPCR_ref = ( (|
  name = (''FPCR''),
  read_from = (\<lambda> s . (FPCR   s)),
  write_to = (\<lambda> v s .  (( s (| FPCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPEXC_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPEXC_ref = ( (|
  name = (''FPEXC''),
  read_from = (\<lambda> s . (FPEXC   s)),
  write_to = (\<lambda> v s .  (( s (| FPEXC := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPSCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPSCR_ref = ( (|
  name = (''FPSCR''),
  read_from = (\<lambda> s . (FPSCR   s)),
  write_to = (\<lambda> v s .  (( s (| FPSCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPSR_ref = ( (|
  name = (''FPSR''),
  read_from = (\<lambda> s . (FPSR   s)),
  write_to = (\<lambda> v s .  (( s (| FPSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HCR_ref = ( (|
  name = (''HCR''),
  read_from = (\<lambda> s . (HCR   s)),
  write_to = (\<lambda> v s .  (( s (| HCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HCR2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HCR2_ref = ( (|
  name = (''HCR2''),
  read_from = (\<lambda> s . (HCR2   s)),
  write_to = (\<lambda> v s .  (( s (| HCR2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HCR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " HCR_EL2_ref = ( (|
  name = (''HCR_EL2''),
  read_from = (\<lambda> s . (HCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| HCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition HDCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HDCR_ref = ( (|
  name = (''HDCR''),
  read_from = (\<lambda> s . (HDCR   s)),
  write_to = (\<lambda> v s .  (( s (| HDCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HDFAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HDFAR_ref = ( (|
  name = (''HDFAR''),
  read_from = (\<lambda> s . (HDFAR   s)),
  write_to = (\<lambda> v s .  (( s (| HDFAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HIFAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HIFAR_ref = ( (|
  name = (''HIFAR''),
  read_from = (\<lambda> s . (HIFAR   s)),
  write_to = (\<lambda> v s .  (( s (| HIFAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HPFAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HPFAR_ref = ( (|
  name = (''HPFAR''),
  read_from = (\<lambda> s . (HPFAR   s)),
  write_to = (\<lambda> v s .  (( s (| HPFAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HPFAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " HPFAR_EL2_ref = ( (|
  name = (''HPFAR_EL2''),
  read_from = (\<lambda> s . (HPFAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| HPFAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition HSCTLR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HSCTLR_ref = ( (|
  name = (''HSCTLR''),
  read_from = (\<lambda> s . (HSCTLR   s)),
  write_to = (\<lambda> v s .  (( s (| HSCTLR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HSR_ref = ( (|
  name = (''HSR''),
  read_from = (\<lambda> s . (HSR   s)),
  write_to = (\<lambda> v s .  (( s (| HSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HVBAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HVBAR_ref = ( (|
  name = (''HVBAR''),
  read_from = (\<lambda> s . (HVBAR   s)),
  write_to = (\<lambda> v s .  (( s (| HVBAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AA64DFR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64DFR0_EL1_ref = ( (|
  name = (''ID_AA64DFR0_EL1''),
  read_from = (\<lambda> s . (ID_AA64DFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64DFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition LR_mon_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " LR_mon_ref = ( (|
  name = (''LR_mon''),
  read_from = (\<lambda> s . (LR_mon   s)),
  write_to = (\<lambda> v s .  (( s (| LR_mon := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MAIR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MAIR_EL1_ref = ( (|
  name = (''MAIR_EL1''),
  read_from = (\<lambda> s . (MAIR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MAIR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MAIR_EL2_ref = ( (|
  name = (''MAIR_EL2''),
  read_from = (\<lambda> s . (MAIR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MAIR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MAIR_EL3_ref = ( (|
  name = (''MAIR_EL3''),
  read_from = (\<lambda> s . (MAIR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MDCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDCR_EL2_ref = ( (|
  name = (''MDCR_EL2''),
  read_from = (\<lambda> s . (MDCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MDCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MDCR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDCR_EL3_ref = ( (|
  name = (''MDCR_EL3''),
  read_from = (\<lambda> s . (MDCR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| MDCR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MDSCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDSCR_EL1_ref = ( (|
  name = (''MDSCR_EL1''),
  read_from = (\<lambda> s . (MDSCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MDSCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSDLR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSDLR_EL1_ref = ( (|
  name = (''OSDLR_EL1''),
  read_from = (\<lambda> s . (OSDLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSDLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSLSR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSLSR_EL1_ref = ( (|
  name = (''OSLSR_EL1''),
  read_from = (\<lambda> s . (OSLSR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSLSR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PSTATE_ref  :: "((regstate),(register_value),(ProcState))register_ref "  where 
     " PSTATE_ref = ( (|
  name = (''PSTATE''),
  read_from = (\<lambda> s . (PSTATE   s)),
  write_to = (\<lambda> v s .  (( s (| PSTATE := v |)))),
  of_regval = (\<lambda> v .  ProcState_of_regval v),
  regval_of = (\<lambda> v .  regval_of_ProcState v) |) )"


definition RC_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " RC_ref = ( (|
  name = (''RC''),
  read_from = (\<lambda> s . (RC   s)),
  write_to = (\<lambda> v s .  (( s (| RC := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 5 :: int)) False v) |) )"


definition RVBAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RVBAR_EL1_ref = ( (|
  name = (''RVBAR_EL1''),
  read_from = (\<lambda> s . (RVBAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition RVBAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RVBAR_EL2_ref = ( (|
  name = (''RVBAR_EL2''),
  read_from = (\<lambda> s . (RVBAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition RVBAR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RVBAR_EL3_ref = ( (|
  name = (''RVBAR_EL3''),
  read_from = (\<lambda> s . (RVBAR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCR_ref = ( (|
  name = (''SCR''),
  read_from = (\<lambda> s . (SCR   s)),
  write_to = (\<lambda> v s .  (( s (| SCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SCR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCR_EL3_ref = ( (|
  name = (''SCR_EL3''),
  read_from = (\<lambda> s . (SCR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SCR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SCTLR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCTLR_ref = ( (|
  name = (''SCTLR''),
  read_from = (\<lambda> s . (SCTLR   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SCTLR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCTLR_EL1_ref = ( (|
  name = (''SCTLR_EL1''),
  read_from = (\<lambda> s . (SCTLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SCTLR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCTLR_EL2_ref = ( (|
  name = (''SCTLR_EL2''),
  read_from = (\<lambda> s . (SCTLR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SCTLR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCTLR_EL3_ref = ( (|
  name = (''SCTLR_EL3''),
  read_from = (\<lambda> s . (SCTLR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SDCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SDCR_ref = ( (|
  name = (''SDCR''),
  read_from = (\<lambda> s . (SDCR   s)),
  write_to = (\<lambda> v s .  (( s (| SDCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SDER_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SDER_ref = ( (|
  name = (''SDER''),
  read_from = (\<lambda> s . (SDER   s)),
  write_to = (\<lambda> v s .  (( s (| SDER := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPIDEN_ref  :: "((regstate),(register_value),(signal))register_ref "  where 
     " SPIDEN_ref = ( (|
  name = (''SPIDEN''),
  read_from = (\<lambda> s . (SPIDEN   s)),
  write_to = (\<lambda> v s .  (( s (| SPIDEN := v |)))),
  of_regval = (\<lambda> v .  signal_of_regval v),
  regval_of = (\<lambda> v .  regval_of_signal v) |) )"


definition SPSR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL1_ref = ( (|
  name = (''SPSR_EL1''),
  read_from = (\<lambda> s . (SPSR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL2_ref = ( (|
  name = (''SPSR_EL2''),
  read_from = (\<lambda> s . (SPSR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL3_ref = ( (|
  name = (''SPSR_EL3''),
  read_from = (\<lambda> s . (SPSR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_abt_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_abt_ref = ( (|
  name = (''SPSR_abt''),
  read_from = (\<lambda> s . (SPSR_abt   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_abt := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_fiq_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_fiq_ref = ( (|
  name = (''SPSR_fiq''),
  read_from = (\<lambda> s . (SPSR_fiq   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_fiq := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_hyp_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_hyp_ref = ( (|
  name = (''SPSR_hyp''),
  read_from = (\<lambda> s . (SPSR_hyp   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_hyp := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_irq_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_irq_ref = ( (|
  name = (''SPSR_irq''),
  read_from = (\<lambda> s . (SPSR_irq   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_irq := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_mon_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_mon_ref = ( (|
  name = (''SPSR_mon''),
  read_from = (\<lambda> s . (SPSR_mon   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_mon := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_svc_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_svc_ref = ( (|
  name = (''SPSR_svc''),
  read_from = (\<lambda> s . (SPSR_svc   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_svc := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_und_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_und_ref = ( (|
  name = (''SPSR_und''),
  read_from = (\<lambda> s . (SPSR_und   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_und := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SP_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL0_ref = ( (|
  name = (''SP_EL0''),
  read_from = (\<lambda> s . (SP_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL1_ref = ( (|
  name = (''SP_EL1''),
  read_from = (\<lambda> s . (SP_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL2_ref = ( (|
  name = (''SP_EL2''),
  read_from = (\<lambda> s . (SP_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL3_ref = ( (|
  name = (''SP_EL3''),
  read_from = (\<lambda> s . (SP_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_mon_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SP_mon_ref = ( (|
  name = (''SP_mon''),
  read_from = (\<lambda> s . (SP_mon   s)),
  write_to = (\<lambda> v s .  (( s (| SP_mon := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TCR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TCR_EL1_ref = ( (|
  name = (''TCR_EL1''),
  read_from = (\<lambda> s . (TCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TCR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TCR_EL2_ref = ( (|
  name = (''TCR_EL2''),
  read_from = (\<lambda> s . (TCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TCR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TCR_EL3_ref = ( (|
  name = (''TCR_EL3''),
  read_from = (\<lambda> s . (TCR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| TCR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TTBCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TTBCR_ref = ( (|
  name = (''TTBCR''),
  read_from = (\<lambda> s . (TTBCR   s)),
  write_to = (\<lambda> v s .  (( s (| TTBCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TTBR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_EL1_ref = ( (|
  name = (''TTBR0_EL1''),
  read_from = (\<lambda> s . (TTBR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR0_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_EL2_ref = ( (|
  name = (''TTBR0_EL2''),
  read_from = (\<lambda> s . (TTBR0_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR0_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_EL3_ref = ( (|
  name = (''TTBR0_EL3''),
  read_from = (\<lambda> s . (TTBR0_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR1_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR1_EL1_ref = ( (|
  name = (''TTBR1_EL1''),
  read_from = (\<lambda> s . (TTBR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR1_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR1_EL2_ref = ( (|
  name = (''TTBR1_EL2''),
  read_from = (\<lambda> s . (TTBR1_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR1_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VBAR_ref = ( (|
  name = (''VBAR''),
  read_from = (\<lambda> s . (VBAR   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VBAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL1_ref = ( (|
  name = (''VBAR_EL1''),
  read_from = (\<lambda> s . (VBAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL2_ref = ( (|
  name = (''VBAR_EL2''),
  read_from = (\<lambda> s . (VBAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL3_ref = ( (|
  name = (''VBAR_EL3''),
  read_from = (\<lambda> s . (VBAR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VDFSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VDFSR_ref = ( (|
  name = (''VDFSR''),
  read_from = (\<lambda> s . (VDFSR   s)),
  write_to = (\<lambda> v s .  (( s (| VDFSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VSESR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VSESR_EL2_ref = ( (|
  name = (''VSESR_EL2''),
  read_from = (\<lambda> s . (VSESR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VSESR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VTCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VTCR_EL2_ref = ( (|
  name = (''VTCR_EL2''),
  read_from = (\<lambda> s . (VTCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VTCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VTTBR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VTTBR_EL2_ref = ( (|
  name = (''VTTBR_EL2''),
  read_from = (\<lambda> s . (VTTBR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VTTBR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PC_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PC_ref = ( (|
  name = (''_PC''),
  read_from = (\<lambda> s . (PC   s)),
  write_to = (\<lambda> v s .  (( s (| PC := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition R_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " R_ref = ( (|
  name = (''_R''),
  read_from = (\<lambda> s . (R   s)),
  write_to = (\<lambda> v s .  (( s (| R := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 31 :: int)) False v) |) )"


definition V_ref  :: "((regstate),(register_value),(((128)Word.word)list))register_ref "  where 
     " V_ref = ( (|
  name = (''_V''),
  read_from = (\<lambda> s . (V   s)),
  write_to = (\<lambda> v s .  (( s (| V := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_128_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_128_dec_bit v)(( 32 :: int)) False v) |) )"


definition BranchTaken_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " BranchTaken_ref = ( (|
  name = (''__BranchTaken''),
  read_from = (\<lambda> s . (BranchTaken   s)),
  write_to = (\<lambda> v s .  (( s (| BranchTaken := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition ExclusiveLocal_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " ExclusiveLocal_ref = ( (|
  name = (''__ExclusiveLocal''),
  read_from = (\<lambda> s . (ExclusiveLocal   s)),
  write_to = (\<lambda> v s .  (( s (| ExclusiveLocal := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition Memory_ref  :: "((regstate),(register_value),((52)Word.word))register_ref "  where 
     " Memory_ref = ( (|
  name = (''__Memory''),
  read_from = (\<lambda> s . (Memory   s)),
  write_to = (\<lambda> v s .  (( s (| Memory := v |)))),
  of_regval = (\<lambda> v .  vector_52_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_52_dec_bit v) |) )"


definition PendingInterrupt_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " PendingInterrupt_ref = ( (|
  name = (''__PendingInterrupt''),
  read_from = (\<lambda> s . (PendingInterrupt   s)),
  write_to = (\<lambda> v s .  (( s (| PendingInterrupt := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition PendingPhysicalSError_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " PendingPhysicalSError_ref = ( (|
  name = (''__PendingPhysicalSError''),
  read_from = (\<lambda> s . (PendingPhysicalSError   s)),
  write_to = (\<lambda> v s .  (( s (| PendingPhysicalSError := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition Sleeping_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " Sleeping_ref = ( (|
  name = (''__Sleeping''),
  read_from = (\<lambda> s . (Sleeping   s)),
  write_to = (\<lambda> v s .  (( s (| Sleeping := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition ThisInstr_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ThisInstr_ref = ( (|
  name = (''__ThisInstr''),
  read_from = (\<lambda> s . (ThisInstr   s)),
  write_to = (\<lambda> v s .  (( s (| ThisInstr := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ThisInstrEnc_ref  :: "((regstate),(register_value),(InstrEnc))register_ref "  where 
     " ThisInstrEnc_ref = ( (|
  name = (''__ThisInstrEnc''),
  read_from = (\<lambda> s . (ThisInstrEnc   s)),
  write_to = (\<lambda> v s .  (( s (| ThisInstrEnc := v |)))),
  of_regval = (\<lambda> v .  InstrEnc_of_regval v),
  regval_of = (\<lambda> v .  regval_of___InstrEnc v) |) )"


definition currentCond_ref  :: "((regstate),(register_value),((4)Word.word))register_ref "  where 
     " currentCond_ref = ( (|
  name = (''__currentCond''),
  read_from = (\<lambda> s . (currentCond   s)),
  write_to = (\<lambda> v s .  (( s (| currentCond := v |)))),
  of_regval = (\<lambda> v .  vector_4_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_4_dec_bit v) |) )"


definition unconditional_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " unconditional_ref = ( (|
  name = (''__unconditional''),
  read_from = (\<lambda> s . (unconditional   s)),
  write_to = (\<lambda> v s .  (( s (| unconditional := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


(*val get_regval : string -> regstate -> maybe register_value*)
definition get_regval  :: " string \<Rightarrow> regstate \<Rightarrow>(register_value)option "  where 
     " get_regval reg_name s = (
  if reg_name = (''APDAKeyHi_EL1'') then Some ((regval_of   APDAKeyHi_EL1_ref) ((read_from   APDAKeyHi_EL1_ref) s)) else
  if reg_name = (''APDAKeyLo_EL1'') then Some ((regval_of   APDAKeyLo_EL1_ref) ((read_from   APDAKeyLo_EL1_ref) s)) else
  if reg_name = (''APDBKeyHi_EL1'') then Some ((regval_of   APDBKeyHi_EL1_ref) ((read_from   APDBKeyHi_EL1_ref) s)) else
  if reg_name = (''APDBKeyLo_EL1'') then Some ((regval_of   APDBKeyLo_EL1_ref) ((read_from   APDBKeyLo_EL1_ref) s)) else
  if reg_name = (''APGAKeyHi_EL1'') then Some ((regval_of   APGAKeyHi_EL1_ref) ((read_from   APGAKeyHi_EL1_ref) s)) else
  if reg_name = (''APGAKeyLo_EL1'') then Some ((regval_of   APGAKeyLo_EL1_ref) ((read_from   APGAKeyLo_EL1_ref) s)) else
  if reg_name = (''APIAKeyHi_EL1'') then Some ((regval_of   APIAKeyHi_EL1_ref) ((read_from   APIAKeyHi_EL1_ref) s)) else
  if reg_name = (''APIAKeyLo_EL1'') then Some ((regval_of   APIAKeyLo_EL1_ref) ((read_from   APIAKeyLo_EL1_ref) s)) else
  if reg_name = (''APIBKeyHi_EL1'') then Some ((regval_of   APIBKeyHi_EL1_ref) ((read_from   APIBKeyHi_EL1_ref) s)) else
  if reg_name = (''APIBKeyLo_EL1'') then Some ((regval_of   APIBKeyLo_EL1_ref) ((read_from   APIBKeyLo_EL1_ref) s)) else
  if reg_name = (''CONTEXTIDR_EL1'') then Some ((regval_of   CONTEXTIDR_EL1_ref) ((read_from   CONTEXTIDR_EL1_ref) s)) else
  if reg_name = (''CONTEXTIDR_EL2'') then Some ((regval_of   CONTEXTIDR_EL2_ref) ((read_from   CONTEXTIDR_EL2_ref) s)) else
  if reg_name = (''CPACR_EL1'') then Some ((regval_of   CPACR_EL1_ref) ((read_from   CPACR_EL1_ref) s)) else
  if reg_name = (''CPTR_EL2'') then Some ((regval_of   CPTR_EL2_ref) ((read_from   CPTR_EL2_ref) s)) else
  if reg_name = (''CPTR_EL3'') then Some ((regval_of   CPTR_EL3_ref) ((read_from   CPTR_EL3_ref) s)) else
  if reg_name = (''DBGBCR_EL1'') then Some ((regval_of   DBGBCR_EL1_ref) ((read_from   DBGBCR_EL1_ref) s)) else
  if reg_name = (''DBGBVR_EL1'') then Some ((regval_of   DBGBVR_EL1_ref) ((read_from   DBGBVR_EL1_ref) s)) else
  if reg_name = (''DBGEN'') then Some ((regval_of   DBGEN_ref) ((read_from   DBGEN_ref) s)) else
  if reg_name = (''DBGOSDLR'') then Some ((regval_of   DBGOSDLR_ref) ((read_from   DBGOSDLR_ref) s)) else
  if reg_name = (''DBGOSLSR'') then Some ((regval_of   DBGOSLSR_ref) ((read_from   DBGOSLSR_ref) s)) else
  if reg_name = (''DBGPRCR'') then Some ((regval_of   DBGPRCR_ref) ((read_from   DBGPRCR_ref) s)) else
  if reg_name = (''DBGPRCR_EL1'') then Some ((regval_of   DBGPRCR_EL1_ref) ((read_from   DBGPRCR_EL1_ref) s)) else
  if reg_name = (''DBGWCR_EL1'') then Some ((regval_of   DBGWCR_EL1_ref) ((read_from   DBGWCR_EL1_ref) s)) else
  if reg_name = (''DBGWVR_EL1'') then Some ((regval_of   DBGWVR_EL1_ref) ((read_from   DBGWVR_EL1_ref) s)) else
  if reg_name = (''DLR'') then Some ((regval_of   DLR_ref) ((read_from   DLR_ref) s)) else
  if reg_name = (''DLR_EL0'') then Some ((regval_of   DLR_EL0_ref) ((read_from   DLR_EL0_ref) s)) else
  if reg_name = (''DSPSR'') then Some ((regval_of   DSPSR_ref) ((read_from   DSPSR_ref) s)) else
  if reg_name = (''DSPSR_EL0'') then Some ((regval_of   DSPSR_EL0_ref) ((read_from   DSPSR_EL0_ref) s)) else
  if reg_name = (''EDSCR'') then Some ((regval_of   EDSCR_ref) ((read_from   EDSCR_ref) s)) else
  if reg_name = (''ELR_EL1'') then Some ((regval_of   ELR_EL1_ref) ((read_from   ELR_EL1_ref) s)) else
  if reg_name = (''ELR_EL2'') then Some ((regval_of   ELR_EL2_ref) ((read_from   ELR_EL2_ref) s)) else
  if reg_name = (''ELR_EL3'') then Some ((regval_of   ELR_EL3_ref) ((read_from   ELR_EL3_ref) s)) else
  if reg_name = (''ELR_hyp'') then Some ((regval_of   ELR_hyp_ref) ((read_from   ELR_hyp_ref) s)) else
  if reg_name = (''ESR_EL1'') then Some ((regval_of   ESR_EL1_ref) ((read_from   ESR_EL1_ref) s)) else
  if reg_name = (''ESR_EL2'') then Some ((regval_of   ESR_EL2_ref) ((read_from   ESR_EL2_ref) s)) else
  if reg_name = (''ESR_EL3'') then Some ((regval_of   ESR_EL3_ref) ((read_from   ESR_EL3_ref) s)) else
  if reg_name = (''EventRegister'') then Some ((regval_of   EventRegister_ref) ((read_from   EventRegister_ref) s)) else
  if reg_name = (''FAR_EL1'') then Some ((regval_of   FAR_EL1_ref) ((read_from   FAR_EL1_ref) s)) else
  if reg_name = (''FAR_EL2'') then Some ((regval_of   FAR_EL2_ref) ((read_from   FAR_EL2_ref) s)) else
  if reg_name = (''FAR_EL3'') then Some ((regval_of   FAR_EL3_ref) ((read_from   FAR_EL3_ref) s)) else
  if reg_name = (''FPCR'') then Some ((regval_of   FPCR_ref) ((read_from   FPCR_ref) s)) else
  if reg_name = (''FPEXC'') then Some ((regval_of   FPEXC_ref) ((read_from   FPEXC_ref) s)) else
  if reg_name = (''FPSCR'') then Some ((regval_of   FPSCR_ref) ((read_from   FPSCR_ref) s)) else
  if reg_name = (''FPSR'') then Some ((regval_of   FPSR_ref) ((read_from   FPSR_ref) s)) else
  if reg_name = (''HCR'') then Some ((regval_of   HCR_ref) ((read_from   HCR_ref) s)) else
  if reg_name = (''HCR2'') then Some ((regval_of   HCR2_ref) ((read_from   HCR2_ref) s)) else
  if reg_name = (''HCR_EL2'') then Some ((regval_of   HCR_EL2_ref) ((read_from   HCR_EL2_ref) s)) else
  if reg_name = (''HDCR'') then Some ((regval_of   HDCR_ref) ((read_from   HDCR_ref) s)) else
  if reg_name = (''HDFAR'') then Some ((regval_of   HDFAR_ref) ((read_from   HDFAR_ref) s)) else
  if reg_name = (''HIFAR'') then Some ((regval_of   HIFAR_ref) ((read_from   HIFAR_ref) s)) else
  if reg_name = (''HPFAR'') then Some ((regval_of   HPFAR_ref) ((read_from   HPFAR_ref) s)) else
  if reg_name = (''HPFAR_EL2'') then Some ((regval_of   HPFAR_EL2_ref) ((read_from   HPFAR_EL2_ref) s)) else
  if reg_name = (''HSCTLR'') then Some ((regval_of   HSCTLR_ref) ((read_from   HSCTLR_ref) s)) else
  if reg_name = (''HSR'') then Some ((regval_of   HSR_ref) ((read_from   HSR_ref) s)) else
  if reg_name = (''HVBAR'') then Some ((regval_of   HVBAR_ref) ((read_from   HVBAR_ref) s)) else
  if reg_name = (''ID_AA64DFR0_EL1'') then Some ((regval_of   ID_AA64DFR0_EL1_ref) ((read_from   ID_AA64DFR0_EL1_ref) s)) else
  if reg_name = (''LR_mon'') then Some ((regval_of   LR_mon_ref) ((read_from   LR_mon_ref) s)) else
  if reg_name = (''MAIR_EL1'') then Some ((regval_of   MAIR_EL1_ref) ((read_from   MAIR_EL1_ref) s)) else
  if reg_name = (''MAIR_EL2'') then Some ((regval_of   MAIR_EL2_ref) ((read_from   MAIR_EL2_ref) s)) else
  if reg_name = (''MAIR_EL3'') then Some ((regval_of   MAIR_EL3_ref) ((read_from   MAIR_EL3_ref) s)) else
  if reg_name = (''MDCR_EL2'') then Some ((regval_of   MDCR_EL2_ref) ((read_from   MDCR_EL2_ref) s)) else
  if reg_name = (''MDCR_EL3'') then Some ((regval_of   MDCR_EL3_ref) ((read_from   MDCR_EL3_ref) s)) else
  if reg_name = (''MDSCR_EL1'') then Some ((regval_of   MDSCR_EL1_ref) ((read_from   MDSCR_EL1_ref) s)) else
  if reg_name = (''OSDLR_EL1'') then Some ((regval_of   OSDLR_EL1_ref) ((read_from   OSDLR_EL1_ref) s)) else
  if reg_name = (''OSLSR_EL1'') then Some ((regval_of   OSLSR_EL1_ref) ((read_from   OSLSR_EL1_ref) s)) else
  if reg_name = (''PSTATE'') then Some ((regval_of   PSTATE_ref) ((read_from   PSTATE_ref) s)) else
  if reg_name = (''RC'') then Some ((regval_of   RC_ref) ((read_from   RC_ref) s)) else
  if reg_name = (''RVBAR_EL1'') then Some ((regval_of   RVBAR_EL1_ref) ((read_from   RVBAR_EL1_ref) s)) else
  if reg_name = (''RVBAR_EL2'') then Some ((regval_of   RVBAR_EL2_ref) ((read_from   RVBAR_EL2_ref) s)) else
  if reg_name = (''RVBAR_EL3'') then Some ((regval_of   RVBAR_EL3_ref) ((read_from   RVBAR_EL3_ref) s)) else
  if reg_name = (''SCR'') then Some ((regval_of   SCR_ref) ((read_from   SCR_ref) s)) else
  if reg_name = (''SCR_EL3'') then Some ((regval_of   SCR_EL3_ref) ((read_from   SCR_EL3_ref) s)) else
  if reg_name = (''SCTLR'') then Some ((regval_of   SCTLR_ref) ((read_from   SCTLR_ref) s)) else
  if reg_name = (''SCTLR_EL1'') then Some ((regval_of   SCTLR_EL1_ref) ((read_from   SCTLR_EL1_ref) s)) else
  if reg_name = (''SCTLR_EL2'') then Some ((regval_of   SCTLR_EL2_ref) ((read_from   SCTLR_EL2_ref) s)) else
  if reg_name = (''SCTLR_EL3'') then Some ((regval_of   SCTLR_EL3_ref) ((read_from   SCTLR_EL3_ref) s)) else
  if reg_name = (''SDCR'') then Some ((regval_of   SDCR_ref) ((read_from   SDCR_ref) s)) else
  if reg_name = (''SDER'') then Some ((regval_of   SDER_ref) ((read_from   SDER_ref) s)) else
  if reg_name = (''SPIDEN'') then Some ((regval_of   SPIDEN_ref) ((read_from   SPIDEN_ref) s)) else
  if reg_name = (''SPSR_EL1'') then Some ((regval_of   SPSR_EL1_ref) ((read_from   SPSR_EL1_ref) s)) else
  if reg_name = (''SPSR_EL2'') then Some ((regval_of   SPSR_EL2_ref) ((read_from   SPSR_EL2_ref) s)) else
  if reg_name = (''SPSR_EL3'') then Some ((regval_of   SPSR_EL3_ref) ((read_from   SPSR_EL3_ref) s)) else
  if reg_name = (''SPSR_abt'') then Some ((regval_of   SPSR_abt_ref) ((read_from   SPSR_abt_ref) s)) else
  if reg_name = (''SPSR_fiq'') then Some ((regval_of   SPSR_fiq_ref) ((read_from   SPSR_fiq_ref) s)) else
  if reg_name = (''SPSR_hyp'') then Some ((regval_of   SPSR_hyp_ref) ((read_from   SPSR_hyp_ref) s)) else
  if reg_name = (''SPSR_irq'') then Some ((regval_of   SPSR_irq_ref) ((read_from   SPSR_irq_ref) s)) else
  if reg_name = (''SPSR_mon'') then Some ((regval_of   SPSR_mon_ref) ((read_from   SPSR_mon_ref) s)) else
  if reg_name = (''SPSR_svc'') then Some ((regval_of   SPSR_svc_ref) ((read_from   SPSR_svc_ref) s)) else
  if reg_name = (''SPSR_und'') then Some ((regval_of   SPSR_und_ref) ((read_from   SPSR_und_ref) s)) else
  if reg_name = (''SP_EL0'') then Some ((regval_of   SP_EL0_ref) ((read_from   SP_EL0_ref) s)) else
  if reg_name = (''SP_EL1'') then Some ((regval_of   SP_EL1_ref) ((read_from   SP_EL1_ref) s)) else
  if reg_name = (''SP_EL2'') then Some ((regval_of   SP_EL2_ref) ((read_from   SP_EL2_ref) s)) else
  if reg_name = (''SP_EL3'') then Some ((regval_of   SP_EL3_ref) ((read_from   SP_EL3_ref) s)) else
  if reg_name = (''SP_mon'') then Some ((regval_of   SP_mon_ref) ((read_from   SP_mon_ref) s)) else
  if reg_name = (''TCR_EL1'') then Some ((regval_of   TCR_EL1_ref) ((read_from   TCR_EL1_ref) s)) else
  if reg_name = (''TCR_EL2'') then Some ((regval_of   TCR_EL2_ref) ((read_from   TCR_EL2_ref) s)) else
  if reg_name = (''TCR_EL3'') then Some ((regval_of   TCR_EL3_ref) ((read_from   TCR_EL3_ref) s)) else
  if reg_name = (''TTBCR'') then Some ((regval_of   TTBCR_ref) ((read_from   TTBCR_ref) s)) else
  if reg_name = (''TTBR0_EL1'') then Some ((regval_of   TTBR0_EL1_ref) ((read_from   TTBR0_EL1_ref) s)) else
  if reg_name = (''TTBR0_EL2'') then Some ((regval_of   TTBR0_EL2_ref) ((read_from   TTBR0_EL2_ref) s)) else
  if reg_name = (''TTBR0_EL3'') then Some ((regval_of   TTBR0_EL3_ref) ((read_from   TTBR0_EL3_ref) s)) else
  if reg_name = (''TTBR1_EL1'') then Some ((regval_of   TTBR1_EL1_ref) ((read_from   TTBR1_EL1_ref) s)) else
  if reg_name = (''TTBR1_EL2'') then Some ((regval_of   TTBR1_EL2_ref) ((read_from   TTBR1_EL2_ref) s)) else
  if reg_name = (''VBAR'') then Some ((regval_of   VBAR_ref) ((read_from   VBAR_ref) s)) else
  if reg_name = (''VBAR_EL1'') then Some ((regval_of   VBAR_EL1_ref) ((read_from   VBAR_EL1_ref) s)) else
  if reg_name = (''VBAR_EL2'') then Some ((regval_of   VBAR_EL2_ref) ((read_from   VBAR_EL2_ref) s)) else
  if reg_name = (''VBAR_EL3'') then Some ((regval_of   VBAR_EL3_ref) ((read_from   VBAR_EL3_ref) s)) else
  if reg_name = (''VDFSR'') then Some ((regval_of   VDFSR_ref) ((read_from   VDFSR_ref) s)) else
  if reg_name = (''VSESR_EL2'') then Some ((regval_of   VSESR_EL2_ref) ((read_from   VSESR_EL2_ref) s)) else
  if reg_name = (''VTCR_EL2'') then Some ((regval_of   VTCR_EL2_ref) ((read_from   VTCR_EL2_ref) s)) else
  if reg_name = (''VTTBR_EL2'') then Some ((regval_of   VTTBR_EL2_ref) ((read_from   VTTBR_EL2_ref) s)) else
  if reg_name = (''_PC'') then Some ((regval_of   PC_ref) ((read_from   PC_ref) s)) else
  if reg_name = (''_R'') then Some ((regval_of   R_ref) ((read_from   R_ref) s)) else
  if reg_name = (''_V'') then Some ((regval_of   V_ref) ((read_from   V_ref) s)) else
  if reg_name = (''__BranchTaken'') then Some ((regval_of   BranchTaken_ref) ((read_from   BranchTaken_ref) s)) else
  if reg_name = (''__ExclusiveLocal'') then Some ((regval_of   ExclusiveLocal_ref) ((read_from   ExclusiveLocal_ref) s)) else
  if reg_name = (''__Memory'') then Some ((regval_of   Memory_ref) ((read_from   Memory_ref) s)) else
  if reg_name = (''__PendingInterrupt'') then Some ((regval_of   PendingInterrupt_ref) ((read_from   PendingInterrupt_ref) s)) else
  if reg_name = (''__PendingPhysicalSError'') then Some ((regval_of   PendingPhysicalSError_ref) ((read_from   PendingPhysicalSError_ref) s)) else
  if reg_name = (''__Sleeping'') then Some ((regval_of   Sleeping_ref) ((read_from   Sleeping_ref) s)) else
  if reg_name = (''__ThisInstr'') then Some ((regval_of   ThisInstr_ref) ((read_from   ThisInstr_ref) s)) else
  if reg_name = (''__ThisInstrEnc'') then Some ((regval_of   ThisInstrEnc_ref) ((read_from   ThisInstrEnc_ref) s)) else
  if reg_name = (''__currentCond'') then Some ((regval_of   currentCond_ref) ((read_from   currentCond_ref) s)) else
  if reg_name = (''__unconditional'') then Some ((regval_of   unconditional_ref) ((read_from   unconditional_ref) s)) else
  None )"


(*val set_regval : string -> register_value -> regstate -> maybe regstate*)
definition set_regval  :: " string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option "  where 
     " set_regval reg_name v s = (
  if reg_name = (''APDAKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APDAKeyHi_EL1_ref) v s) ((of_regval   APDAKeyHi_EL1_ref) v) else
  if reg_name = (''APDAKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APDAKeyLo_EL1_ref) v s) ((of_regval   APDAKeyLo_EL1_ref) v) else
  if reg_name = (''APDBKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APDBKeyHi_EL1_ref) v s) ((of_regval   APDBKeyHi_EL1_ref) v) else
  if reg_name = (''APDBKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APDBKeyLo_EL1_ref) v s) ((of_regval   APDBKeyLo_EL1_ref) v) else
  if reg_name = (''APGAKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APGAKeyHi_EL1_ref) v s) ((of_regval   APGAKeyHi_EL1_ref) v) else
  if reg_name = (''APGAKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APGAKeyLo_EL1_ref) v s) ((of_regval   APGAKeyLo_EL1_ref) v) else
  if reg_name = (''APIAKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APIAKeyHi_EL1_ref) v s) ((of_regval   APIAKeyHi_EL1_ref) v) else
  if reg_name = (''APIAKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APIAKeyLo_EL1_ref) v s) ((of_regval   APIAKeyLo_EL1_ref) v) else
  if reg_name = (''APIBKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APIBKeyHi_EL1_ref) v s) ((of_regval   APIBKeyHi_EL1_ref) v) else
  if reg_name = (''APIBKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APIBKeyLo_EL1_ref) v s) ((of_regval   APIBKeyLo_EL1_ref) v) else
  if reg_name = (''CONTEXTIDR_EL1'') then map_option (\<lambda> v . (write_to   CONTEXTIDR_EL1_ref) v s) ((of_regval   CONTEXTIDR_EL1_ref) v) else
  if reg_name = (''CONTEXTIDR_EL2'') then map_option (\<lambda> v . (write_to   CONTEXTIDR_EL2_ref) v s) ((of_regval   CONTEXTIDR_EL2_ref) v) else
  if reg_name = (''CPACR_EL1'') then map_option (\<lambda> v . (write_to   CPACR_EL1_ref) v s) ((of_regval   CPACR_EL1_ref) v) else
  if reg_name = (''CPTR_EL2'') then map_option (\<lambda> v . (write_to   CPTR_EL2_ref) v s) ((of_regval   CPTR_EL2_ref) v) else
  if reg_name = (''CPTR_EL3'') then map_option (\<lambda> v . (write_to   CPTR_EL3_ref) v s) ((of_regval   CPTR_EL3_ref) v) else
  if reg_name = (''DBGBCR_EL1'') then map_option (\<lambda> v . (write_to   DBGBCR_EL1_ref) v s) ((of_regval   DBGBCR_EL1_ref) v) else
  if reg_name = (''DBGBVR_EL1'') then map_option (\<lambda> v . (write_to   DBGBVR_EL1_ref) v s) ((of_regval   DBGBVR_EL1_ref) v) else
  if reg_name = (''DBGEN'') then map_option (\<lambda> v . (write_to   DBGEN_ref) v s) ((of_regval   DBGEN_ref) v) else
  if reg_name = (''DBGOSDLR'') then map_option (\<lambda> v . (write_to   DBGOSDLR_ref) v s) ((of_regval   DBGOSDLR_ref) v) else
  if reg_name = (''DBGOSLSR'') then map_option (\<lambda> v . (write_to   DBGOSLSR_ref) v s) ((of_regval   DBGOSLSR_ref) v) else
  if reg_name = (''DBGPRCR'') then map_option (\<lambda> v . (write_to   DBGPRCR_ref) v s) ((of_regval   DBGPRCR_ref) v) else
  if reg_name = (''DBGPRCR_EL1'') then map_option (\<lambda> v . (write_to   DBGPRCR_EL1_ref) v s) ((of_regval   DBGPRCR_EL1_ref) v) else
  if reg_name = (''DBGWCR_EL1'') then map_option (\<lambda> v . (write_to   DBGWCR_EL1_ref) v s) ((of_regval   DBGWCR_EL1_ref) v) else
  if reg_name = (''DBGWVR_EL1'') then map_option (\<lambda> v . (write_to   DBGWVR_EL1_ref) v s) ((of_regval   DBGWVR_EL1_ref) v) else
  if reg_name = (''DLR'') then map_option (\<lambda> v . (write_to   DLR_ref) v s) ((of_regval   DLR_ref) v) else
  if reg_name = (''DLR_EL0'') then map_option (\<lambda> v . (write_to   DLR_EL0_ref) v s) ((of_regval   DLR_EL0_ref) v) else
  if reg_name = (''DSPSR'') then map_option (\<lambda> v . (write_to   DSPSR_ref) v s) ((of_regval   DSPSR_ref) v) else
  if reg_name = (''DSPSR_EL0'') then map_option (\<lambda> v . (write_to   DSPSR_EL0_ref) v s) ((of_regval   DSPSR_EL0_ref) v) else
  if reg_name = (''EDSCR'') then map_option (\<lambda> v . (write_to   EDSCR_ref) v s) ((of_regval   EDSCR_ref) v) else
  if reg_name = (''ELR_EL1'') then map_option (\<lambda> v . (write_to   ELR_EL1_ref) v s) ((of_regval   ELR_EL1_ref) v) else
  if reg_name = (''ELR_EL2'') then map_option (\<lambda> v . (write_to   ELR_EL2_ref) v s) ((of_regval   ELR_EL2_ref) v) else
  if reg_name = (''ELR_EL3'') then map_option (\<lambda> v . (write_to   ELR_EL3_ref) v s) ((of_regval   ELR_EL3_ref) v) else
  if reg_name = (''ELR_hyp'') then map_option (\<lambda> v . (write_to   ELR_hyp_ref) v s) ((of_regval   ELR_hyp_ref) v) else
  if reg_name = (''ESR_EL1'') then map_option (\<lambda> v . (write_to   ESR_EL1_ref) v s) ((of_regval   ESR_EL1_ref) v) else
  if reg_name = (''ESR_EL2'') then map_option (\<lambda> v . (write_to   ESR_EL2_ref) v s) ((of_regval   ESR_EL2_ref) v) else
  if reg_name = (''ESR_EL3'') then map_option (\<lambda> v . (write_to   ESR_EL3_ref) v s) ((of_regval   ESR_EL3_ref) v) else
  if reg_name = (''EventRegister'') then map_option (\<lambda> v . (write_to   EventRegister_ref) v s) ((of_regval   EventRegister_ref) v) else
  if reg_name = (''FAR_EL1'') then map_option (\<lambda> v . (write_to   FAR_EL1_ref) v s) ((of_regval   FAR_EL1_ref) v) else
  if reg_name = (''FAR_EL2'') then map_option (\<lambda> v . (write_to   FAR_EL2_ref) v s) ((of_regval   FAR_EL2_ref) v) else
  if reg_name = (''FAR_EL3'') then map_option (\<lambda> v . (write_to   FAR_EL3_ref) v s) ((of_regval   FAR_EL3_ref) v) else
  if reg_name = (''FPCR'') then map_option (\<lambda> v . (write_to   FPCR_ref) v s) ((of_regval   FPCR_ref) v) else
  if reg_name = (''FPEXC'') then map_option (\<lambda> v . (write_to   FPEXC_ref) v s) ((of_regval   FPEXC_ref) v) else
  if reg_name = (''FPSCR'') then map_option (\<lambda> v . (write_to   FPSCR_ref) v s) ((of_regval   FPSCR_ref) v) else
  if reg_name = (''FPSR'') then map_option (\<lambda> v . (write_to   FPSR_ref) v s) ((of_regval   FPSR_ref) v) else
  if reg_name = (''HCR'') then map_option (\<lambda> v . (write_to   HCR_ref) v s) ((of_regval   HCR_ref) v) else
  if reg_name = (''HCR2'') then map_option (\<lambda> v . (write_to   HCR2_ref) v s) ((of_regval   HCR2_ref) v) else
  if reg_name = (''HCR_EL2'') then map_option (\<lambda> v . (write_to   HCR_EL2_ref) v s) ((of_regval   HCR_EL2_ref) v) else
  if reg_name = (''HDCR'') then map_option (\<lambda> v . (write_to   HDCR_ref) v s) ((of_regval   HDCR_ref) v) else
  if reg_name = (''HDFAR'') then map_option (\<lambda> v . (write_to   HDFAR_ref) v s) ((of_regval   HDFAR_ref) v) else
  if reg_name = (''HIFAR'') then map_option (\<lambda> v . (write_to   HIFAR_ref) v s) ((of_regval   HIFAR_ref) v) else
  if reg_name = (''HPFAR'') then map_option (\<lambda> v . (write_to   HPFAR_ref) v s) ((of_regval   HPFAR_ref) v) else
  if reg_name = (''HPFAR_EL2'') then map_option (\<lambda> v . (write_to   HPFAR_EL2_ref) v s) ((of_regval   HPFAR_EL2_ref) v) else
  if reg_name = (''HSCTLR'') then map_option (\<lambda> v . (write_to   HSCTLR_ref) v s) ((of_regval   HSCTLR_ref) v) else
  if reg_name = (''HSR'') then map_option (\<lambda> v . (write_to   HSR_ref) v s) ((of_regval   HSR_ref) v) else
  if reg_name = (''HVBAR'') then map_option (\<lambda> v . (write_to   HVBAR_ref) v s) ((of_regval   HVBAR_ref) v) else
  if reg_name = (''ID_AA64DFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64DFR0_EL1_ref) v s) ((of_regval   ID_AA64DFR0_EL1_ref) v) else
  if reg_name = (''LR_mon'') then map_option (\<lambda> v . (write_to   LR_mon_ref) v s) ((of_regval   LR_mon_ref) v) else
  if reg_name = (''MAIR_EL1'') then map_option (\<lambda> v . (write_to   MAIR_EL1_ref) v s) ((of_regval   MAIR_EL1_ref) v) else
  if reg_name = (''MAIR_EL2'') then map_option (\<lambda> v . (write_to   MAIR_EL2_ref) v s) ((of_regval   MAIR_EL2_ref) v) else
  if reg_name = (''MAIR_EL3'') then map_option (\<lambda> v . (write_to   MAIR_EL3_ref) v s) ((of_regval   MAIR_EL3_ref) v) else
  if reg_name = (''MDCR_EL2'') then map_option (\<lambda> v . (write_to   MDCR_EL2_ref) v s) ((of_regval   MDCR_EL2_ref) v) else
  if reg_name = (''MDCR_EL3'') then map_option (\<lambda> v . (write_to   MDCR_EL3_ref) v s) ((of_regval   MDCR_EL3_ref) v) else
  if reg_name = (''MDSCR_EL1'') then map_option (\<lambda> v . (write_to   MDSCR_EL1_ref) v s) ((of_regval   MDSCR_EL1_ref) v) else
  if reg_name = (''OSDLR_EL1'') then map_option (\<lambda> v . (write_to   OSDLR_EL1_ref) v s) ((of_regval   OSDLR_EL1_ref) v) else
  if reg_name = (''OSLSR_EL1'') then map_option (\<lambda> v . (write_to   OSLSR_EL1_ref) v s) ((of_regval   OSLSR_EL1_ref) v) else
  if reg_name = (''PSTATE'') then map_option (\<lambda> v . (write_to   PSTATE_ref) v s) ((of_regval   PSTATE_ref) v) else
  if reg_name = (''RC'') then map_option (\<lambda> v . (write_to   RC_ref) v s) ((of_regval   RC_ref) v) else
  if reg_name = (''RVBAR_EL1'') then map_option (\<lambda> v . (write_to   RVBAR_EL1_ref) v s) ((of_regval   RVBAR_EL1_ref) v) else
  if reg_name = (''RVBAR_EL2'') then map_option (\<lambda> v . (write_to   RVBAR_EL2_ref) v s) ((of_regval   RVBAR_EL2_ref) v) else
  if reg_name = (''RVBAR_EL3'') then map_option (\<lambda> v . (write_to   RVBAR_EL3_ref) v s) ((of_regval   RVBAR_EL3_ref) v) else
  if reg_name = (''SCR'') then map_option (\<lambda> v . (write_to   SCR_ref) v s) ((of_regval   SCR_ref) v) else
  if reg_name = (''SCR_EL3'') then map_option (\<lambda> v . (write_to   SCR_EL3_ref) v s) ((of_regval   SCR_EL3_ref) v) else
  if reg_name = (''SCTLR'') then map_option (\<lambda> v . (write_to   SCTLR_ref) v s) ((of_regval   SCTLR_ref) v) else
  if reg_name = (''SCTLR_EL1'') then map_option (\<lambda> v . (write_to   SCTLR_EL1_ref) v s) ((of_regval   SCTLR_EL1_ref) v) else
  if reg_name = (''SCTLR_EL2'') then map_option (\<lambda> v . (write_to   SCTLR_EL2_ref) v s) ((of_regval   SCTLR_EL2_ref) v) else
  if reg_name = (''SCTLR_EL3'') then map_option (\<lambda> v . (write_to   SCTLR_EL3_ref) v s) ((of_regval   SCTLR_EL3_ref) v) else
  if reg_name = (''SDCR'') then map_option (\<lambda> v . (write_to   SDCR_ref) v s) ((of_regval   SDCR_ref) v) else
  if reg_name = (''SDER'') then map_option (\<lambda> v . (write_to   SDER_ref) v s) ((of_regval   SDER_ref) v) else
  if reg_name = (''SPIDEN'') then map_option (\<lambda> v . (write_to   SPIDEN_ref) v s) ((of_regval   SPIDEN_ref) v) else
  if reg_name = (''SPSR_EL1'') then map_option (\<lambda> v . (write_to   SPSR_EL1_ref) v s) ((of_regval   SPSR_EL1_ref) v) else
  if reg_name = (''SPSR_EL2'') then map_option (\<lambda> v . (write_to   SPSR_EL2_ref) v s) ((of_regval   SPSR_EL2_ref) v) else
  if reg_name = (''SPSR_EL3'') then map_option (\<lambda> v . (write_to   SPSR_EL3_ref) v s) ((of_regval   SPSR_EL3_ref) v) else
  if reg_name = (''SPSR_abt'') then map_option (\<lambda> v . (write_to   SPSR_abt_ref) v s) ((of_regval   SPSR_abt_ref) v) else
  if reg_name = (''SPSR_fiq'') then map_option (\<lambda> v . (write_to   SPSR_fiq_ref) v s) ((of_regval   SPSR_fiq_ref) v) else
  if reg_name = (''SPSR_hyp'') then map_option (\<lambda> v . (write_to   SPSR_hyp_ref) v s) ((of_regval   SPSR_hyp_ref) v) else
  if reg_name = (''SPSR_irq'') then map_option (\<lambda> v . (write_to   SPSR_irq_ref) v s) ((of_regval   SPSR_irq_ref) v) else
  if reg_name = (''SPSR_mon'') then map_option (\<lambda> v . (write_to   SPSR_mon_ref) v s) ((of_regval   SPSR_mon_ref) v) else
  if reg_name = (''SPSR_svc'') then map_option (\<lambda> v . (write_to   SPSR_svc_ref) v s) ((of_regval   SPSR_svc_ref) v) else
  if reg_name = (''SPSR_und'') then map_option (\<lambda> v . (write_to   SPSR_und_ref) v s) ((of_regval   SPSR_und_ref) v) else
  if reg_name = (''SP_EL0'') then map_option (\<lambda> v . (write_to   SP_EL0_ref) v s) ((of_regval   SP_EL0_ref) v) else
  if reg_name = (''SP_EL1'') then map_option (\<lambda> v . (write_to   SP_EL1_ref) v s) ((of_regval   SP_EL1_ref) v) else
  if reg_name = (''SP_EL2'') then map_option (\<lambda> v . (write_to   SP_EL2_ref) v s) ((of_regval   SP_EL2_ref) v) else
  if reg_name = (''SP_EL3'') then map_option (\<lambda> v . (write_to   SP_EL3_ref) v s) ((of_regval   SP_EL3_ref) v) else
  if reg_name = (''SP_mon'') then map_option (\<lambda> v . (write_to   SP_mon_ref) v s) ((of_regval   SP_mon_ref) v) else
  if reg_name = (''TCR_EL1'') then map_option (\<lambda> v . (write_to   TCR_EL1_ref) v s) ((of_regval   TCR_EL1_ref) v) else
  if reg_name = (''TCR_EL2'') then map_option (\<lambda> v . (write_to   TCR_EL2_ref) v s) ((of_regval   TCR_EL2_ref) v) else
  if reg_name = (''TCR_EL3'') then map_option (\<lambda> v . (write_to   TCR_EL3_ref) v s) ((of_regval   TCR_EL3_ref) v) else
  if reg_name = (''TTBCR'') then map_option (\<lambda> v . (write_to   TTBCR_ref) v s) ((of_regval   TTBCR_ref) v) else
  if reg_name = (''TTBR0_EL1'') then map_option (\<lambda> v . (write_to   TTBR0_EL1_ref) v s) ((of_regval   TTBR0_EL1_ref) v) else
  if reg_name = (''TTBR0_EL2'') then map_option (\<lambda> v . (write_to   TTBR0_EL2_ref) v s) ((of_regval   TTBR0_EL2_ref) v) else
  if reg_name = (''TTBR0_EL3'') then map_option (\<lambda> v . (write_to   TTBR0_EL3_ref) v s) ((of_regval   TTBR0_EL3_ref) v) else
  if reg_name = (''TTBR1_EL1'') then map_option (\<lambda> v . (write_to   TTBR1_EL1_ref) v s) ((of_regval   TTBR1_EL1_ref) v) else
  if reg_name = (''TTBR1_EL2'') then map_option (\<lambda> v . (write_to   TTBR1_EL2_ref) v s) ((of_regval   TTBR1_EL2_ref) v) else
  if reg_name = (''VBAR'') then map_option (\<lambda> v . (write_to   VBAR_ref) v s) ((of_regval   VBAR_ref) v) else
  if reg_name = (''VBAR_EL1'') then map_option (\<lambda> v . (write_to   VBAR_EL1_ref) v s) ((of_regval   VBAR_EL1_ref) v) else
  if reg_name = (''VBAR_EL2'') then map_option (\<lambda> v . (write_to   VBAR_EL2_ref) v s) ((of_regval   VBAR_EL2_ref) v) else
  if reg_name = (''VBAR_EL3'') then map_option (\<lambda> v . (write_to   VBAR_EL3_ref) v s) ((of_regval   VBAR_EL3_ref) v) else
  if reg_name = (''VDFSR'') then map_option (\<lambda> v . (write_to   VDFSR_ref) v s) ((of_regval   VDFSR_ref) v) else
  if reg_name = (''VSESR_EL2'') then map_option (\<lambda> v . (write_to   VSESR_EL2_ref) v s) ((of_regval   VSESR_EL2_ref) v) else
  if reg_name = (''VTCR_EL2'') then map_option (\<lambda> v . (write_to   VTCR_EL2_ref) v s) ((of_regval   VTCR_EL2_ref) v) else
  if reg_name = (''VTTBR_EL2'') then map_option (\<lambda> v . (write_to   VTTBR_EL2_ref) v s) ((of_regval   VTTBR_EL2_ref) v) else
  if reg_name = (''_PC'') then map_option (\<lambda> v . (write_to   PC_ref) v s) ((of_regval   PC_ref) v) else
  if reg_name = (''_R'') then map_option (\<lambda> v . (write_to   R_ref) v s) ((of_regval   R_ref) v) else
  if reg_name = (''_V'') then map_option (\<lambda> v . (write_to   V_ref) v s) ((of_regval   V_ref) v) else
  if reg_name = (''__BranchTaken'') then map_option (\<lambda> v . (write_to   BranchTaken_ref) v s) ((of_regval   BranchTaken_ref) v) else
  if reg_name = (''__ExclusiveLocal'') then map_option (\<lambda> v . (write_to   ExclusiveLocal_ref) v s) ((of_regval   ExclusiveLocal_ref) v) else
  if reg_name = (''__Memory'') then map_option (\<lambda> v . (write_to   Memory_ref) v s) ((of_regval   Memory_ref) v) else
  if reg_name = (''__PendingInterrupt'') then map_option (\<lambda> v . (write_to   PendingInterrupt_ref) v s) ((of_regval   PendingInterrupt_ref) v) else
  if reg_name = (''__PendingPhysicalSError'') then map_option (\<lambda> v . (write_to   PendingPhysicalSError_ref) v s) ((of_regval   PendingPhysicalSError_ref) v) else
  if reg_name = (''__Sleeping'') then map_option (\<lambda> v . (write_to   Sleeping_ref) v s) ((of_regval   Sleeping_ref) v) else
  if reg_name = (''__ThisInstr'') then map_option (\<lambda> v . (write_to   ThisInstr_ref) v s) ((of_regval   ThisInstr_ref) v) else
  if reg_name = (''__ThisInstrEnc'') then map_option (\<lambda> v . (write_to   ThisInstrEnc_ref) v s) ((of_regval   ThisInstrEnc_ref) v) else
  if reg_name = (''__currentCond'') then map_option (\<lambda> v . (write_to   currentCond_ref) v s) ((of_regval   currentCond_ref) v) else
  if reg_name = (''__unconditional'') then map_option (\<lambda> v . (write_to   unconditional_ref) v s) ((of_regval   unconditional_ref) v) else
  None )"


definition register_accessors  :: "(string \<Rightarrow> regstate \<Rightarrow>(register_value)option)*(string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)"  where 
     " register_accessors = ( (get_regval, set_regval))"



type_synonym( 'a, 'r) MR =" (register_value, regstate, 'a, 'r, exception) base_monadR "
type_synonym 'a M =" (register_value, regstate, 'a, exception) base_monad "
end
