"add"      , BINOP { txt = "ADDQ"; op = X86ADD; sz = X86NONE };
"or"       , BINOP { txt = "OR"; op = X86OR; sz = X86NONE };
"adc"      , BINOP { txt = "ADC"; op = X86ADC; sz = X86NONE };
"sbb"      , BINOP { txt = "SBB"; op = X86SBB; sz = X86NONE };
"and"      , BINOP { txt = "AND"; op = X86AND; sz = X86NONE };
"sub"      , BINOP { txt = "SUB"; op = X86SUB; sz = X86NONE };
"xor"      , BINOP { txt = "XOR"; op = X86XOR; sz = X86NONE };
"cmp"      , BINOP { txt = "CMP"; op = X86CMP; sz = X86NONE };
"rol"      , BINOP { txt = "ROL"; op = X86ROL; sz = X86NONE };
"ror"      , BINOP { txt = "ROR"; op = X86ROR; sz = X86NONE };
"shl"      , BINOP { txt = "SHL"; op = X86SHL; sz = X86NONE };
"shr"      , BINOP { txt = "SHR"; op = X86SHR; sz = X86NONE };
"test"     , BINOP { txt = "TEST"; op = X86TEST; sz = X86NONE };
"sar"      , BINOP { txt = "SAR"; op = X86SAR; sz = X86NONE };
"btc"      , BITOP { txt = "BTS"; op = X86Btc; sz = X86NONE };
"bts"      , BITOP { txt = "BTC"; op = X86Bts; sz = X86NONE };
"btr"      , BITOP { txt = "BTR"; op = X86Btr; sz = X86NONE };
"call"     , CALL { txt = "CALL" };
"clc"      , CLC { txt = "CLC" };
"cmc"      , CMC { txt = "CMC" };
"cmpxchg"  , CMPXCHG { txt = "CMPXCHG"; sz = X86NONE };
"div"      , DIV { txt = "DIV"; sz = X86NONE };
"jo"       , JCC { txt = "JO"; cond = X86O };
"jb"       , JCC { txt = "JB"; cond = X86B };
"jc"       , JCC { txt = "JC"; cond = X86B };
"jnae"     , JCC { txt = "JNAE"; cond = X86B };
"je"       , JCC { txt = "JE"; cond = X86E };
"jz"       , JCC { txt = "JZ"; cond = X86E };
"ja"       , JCC { txt = "JA"; cond = X86A };
"jnbe"     , JCC { txt = "JNBE"; cond = X86A };
"js"       , JCC { txt = "JS"; cond = X86S };
"jp"       , JCC { txt = "JP"; cond = X86P };
"jpe"      , JCC { txt = "JPE"; cond = X86P };
"jl"       , JCC { txt = "JL"; cond = X86L };
"jnge"     , JCC { txt = "JNGE"; cond = X86L };
"jg"       , JCC { txt = "JG"; cond = X86G };
"jnle"     , JCC { txt = "JNLE"; cond = X86G };
"jno"      , JCC { txt = "JNO"; cond = X86NO };
"jnb"      , JCC { txt = "JNB"; cond = X86NB };
"jnc"      , JCC { txt = "JNC"; cond = X86NB };
"jae"      , JCC { txt = "JAE"; cond = X86NB };
"jne"      , JCC { txt = "JNE"; cond = X86NE };
"jnz"      , JCC { txt = "JNZ"; cond = X86NE };
"jna"      , JCC { txt = "JNA"; cond = X86NA };
"jbe"      , JCC { txt = "JBE"; cond = X86NA };
"jns"      , JCC { txt = "JNS"; cond = X86NS };
"jnp"      , JCC { txt = "JNP"; cond = X86NP };
"jpo"      , JCC { txt = "JPO"; cond = X86NP };
"jnl"      , JCC { txt = "JNL"; cond = X86NL };
"jge"      , JCC { txt = "JGE"; cond = X86NL };
"jng"      , JCC { txt = "JNG"; cond = X86NG };
"jle"      , JCC { txt = "JLE"; cond = X86NG };
"jmp"      , JMP { txt = "JMP" };
"lea"      , LEA { txt = "LEA"; sz = X86NONE };
"leave"    , LEAVE { txt = "LEAVE" };
"loopo"    , LOOP { txt = "LOOPO"; cond = X86O };
"loopb"    , LOOP { txt = "LOOPB"; cond = X86B };
"loopc"    , LOOP { txt = "LOOPC"; cond = X86B };
"loopnae"  , LOOP { txt = "LOOPNAE"; cond = X86B };
"loope"    , LOOP { txt = "LOOPE"; cond = X86E };
"loopz"    , LOOP { txt = "LOOPZ"; cond = X86E };
"loopa"    , LOOP { txt = "LOOPA"; cond = X86A };
"loopnbe"  , LOOP { txt = "LOOPNBE"; cond = X86A };
"loops"    , LOOP { txt = "LOOPS"; cond = X86S };
"loopp"    , LOOP { txt = "LOOPP"; cond = X86P };
"looppe"   , LOOP { txt = "LOOPPE"; cond = X86P };
"loopl"    , LOOP { txt = "LOOPL"; cond = X86L };
"loopnge"  , LOOP { txt = "LOOPNGE"; cond = X86L };
"loopg"    , LOOP { txt = "LOOPG"; cond = X86G };
"loopnle"  , LOOP { txt = "LOOPNLE"; cond = X86G };
"loopno"   , LOOP { txt = "LOOPNO"; cond = X86NO };
"loopnb"   , LOOP { txt = "LOOPNB"; cond = X86NB };
"loopnc"   , LOOP { txt = "LOOPNC"; cond = X86NB };
"loopae"   , LOOP { txt = "LOOPAE"; cond = X86NB };
"loopne"   , LOOP { txt = "LOOPNE"; cond = X86NE };
"loopnz"   , LOOP { txt = "LOOPNZ"; cond = X86NE };
"loopna"   , LOOP { txt = "LOOPNA"; cond = X86NA };
"loopbe"   , LOOP { txt = "LOOPBE"; cond = X86NA };
"loopns"   , LOOP { txt = "LOOPNS"; cond = X86NS };
"loopnp"   , LOOP { txt = "LOOPNP"; cond = X86NP };
"looppo"   , LOOP { txt = "LOOPPO"; cond = X86NP };
"loopnl"   , LOOP { txt = "LOOPNL"; cond = X86NL };
"loopge"   , LOOP { txt = "LOOPGE"; cond = X86NL };
"loopng"   , LOOP { txt = "LOOPNG"; cond = X86NG };
"loople"   , LOOP { txt = "LOOPLE"; cond = X86NG };
"mfence"   , MFENCE { txt = "MFENCE" };
"dec"      , MONOP { txt = "DEC"; op = X86DEC; sz = X86NONE };
"inc"      , MONOP { txt = "INC"; op = X86INC; sz = X86NONE };
"not"      , MONOP { txt = "NOT"; op = X86NOT; sz = X86NONE };
"neg"      , MONOP { txt = "NEG"; op = X86NEG; sz = X86NONE };
"cmovo"    , CMOV { txt = "CMOVO"; cond = X86O; sz = X86NONE };
"cmovb"    , CMOV { txt = "CMOVB"; cond = X86B; sz = X86NONE };
"cmovc"    , CMOV { txt = "CMOVC"; cond = X86B; sz = X86NONE };
"cmovnae"  , CMOV { txt = "CMOVNAE"; cond = X86B; sz = X86NONE };
"cmove"    , CMOV { txt = "CMOVE"; cond = X86E; sz = X86NONE };
"cmovz"    , CMOV { txt = "CMOVZ"; cond = X86E; sz = X86NONE };
"cmova"    , CMOV { txt = "CMOVA"; cond = X86A; sz = X86NONE };
"cmovnbe"  , CMOV { txt = "CMOVNBE"; cond = X86A; sz = X86NONE };
"cmovs"    , CMOV { txt = "CMOVS"; cond = X86S; sz = X86NONE };
"cmovp"    , CMOV { txt = "CMOVP"; cond = X86P; sz = X86NONE };
"cmovpe"   , CMOV { txt = "CMOVPE"; cond = X86P; sz = X86NONE };
"cmovl"    , CMOV { txt = "CMOVL"; cond = X86L; sz = X86NONE };
"cmovnge"  , CMOV { txt = "CMOVNGE"; cond = X86L; sz = X86NONE };
"cmovg"    , CMOV { txt = "CMOVG"; cond = X86G; sz = X86NONE };
"cmovnle"  , CMOV { txt = "CMOVNLE"; cond = X86G; sz = X86NONE };
"cmovno"   , CMOV { txt = "CMOVNO"; cond = X86NO; sz = X86NONE };
"cmovnb"   , CMOV { txt = "CMOVNB"; cond = X86NB; sz = X86NONE };
"cmovnc"   , CMOV { txt = "CMOVNC"; cond = X86NB; sz = X86NONE };
"cmovae"   , CMOV { txt = "CMOVAE"; cond = X86NB; sz = X86NONE };
"cmovne"   , CMOV { txt = "CMOVNE"; cond = X86NE; sz = X86NONE };
"cmovnz"   , CMOV { txt = "CMOVNZ"; cond = X86NE; sz = X86NONE };
"cmovna"   , CMOV { txt = "CMOVNA"; cond = X86NA; sz = X86NONE };
"cmovbe"   , CMOV { txt = "CMOVBE"; cond = X86NA; sz = X86NONE };
"cmovns"   , CMOV { txt = "CMOVNS"; cond = X86NS; sz = X86NONE };
"cmovnp"   , CMOV { txt = "CMOVNP"; cond = X86NP; sz = X86NONE };
"cmovpo"   , CMOV { txt = "CMOVPO"; cond = X86NP; sz = X86NONE };
"cmovnl"   , CMOV { txt = "CMOVNL"; cond = X86NL; sz = X86NONE };
"cmovge"   , CMOV { txt = "CMOVGE"; cond = X86NL; sz = X86NONE };
"cmovng"   , CMOV { txt = "CMOVNG"; cond = X86NG; sz = X86NONE };
"cmovle"   , CMOV { txt = "CMOVLE"; cond = X86NG; sz = X86NONE };
"mov"      , MOV { txt = "MOV"; sz = X86NONE };
"movsx"    , MOVSX { txt = "MOVSBW"; sz1 = X86NONE; sz2 = X86NONE };
"movzx"    , MOVZX { txt = "MOVZBW"; sz1 = X86NONE; sz2 = X86NONE };
"mul"      , MUL { txt = "MUL"; sz = X86NONE };
"nop"      , NOP { txt = "NOP" };
"pop"      , POP { txt = "POP" };
"push"     , PUSH { txt = "PUSH" };
"ret"      , PUSH { txt = "RET" };
"seto"     , SET { txt = "SETO"; cond = X86O };
"setb"     , SET { txt = "SETB"; cond = X86B };
"setc"     , SET { txt = "SETC"; cond = X86B };
"setnae"   , SET { txt = "SETNAE"; cond = X86B };
"sete"     , SET { txt = "SETE"; cond = X86E };
"setz"     , SET { txt = "SETZ"; cond = X86E };
"seta"     , SET { txt = "SETA"; cond = X86A };
"setnbe"   , SET { txt = "SETNBE"; cond = X86A };
"sets"     , SET { txt = "SETS"; cond = X86S };
"setp"     , SET { txt = "SETP"; cond = X86P };
"setpe"    , SET { txt = "SETPE"; cond = X86P };
"setl"     , SET { txt = "SETL"; cond = X86L };
"setnge"   , SET { txt = "SETNGE"; cond = X86L };
"setg"     , SET { txt = "SETG"; cond = X86G };
"setnle"   , SET { txt = "SETNLE"; cond = X86G };
"setno"    , SET { txt = "SETNO"; cond = X86NO };
"setnb"    , SET { txt = "SETNB"; cond = X86NB };
"setnc"    , SET { txt = "SETNC"; cond = X86NB };
"setae"    , SET { txt = "SETAE"; cond = X86NB };
"setne"    , SET { txt = "SETNE"; cond = X86NE };
"setnz"    , SET { txt = "SETNZ"; cond = X86NE };
"setna"    , SET { txt = "SETNA"; cond = X86NA };
"setbe"    , SET { txt = "SETBE"; cond = X86NA };
"setns"    , SET { txt = "SETNS"; cond = X86NS };
"setnp"    , SET { txt = "SETNP"; cond = X86NP };
"setpo"    , SET { txt = "SETPO"; cond = X86NP };
"setnl"    , SET { txt = "SETNL"; cond = X86NL };
"setge"    , SET { txt = "SETGE"; cond = X86NL };
"setng"    , SET { txt = "SETNG"; cond = X86NG };
"setle"    , SET { txt = "SETLE"; cond = X86NG };
"stc"      , STC { txt = "STC" };
"xadd"     , XADD { txt = "XADD"; sz = X86NONE };
"xchg"     , XCHG { txt = "XCHG"; sz = X86NONE };
