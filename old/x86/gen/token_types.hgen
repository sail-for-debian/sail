type token_BINOP   = { txt : string; op : x86Binop; sz : x86Suffix }
type token_BITOP   = { txt : string; op : x86Bitop; sz : x86Suffix }
type token_CALL    = { txt : string }
type token_CLC     = { txt : string }
type token_CMC     = { txt : string }
type token_CMOV    = { txt : string; cond : x86Cond; sz : x86Suffix }
type token_CMPXCHG = { txt : string; sz : x86Suffix }
type token_DIV     = { txt : string; sz : x86Suffix }
type token_JCC     = { txt : string; cond : x86Cond }
type token_JMP     = { txt : string }
type token_LEA     = { txt : string; sz : x86Suffix }
type token_LEAVE   = { txt : string }
type token_LOOP    = { txt : string; cond : x86Cond }
type token_MFENCE  = { txt : string; }
type token_MONOP   = { txt : string; op : x86Monop; sz : x86Suffix }
type token_MOV     = { txt : string; sz : x86Suffix }
type token_MOVABS  = { txt : string }
type token_MOVSX   = { txt : string; sz1 : x86Suffix; sz2 : x86Suffix }
type token_MOVZX   = { txt : string; sz1 : x86Suffix; sz2 : x86Suffix }
type token_MUL     = { txt : string; sz : x86Suffix }
type token_NOP     = { txt : string }
type token_POP     = { txt : string }
type token_PUSH    = { txt : string }
type token_RET     = { txt : string }
type token_SET     = { txt : string; cond : x86Cond }
type token_STC     = { txt : string }
type token_XADD    = { txt : string; sz : x86Suffix }
type token_XCHG    = { txt : string; sz : x86Suffix }

