"addb"     , BINOP { txt = "ADDB"; op = X86ADD; sz = X86BYTE };
"orb"      , BINOP { txt = "ORB"; op = X86OR; sz = X86BYTE };
"adcb"     , BINOP { txt = "ADCB"; op = X86ADC; sz = X86BYTE };
"sbbb"     , BINOP { txt = "SBBB"; op = X86SBB; sz = X86BYTE };
"andb"     , BINOP { txt = "ANDB"; op = X86AND; sz = X86BYTE };
"subb"     , BINOP { txt = "SUBB"; op = X86SUB; sz = X86BYTE };
"xorb"     , BINOP { txt = "XORB"; op = X86XOR; sz = X86BYTE };
"cmpb"     , BINOP { txt = "CMPB"; op = X86CMP; sz = X86BYTE };
"rolb"     , BINOP { txt = "ROLB"; op = X86ROL; sz = X86BYTE };
"rorb"     , BINOP { txt = "RORB"; op = X86ROR; sz = X86BYTE };
"shlb"     , BINOP { txt = "SHLB"; op = X86SHL; sz = X86BYTE };
"shrb"     , BINOP { txt = "SHRB"; op = X86SHR; sz = X86BYTE };
"testb"    , BINOP { txt = "TESTB"; op = X86TEST; sz = X86BYTE };
"sarb"     , BINOP { txt = "SARB"; op = X86SAR; sz = X86BYTE };
"addw"     , BINOP { txt = "ADDW"; op = X86ADD; sz = X86WORD };
"orw"      , BINOP { txt = "ORW"; op = X86OR; sz = X86WORD };
"adcw"     , BINOP { txt = "ADCW"; op = X86ADC; sz = X86WORD };
"sbbw"     , BINOP { txt = "SBBW"; op = X86SBB; sz = X86WORD };
"andw"     , BINOP { txt = "ANDW"; op = X86AND; sz = X86WORD };
"subw"     , BINOP { txt = "SUBW"; op = X86SUB; sz = X86WORD };
"xorw"     , BINOP { txt = "XORW"; op = X86XOR; sz = X86WORD };
"cmpw"     , BINOP { txt = "CMPW"; op = X86CMP; sz = X86WORD };
"rolw"     , BINOP { txt = "ROLW"; op = X86ROL; sz = X86WORD };
"rorw"     , BINOP { txt = "RORW"; op = X86ROR; sz = X86WORD };
"shlw"     , BINOP { txt = "SHLW"; op = X86SHL; sz = X86WORD };
"shrw"     , BINOP { txt = "SHRW"; op = X86SHR; sz = X86WORD };
"testw"    , BINOP { txt = "TESTW"; op = X86TEST; sz = X86WORD };
"sarw"     , BINOP { txt = "SARW"; op = X86SAR; sz = X86WORD };
"addl"     , BINOP { txt = "ADDL"; op = X86ADD; sz = X86LONG };
"orl"      , BINOP { txt = "ORL"; op = X86OR; sz = X86LONG };
"adcl"     , BINOP { txt = "ADCL"; op = X86ADC; sz = X86LONG };
"sbbl"     , BINOP { txt = "SBBL"; op = X86SBB; sz = X86LONG };
"andl"     , BINOP { txt = "ANDL"; op = X86AND; sz = X86LONG };
"subl"     , BINOP { txt = "SUBL"; op = X86SUB; sz = X86LONG };
"xorl"     , BINOP { txt = "XORL"; op = X86XOR; sz = X86LONG };
"cmpl"     , BINOP { txt = "CMPL"; op = X86CMP; sz = X86LONG };
"roll"     , BINOP { txt = "ROLL"; op = X86ROL; sz = X86LONG };
"rorl"     , BINOP { txt = "RORL"; op = X86ROR; sz = X86LONG };
"shll"     , BINOP { txt = "SHLL"; op = X86SHL; sz = X86LONG };
"shrl"     , BINOP { txt = "SHRL"; op = X86SHR; sz = X86LONG };
"testl"    , BINOP { txt = "TESTL"; op = X86TEST; sz = X86LONG };
"sarl"     , BINOP { txt = "SARL"; op = X86SAR; sz = X86LONG };
"addq"     , BINOP { txt = "ADDQ"; op = X86ADD; sz = X86QUAD };
"orq"      , BINOP { txt = "ORQ"; op = X86OR; sz = X86QUAD };
"adcq"     , BINOP { txt = "ADCQ"; op = X86ADC; sz = X86QUAD };
"sbbq"     , BINOP { txt = "SBBQ"; op = X86SBB; sz = X86QUAD };
"andq"     , BINOP { txt = "ANDQ"; op = X86AND; sz = X86QUAD };
"subq"     , BINOP { txt = "SUBQ"; op = X86SUB; sz = X86QUAD };
"xorq"     , BINOP { txt = "XORQ"; op = X86XOR; sz = X86QUAD };
"cmpq"     , BINOP { txt = "CMPQ"; op = X86CMP; sz = X86QUAD };
"rolq"     , BINOP { txt = "ROLQ"; op = X86ROL; sz = X86QUAD };
"rorq"     , BINOP { txt = "RORQ"; op = X86ROR; sz = X86QUAD };
"shlq"     , BINOP { txt = "SHLQ"; op = X86SHL; sz = X86QUAD };
"shrq"     , BINOP { txt = "SHRQ"; op = X86SHR; sz = X86QUAD };
"testq"    , BINOP { txt = "TESTQ"; op = X86TEST; sz = X86QUAD };
"sarq"     , BINOP { txt = "SARQ"; op = X86SAR; sz = X86QUAD };
"add"      , BINOP { txt = "ADDQ"; op = X86ADD; sz = X86NONE };
"or"       , BINOP { txt = "OR"; op = X86OR; sz = X86NONE };
"adc"      , BINOP { txt = "ADC"; op = X86ADC; sz = X86NONE };
"sbb"      , BINOP { txt = "SBB"; op = X86SBB; sz = X86NONE };
"and"      , BINOP { txt = "AND"; op = X86AND; sz = X86NONE };
"sub"      , BINOP { txt = "SUB"; op = X86SUB; sz = X86NONE };
"xor"      , BINOP { txt = "XOR"; op = X86XOR; sz = X86NONE };
"cmp"      , BINOP { txt = "CMP"; op = X86CMP; sz = X86NONE };
"rol"      , BINOP { txt = "ROL"; op = X86ROL; sz = X86NONE };
"ror"      , BINOP { txt = "ROR"; op = X86ROR; sz = X86NONE };
"shl"      , BINOP { txt = "SHL"; op = X86SHL; sz = X86NONE };
"shr"      , BINOP { txt = "SHR"; op = X86SHR; sz = X86NONE };
"test"     , BINOP { txt = "TEST"; op = X86TEST; sz = X86NONE };
"sar"      , BINOP { txt = "SAR"; op = X86SAR; sz = X86NONE };
"btcw"     , BITOP { txt = "BTSW"; op = X86Btc; sz = X86WORD };
"btsw"     , BITOP { txt = "BTCW"; op = X86Bts; sz = X86WORD };
"btrw"     , BITOP { txt = "BTRW"; op = X86Btr; sz = X86WORD };
"btcl"     , BITOP { txt = "BTSL"; op = X86Btc; sz = X86LONG };
"btsl"     , BITOP { txt = "BTCL"; op = X86Bts; sz = X86LONG };
"btrl"     , BITOP { txt = "BTRL"; op = X86Btr; sz = X86LONG };
"btcq"     , BITOP { txt = "BTSQ"; op = X86Btc; sz = X86QUAD };
"btsq"     , BITOP { txt = "BTCQ"; op = X86Bts; sz = X86QUAD };
"btrq"     , BITOP { txt = "BTRQ"; op = X86Btr; sz = X86QUAD };
"btc"      , BITOP { txt = "BTS"; op = X86Btc; sz = X86NONE };
"bts"      , BITOP { txt = "BTC"; op = X86Bts; sz = X86NONE };
"btr"      , BITOP { txt = "BTR"; op = X86Btr; sz = X86NONE };
"call"     , CALL { txt = "CALL" };
"clc"      , CLC { txt = "CLC" };
"cmc"      , CMC { txt = "CMC" };
"cmpxchgb" , CMPXCHG { txt = "CMPXCHGB"; sz = X86BYTE };
"cmpxchgw" , CMPXCHG { txt = "CMPXCHGW"; sz = X86WORD };
"cmpxchgl" , CMPXCHG { txt = "CMPXCHGL"; sz = X86LONG };
"cmpxchgq" , CMPXCHG { txt = "CMPXCHGQ"; sz = X86QUAD };
"cmpxchg"  , CMPXCHG { txt = "CMPXCHG"; sz = X86NONE };
"divb"     , DIV { txt = "DIVB"; sz = X86BYTE };
"divw"     , DIV { txt = "DIVW"; sz = X86WORD };
"divl"     , DIV { txt = "DIVL"; sz = X86LONG };
"divq"     , DIV { txt = "DIVQ"; sz = X86QUAD };
"div"      , DIV { txt = "DIV"; sz = X86NONE };
"jo"       , JCC { txt = "JO"; cond = X86O };
"jb"       , JCC { txt = "JB"; cond = X86B };
"jc"       , JCC { txt = "JC"; cond = X86B };
"jnae"     , JCC { txt = "JNAE"; cond = X86B };
"je"       , JCC { txt = "JE"; cond = X86E };
"jz"       , JCC { txt = "JZ"; cond = X86E };
"ja"       , JCC { txt = "JA"; cond = X86A };
"jnbe"     , JCC { txt = "JNBE"; cond = X86A };
"js"       , JCC { txt = "JS"; cond = X86S };
"jp"       , JCC { txt = "JP"; cond = X86P };
"jpe"      , JCC { txt = "JPE"; cond = X86P };
"jl"       , JCC { txt = "JL"; cond = X86L };
"jnge"     , JCC { txt = "JNGE"; cond = X86L };
"jg"       , JCC { txt = "JG"; cond = X86G };
"jnle"     , JCC { txt = "JNLE"; cond = X86G };
"jno"      , JCC { txt = "JNO"; cond = X86NO };
"jnb"      , JCC { txt = "JNB"; cond = X86NB };
"jnc"      , JCC { txt = "JNC"; cond = X86NB };
"jae"      , JCC { txt = "JAE"; cond = X86NB };
"jne"      , JCC { txt = "JNE"; cond = X86NE };
"jnz"      , JCC { txt = "JNZ"; cond = X86NE };
"jna"      , JCC { txt = "JNA"; cond = X86NA };
"jbe"      , JCC { txt = "JBE"; cond = X86NA };
"jns"      , JCC { txt = "JNS"; cond = X86NS };
"jnp"      , JCC { txt = "JNP"; cond = X86NP };
"jpo"      , JCC { txt = "JPO"; cond = X86NP };
"jnl"      , JCC { txt = "JNL"; cond = X86NL };
"jge"      , JCC { txt = "JGE"; cond = X86NL };
"jng"      , JCC { txt = "JNG"; cond = X86NG };
"jle"      , JCC { txt = "JLE"; cond = X86NG };
"jmp"      , JMP { txt = "JMP" };
"leaw"     , LEA { txt = "LEAW"; sz = X86BYTE };
"leal"     , LEA { txt = "LEAL"; sz = X86LONG };
"leaq"     , LEA { txt = "LEAQ"; sz = X86QUAD };
"lea"      , LEA { txt = "LEA"; sz = X86NONE };
"leave"    , LEAVE { txt = "LEAVE" };
"loopo"    , LOOP { txt = "LOOPO"; cond = X86O };
"loopb"    , LOOP { txt = "LOOPB"; cond = X86B };
"loopc"    , LOOP { txt = "LOOPC"; cond = X86B };
"loopnae"  , LOOP { txt = "LOOPNAE"; cond = X86B };
"loope"    , LOOP { txt = "LOOPE"; cond = X86E };
"loopz"    , LOOP { txt = "LOOPZ"; cond = X86E };
"loopa"    , LOOP { txt = "LOOPA"; cond = X86A };
"loopnbe"  , LOOP { txt = "LOOPNBE"; cond = X86A };
"loops"    , LOOP { txt = "LOOPS"; cond = X86S };
"loopp"    , LOOP { txt = "LOOPP"; cond = X86P };
"looppe"   , LOOP { txt = "LOOPPE"; cond = X86P };
"loopl"    , LOOP { txt = "LOOPL"; cond = X86L };
"loopnge"  , LOOP { txt = "LOOPNGE"; cond = X86L };
"loopg"    , LOOP { txt = "LOOPG"; cond = X86G };
"loopnle"  , LOOP { txt = "LOOPNLE"; cond = X86G };
"loopno"   , LOOP { txt = "LOOPNO"; cond = X86NO };
"loopnb"   , LOOP { txt = "LOOPNB"; cond = X86NB };
"loopnc"   , LOOP { txt = "LOOPNC"; cond = X86NB };
"loopae"   , LOOP { txt = "LOOPAE"; cond = X86NB };
"loopne"   , LOOP { txt = "LOOPNE"; cond = X86NE };
"loopnz"   , LOOP { txt = "LOOPNZ"; cond = X86NE };
"loopna"   , LOOP { txt = "LOOPNA"; cond = X86NA };
"loopbe"   , LOOP { txt = "LOOPBE"; cond = X86NA };
"loopns"   , LOOP { txt = "LOOPNS"; cond = X86NS };
"loopnp"   , LOOP { txt = "LOOPNP"; cond = X86NP };
"looppo"   , LOOP { txt = "LOOPPO"; cond = X86NP };
"loopnl"   , LOOP { txt = "LOOPNL"; cond = X86NL };
"loopge"   , LOOP { txt = "LOOPGE"; cond = X86NL };
"loopng"   , LOOP { txt = "LOOPNG"; cond = X86NG };
"loople"   , LOOP { txt = "LOOPLE"; cond = X86NG };
"mfence"   , MFENCE { txt = "MFENCE" };
"decb"     , MONOP { txt = "DECB"; op = X86DEC; sz = X86BYTE };
"incb"     , MONOP { txt = "INCB"; op = X86INC; sz = X86BYTE };
"notb"     , MONOP { txt = "NOTB"; op = X86NOT; sz = X86BYTE };
"negb"     , MONOP { txt = "NEGB"; op = X86NEG; sz = X86BYTE };
"decw"     , MONOP { txt = "DECW"; op = X86DEC; sz = X86WORD };
"incw"     , MONOP { txt = "INCW"; op = X86INC; sz = X86WORD };
"notw"     , MONOP { txt = "NOTW"; op = X86NOT; sz = X86WORD };
"negw"     , MONOP { txt = "NEGW"; op = X86NEG; sz = X86WORD };
"decl"     , MONOP { txt = "DECL"; op = X86DEC; sz = X86LONG };
"incl"     , MONOP { txt = "INCL"; op = X86INC; sz = X86LONG };
"notl"     , MONOP { txt = "NOTL"; op = X86NOT; sz = X86LONG };
"negl"     , MONOP { txt = "NEGL"; op = X86NEG; sz = X86LONG };
"decq"     , MONOP { txt = "DECQ"; op = X86DEC; sz = X86QUAD };
"incq"     , MONOP { txt = "INCQ"; op = X86INC; sz = X86QUAD };
"notq"     , MONOP { txt = "NOTQ"; op = X86NOT; sz = X86QUAD };
"negq"     , MONOP { txt = "NEGQ"; op = X86NEG; sz = X86QUAD };
"dec"      , MONOP { txt = "DEC"; op = X86DEC; sz = X86NONE };
"inc"      , MONOP { txt = "INC"; op = X86INC; sz = X86NONE };
"not"      , MONOP { txt = "NOT"; op = X86NOT; sz = X86NONE };
"neg"      , MONOP { txt = "NEG"; op = X86NEG; sz = X86NONE };
"cmovow"   , CMOV { txt = "CMOVOW"; cond = X86O; sz = X86WORD };
"cmovbw"   , CMOV { txt = "CMOVBW"; cond = X86B; sz = X86WORD };
"cmovcw"   , CMOV { txt = "CMOVCW"; cond = X86B; sz = X86WORD };
"cmovnaew" , CMOV { txt = "CMOVNAEW"; cond = X86B; sz = X86WORD };
"cmovew"   , CMOV { txt = "CMOVEW"; cond = X86E; sz = X86WORD };
"cmovzw"   , CMOV { txt = "CMOVZW"; cond = X86E; sz = X86WORD };
"cmovaw"   , CMOV { txt = "CMOVAW"; cond = X86A; sz = X86WORD };
"cmovnbew" , CMOV { txt = "CMOVNBEW"; cond = X86A; sz = X86WORD };
"cmovsw"   , CMOV { txt = "CMOVSW"; cond = X86S; sz = X86WORD };
"cmovpw"   , CMOV { txt = "CMOVPW"; cond = X86P; sz = X86WORD };
"cmovpew"  , CMOV { txt = "CMOVPEW"; cond = X86P; sz = X86WORD };
"cmovlw"   , CMOV { txt = "CMOVLW"; cond = X86L; sz = X86WORD };
"cmovngew" , CMOV { txt = "CMOVNGEW"; cond = X86L; sz = X86WORD };
"cmovgw"   , CMOV { txt = "CMOVGW"; cond = X86G; sz = X86WORD };
"cmovnlew" , CMOV { txt = "CMOVNLEW"; cond = X86G; sz = X86WORD };
"cmovnow"  , CMOV { txt = "CMOVNOW"; cond = X86NO; sz = X86WORD };
"cmovnbw"  , CMOV { txt = "CMOVNBW"; cond = X86NB; sz = X86WORD };
"cmovncw"  , CMOV { txt = "CMOVNCW"; cond = X86NB; sz = X86WORD };
"cmovaew"  , CMOV { txt = "CMOVAEW"; cond = X86NB; sz = X86WORD };
"cmovnew"  , CMOV { txt = "CMOVNEW"; cond = X86NE; sz = X86WORD };
"cmovnzw"  , CMOV { txt = "CMOVNZW"; cond = X86NE; sz = X86WORD };
"cmovnaw"  , CMOV { txt = "CMOVNAW"; cond = X86NA; sz = X86WORD };
"cmovbew"  , CMOV { txt = "CMOVBEW"; cond = X86NA; sz = X86WORD };
"cmovnsw"  , CMOV { txt = "CMOVNSW"; cond = X86NS; sz = X86WORD };
"cmovnpw"  , CMOV { txt = "CMOVNPW"; cond = X86NP; sz = X86WORD };
"cmovpow"  , CMOV { txt = "CMOVPOW"; cond = X86NP; sz = X86WORD };
"cmovnlw"  , CMOV { txt = "CMOVNLW"; cond = X86NL; sz = X86WORD };
"cmovgew"  , CMOV { txt = "CMOVGEW"; cond = X86NL; sz = X86WORD };
"cmovngw"  , CMOV { txt = "CMOVNGW"; cond = X86NG; sz = X86WORD };
"cmovlew"  , CMOV { txt = "CMOVLEW"; cond = X86NG; sz = X86WORD };
"cmovol"   , CMOV { txt = "CMOVOL"; cond = X86O; sz = X86LONG };
"cmovbl"   , CMOV { txt = "CMOVBL"; cond = X86B; sz = X86LONG };
"cmovcl"   , CMOV { txt = "CMOVCL"; cond = X86B; sz = X86LONG };
"cmovnael" , CMOV { txt = "CMOVNAEL"; cond = X86B; sz = X86LONG };
"cmovel"   , CMOV { txt = "CMOVEL"; cond = X86E; sz = X86LONG };
"cmovzl"   , CMOV { txt = "CMOVZL"; cond = X86E; sz = X86LONG };
"cmoval"   , CMOV { txt = "CMOVAL"; cond = X86A; sz = X86LONG };
"cmovnbel" , CMOV { txt = "CMOVNBEL"; cond = X86A; sz = X86LONG };
"cmovsl"   , CMOV { txt = "CMOVSL"; cond = X86S; sz = X86LONG };
"cmovpl"   , CMOV { txt = "CMOVPL"; cond = X86P; sz = X86LONG };
"cmovpel"  , CMOV { txt = "CMOVPEL"; cond = X86P; sz = X86LONG };
"cmovll"   , CMOV { txt = "CMOVLL"; cond = X86L; sz = X86LONG };
"cmovngel" , CMOV { txt = "CMOVNGEL"; cond = X86L; sz = X86LONG };
"cmovgl"   , CMOV { txt = "CMOVGL"; cond = X86G; sz = X86LONG };
"cmovnlel" , CMOV { txt = "CMOVNLEL"; cond = X86G; sz = X86LONG };
"cmovnol"  , CMOV { txt = "CMOVNOL"; cond = X86NO; sz = X86LONG };
"cmovnbl"  , CMOV { txt = "CMOVNBL"; cond = X86NB; sz = X86LONG };
"cmovncl"  , CMOV { txt = "CMOVNCL"; cond = X86NB; sz = X86LONG };
"cmovael"  , CMOV { txt = "CMOVAEL"; cond = X86NB; sz = X86LONG };
"cmovnel"  , CMOV { txt = "CMOVNEL"; cond = X86NE; sz = X86LONG };
"cmovnzl"  , CMOV { txt = "CMOVNZL"; cond = X86NE; sz = X86LONG };
"cmovnal"  , CMOV { txt = "CMOVNAL"; cond = X86NA; sz = X86LONG };
"cmovbel"  , CMOV { txt = "CMOVBEL"; cond = X86NA; sz = X86LONG };
"cmovnsl"  , CMOV { txt = "CMOVNSL"; cond = X86NS; sz = X86LONG };
"cmovnpl"  , CMOV { txt = "CMOVNPL"; cond = X86NP; sz = X86LONG };
"cmovpol"  , CMOV { txt = "CMOVPOL"; cond = X86NP; sz = X86LONG };
"cmovnll"  , CMOV { txt = "CMOVNLL"; cond = X86NL; sz = X86LONG };
"cmovgel"  , CMOV { txt = "CMOVGEL"; cond = X86NL; sz = X86LONG };
"cmovngl"  , CMOV { txt = "CMOVNGL"; cond = X86NG; sz = X86LONG };
"cmovlel"  , CMOV { txt = "CMOVLEL"; cond = X86NG; sz = X86LONG };
"cmovoq"   , CMOV { txt = "CMOVOQ"; cond = X86O; sz = X86QUAD };
"cmovbq"   , CMOV { txt = "CMOVBQ"; cond = X86B; sz = X86QUAD };
"cmovcq"   , CMOV { txt = "CMOVCQ"; cond = X86B; sz = X86QUAD };
"cmovnaeq" , CMOV { txt = "CMOVNAEQ"; cond = X86B; sz = X86QUAD };
"cmoveq"   , CMOV { txt = "CMOVEQ"; cond = X86E; sz = X86QUAD };
"cmovzq"   , CMOV { txt = "CMOVZQ"; cond = X86E; sz = X86QUAD };
"cmovaq"   , CMOV { txt = "CMOVAQ"; cond = X86A; sz = X86QUAD };
"cmovnbeq" , CMOV { txt = "CMOVNBEQ"; cond = X86A; sz = X86QUAD };
"cmovsq"   , CMOV { txt = "CMOVSQ"; cond = X86S; sz = X86QUAD };
"cmovpq"   , CMOV { txt = "CMOVPQ"; cond = X86P; sz = X86QUAD };
"cmovpeq"  , CMOV { txt = "CMOVPEQ"; cond = X86P; sz = X86QUAD };
"cmovlq"   , CMOV { txt = "CMOVLQ"; cond = X86L; sz = X86QUAD };
"cmovngeq" , CMOV { txt = "CMOVNGEQ"; cond = X86L; sz = X86QUAD };
"cmovgq"   , CMOV { txt = "CMOVGQ"; cond = X86G; sz = X86QUAD };
"cmovnleq" , CMOV { txt = "CMOVNLEQ"; cond = X86G; sz = X86QUAD };
"cmovnoq"  , CMOV { txt = "CMOVNOQ"; cond = X86NO; sz = X86QUAD };
"cmovnbq"  , CMOV { txt = "CMOVNBQ"; cond = X86NB; sz = X86QUAD };
"cmovncq"  , CMOV { txt = "CMOVNCQ"; cond = X86NB; sz = X86QUAD };
"cmovaeq"  , CMOV { txt = "CMOVAEQ"; cond = X86NB; sz = X86QUAD };
"cmovneq"  , CMOV { txt = "CMOVNEQ"; cond = X86NE; sz = X86QUAD };
"cmovnzq"  , CMOV { txt = "CMOVNZQ"; cond = X86NE; sz = X86QUAD };
"cmovnaq"  , CMOV { txt = "CMOVNAQ"; cond = X86NA; sz = X86QUAD };
"cmovbeq"  , CMOV { txt = "CMOVBEQ"; cond = X86NA; sz = X86QUAD };
"cmovnsq"  , CMOV { txt = "CMOVNSQ"; cond = X86NS; sz = X86QUAD };
"cmovnpq"  , CMOV { txt = "CMOVNPQ"; cond = X86NP; sz = X86QUAD };
"cmovpoq"  , CMOV { txt = "CMOVPOQ"; cond = X86NP; sz = X86QUAD };
"cmovnlq"  , CMOV { txt = "CMOVNLQ"; cond = X86NL; sz = X86QUAD };
"cmovgeq"  , CMOV { txt = "CMOVGEQ"; cond = X86NL; sz = X86QUAD };
"cmovngq"  , CMOV { txt = "CMOVNGQ"; cond = X86NG; sz = X86QUAD };
"cmovleq"  , CMOV { txt = "CMOVLEQ"; cond = X86NG; sz = X86QUAD };
"cmovo"    , CMOV { txt = "CMOVO"; cond = X86O; sz = X86NONE };
"cmovb"    , CMOV { txt = "CMOVB"; cond = X86B; sz = X86NONE };
"cmovc"    , CMOV { txt = "CMOVC"; cond = X86B; sz = X86NONE };
"cmovnae"  , CMOV { txt = "CMOVNAE"; cond = X86B; sz = X86NONE };
"cmove"    , CMOV { txt = "CMOVE"; cond = X86E; sz = X86NONE };
"cmovz"    , CMOV { txt = "CMOVZ"; cond = X86E; sz = X86NONE };
"cmova"    , CMOV { txt = "CMOVA"; cond = X86A; sz = X86NONE };
"cmovnbe"  , CMOV { txt = "CMOVNBE"; cond = X86A; sz = X86NONE };
"cmovs"    , CMOV { txt = "CMOVS"; cond = X86S; sz = X86NONE };
"cmovp"    , CMOV { txt = "CMOVP"; cond = X86P; sz = X86NONE };
"cmovpe"   , CMOV { txt = "CMOVPE"; cond = X86P; sz = X86NONE };
"cmovl"    , CMOV { txt = "CMOVL"; cond = X86L; sz = X86NONE };
"cmovnge"  , CMOV { txt = "CMOVNGE"; cond = X86L; sz = X86NONE };
"cmovg"    , CMOV { txt = "CMOVG"; cond = X86G; sz = X86NONE };
"cmovnle"  , CMOV { txt = "CMOVNLE"; cond = X86G; sz = X86NONE };
"cmovno"   , CMOV { txt = "CMOVNO"; cond = X86NO; sz = X86NONE };
"cmovnb"   , CMOV { txt = "CMOVNB"; cond = X86NB; sz = X86NONE };
"cmovnc"   , CMOV { txt = "CMOVNC"; cond = X86NB; sz = X86NONE };
"cmovae"   , CMOV { txt = "CMOVAE"; cond = X86NB; sz = X86NONE };
"cmovne"   , CMOV { txt = "CMOVNE"; cond = X86NE; sz = X86NONE };
"cmovnz"   , CMOV { txt = "CMOVNZ"; cond = X86NE; sz = X86NONE };
"cmovna"   , CMOV { txt = "CMOVNA"; cond = X86NA; sz = X86NONE };
"cmovbe"   , CMOV { txt = "CMOVBE"; cond = X86NA; sz = X86NONE };
"cmovns"   , CMOV { txt = "CMOVNS"; cond = X86NS; sz = X86NONE };
"cmovnp"   , CMOV { txt = "CMOVNP"; cond = X86NP; sz = X86NONE };
"cmovpo"   , CMOV { txt = "CMOVPO"; cond = X86NP; sz = X86NONE };
"cmovnl"   , CMOV { txt = "CMOVNL"; cond = X86NL; sz = X86NONE };
"cmovge"   , CMOV { txt = "CMOVGE"; cond = X86NL; sz = X86NONE };
"cmovng"   , CMOV { txt = "CMOVNG"; cond = X86NG; sz = X86NONE };
"cmovle"   , CMOV { txt = "CMOVLE"; cond = X86NG; sz = X86NONE };
"movb"     , MOV { txt = "MOVB"; sz = X86BYTE };
"movw"     , MOV { txt = "MOVW"; sz = X86WORD };
"movl"     , MOV { txt = "MOVL"; sz = X86LONG };
"movq"     , MOV { txt = "MOVQ"; sz = X86QUAD };
"mov"      , MOV { txt = "MOV"; sz = X86NONE };
"movabs"   , MOV { txt = "MOVABS"; sz = X86QUAD };
"movsbw"   , MOVSX { txt = "MOVSBW"; sz1 = X86BYTE; sz2 = X86WORD };
"movsbl"   , MOVSX { txt = "MOVSBL"; sz1 = X86BYTE; sz2 = X86LONG };
"movsbq"   , MOVSX { txt = "MOVSBQ"; sz1 = X86BYTE; sz2 = X86QUAD };
"movswl"   , MOVSX { txt = "MOVSWL"; sz1 = X86WORD; sz2 = X86LONG };
"movswq"   , MOVSX { txt = "MOVSWQ"; sz1 = X86WORD; sz2 = X86QUAD };
"movslq"   , MOVSX { txt = "MOVSWQ"; sz1 = X86LONG; sz2 = X86QUAD };
"movzbw"   , MOVZX { txt = "MOVZBW"; sz1 = X86BYTE; sz2 = X86WORD };
"movzbl"   , MOVZX { txt = "MOVZBL"; sz1 = X86BYTE; sz2 = X86LONG };
"movzbq"   , MOVZX { txt = "MOVZBQ"; sz1 = X86BYTE; sz2 = X86QUAD };
"movzwl"   , MOVZX { txt = "MOVZWL"; sz1 = X86WORD; sz2 = X86LONG };
"movzwq"   , MOVZX { txt = "MOVZWQ"; sz1 = X86WORD; sz2 = X86QUAD };
"mulb"     , MUL { txt = "MULB"; sz = X86BYTE };
"mulw"     , MUL { txt = "MULW"; sz = X86WORD };
"mull"     , MUL { txt = "MULL"; sz = X86LONG };
"mulq"     , MUL { txt = "MULQ"; sz = X86QUAD };
"mul"      , MUL { txt = "MUL"; sz = X86NONE };
"nop"      , NOP { txt = "NOP" };
"pop"      , POP { txt = "POP" };
"push"     , PUSH { txt = "PUSH" };
"ret"      , PUSH { txt = "RET" };
"setob"    , SET { txt = "SETOB"; cond = X86O };
"setbb"    , SET { txt = "SETBB"; cond = X86B };
"setcb"    , SET { txt = "SETCB"; cond = X86B };
"setnaeb"  , SET { txt = "SETNAEB"; cond = X86B };
"seteb"    , SET { txt = "SETEB"; cond = X86E };
"setzb"    , SET { txt = "SETZB"; cond = X86E };
"setab"    , SET { txt = "SETAB"; cond = X86A };
"setnbeb"  , SET { txt = "SETNBEB"; cond = X86A };
"setsb"    , SET { txt = "SETSB"; cond = X86S };
"setpb"    , SET { txt = "SETPB"; cond = X86P };
"setpeb"   , SET { txt = "SETPEB"; cond = X86P };
"setlb"    , SET { txt = "SETLB"; cond = X86L };
"setngeb"  , SET { txt = "SETNGEB"; cond = X86L };
"setgb"    , SET { txt = "SETGB"; cond = X86G };
"setnleb"  , SET { txt = "SETNLEB"; cond = X86G };
"setnob"   , SET { txt = "SETNOB"; cond = X86NO };
"setnbb"   , SET { txt = "SETNBB"; cond = X86NB };
"setncb"   , SET { txt = "SETNCB"; cond = X86NB };
"setaeb"   , SET { txt = "SETAEB"; cond = X86NB };
"setneb"   , SET { txt = "SETNEB"; cond = X86NE };
"setnzb"   , SET { txt = "SETNZB"; cond = X86NE };
"setnab"   , SET { txt = "SETNAB"; cond = X86NA };
"setbeb"   , SET { txt = "SETBEB"; cond = X86NA };
"setnsb"   , SET { txt = "SETNSB"; cond = X86NS };
"setnpb"   , SET { txt = "SETNPB"; cond = X86NP };
"setpob"   , SET { txt = "SETPOB"; cond = X86NP };
"setnlb"   , SET { txt = "SETNLB"; cond = X86NL };
"setgeb"   , SET { txt = "SETGEB"; cond = X86NL };
"setngb"   , SET { txt = "SETNGB"; cond = X86NG };
"setleb"   , SET { txt = "SETLEB"; cond = X86NG };
"seto"     , SET { txt = "SETO"; cond = X86O };
"setb"     , SET { txt = "SETB"; cond = X86B };
"setc"     , SET { txt = "SETC"; cond = X86B };
"setnae"   , SET { txt = "SETNAE"; cond = X86B };
"sete"     , SET { txt = "SETE"; cond = X86E };
"setz"     , SET { txt = "SETZ"; cond = X86E };
"seta"     , SET { txt = "SETA"; cond = X86A };
"setnbe"   , SET { txt = "SETNBE"; cond = X86A };
"sets"     , SET { txt = "SETS"; cond = X86S };
"setp"     , SET { txt = "SETP"; cond = X86P };
"setpe"    , SET { txt = "SETPE"; cond = X86P };
"setl"     , SET { txt = "SETL"; cond = X86L };
"setnge"   , SET { txt = "SETNGE"; cond = X86L };
"setg"     , SET { txt = "SETG"; cond = X86G };
"setnle"   , SET { txt = "SETNLE"; cond = X86G };
"setno"    , SET { txt = "SETNO"; cond = X86NO };
"setnb"    , SET { txt = "SETNB"; cond = X86NB };
"setnc"    , SET { txt = "SETNC"; cond = X86NB };
"setae"    , SET { txt = "SETAE"; cond = X86NB };
"setne"    , SET { txt = "SETNE"; cond = X86NE };
"setnz"    , SET { txt = "SETNZ"; cond = X86NE };
"setna"    , SET { txt = "SETNA"; cond = X86NA };
"setbe"    , SET { txt = "SETBE"; cond = X86NA };
"setns"    , SET { txt = "SETNS"; cond = X86NS };
"setnp"    , SET { txt = "SETNP"; cond = X86NP };
"setpo"    , SET { txt = "SETPO"; cond = X86NP };
"setnl"    , SET { txt = "SETNL"; cond = X86NL };
"setge"    , SET { txt = "SETGE"; cond = X86NL };
"setng"    , SET { txt = "SETNG"; cond = X86NG };
"setle"    , SET { txt = "SETLE"; cond = X86NG };
"stc"      , STC { txt = "STC" };
"xaddb"    , XADD { txt = "XADDB"; sz = X86BYTE };
"xaddw"    , XADD { txt = "XADDW"; sz = X86WORD };
"xaddl"    , XADD { txt = "XADDL"; sz = X86LONG };
"xaddq"    , XADD { txt = "XADDQ"; sz = X86QUAD };
"xadd"     , XADD { txt = "XADD"; sz = X86NONE };
"xchgb"    , XCHG { txt = "XCHGB"; sz = X86BYTE };
"xchgw"    , XCHG { txt = "XCHGW"; sz = X86WORD };
"xchgl"    , XCHG { txt = "XCHGL"; sz = X86LONG };
"xchgq"    , XCHG { txt = "XCHGQ"; sz = X86QUAD };
"xchg"     , XCHG { txt = "XCHG"; sz = X86NONE };
