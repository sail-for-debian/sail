default Order dec

$include <exception_basic.sail>
$include <flow.sail>
$include <vector_dec.sail>

function main (() : unit) -> unit = {
  assert(set_slice_bits(2, 1, 2^0x0, 0, 1^0x0) == 2^0x0, "set_slice_bits(2, 1, 2^0x0, 0, 1^0x0) == 2^0x0");
  assert(set_slice_bits(2, 1, 2^0x0, 1, 1^0x0) == 2^0x0, "set_slice_bits(2, 1, 2^0x0, 1, 1^0x0) == 2^0x0");
  assert(set_slice_bits(25, 16, 25^0x0, 0, 16^0x9) == 25^0x9, "set_slice_bits(25, 16, 25^0x0, 0, 16^0x9) == 25^0x9");
  assert(set_slice_bits(3, 1, 3^0x0, 0, 1^0x1) == 3^0x1, "set_slice_bits(3, 1, 3^0x0, 0, 1^0x1) == 3^0x1");
  assert(set_slice_bits(3, 1, 3^0x0, 1, 1^0x0) == 3^0x0, "set_slice_bits(3, 1, 3^0x0, 1, 1^0x0) == 3^0x0");
  assert(set_slice_bits(3, 1, 3^0x0, 1, 1^0x1) == 3^0x2, "set_slice_bits(3, 1, 3^0x0, 1, 1^0x1) == 3^0x2");
  assert(set_slice_bits(3, 1, 3^0x0, 2, 1^0x0) == 3^0x0, "set_slice_bits(3, 1, 3^0x0, 2, 1^0x0) == 3^0x0");
  assert(set_slice_bits(3, 1, 3^0x0, 2, 1^0x1) == 3^0x4, "set_slice_bits(3, 1, 3^0x0, 2, 1^0x1) == 3^0x4");
  assert(set_slice_bits(3, 1, 3^0x2, 0, 1^0x1) == 3^0x3, "set_slice_bits(3, 1, 3^0x2, 0, 1^0x1) == 3^0x3");
  assert(set_slice_bits(3, 1, 3^0x4, 1, 1^0x1) == 3^0x6, "set_slice_bits(3, 1, 3^0x4, 1, 1^0x1) == 3^0x6");
  assert(set_slice_bits(3, 1, 3^0x6, 0, 1^0x1) == 3^0x7, "set_slice_bits(3, 1, 3^0x6, 0, 1^0x1) == 3^0x7");
  assert(set_slice_bits(32, 1, 32^0x0, 0, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 0, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 1, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 1, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 1, 1^0x1) == 32^0x2, "set_slice_bits(32, 1, 32^0x0, 1, 1^0x1) == 32^0x2");
  assert(set_slice_bits(32, 1, 32^0x0, 10, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 10, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 11, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 11, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 11, 1^0x1) == 32^0x800, "set_slice_bits(32, 1, 32^0x0, 11, 1^0x1) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x0, 12, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 12, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 12, 1^0x1) == 32^0x1000, "set_slice_bits(32, 1, 32^0x0, 12, 1^0x1) == 32^0x1000");
  assert(set_slice_bits(32, 1, 32^0x0, 13, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 13, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 14, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 14, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 15, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 15, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 16, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 16, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 17, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 17, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 18, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 18, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 19, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 19, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 2, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 2, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 20, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 20, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 21, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 21, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 22, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 22, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 22, undefined) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 22, undefined) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 23, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 23, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 23, 1^0x1) == 32^0x800000, "set_slice_bits(32, 1, 32^0x0, 23, 1^0x1) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x0, 23, undefined) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 23, undefined) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 24, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 24, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 25, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 25, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 26, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 26, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 27, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 27, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 28, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 28, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 28, 1^0x1) == 32^0x10000000, "set_slice_bits(32, 1, 32^0x0, 28, 1^0x1) == 32^0x10000000");
  assert(set_slice_bits(32, 1, 32^0x0, 29, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 29, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 29, 1^0x1) == 32^0x20000000, "set_slice_bits(32, 1, 32^0x0, 29, 1^0x1) == 32^0x20000000");
  assert(set_slice_bits(32, 1, 32^0x0, 3, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 3, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 3, 1^0x1) == 32^0x8, "set_slice_bits(32, 1, 32^0x0, 3, 1^0x1) == 32^0x8");
  assert(set_slice_bits(32, 1, 32^0x0, 30, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 30, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 31, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 31, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 31, 1^0x1) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x0, 31, 1^0x1) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x0, 4, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 4, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 4, 1^0x1) == 32^0x10, "set_slice_bits(32, 1, 32^0x0, 4, 1^0x1) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x0, 5, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 5, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 6, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 6, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 6, 1^0x1) == 32^0x40, "set_slice_bits(32, 1, 32^0x0, 6, 1^0x1) == 32^0x40");
  assert(set_slice_bits(32, 1, 32^0x0, 7, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 7, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 8, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 8, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x0, 9, 1^0x0) == 32^0x0, "set_slice_bits(32, 1, 32^0x0, 9, 1^0x0) == 32^0x0");
  assert(set_slice_bits(32, 1, 32^0x1, 0, 1^0x1) == 32^0x1, "set_slice_bits(32, 1, 32^0x1, 0, 1^0x1) == 32^0x1");
  assert(set_slice_bits(32, 1, 32^0x1, 1, 1^0x0) == 32^0x1, "set_slice_bits(32, 1, 32^0x1, 1, 1^0x0) == 32^0x1");
  assert(set_slice_bits(32, 1, 32^0x10, 22, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 22, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 23, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 23, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 24, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 24, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 27, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 27, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 28, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 28, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 29, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 29, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 30, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 30, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 31, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 31, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 4, 1^0x1) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 4, 1^0x1) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 5, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 5, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 6, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 6, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 7, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 7, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 8, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 8, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x10, 9, 1^0x0) == 32^0x10, "set_slice_bits(32, 1, 32^0x10, 9, 1^0x0) == 32^0x10");
  assert(set_slice_bits(32, 1, 32^0x1000, 13, 1^0x0) == 32^0x1000, "set_slice_bits(32, 1, 32^0x1000, 13, 1^0x0) == 32^0x1000");
  assert(set_slice_bits(32, 1, 32^0x1000, 14, 1^0x0) == 32^0x1000, "set_slice_bits(32, 1, 32^0x1000, 14, 1^0x0) == 32^0x1000");
  assert(set_slice_bits(32, 1, 32^0x1000, 15, 1^0x1) == 32^0x9000, "set_slice_bits(32, 1, 32^0x1000, 15, 1^0x1) == 32^0x9000");
  assert(set_slice_bits(32, 1, 32^0x10000000, 29, 1^0x0) == 32^0x10000000, "set_slice_bits(32, 1, 32^0x10000000, 29, 1^0x0) == 32^0x10000000");
  assert(set_slice_bits(32, 1, 32^0x10000000, 30, 1^0x0) == 32^0x10000000, "set_slice_bits(32, 1, 32^0x10000000, 30, 1^0x0) == 32^0x10000000");
  assert(set_slice_bits(32, 1, 32^0x10000000, 31, 1^0x1) == 32^0x90000000, "set_slice_bits(32, 1, 32^0x10000000, 31, 1^0x1) == 32^0x90000000");
  assert(set_slice_bits(32, 1, 32^0x100800, 21, 1^0x0) == 32^0x100800, "set_slice_bits(32, 1, 32^0x100800, 21, 1^0x0) == 32^0x100800");
  assert(set_slice_bits(32, 1, 32^0x100800, 22, 1^0x1) == 32^0x500800, "set_slice_bits(32, 1, 32^0x100800, 22, 1^0x1) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x100818, 21, 1^0x0) == 32^0x100818, "set_slice_bits(32, 1, 32^0x100818, 21, 1^0x0) == 32^0x100818");
  assert(set_slice_bits(32, 1, 32^0x100818, 22, 1^0x1) == 32^0x500818, "set_slice_bits(32, 1, 32^0x100818, 22, 1^0x1) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x10500818, 28, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x10500818, 28, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x10830, 17, 1^0x0) == 32^0x10830, "set_slice_bits(32, 1, 32^0x10830, 17, 1^0x0) == 32^0x10830");
  assert(set_slice_bits(32, 1, 32^0x10830, 18, 1^0x1) == 32^0x50830, "set_slice_bits(32, 1, 32^0x10830, 18, 1^0x1) == 32^0x50830");
  assert(set_slice_bits(32, 1, 32^0x11169000, 12, 1^0x1) == 32^0x11169000, "set_slice_bits(32, 1, 32^0x11169000, 12, 1^0x1) == 32^0x11169000");
  assert(set_slice_bits(32, 1, 32^0x11169000, 13, 1^0x0) == 32^0x11169000, "set_slice_bits(32, 1, 32^0x11169000, 13, 1^0x0) == 32^0x11169000");
  assert(set_slice_bits(32, 1, 32^0x11169000, 14, 1^0x0) == 32^0x11169000, "set_slice_bits(32, 1, 32^0x11169000, 14, 1^0x0) == 32^0x11169000");
  assert(set_slice_bits(32, 1, 32^0x11169000, 15, 1^0x1) == 32^0x11169000, "set_slice_bits(32, 1, 32^0x11169000, 15, 1^0x1) == 32^0x11169000");
  assert(set_slice_bits(32, 1, 32^0x18, 11, 1^0x1) == 32^0x818, "set_slice_bits(32, 1, 32^0x18, 11, 1^0x1) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x18, 5, 1^0x0) == 32^0x18, "set_slice_bits(32, 1, 32^0x18, 5, 1^0x0) == 32^0x18");
  assert(set_slice_bits(32, 1, 32^0x18, 6, 1^0x0) == 32^0x18, "set_slice_bits(32, 1, 32^0x18, 6, 1^0x0) == 32^0x18");
  assert(set_slice_bits(32, 1, 32^0x18, 7, 1^0x0) == 32^0x18, "set_slice_bits(32, 1, 32^0x18, 7, 1^0x0) == 32^0x18");
  assert(set_slice_bits(32, 1, 32^0x18, 8, 1^0x0) == 32^0x18, "set_slice_bits(32, 1, 32^0x18, 8, 1^0x0) == 32^0x18");
  assert(set_slice_bits(32, 1, 32^0x1c0, 9, 1^0x1) == 32^0x3c0, "set_slice_bits(32, 1, 32^0x1c0, 9, 1^0x1) == 32^0x3c0");
  assert(set_slice_bits(32, 1, 32^0x2, 0, 1^0x0) == 32^0x2, "set_slice_bits(32, 1, 32^0x2, 0, 1^0x0) == 32^0x2");
  assert(set_slice_bits(32, 1, 32^0x2, 1, 1^0x1) == 32^0x2, "set_slice_bits(32, 1, 32^0x2, 1, 1^0x1) == 32^0x2");
  assert(set_slice_bits(32, 1, 32^0x2, 2, 1^0x0) == 32^0x2, "set_slice_bits(32, 1, 32^0x2, 2, 1^0x0) == 32^0x2");
  assert(set_slice_bits(32, 1, 32^0x2, 3, 1^0x1) == 32^0xa, "set_slice_bits(32, 1, 32^0x2, 3, 1^0x1) == 32^0xa");
  assert(set_slice_bits(32, 1, 32^0x20000000, 30, 1^0x0) == 32^0x20000000, "set_slice_bits(32, 1, 32^0x20000000, 30, 1^0x0) == 32^0x20000000");
  assert(set_slice_bits(32, 1, 32^0x20000000, 30, 1^0x1) == 32^0x60000000, "set_slice_bits(32, 1, 32^0x20000000, 30, 1^0x1) == 32^0x60000000");
  assert(set_slice_bits(32, 1, 32^0x20000000, 31, 1^0x0) == 32^0x20000000, "set_slice_bits(32, 1, 32^0x20000000, 31, 1^0x0) == 32^0x20000000");
  assert(set_slice_bits(32, 1, 32^0x20000000, 31, 1^0x1) == 32^0xa0000000, "set_slice_bits(32, 1, 32^0x20000000, 31, 1^0x1) == 32^0xa0000000");
  assert(set_slice_bits(32, 1, 32^0x30, 11, 1^0x1) == 32^0x830, "set_slice_bits(32, 1, 32^0x30, 11, 1^0x1) == 32^0x830");
  assert(set_slice_bits(32, 1, 32^0x30, 14, 1^0x0) == 32^0x30, "set_slice_bits(32, 1, 32^0x30, 14, 1^0x0) == 32^0x30");
  assert(set_slice_bits(32, 1, 32^0x30, 16, 1^0x0) == 32^0x30, "set_slice_bits(32, 1, 32^0x30, 16, 1^0x0) == 32^0x30");
  assert(set_slice_bits(32, 1, 32^0x30, 17, 1^0x0) == 32^0x30, "set_slice_bits(32, 1, 32^0x30, 17, 1^0x0) == 32^0x30");
  assert(set_slice_bits(32, 1, 32^0x30, 6, 1^0x0) == 32^0x30, "set_slice_bits(32, 1, 32^0x30, 6, 1^0x0) == 32^0x30");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 0, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 0, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 1, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 1, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 11, 1^0x1) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 11, 1^0x1) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 12, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 12, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 13, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 13, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 16, 1^0x1) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 16, 1^0x1) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 17, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 17, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 18, 1^0x1) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 18, 1^0x1) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 19, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 19, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 2, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 2, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 20, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 20, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 21, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 21, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 24, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 24, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 25, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 25, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 26, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 26, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 27, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 27, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 3, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 3, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 30, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 30, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x30c50830, 31, 1^0x0) == 32^0x30c50830, "set_slice_bits(32, 1, 32^0x30c50830, 31, 1^0x0) == 32^0x30c50830");
  assert(set_slice_bits(32, 1, 32^0x33ff, 10, 1^0x0) == 32^0x33ff, "set_slice_bits(32, 1, 32^0x33ff, 10, 1^0x0) == 32^0x33ff");
  assert(set_slice_bits(32, 1, 32^0x33ff, 11, 1^0x0) == 32^0x33ff, "set_slice_bits(32, 1, 32^0x33ff, 11, 1^0x0) == 32^0x33ff");
  assert(set_slice_bits(32, 1, 32^0x33ff, 15, 1^0x0) == 32^0x33ff, "set_slice_bits(32, 1, 32^0x33ff, 15, 1^0x0) == 32^0x33ff");
  assert(set_slice_bits(32, 1, 32^0x33ff, 28, 1^0x0) == 32^0x33ff, "set_slice_bits(32, 1, 32^0x33ff, 28, 1^0x0) == 32^0x33ff");
  assert(set_slice_bits(32, 1, 32^0x33ff, 31, 1^0x0) == 32^0x33ff, "set_slice_bits(32, 1, 32^0x33ff, 31, 1^0x0) == 32^0x33ff");
  assert(set_slice_bits(32, 1, 32^0x4, 4, 1^0x0) == 32^0x4, "set_slice_bits(32, 1, 32^0x4, 4, 1^0x0) == 32^0x4");
  assert(set_slice_bits(32, 1, 32^0x40, 7, 1^0x1) == 32^0xc0, "set_slice_bits(32, 1, 32^0x40, 7, 1^0x1) == 32^0xc0");
  assert(set_slice_bits(32, 1, 32^0x4000700, 0, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 0, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 1, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 1, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 2, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 2, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 26, 1^0x1) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 26, 1^0x1) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 27, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 27, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 28, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 28, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 29, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 29, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 3, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 3, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 30, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 30, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 31, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 31, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 4, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 4, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x4000700, 7, 1^0x0) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x4000700, 7, 1^0x0) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x400818, 20, 1^0x1) == 32^0x500818, "set_slice_bits(32, 1, 32^0x400818, 20, 1^0x1) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x400818, 23, 1^0x1) == 32^0xc00818, "set_slice_bits(32, 1, 32^0x400818, 23, 1^0x1) == 32^0xc00818");
  assert(set_slice_bits(32, 1, 32^0x444c004, 31, 1^0x1) == 32^0x8444c004, "set_slice_bits(32, 1, 32^0x444c004, 31, 1^0x1) == 32^0x8444c004");
  assert(set_slice_bits(32, 1, 32^0x500800, 0, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 0, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 1, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 1, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 10, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 10, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 11, 1^0x1) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 11, 1^0x1) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 12, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 12, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 13, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 13, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 14, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 14, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 15, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 15, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 16, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 16, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 17, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 17, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 18, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 18, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 19, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 19, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 2, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 2, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 20, 1^0x1) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 20, 1^0x1) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 21, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 21, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 22, 1^0x1) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 22, 1^0x1) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 23, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 23, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 24, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 24, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 25, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 25, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 26, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 26, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 27, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 27, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 28, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 28, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 29, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 29, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 3, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 3, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 30, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 30, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 31, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 31, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 4, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 4, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 5, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 5, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 6, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 6, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 7, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 7, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 8, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 8, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500800, 9, 1^0x0) == 32^0x500800, "set_slice_bits(32, 1, 32^0x500800, 9, 1^0x0) == 32^0x500800");
  assert(set_slice_bits(32, 1, 32^0x500818, 0, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 0, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 1, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 1, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 11, 1^0x1) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 11, 1^0x1) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 12, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 12, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 13, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 13, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 14, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 14, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 15, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 15, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 16, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 16, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 17, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 17, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 18, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 18, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 19, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 19, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 2, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 2, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 20, 1^0x0) == 32^0x400818, "set_slice_bits(32, 1, 32^0x500818, 20, 1^0x0) == 32^0x400818");
  assert(set_slice_bits(32, 1, 32^0x500818, 21, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 21, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 22, 1^0x1) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 22, 1^0x1) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 23, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 23, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 24, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 24, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 25, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 25, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 26, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 26, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 28, 1^0x1) == 32^0x10500818, "set_slice_bits(32, 1, 32^0x500818, 28, 1^0x1) == 32^0x10500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 29, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 29, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 3, 1^0x1) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 3, 1^0x1) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 30, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 30, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 31, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 31, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 4, 1^0x1) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 4, 1^0x1) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 5, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 5, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 6, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 6, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 7, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 7, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x500818, 8, 1^0x0) == 32^0x500818, "set_slice_bits(32, 1, 32^0x500818, 8, 1^0x0) == 32^0x500818");
  assert(set_slice_bits(32, 1, 32^0x50830, 19, 1^0x0) == 32^0x50830, "set_slice_bits(32, 1, 32^0x50830, 19, 1^0x0) == 32^0x50830");
  assert(set_slice_bits(32, 1, 32^0x50830, 20, 1^0x0) == 32^0x50830, "set_slice_bits(32, 1, 32^0x50830, 20, 1^0x0) == 32^0x50830");
  assert(set_slice_bits(32, 1, 32^0x50830, 21, 1^0x0) == 32^0x50830, "set_slice_bits(32, 1, 32^0x50830, 21, 1^0x0) == 32^0x50830");
  assert(set_slice_bits(32, 1, 32^0x60000000, 20, 1^0x0) == 32^0x60000000, "set_slice_bits(32, 1, 32^0x60000000, 20, 1^0x0) == 32^0x60000000");
  assert(set_slice_bits(32, 1, 32^0x60000000, 21, 1^0x0) == 32^0x60000000, "set_slice_bits(32, 1, 32^0x60000000, 21, 1^0x0) == 32^0x60000000");
  assert(set_slice_bits(32, 1, 32^0x60000000, 22, 1^0x0) == 32^0x60000000, "set_slice_bits(32, 1, 32^0x60000000, 22, 1^0x0) == 32^0x60000000");
  assert(set_slice_bits(32, 1, 32^0x60000000, 23, 1^0x0) == 32^0x60000000, "set_slice_bits(32, 1, 32^0x60000000, 23, 1^0x0) == 32^0x60000000");
  assert(set_slice_bits(32, 1, 32^0x60000000, 31, 1^0x0) == 32^0x60000000, "set_slice_bits(32, 1, 32^0x60000000, 31, 1^0x0) == 32^0x60000000");
  assert(set_slice_bits(32, 1, 32^0x600003c0, 0, 1^0x0) == 32^0x600003c0, "set_slice_bits(32, 1, 32^0x600003c0, 0, 1^0x0) == 32^0x600003c0");
  assert(set_slice_bits(32, 1, 32^0x600003c0, 4, 1^0x0) == 32^0x600003c0, "set_slice_bits(32, 1, 32^0x600003c0, 4, 1^0x0) == 32^0x600003c0");
  assert(set_slice_bits(32, 1, 32^0x700, 26, 1^0x1) == 32^0x4000700, "set_slice_bits(32, 1, 32^0x700, 26, 1^0x1) == 32^0x4000700");
  assert(set_slice_bits(32, 1, 32^0x8, 2, 1^0x1) == 32^0xc, "set_slice_bits(32, 1, 32^0x8, 2, 1^0x1) == 32^0xc");
  assert(set_slice_bits(32, 1, 32^0x8, 4, 1^0x1) == 32^0x18, "set_slice_bits(32, 1, 32^0x8, 4, 1^0x1) == 32^0x18");
  assert(set_slice_bits(32, 1, 32^0x800, 12, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 12, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 13, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 13, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 14, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 14, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 15, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 15, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 16, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 16, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 17, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 17, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 18, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 18, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 19, 1^0x0) == 32^0x800, "set_slice_bits(32, 1, 32^0x800, 19, 1^0x0) == 32^0x800");
  assert(set_slice_bits(32, 1, 32^0x800, 20, 1^0x1) == 32^0x100800, "set_slice_bits(32, 1, 32^0x800, 20, 1^0x1) == 32^0x100800");
  assert(set_slice_bits(32, 1, 32^0x800000, 24, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 24, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 25, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 25, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 26, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 26, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 27, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 27, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 28, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 28, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 29, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 29, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 30, 1^0x0) == 32^0x800000, "set_slice_bits(32, 1, 32^0x800000, 30, 1^0x0) == 32^0x800000");
  assert(set_slice_bits(32, 1, 32^0x800000, 31, 1^0x1) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x800000, 31, 1^0x1) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 0, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 0, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 1, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 1, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 25, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 25, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 26, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 26, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 27, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 27, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 28, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 28, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 31, 1^0x1) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 31, 1^0x1) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80000000, 5, 1^0x0) == 32^0x80000000, "set_slice_bits(32, 1, 32^0x80000000, 5, 1^0x0) == 32^0x80000000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 19, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 19, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 21, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 21, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 22, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 22, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 23, 1^0x1) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 23, 1^0x1) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 24, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 24, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 25, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 25, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 26, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 26, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 27, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 27, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 28, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 28, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 29, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 29, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 30, 1^0x0) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 30, 1^0x0) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x80800000, 31, 1^0x1) == 32^0x80800000, "set_slice_bits(32, 1, 32^0x80800000, 31, 1^0x1) == 32^0x80800000");
  assert(set_slice_bits(32, 1, 32^0x818, 12, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 12, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 13, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 13, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 14, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 14, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 15, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 15, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 16, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 16, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 17, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 17, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 18, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 18, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 19, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 19, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 20, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 20, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 20, 1^0x1) == 32^0x100818, "set_slice_bits(32, 1, 32^0x818, 20, 1^0x1) == 32^0x100818");
  assert(set_slice_bits(32, 1, 32^0x818, 21, 1^0x0) == 32^0x818, "set_slice_bits(32, 1, 32^0x818, 21, 1^0x0) == 32^0x818");
  assert(set_slice_bits(32, 1, 32^0x818, 22, 1^0x1) == 32^0x400818, "set_slice_bits(32, 1, 32^0x818, 22, 1^0x1) == 32^0x400818");
  assert(set_slice_bits(32, 1, 32^0x830, 12, 1^0x0) == 32^0x830, "set_slice_bits(32, 1, 32^0x830, 12, 1^0x0) == 32^0x830");
  assert(set_slice_bits(32, 1, 32^0x830, 13, 1^0x0) == 32^0x830, "set_slice_bits(32, 1, 32^0x830, 13, 1^0x0) == 32^0x830");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x118) == 32^0x118, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x118) == 32^0x118");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x18) == 32^0x18, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x18) == 32^0x18");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x1c) == 32^0x1c, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x1c) == 32^0x1c");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x2) == 32^0x2, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x2) == 32^0x2");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x230) == 32^0x230, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x230) == 32^0x230");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x280) == 32^0x280, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x280) == 32^0x280");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x298) == 32^0x298, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x298) == 32^0x298");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x2a0) == 32^0x2a0, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x2a0) == 32^0x2a0");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x2f) == 32^0x2f, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x2f) == 32^0x2f");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x3) == 32^0x3, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x3) == 32^0x3");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x30) == 32^0x30, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x30) == 32^0x30");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x38) == 32^0x38, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x38) == 32^0x38");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x4) == 32^0x4, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x4) == 32^0x4");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x400) == 32^0x400, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x400) == 32^0x400");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x401) == 32^0x401, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x401) == 32^0x401");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x460) == 32^0x460, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x460) == 32^0x460");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x5) == 32^0x5, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x5) == 32^0x5");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x6000) == 32^0x6000, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x6000) == 32^0x6000");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x61) == 32^0x61, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x61) == 32^0x61");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x70) == 32^0x70, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x70) == 32^0x70");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x7f) == 32^0x7f, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x7f) == 32^0x7f");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x80) == 32^0x80, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x80) == 32^0x80");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x9) == 32^0x9, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x9) == 32^0x9");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0x950) == 32^0x950, "set_slice_bits(32, 16, 32^0x0, 0, 16^0x950) == 32^0x950");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0xa) == 32^0xa, "set_slice_bits(32, 16, 32^0x0, 0, 16^0xa) == 32^0xa");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0xc) == 32^0xc, "set_slice_bits(32, 16, 32^0x0, 0, 16^0xc) == 32^0xc");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0xc000) == 32^0xc000, "set_slice_bits(32, 16, 32^0x0, 0, 16^0xc000) == 32^0xc000");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0xe) == 32^0xe, "set_slice_bits(32, 16, 32^0x0, 0, 16^0xe) == 32^0xe");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0xe0) == 32^0xe0, "set_slice_bits(32, 16, 32^0x0, 0, 16^0xe0) == 32^0xe0");
  assert(set_slice_bits(32, 16, 32^0x0, 0, 16^0xff) == 32^0xff, "set_slice_bits(32, 16, 32^0x0, 0, 16^0xff) == 32^0xff");
  assert(set_slice_bits(32, 16, 32^0x0, 16, 16^0x0) == 32^0x0, "set_slice_bits(32, 16, 32^0x0, 16, 16^0x0) == 32^0x0");
  assert(set_slice_bits(32, 16, 32^0x0, 16, 16^0x8000) == 32^0x80000000, "set_slice_bits(32, 16, 32^0x0, 16, 16^0x8000) == 32^0x80000000");
  assert(set_slice_bits(32, 16, 32^0x0, 16, 16^0xe000) == 32^0xe0000000, "set_slice_bits(32, 16, 32^0x0, 16, 16^0xe000) == 32^0xe0000000");
  assert(set_slice_bits(32, 16, 32^0x0, 16, 16^0xff00) == 32^0xff000000, "set_slice_bits(32, 16, 32^0x0, 16, 16^0xff00) == 32^0xff000000");
  assert(set_slice_bits(32, 16, 32^0x18, 16, 16^0x5) == 32^0x50018, "set_slice_bits(32, 16, 32^0x18, 16, 16^0x5) == 32^0x50018");
  assert(set_slice_bits(32, 16, undefined, 0, 16^0x0) == 32^0x0, "set_slice_bits(32, 16, undefined, 0, 16^0x0) == 32^0x0");
  assert(set_slice_bits(32, 17, 32^0x0, 8, 17^0x0) == 32^0x0, "set_slice_bits(32, 17, 32^0x0, 8, 17^0x0) == 32^0x0");
  assert(set_slice_bits(32, 2, 32^0x0, 0, 2^0x0) == 32^0x0, "set_slice_bits(32, 2, 32^0x0, 0, 2^0x0) == 32^0x0");
  assert(set_slice_bits(32, 2, 32^0x0, 10, 2^0x0) == 32^0x0, "set_slice_bits(32, 2, 32^0x0, 10, 2^0x0) == 32^0x0");
  assert(set_slice_bits(32, 2, 32^0x0, 12, 2^0x0) == 32^0x0, "set_slice_bits(32, 2, 32^0x0, 12, 2^0x0) == 32^0x0");
  assert(set_slice_bits(32, 28, 32^0x0, 4, 28^0x0) == 32^0x0, "set_slice_bits(32, 28, 32^0x0, 4, 28^0x0) == 32^0x0");
  assert(set_slice_bits(32, 28, 32^0x2, 4, 28^0x0) == 32^0x2, "set_slice_bits(32, 28, 32^0x2, 4, 28^0x0) == 32^0x2");
  assert(set_slice_bits(32, 28, undefined, 4, 28^0x0) == 32^0x0, "set_slice_bits(32, 28, undefined, 4, 28^0x0) == 32^0x0");
  assert(set_slice_bits(32, 29, 32^0x0, 0, 29^0x0) == 32^0x0, "set_slice_bits(32, 29, 32^0x0, 0, 29^0x0) == 32^0x0");
  assert(set_slice_bits(32, 29, 32^0x0, 3, 29^0x0) == 32^0x0, "set_slice_bits(32, 29, 32^0x0, 3, 29^0x0) == 32^0x0");
  assert(set_slice_bits(32, 29, 32^0x2, 3, 29^0x0) == 32^0x2, "set_slice_bits(32, 29, 32^0x2, 3, 29^0x0) == 32^0x2");
  assert(set_slice_bits(32, 29, undefined, 0, 29^0x0) == 32^0x0, "set_slice_bits(32, 29, undefined, 0, 29^0x0) == 32^0x0");
  assert(set_slice_bits(32, 29, undefined, 3, 29^0x0) == 32^0x0, "set_slice_bits(32, 29, undefined, 3, 29^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 0, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, 32^0x0, 0, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 12, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, 32^0x0, 12, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 13, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, 32^0x0, 13, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 16, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, 32^0x0, 16, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 3, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, 32^0x0, 3, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 6, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, 32^0x0, 6, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, 32^0x0, 8, 3^0x7) == 32^0x700, "set_slice_bits(32, 3, 32^0x0, 8, 3^0x7) == 32^0x700");
  assert(set_slice_bits(32, 3, 32^0x4000700, 8, 3^0x7) == 32^0x4000700, "set_slice_bits(32, 3, 32^0x4000700, 8, 3^0x7) == 32^0x4000700");
  assert(set_slice_bits(32, 3, 32^0x444c004, 28, 3^0x0) == 32^0x444c004, "set_slice_bits(32, 3, 32^0x444c004, 28, 3^0x0) == 32^0x444c004");
  assert(set_slice_bits(32, 3, 32^0x8444c004, 28, 3^0x0) == 32^0x8444c004, "set_slice_bits(32, 3, 32^0x8444c004, 28, 3^0x0) == 32^0x8444c004");
  assert(set_slice_bits(32, 3, undefined, 0, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, undefined, 0, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, undefined, 3, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, undefined, 3, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 3, undefined, 6, 3^0x0) == 32^0x0, "set_slice_bits(32, 3, undefined, 6, 3^0x0) == 32^0x0");
  assert(set_slice_bits(32, 30, 32^0x0, 2, 30^0x0) == 32^0x0, "set_slice_bits(32, 30, 32^0x0, 2, 30^0x0) == 32^0x0");
  assert(set_slice_bits(32, 30, 32^0x1, 2, 30^0x0) == 32^0x1, "set_slice_bits(32, 30, 32^0x1, 2, 30^0x0) == 32^0x1");
  assert(set_slice_bits(32, 31, 32^0x0, 0, 31^0x0) == 32^0x0, "set_slice_bits(32, 31, 32^0x0, 0, 31^0x0) == 32^0x0");
  assert(set_slice_bits(32, 31, 32^0x0, 1, 31^0x0) == 32^0x0, "set_slice_bits(32, 31, 32^0x0, 1, 31^0x0) == 32^0x0");
  assert(set_slice_bits(32, 31, undefined, 0, 31^0x0) == 32^0x0, "set_slice_bits(32, 31, undefined, 0, 31^0x0) == 32^0x0");
  assert(set_slice_bits(32, 31, undefined, 1, 31^0x0) == 32^0x0, "set_slice_bits(32, 31, undefined, 1, 31^0x0) == 32^0x0");
  assert(set_slice_bits(32, 32, 32^0x0, 0, 32^0x0) == 32^0x0, "set_slice_bits(32, 32, 32^0x0, 0, 32^0x0) == 32^0x0");
  assert(set_slice_bits(32, 32, 32^0x0, 0, 32^0x1) == 32^0x1, "set_slice_bits(32, 32, 32^0x0, 0, 32^0x1) == 32^0x1");
  assert(set_slice_bits(32, 32, 32^0x0, 0, 32^0x3f000000) == 32^0x3f000000, "set_slice_bits(32, 32, 32^0x0, 0, 32^0x3f000000) == 32^0x3f000000");
  assert(set_slice_bits(32, 32, 32^0x0, 0, 32^0x3f070000) == 32^0x3f070000, "set_slice_bits(32, 32, 32^0x0, 0, 32^0x3f070000) == 32^0x3f070000");
  assert(set_slice_bits(32, 32, 32^0x0, 0, 32^0x40000000) == 32^0x40000000, "set_slice_bits(32, 32, 32^0x0, 0, 32^0x40000000) == 32^0x40000000");
  assert(set_slice_bits(32, 32, 32^0x0, 0, 32^0x50000000) == 32^0x50000000, "set_slice_bits(32, 32, 32^0x0, 0, 32^0x50000000) == 32^0x50000000");
  assert(set_slice_bits(32, 32, 32^0x1, 0, 32^0x1) == 32^0x1, "set_slice_bits(32, 32, 32^0x1, 0, 32^0x1) == 32^0x1");
  assert(set_slice_bits(32, 32, 32^0x1121110, 0, 32^0x1121110) == 32^0x1121110, "set_slice_bits(32, 32, 32^0x1121110, 0, 32^0x1121110) == 32^0x1121110");
  assert(set_slice_bits(32, 32, 32^0x121110, 0, 32^0x1121110) == 32^0x1121110, "set_slice_bits(32, 32, 32^0x121110, 0, 32^0x1121110) == 32^0x1121110");
  assert(set_slice_bits(32, 32, 32^0x12111111, 0, 32^0x13111111) == 32^0x13111111, "set_slice_bits(32, 32, 32^0x12111111, 0, 32^0x13111111) == 32^0x13111111");
  assert(set_slice_bits(32, 32, 32^0x13111111, 0, 32^0x13211111) == 32^0x13211111, "set_slice_bits(32, 32, 32^0x13111111, 0, 32^0x13211111) == 32^0x13211111");
  assert(set_slice_bits(32, 32, 32^0x13211111, 0, 32^0x13211111) == 32^0x13211111, "set_slice_bits(32, 32, 32^0x13211111, 0, 32^0x13211111) == 32^0x13211111");
  assert(set_slice_bits(32, 32, undefined, 0, 32^0x0) == 32^0x0, "set_slice_bits(32, 32, undefined, 0, 32^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 0, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 0, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 0, 4^0x1) == 32^0x1, "set_slice_bits(32, 4, 32^0x0, 0, 4^0x1) == 32^0x1");
  assert(set_slice_bits(32, 4, 32^0x0, 12, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 12, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 12, 4^0x1) == 32^0x1000, "set_slice_bits(32, 4, 32^0x0, 12, 4^0x1) == 32^0x1000");
  assert(set_slice_bits(32, 4, 32^0x0, 15, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 15, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 16, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 16, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 16, 4^0x6) == 32^0x60000, "set_slice_bits(32, 4, 32^0x0, 16, 4^0x6) == 32^0x60000");
  assert(set_slice_bits(32, 4, 32^0x0, 2, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 2, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 20, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 20, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 24, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 24, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 28, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 28, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 28, 4^0x4) == 32^0x40000000, "set_slice_bits(32, 4, 32^0x0, 28, 4^0x4) == 32^0x40000000");
  assert(set_slice_bits(32, 4, 32^0x0, 28, 4^0x6) == 32^0x60000000, "set_slice_bits(32, 4, 32^0x0, 28, 4^0x6) == 32^0x60000000");
  assert(set_slice_bits(32, 4, 32^0x0, 4, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 4, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 4, 4^0x1) == 32^0x10, "set_slice_bits(32, 4, 32^0x0, 4, 4^0x1) == 32^0x10");
  assert(set_slice_bits(32, 4, 32^0x0, 7, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 7, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x0, 8, 4^0x0) == 32^0x0, "set_slice_bits(32, 4, 32^0x0, 8, 4^0x0) == 32^0x0");
  assert(set_slice_bits(32, 4, 32^0x1, 0, 4^0x1) == 32^0x1, "set_slice_bits(32, 4, 32^0x1, 0, 4^0x1) == 32^0x1");
  assert(set_slice_bits(32, 4, 32^0x1, 4, 4^0x1) == 32^0x11, "set_slice_bits(32, 4, 32^0x1, 4, 4^0x1) == 32^0x11");
  assert(set_slice_bits(32, 4, 32^0x1, 4, 4^0x2) == 32^0x21, "set_slice_bits(32, 4, 32^0x1, 4, 4^0x2) == 32^0x21");
  assert(set_slice_bits(32, 4, 32^0x1, 4, 4^0x3) == 32^0x31, "set_slice_bits(32, 4, 32^0x1, 4, 4^0x3) == 32^0x31");
  assert(set_slice_bits(32, 4, 32^0x10, 0, 4^0x0) == 32^0x10, "set_slice_bits(32, 4, 32^0x10, 0, 4^0x0) == 32^0x10");
  assert(set_slice_bits(32, 4, 32^0x10, 16, 4^0x0) == 32^0x10, "set_slice_bits(32, 4, 32^0x10, 16, 4^0x0) == 32^0x10");
  assert(set_slice_bits(32, 4, 32^0x10, 8, 4^0x1) == 32^0x110, "set_slice_bits(32, 4, 32^0x10, 8, 4^0x1) == 32^0x110");
  assert(set_slice_bits(32, 4, 32^0x1000, 8, 4^0x1) == 32^0x1100, "set_slice_bits(32, 4, 32^0x1000, 8, 4^0x1) == 32^0x1100");
  assert(set_slice_bits(32, 4, 32^0x10066, 20, 4^0x0) == 32^0x10066, "set_slice_bits(32, 4, 32^0x10066, 20, 4^0x0) == 32^0x10066");
  assert(set_slice_bits(32, 4, 32^0x10066, 24, 4^0x3) == 32^0x3010066, "set_slice_bits(32, 4, 32^0x10066, 24, 4^0x3) == 32^0x3010066");
  assert(set_slice_bits(32, 4, 32^0x10101105, 0, 4^0x5) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 0, 4^0x5) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 12, 4^0x1) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 12, 4^0x1) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 16, 4^0x0) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 16, 4^0x0) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 20, 4^0x1) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 20, 4^0x1) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 24, 4^0x0) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 24, 4^0x0) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 28, 4^0x1) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 28, 4^0x1) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 4, 4^0x0) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 4, 4^0x0) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x10101105, 8, 4^0x1) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x10101105, 8, 4^0x1) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x1011, 16, 4^0x1) == 32^0x11011, "set_slice_bits(32, 4, 32^0x1011, 16, 4^0x1) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x101105, 24, 4^0x0) == 32^0x101105, "set_slice_bits(32, 4, 32^0x101105, 24, 4^0x0) == 32^0x101105");
  assert(set_slice_bits(32, 4, 32^0x101105, 28, 4^0x1) == 32^0x10101105, "set_slice_bits(32, 4, 32^0x101105, 28, 4^0x1) == 32^0x10101105");
  assert(set_slice_bits(32, 4, 32^0x101110, 24, 4^0x2) == 32^0x2101110, "set_slice_bits(32, 4, 32^0x101110, 24, 4^0x2) == 32^0x2101110");
  assert(set_slice_bits(32, 4, 32^0x1011121, 16, 4^0x1) == 32^0x1011121, "set_slice_bits(32, 4, 32^0x1011121, 16, 4^0x1) == 32^0x1011121");
  assert(set_slice_bits(32, 4, 32^0x1011121, 24, 4^0x1) == 32^0x1011121, "set_slice_bits(32, 4, 32^0x1011121, 24, 4^0x1) == 32^0x1011121");
  assert(set_slice_bits(32, 4, 32^0x10111222, 0, 4^0x2) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 0, 4^0x2) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 12, 4^0x1) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 12, 4^0x1) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 16, 4^0x1) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 16, 4^0x1) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 20, 4^0x1) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 20, 4^0x1) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 24, 4^0x0) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 24, 4^0x0) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 28, 4^0x1) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 28, 4^0x1) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 4, 4^0x2) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 4, 4^0x2) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x10111222, 8, 4^0x2) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x10111222, 8, 4^0x2) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x102211, 24, 4^0x2) == 32^0x2102211, "set_slice_bits(32, 4, 32^0x102211, 24, 4^0x2) == 32^0x2102211");
  assert(set_slice_bits(32, 4, 32^0x105, 12, 4^0x1) == 32^0x1105, "set_slice_bits(32, 4, 32^0x105, 12, 4^0x1) == 32^0x1105");
  assert(set_slice_bits(32, 4, 32^0x11, 12, 4^0x1) == 32^0x1011, "set_slice_bits(32, 4, 32^0x11, 12, 4^0x1) == 32^0x1011");
  assert(set_slice_bits(32, 4, 32^0x11, 8, 4^0x0) == 32^0x11, "set_slice_bits(32, 4, 32^0x11, 8, 4^0x0) == 32^0x11");
  assert(set_slice_bits(32, 4, 32^0x11, 8, 4^0x1) == 32^0x111, "set_slice_bits(32, 4, 32^0x11, 8, 4^0x1) == 32^0x111");
  assert(set_slice_bits(32, 4, 32^0x11, 8, 4^0x2) == 32^0x211, "set_slice_bits(32, 4, 32^0x11, 8, 4^0x2) == 32^0x211");
  assert(set_slice_bits(32, 4, 32^0x110, 12, 4^0x1) == 32^0x1110, "set_slice_bits(32, 4, 32^0x110, 12, 4^0x1) == 32^0x1110");
  assert(set_slice_bits(32, 4, 32^0x1100, 16, 4^0x2) == 32^0x21100, "set_slice_bits(32, 4, 32^0x1100, 16, 4^0x2) == 32^0x21100");
  assert(set_slice_bits(32, 4, 32^0x11011, 0, 4^0x1) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 0, 4^0x1) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 12, 4^0x1) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 12, 4^0x1) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 16, 4^0x1) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 16, 4^0x1) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 20, 4^0x0) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 20, 4^0x0) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 24, 4^0x0) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 24, 4^0x0) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 28, 4^0x0) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 28, 4^0x0) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 4, 4^0x1) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 4, 4^0x1) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x11011, 8, 4^0x0) == 32^0x11011, "set_slice_bits(32, 4, 32^0x11011, 8, 4^0x0) == 32^0x11011");
  assert(set_slice_bits(32, 4, 32^0x1105, 16, 4^0x0) == 32^0x1105, "set_slice_bits(32, 4, 32^0x1105, 16, 4^0x0) == 32^0x1105");
  assert(set_slice_bits(32, 4, 32^0x1105, 20, 4^0x1) == 32^0x101105, "set_slice_bits(32, 4, 32^0x1105, 20, 4^0x1) == 32^0x101105");
  assert(set_slice_bits(32, 4, 32^0x111, 12, 4^0x1) == 32^0x1111, "set_slice_bits(32, 4, 32^0x111, 12, 4^0x1) == 32^0x1111");
  assert(set_slice_bits(32, 4, 32^0x111, 12, 4^0x2) == 32^0x2111, "set_slice_bits(32, 4, 32^0x111, 12, 4^0x2) == 32^0x2111");
  assert(set_slice_bits(32, 4, 32^0x1110, 16, 4^0x0) == 32^0x1110, "set_slice_bits(32, 4, 32^0x1110, 16, 4^0x0) == 32^0x1110");
  assert(set_slice_bits(32, 4, 32^0x1110, 20, 4^0x1) == 32^0x101110, "set_slice_bits(32, 4, 32^0x1110, 20, 4^0x1) == 32^0x101110");
  assert(set_slice_bits(32, 4, 32^0x1111, 16, 4^0x1) == 32^0x11111, "set_slice_bits(32, 4, 32^0x1111, 16, 4^0x1) == 32^0x11111");
  assert(set_slice_bits(32, 4, 32^0x11111, 20, 4^0x1) == 32^0x111111, "set_slice_bits(32, 4, 32^0x11111, 20, 4^0x1) == 32^0x111111");
  assert(set_slice_bits(32, 4, 32^0x111111, 24, 4^0x2) == 32^0x2111111, "set_slice_bits(32, 4, 32^0x111111, 24, 4^0x2) == 32^0x2111111");
  assert(set_slice_bits(32, 4, 32^0x11121, 24, 4^0x1) == 32^0x1011121, "set_slice_bits(32, 4, 32^0x11121, 24, 4^0x1) == 32^0x1011121");
  assert(set_slice_bits(32, 4, 32^0x1112131, 0, 4^0x1) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 0, 4^0x1) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 12, 4^0x2) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 12, 4^0x2) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 16, 4^0x1) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 16, 4^0x1) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 20, 4^0x1) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 20, 4^0x1) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 24, 4^0x1) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 24, 4^0x1) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 28, 4^0x0) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 28, 4^0x0) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 4, 4^0x3) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 4, 4^0x3) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x1112131, 8, 4^0x1) == 32^0x1112131, "set_slice_bits(32, 4, 32^0x1112131, 8, 4^0x1) == 32^0x1112131");
  assert(set_slice_bits(32, 4, 32^0x111222, 24, 4^0x0) == 32^0x111222, "set_slice_bits(32, 4, 32^0x111222, 24, 4^0x0) == 32^0x111222");
  assert(set_slice_bits(32, 4, 32^0x111222, 28, 4^0x1) == 32^0x10111222, "set_slice_bits(32, 4, 32^0x111222, 28, 4^0x1) == 32^0x10111222");
  assert(set_slice_bits(32, 4, 32^0x11142, 0, 4^0x2) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 0, 4^0x2) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 12, 4^0x1) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 12, 4^0x1) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 16, 4^0x1) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 16, 4^0x1) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 20, 4^0x0) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 20, 4^0x0) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 24, 4^0x0) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 24, 4^0x0) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 28, 4^0x0) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 28, 4^0x0) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 4, 4^0x4) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 4, 4^0x4) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11142, 8, 4^0x1) == 32^0x11142, "set_slice_bits(32, 4, 32^0x11142, 8, 4^0x1) == 32^0x11142");
  assert(set_slice_bits(32, 4, 32^0x11169000, 16, 4^0x6) == 32^0x11169000, "set_slice_bits(32, 4, 32^0x11169000, 16, 4^0x6) == 32^0x11169000");
  assert(set_slice_bits(32, 4, 32^0x11169000, 20, 4^0x1) == 32^0x11169000, "set_slice_bits(32, 4, 32^0x11169000, 20, 4^0x1) == 32^0x11169000");
  assert(set_slice_bits(32, 4, 32^0x11169000, 24, 4^0x1) == 32^0x11169000, "set_slice_bits(32, 4, 32^0x11169000, 24, 4^0x1) == 32^0x11169000");
  assert(set_slice_bits(32, 4, 32^0x11169000, 28, 4^0x1) == 32^0x11169000, "set_slice_bits(32, 4, 32^0x11169000, 28, 4^0x1) == 32^0x11169000");
  assert(set_slice_bits(32, 4, 32^0x1121, 0, 4^0x1) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 0, 4^0x1) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 12, 4^0x1) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 12, 4^0x1) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 16, 4^0x0) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 16, 4^0x0) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 16, 4^0x1) == 32^0x11121, "set_slice_bits(32, 4, 32^0x1121, 16, 4^0x1) == 32^0x11121");
  assert(set_slice_bits(32, 4, 32^0x1121, 20, 4^0x0) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 20, 4^0x0) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 24, 4^0x0) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 24, 4^0x0) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 28, 4^0x0) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 28, 4^0x0) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 4, 4^0x2) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 4, 4^0x2) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x1121, 8, 4^0x1) == 32^0x1121, "set_slice_bits(32, 4, 32^0x1121, 8, 4^0x1) == 32^0x1121");
  assert(set_slice_bits(32, 4, 32^0x112111, 24, 4^0x3) == 32^0x3112111, "set_slice_bits(32, 4, 32^0x112111, 24, 4^0x3) == 32^0x3112111");
  assert(set_slice_bits(32, 9, undefined, 0, 9^0x0) == 32^0x0, "set_slice_bits(32, 9, undefined, 0, 9^0x0) == 32^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 0, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 0, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 1, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 1, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 11, 1^0x1) == 64^0x800, "set_slice_bits(64, 1, 64^0x0, 11, 1^0x1) == 64^0x800");
  assert(set_slice_bits(64, 1, 64^0x0, 12, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 12, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 13, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 13, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 14, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 14, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 15, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 15, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 16, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 16, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 17, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 17, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 18, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 18, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 19, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 19, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 2, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 2, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 20, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 20, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 21, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 21, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 22, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 22, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 23, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 23, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 23, 1^0x1) == 64^0x800000, "set_slice_bits(64, 1, 64^0x0, 23, 1^0x1) == 64^0x800000");
  assert(set_slice_bits(64, 1, 64^0x0, 24, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 24, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 25, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 25, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 26, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 26, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 27, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 27, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 28, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 28, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 29, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 29, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 3, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 3, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 30, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 30, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 31, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 31, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 31, 1^0x1) == 64^0x80000000, "set_slice_bits(64, 1, 64^0x0, 31, 1^0x1) == 64^0x80000000");
  assert(set_slice_bits(64, 1, 64^0x0, 32, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 32, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 33, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 33, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 36, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 36, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 37, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 37, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 38, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 38, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 4, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 4, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 41, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 41, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 42, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 42, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 43, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 43, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 44, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 44, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 45, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 45, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 46, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 46, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 47, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 47, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 48, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 48, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 49, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 49, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 5, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 5, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 50, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 50, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 1, 64^0x0, 52, 1^0x0) == 64^0x0, "set_slice_bits(64, 1, 64^0x0, 52, 1^0x0) == 64^0x0");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x1d) == 64^0x1d, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x1d) == 64^0x1d");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x1e) == 64^0x1e, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x1e) == 64^0x1e");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x1f) == 64^0x1f, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x1f) == 64^0x1f");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x2) == 64^0x2, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x2) == 64^0x2");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x20) == 64^0x20, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x20) == 64^0x20");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x200) == 64^0x200, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x200) == 64^0x200");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x2100) == 64^0x2100, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x2100) == 64^0x2100");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x2200) == 64^0x2200, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x2200) == 64^0x2200");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x2300) == 64^0x2300, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x2300) == 64^0x2300");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x24) == 64^0x24, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x24) == 64^0x24");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x270) == 64^0x270, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x270) == 64^0x270");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x288) == 64^0x288, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x288) == 64^0x288");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x2f) == 64^0x2f, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x2f) == 64^0x2f");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0x3) == 64^0x3, "set_slice_bits(64, 16, 64^0x0, 0, 16^0x3) == 64^0x3");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xd) == 64^0xd, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xd) == 64^0xd");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xe) == 64^0xe, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xe) == 64^0xe");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xe0) == 64^0xe0, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xe0) == 64^0xe0");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xee) == 64^0xee, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xee) == 64^0xee");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xf) == 64^0xf, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xf) == 64^0xf");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xff) == 64^0xff, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xff) == 64^0xff");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xfff) == 64^0xfff, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xfff) == 64^0xfff");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xfffa) == 64^0xfffa, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xfffa) == 64^0xfffa");
  assert(set_slice_bits(64, 16, 64^0x0, 0, 16^0xffff) == 64^0xffff, "set_slice_bits(64, 16, 64^0x0, 0, 16^0xffff) == 64^0xffff");
  assert(set_slice_bits(64, 16, 64^0x0, 16, 16^0x0) == 64^0x0, "set_slice_bits(64, 16, 64^0x0, 16, 16^0x0) == 64^0x0");
  assert(set_slice_bits(64, 16, 64^0x0, 16, 16^0x10) == 64^0x100000, "set_slice_bits(64, 16, 64^0x0, 16, 16^0x10) == 64^0x100000");
  assert(set_slice_bits(64, 16, 64^0x0, 16, 16^0x2e0) == 64^0x2e00000, "set_slice_bits(64, 16, 64^0x0, 16, 16^0x2e0) == 64^0x2e00000");
  assert(set_slice_bits(64, 16, 64^0x0, 16, 16^0x800) == 64^0x8000000, "set_slice_bits(64, 16, 64^0x0, 16, 16^0x800) == 64^0x8000000");
  assert(set_slice_bits(64, 16, 64^0x0, 32, 16^0x0) == 64^0x0, "set_slice_bits(64, 16, 64^0x0, 32, 16^0x0) == 64^0x0");
  assert(set_slice_bits(64, 16, 64^0x0, 40, 16^0x0) == 64^0x0, "set_slice_bits(64, 16, 64^0x0, 40, 16^0x0) == 64^0x0");
  assert(set_slice_bits(64, 16, 64^0x0, 48, 16^0x0) == 64^0x0, "set_slice_bits(64, 16, 64^0x0, 48, 16^0x0) == 64^0x0");
  assert(set_slice_bits(64, 16, 64^0x10, 16, 16^0x0) == 64^0x10, "set_slice_bits(64, 16, 64^0x10, 16, 16^0x0) == 64^0x10");
  assert(set_slice_bits(64, 16, 64^0x10, 32, 16^0x0) == 64^0x10, "set_slice_bits(64, 16, 64^0x10, 32, 16^0x0) == 64^0x10");
  assert(set_slice_bits(64, 16, 64^0x10, 48, 16^0x0) == 64^0x10, "set_slice_bits(64, 16, 64^0x10, 48, 16^0x0) == 64^0x10");
  assert(set_slice_bits(64, 2, 64^0x0, 34, 2^0x0) == 64^0x0, "set_slice_bits(64, 2, 64^0x0, 34, 2^0x0) == 64^0x0");
  assert(set_slice_bits(64, 2, 64^0x0, 8, 2^0x0) == 64^0x0, "set_slice_bits(64, 2, 64^0x0, 8, 2^0x0) == 64^0x0");
  assert(set_slice_bits(64, 20, 64^0x0, 44, 20^0x0) == 64^0x0, "set_slice_bits(64, 20, 64^0x0, 44, 20^0x0) == 64^0x0");
  assert(set_slice_bits(64, 21, 64^0xa200023, 0, 21^0x23) == 64^0xa200023, "set_slice_bits(64, 21, 64^0xa200023, 0, 21^0x23) == 64^0xa200023");
  assert(set_slice_bits(64, 21, undefined, 0, 21^0x23) == 64^0x23, "set_slice_bits(64, 21, undefined, 0, 21^0x23) == 64^0x23");
  assert(set_slice_bits(64, 24, 64^0x0, 32, 24^0x0) == 64^0x0, "set_slice_bits(64, 24, 64^0x0, 32, 24^0x0) == 64^0x0");
  assert(set_slice_bits(64, 24, 64^0x80000000, 40, 24^0x0) == 64^0x80000000, "set_slice_bits(64, 24, 64^0x80000000, 40, 24^0x0) == 64^0x80000000");
  assert(set_slice_bits(64, 25, 64^0x0, 39, 25^0x0) == 64^0x0, "set_slice_bits(64, 25, 64^0x0, 39, 25^0x0) == 64^0x0");
  assert(set_slice_bits(64, 25, 64^0x0, 6, 25^0x0) == 64^0x0, "set_slice_bits(64, 25, 64^0x0, 6, 25^0x0) == 64^0x0");
  assert(set_slice_bits(64, 26, 64^0x0, 38, 26^0x0) == 64^0x0, "set_slice_bits(64, 26, 64^0x0, 38, 26^0x0) == 64^0x0");
  assert(set_slice_bits(64, 28, 64^0x0, 36, 28^0x0) == 64^0x0, "set_slice_bits(64, 28, 64^0x0, 36, 28^0x0) == 64^0x0");
  assert(set_slice_bits(64, 28, 64^0x10101106, 36, 28^0x0) == 64^0x10101106, "set_slice_bits(64, 28, 64^0x10101106, 36, 28^0x0) == 64^0x10101106");
  assert(set_slice_bits(64, 28, 64^0x2222, 36, 28^0x0) == 64^0x2222, "set_slice_bits(64, 28, 64^0x2222, 36, 28^0x0) == 64^0x2222");
  assert(set_slice_bits(64, 3, 64^0x0, 3, 3^0x0) == 64^0x0, "set_slice_bits(64, 3, 64^0x0, 3, 3^0x0) == 64^0x0");
  assert(set_slice_bits(64, 3, 64^0x0, 53, 3^0x0) == 64^0x0, "set_slice_bits(64, 3, 64^0x0, 53, 3^0x0) == 64^0x0");
  assert(set_slice_bits(64, 3, 64^0x0, 56, 3^0x0) == 64^0x0, "set_slice_bits(64, 3, 64^0x0, 56, 3^0x0) == 64^0x0");
  assert(set_slice_bits(64, 3, 64^0x0, 59, 3^0x0) == 64^0x0, "set_slice_bits(64, 3, 64^0x0, 59, 3^0x0) == 64^0x0");
  assert(set_slice_bits(64, 3, 64^0x200023, 24, 3^0x2) == 64^0x2200023, "set_slice_bits(64, 3, 64^0x200023, 24, 3^0x2) == 64^0x2200023");
  assert(set_slice_bits(64, 3, 64^0x2200023, 27, 3^0x1) == 64^0xa200023, "set_slice_bits(64, 3, 64^0x2200023, 27, 3^0x1) == 64^0xa200023");
  assert(set_slice_bits(64, 3, 64^0x23, 21, 3^0x1) == 64^0x200023, "set_slice_bits(64, 3, 64^0x23, 21, 3^0x1) == 64^0x200023");
  assert(set_slice_bits(64, 3, 64^0xa200023, 21, 3^0x1) == 64^0xa200023, "set_slice_bits(64, 3, 64^0xa200023, 21, 3^0x1) == 64^0xa200023");
  assert(set_slice_bits(64, 3, 64^0xa200023, 24, 3^0x2) == 64^0xa200023, "set_slice_bits(64, 3, 64^0xa200023, 24, 3^0x2) == 64^0xa200023");
  assert(set_slice_bits(64, 3, 64^0xa200023, 27, 3^0x1) == 64^0xa200023, "set_slice_bits(64, 3, 64^0xa200023, 27, 3^0x1) == 64^0xa200023");
  assert(set_slice_bits(64, 3, 64^0xa200023, 30, 3^0x0) == 64^0xa200023, "set_slice_bits(64, 3, 64^0xa200023, 30, 3^0x0) == 64^0xa200023");
  assert(set_slice_bits(64, 3, undefined, 3, 3^0x0) == 64^0x0, "set_slice_bits(64, 3, undefined, 3, 3^0x0) == 64^0x0");
  assert(set_slice_bits(64, 31, 64^0xa200023, 33, 31^0x0) == 64^0xa200023, "set_slice_bits(64, 31, 64^0xa200023, 33, 31^0x0) == 64^0xa200023");
  assert(set_slice_bits(64, 32, 64^0x0, 0, 32^0x0) == 64^0x0, "set_slice_bits(64, 32, 64^0x0, 0, 32^0x0) == 64^0x0");
  assert(set_slice_bits(64, 32, 64^0x0, 32, 32^0x0) == 64^0x0, "set_slice_bits(64, 32, 64^0x0, 32, 32^0x0) == 64^0x0");
  assert(set_slice_bits(64, 32, 64^0x1125, 32, 32^0x0) == 64^0x1125, "set_slice_bits(64, 32, 64^0x1125, 32, 32^0x0) == 64^0x1125");
  assert(set_slice_bits(64, 32, 64^0x80800000, 32, 32^0x0) == 64^0x80800000, "set_slice_bits(64, 32, 64^0x80800000, 32, 32^0x0) == 64^0x80800000");
  assert(set_slice_bits(64, 32, undefined, 0, 32^0x0) == 64^0x0, "set_slice_bits(64, 32, undefined, 0, 32^0x0) == 64^0x0");
  assert(set_slice_bits(64, 36, 64^0x0, 12, 36^0x0) == 64^0x0, "set_slice_bits(64, 36, 64^0x0, 12, 36^0x0) == 64^0x0");
  assert(set_slice_bits(64, 36, 64^0x0, 28, 36^0x0) == 64^0x0, "set_slice_bits(64, 36, 64^0x0, 28, 36^0x0) == 64^0x0");
  assert(set_slice_bits(64, 36, 64^0x800, 12, 36^0x0) == 64^0x800, "set_slice_bits(64, 36, 64^0x800, 12, 36^0x0) == 64^0x800");
  assert(set_slice_bits(64, 4, 64^0x0, 0, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 0, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 0, 4^0x1) == 64^0x1, "set_slice_bits(64, 4, 64^0x0, 0, 4^0x1) == 64^0x1");
  assert(set_slice_bits(64, 4, 64^0x0, 1, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 1, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 12, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 12, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 16, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 16, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 20, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 20, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 20, 4^0x1) == 64^0x100000, "set_slice_bits(64, 4, 64^0x0, 20, 4^0x1) == 64^0x100000");
  assert(set_slice_bits(64, 4, 64^0x0, 24, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 24, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 28, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 28, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 32, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 32, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 4, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 4, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 4, 4^0x2) == 64^0x20, "set_slice_bits(64, 4, 64^0x0, 4, 4^0x2) == 64^0x20");
  assert(set_slice_bits(64, 4, 64^0x0, 40, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 40, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 48, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 48, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 7, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 7, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x0, 8, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, 64^0x0, 8, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, 64^0x1, 4, 4^0x1) == 64^0x11, "set_slice_bits(64, 4, 64^0x1, 4, 4^0x1) == 64^0x11");
  assert(set_slice_bits(64, 4, 64^0x100000, 16, 4^0x1) == 64^0x110000, "set_slice_bits(64, 4, 64^0x100000, 16, 4^0x1) == 64^0x110000");
  assert(set_slice_bits(64, 4, 64^0x1000011, 12, 4^0x1) == 64^0x1001011, "set_slice_bits(64, 4, 64^0x1000011, 12, 4^0x1) == 64^0x1001011");
  assert(set_slice_bits(64, 4, 64^0x1000011, 28, 4^0x0) == 64^0x1000011, "set_slice_bits(64, 4, 64^0x1000011, 28, 4^0x0) == 64^0x1000011");
  assert(set_slice_bits(64, 4, 64^0x1001011, 20, 4^0x1) == 64^0x1101011, "set_slice_bits(64, 4, 64^0x1001011, 20, 4^0x1) == 64^0x1101011");
  assert(set_slice_bits(64, 4, 64^0x10101106, 0, 4^0x6) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 0, 4^0x6) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 12, 4^0x1) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 12, 4^0x1) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 16, 4^0x0) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 16, 4^0x0) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 20, 4^0x1) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 20, 4^0x1) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 24, 4^0x0) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 24, 4^0x0) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 28, 4^0x1) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 28, 4^0x1) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 32, 4^0x0) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 32, 4^0x0) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 4, 4^0x0) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 4, 4^0x0) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10101106, 8, 4^0x1) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x10101106, 8, 4^0x1) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x101106, 24, 4^0x0) == 64^0x101106, "set_slice_bits(64, 4, 64^0x101106, 24, 4^0x0) == 64^0x101106");
  assert(set_slice_bits(64, 4, 64^0x101106, 28, 4^0x1) == 64^0x10101106, "set_slice_bits(64, 4, 64^0x101106, 28, 4^0x1) == 64^0x10101106");
  assert(set_slice_bits(64, 4, 64^0x10111, 12, 4^0x1) == 64^0x11111, "set_slice_bits(64, 4, 64^0x10111, 12, 4^0x1) == 64^0x11111");
  assert(set_slice_bits(64, 4, 64^0x10111122, 0, 4^0x2) == 64^0x10111122, "set_slice_bits(64, 4, 64^0x10111122, 0, 4^0x2) == 64^0x10111122");
  assert(set_slice_bits(64, 4, 64^0x10111122, 12, 4^0x2) == 64^0x10112122, "set_slice_bits(64, 4, 64^0x10111122, 12, 4^0x2) == 64^0x10112122");
  assert(set_slice_bits(64, 4, 64^0x10111122, 28, 4^0x1) == 64^0x10111122, "set_slice_bits(64, 4, 64^0x10111122, 28, 4^0x1) == 64^0x10111122");
  assert(set_slice_bits(64, 4, 64^0x10111122, 4, 4^0x2) == 64^0x10111122, "set_slice_bits(64, 4, 64^0x10111122, 4, 4^0x2) == 64^0x10111122");
  assert(set_slice_bits(64, 4, 64^0x10111122, 8, 4^0x1) == 64^0x10111122, "set_slice_bits(64, 4, 64^0x10111122, 8, 4^0x1) == 64^0x10111122");
  assert(set_slice_bits(64, 4, 64^0x10112122, 12, 4^0x1) == 64^0x10111122, "set_slice_bits(64, 4, 64^0x10112122, 12, 4^0x1) == 64^0x10111122");
  assert(set_slice_bits(64, 4, 64^0x10112122, 16, 4^0x1) == 64^0x10112122, "set_slice_bits(64, 4, 64^0x10112122, 16, 4^0x1) == 64^0x10112122");
  assert(set_slice_bits(64, 4, 64^0x10112122, 20, 4^0x2) == 64^0x10212122, "set_slice_bits(64, 4, 64^0x10112122, 20, 4^0x2) == 64^0x10212122");
  assert(set_slice_bits(64, 4, 64^0x10211120, 16, 4^0x1) == 64^0x10211120, "set_slice_bits(64, 4, 64^0x10211120, 16, 4^0x1) == 64^0x10211120");
  assert(set_slice_bits(64, 4, 64^0x10211120, 20, 4^0x2) == 64^0x10211120, "set_slice_bits(64, 4, 64^0x10211120, 20, 4^0x2) == 64^0x10211120");
  assert(set_slice_bits(64, 4, 64^0x10211120, 28, 4^0x1) == 64^0x10211120, "set_slice_bits(64, 4, 64^0x10211120, 28, 4^0x1) == 64^0x10211120");
  assert(set_slice_bits(64, 4, 64^0x10212122, 20, 4^0x1) == 64^0x10112122, "set_slice_bits(64, 4, 64^0x10212122, 20, 4^0x1) == 64^0x10112122");
  assert(set_slice_bits(64, 4, 64^0x106, 12, 4^0x1) == 64^0x1106, "set_slice_bits(64, 4, 64^0x106, 12, 4^0x1) == 64^0x1106");
  assert(set_slice_bits(64, 4, 64^0x11, 24, 4^0x1) == 64^0x1000011, "set_slice_bits(64, 4, 64^0x11, 24, 4^0x1) == 64^0x1000011");
  assert(set_slice_bits(64, 4, 64^0x11, 8, 4^0x0) == 64^0x11, "set_slice_bits(64, 4, 64^0x11, 8, 4^0x0) == 64^0x11");
  assert(set_slice_bits(64, 4, 64^0x11, 8, 4^0x1) == 64^0x111, "set_slice_bits(64, 4, 64^0x11, 8, 4^0x1) == 64^0x111");
  assert(set_slice_bits(64, 4, 64^0x1125, 24, 4^0x0) == 64^0x1125, "set_slice_bits(64, 4, 64^0x1125, 24, 4^0x0) == 64^0x1125");
  assert(set_slice_bits(64, 4, 64^0x1125, 28, 4^0x0) == 64^0x1125, "set_slice_bits(64, 4, 64^0x1125, 28, 4^0x0) == 64^0x1125");
  assert(set_slice_bits(64, 4, 64^0x1125, 4, 4^0x2) == 64^0x1125, "set_slice_bits(64, 4, 64^0x1125, 4, 4^0x2) == 64^0x1125");
  assert(set_slice_bits(64, 4, 64^0x1125, 8, 4^0x1) == 64^0x1125, "set_slice_bits(64, 4, 64^0x1125, 8, 4^0x1) == 64^0x1125");
  assert(set_slice_bits(64, 4, 64^0x1126, 0, 4^0x6) == 64^0x1126, "set_slice_bits(64, 4, 64^0x1126, 0, 4^0x6) == 64^0x1126");
  assert(set_slice_bits(64, 4, 64^0x120, 12, 4^0x1) == 64^0x1120, "set_slice_bits(64, 4, 64^0x120, 12, 4^0x1) == 64^0x1120");
  assert(set_slice_bits(64, 4, 64^0x12222, 20, 4^0x1) == 64^0x112222, "set_slice_bits(64, 4, 64^0x12222, 20, 4^0x1) == 64^0x112222");
  assert(set_slice_bits(64, 4, 64^0x125, 12, 4^0x1) == 64^0x1125, "set_slice_bits(64, 4, 64^0x125, 12, 4^0x1) == 64^0x1125");
  assert(set_slice_bits(64, 4, 64^0x20, 8, 4^0x1) == 64^0x120, "set_slice_bits(64, 4, 64^0x20, 8, 4^0x1) == 64^0x120");
  assert(set_slice_bits(64, 4, 64^0x2000, 8, 4^0x2) == 64^0x2200, "set_slice_bits(64, 4, 64^0x2000, 8, 4^0x2) == 64^0x2200");
  assert(set_slice_bits(64, 4, 64^0x211120, 28, 4^0x1) == 64^0x10211120, "set_slice_bits(64, 4, 64^0x211120, 28, 4^0x1) == 64^0x10211120");
  assert(set_slice_bits(64, 4, 64^0x2200, 4, 4^0x2) == 64^0x2220, "set_slice_bits(64, 4, 64^0x2200, 4, 4^0x2) == 64^0x2220");
  assert(set_slice_bits(64, 4, 64^0x2220, 0, 4^0x2) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2220, 0, 4^0x2) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 0, 4^0x2) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 0, 4^0x2) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 12, 4^0x2) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 12, 4^0x2) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 16, 4^0x0) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 16, 4^0x0) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 16, 4^0x1) == 64^0x12222, "set_slice_bits(64, 4, 64^0x2222, 16, 4^0x1) == 64^0x12222");
  assert(set_slice_bits(64, 4, 64^0x2222, 20, 4^0x0) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 20, 4^0x0) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 24, 4^0x0) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 24, 4^0x0) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 28, 4^0x0) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 28, 4^0x0) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 32, 4^0x0) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 32, 4^0x0) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 4, 4^0x2) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 4, 4^0x2) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x2222, 8, 4^0x2) == 64^0x2222, "set_slice_bits(64, 4, 64^0x2222, 8, 4^0x2) == 64^0x2222");
  assert(set_slice_bits(64, 4, 64^0x25, 8, 4^0x1) == 64^0x125, "set_slice_bits(64, 4, 64^0x25, 8, 4^0x1) == 64^0x125");
  assert(set_slice_bits(64, 4, 64^0x5, 4, 4^0x2) == 64^0x25, "set_slice_bits(64, 4, 64^0x5, 4, 4^0x2) == 64^0x25");
  assert(set_slice_bits(64, 4, 64^0x6, 4, 4^0x0) == 64^0x6, "set_slice_bits(64, 4, 64^0x6, 4, 4^0x0) == 64^0x6");
  assert(set_slice_bits(64, 4, 64^0x6, 8, 4^0x1) == 64^0x106, "set_slice_bits(64, 4, 64^0x6, 8, 4^0x1) == 64^0x106");
  assert(set_slice_bits(64, 4, 64^0x800, 7, 4^0x0) == 64^0x800, "set_slice_bits(64, 4, 64^0x800, 7, 4^0x0) == 64^0x800");
  assert(set_slice_bits(64, 4, undefined, 0, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, undefined, 0, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 4, undefined, 0, 4^0x5) == 64^0x5, "set_slice_bits(64, 4, undefined, 0, 4^0x5) == 64^0x5");
  assert(set_slice_bits(64, 4, undefined, 0, 4^0x6) == 64^0x6, "set_slice_bits(64, 4, undefined, 0, 4^0x6) == 64^0x6");
  assert(set_slice_bits(64, 4, undefined, 12, 4^0x2) == 64^0x2000, "set_slice_bits(64, 4, undefined, 12, 4^0x2) == 64^0x2000");
  assert(set_slice_bits(64, 4, undefined, 20, 4^0x0) == 64^0x0, "set_slice_bits(64, 4, undefined, 20, 4^0x0) == 64^0x0");
  assert(set_slice_bits(64, 40, 64^0x0, 12, 40^0x0) == 64^0x0, "set_slice_bits(64, 40, 64^0x0, 12, 40^0x0) == 64^0x0");
  assert(set_slice_bits(64, 40, 64^0x0, 24, 40^0x0) == 64^0x0, "set_slice_bits(64, 40, 64^0x0, 24, 40^0x0) == 64^0x0");
  assert(set_slice_bits(64, 44, 64^0x0, 20, 44^0x0) == 64^0x0, "set_slice_bits(64, 44, 64^0x0, 20, 44^0x0) == 64^0x0");
  assert(set_slice_bits(64, 48, 64^0x0, 0, 48^0x0) == 64^0x0, "set_slice_bits(64, 48, 64^0x0, 0, 48^0x0) == 64^0x0");
  assert(set_slice_bits(64, 48, 64^0x0, 16, 48^0x0) == 64^0x0, "set_slice_bits(64, 48, 64^0x0, 16, 48^0x0) == 64^0x0");
  assert(set_slice_bits(64, 48, undefined, 0, 48^0x0) == 64^0x0, "set_slice_bits(64, 48, undefined, 0, 48^0x0) == 64^0x0");
  assert(set_slice_bits(64, 5, 64^0x0, 13, 5^0x0) == 64^0x0, "set_slice_bits(64, 5, 64^0x0, 13, 5^0x0) == 64^0x0");
  assert(set_slice_bits(64, 5, 64^0x0, 25, 5^0x0) == 64^0x0, "set_slice_bits(64, 5, 64^0x0, 25, 5^0x0) == 64^0x0");
  assert(set_slice_bits(64, 8, 64^0x0, 16, 8^0x0) == 64^0x0, "set_slice_bits(64, 8, 64^0x0, 16, 8^0x0) == 64^0x0");
  assert(set_slice_bits(64, 8, 64^0x0, 24, 8^0x0) == 64^0x0, "set_slice_bits(64, 8, 64^0x0, 24, 8^0x0) == 64^0x0");
  assert(set_slice_bits(64, 8, 64^0x0, 56, 8^0x0) == 64^0x0, "set_slice_bits(64, 8, 64^0x0, 56, 8^0x0) == 64^0x0");
  assert(set_slice_bits(64, 8, 64^0x0, 8, 8^0x0) == 64^0x0, "set_slice_bits(64, 8, 64^0x0, 8, 8^0x0) == 64^0x0");
  assert(set_slice_bits(64, 8, 64^0x80000000, 0, 8^0x0) == 64^0x80000000, "set_slice_bits(64, 8, 64^0x80000000, 0, 8^0x0) == 64^0x80000000");
  assert(set_slice_bits(64, 8, 64^0x80000000, 16, 8^0x0) == 64^0x80000000, "set_slice_bits(64, 8, 64^0x80000000, 16, 8^0x0) == 64^0x80000000");
  assert(set_slice_bits(64, 8, 64^0x80000000, 32, 8^0x0) == 64^0x80000000, "set_slice_bits(64, 8, 64^0x80000000, 32, 8^0x0) == 64^0x80000000");
  assert(set_slice_bits(64, 8, 64^0x80000000, 8, 8^0x0) == 64^0x80000000, "set_slice_bits(64, 8, 64^0x80000000, 8, 8^0x0) == 64^0x80000000");
  assert(set_slice_bits(64, 8, undefined, 0, 8^0x0) == 64^0x0, "set_slice_bits(64, 8, undefined, 0, 8^0x0) == 64^0x0");
  assert(set_slice_bits(64, 9, 64^0x0, 14, 9^0x0) == 64^0x0, "set_slice_bits(64, 9, 64^0x0, 14, 9^0x0) == 64^0x0");
  assert(set_slice_bits(64, 9, 64^0x0, 32, 9^0x0) == 64^0x0, "set_slice_bits(64, 9, 64^0x0, 32, 9^0x0) == 64^0x0");
  assert(set_slice_bits(64, 9, 64^0x80800000, 14, 9^0x0) == 64^0x80800000, "set_slice_bits(64, 9, 64^0x80800000, 14, 9^0x0) == 64^0x80800000");
}
